"use strict";(self.webpackChunk_antv_g6_site=self.webpackChunk_antv_g6_site||[]).push([[9706],{1470:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},39517:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},9411:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},29480:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},24809:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},55861:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},64245:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},50942:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},92531:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},11599:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},22625:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},22466:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},69760:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},23819:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},43861:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},75652:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},3823:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},64595:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},44275:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},39876:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},51690:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},34878:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},63663:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},19104:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},76474:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},11017:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},62598:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},41709:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},18778:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},17301:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},28870:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},79273:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},33429:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},95903:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},80220:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},59411:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},21071:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},15525:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},22925:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},49825:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},7285:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},34429:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},12658:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},66606:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},7367:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},99555:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},49810:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},30453:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},30649:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},87042:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},1382:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},32813:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},7940:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},53796:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},75098:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},35005:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},65222:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},65082:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},47200:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},79782:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},42169:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},46826:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},77419:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},62611:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},41307:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},34398:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},6906:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},35492:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},36501:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},22735:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},7288:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},73175:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},71029:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},10210:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},37735:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},91410:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},92705:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},41775:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},98504:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},90422:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},8564:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},1858:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},78495:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},98888:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},65102:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},31531:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},19200:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},41346:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},26129:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},52002:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},13145:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},25423:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},84351:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},27617:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},11860:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},34040:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},22237:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},18775:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},1069:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},61691:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},2343:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},68849:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},93810:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},88244:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},47007:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},87814:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},21408:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},15225:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},91324:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},24578:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},21727:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},60573:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},50678:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},7020:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},61838:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},73910:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},3665:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},81823:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},67988:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},45551:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},48688:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},93994:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},13781:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},83409:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},61809:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},60848:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},39763:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},60584:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},39699:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},92242:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},64748:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},77359:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},60692:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},98373:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},39524:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},8575:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},43443:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},74793:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},81335:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},39154:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},91477:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},97099:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},3323:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},77554:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},93479:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},6134:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},60173:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},41473:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},25025:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},42853:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},26367:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},24817:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},7229:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},51828:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},87543:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},2211:function(e,a,t){t.r(a),t.d(a,{demos:function(){return n}});t(58757);var n={}},26848:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Graph algorithms provide one of the most effective methods for analyzing relational data. They describe how to process graphs to discover some qualitative or quantitative measures. Graph algorithms are based on graph theory and use the relationship between them to structure and change complex systems. We can use these algorithms to discover hidden information, verify business assumptions, and change behavior to make predictions.",paraId:0},{value:"If you are interested in data structures and algorithms, you can learn from ",paraId:1},{value:"javascript-algorithms",paraId:1},{value:".",paraId:1},{value:"G6 has added graph algorithms since V3.5. In future versions, we will continue to enrich the built-in algorithms.",paraId:2},{value:"New Feature in「v4.2.2」",paraId:3,tocIndex:0},{value:"GADDI Graph Pattern Macthing",paraId:4,tocIndex:0},{value:" supports structure and semantic matching. Give a graph data and a pattern data with specific semantic clustering infomation, it returns the same and similar sub structures on the origin graph data. ",paraId:5,tocIndex:0},{value:"DEMO",paraId:6,tocIndex:0},{value:"。",paraId:5,tocIndex:0},{value:"Parameters",paraId:7,tocIndex:0},{value:"Name",paraId:8,tocIndex:0},{value:"Type",paraId:8,tocIndex:0},{value:"Required",paraId:8,tocIndex:0},{value:"Description",paraId:8,tocIndex:0},{value:"graphData",paraId:8,tocIndex:0},{value:"GraphData",paraId:8,tocIndex:0},{value:"true",paraId:8,tocIndex:0},{value:"The origin graph data",paraId:8,tocIndex:0},{value:"pattern",paraId:8,tocIndex:0},{value:"GraphData",paraId:8,tocIndex:0},{value:"true",paraId:8,tocIndex:0},{value:"The pattern graph data to be matched",paraId:8,tocIndex:0},{value:"k",paraId:8,tocIndex:0},{value:"number",paraId:8,tocIndex:0},{value:"false",paraId:8,tocIndex:0},{value:"The parameter for GADDI, it will be calculated automatically when it is ",paraId:8,tocIndex:0},{value:"undefined",paraId:8,tocIndex:0},{value:"length",paraId:8,tocIndex:0},{value:"number",paraId:8,tocIndex:0},{value:"false",paraId:8,tocIndex:0},{value:"The parameter for GADDI, it will be calculated automatically when it is ",paraId:8,tocIndex:0},{value:"undefined",paraId:8,tocIndex:0},{value:"nodeLabelProp",paraId:8,tocIndex:0},{value:"number",paraId:8,tocIndex:0},{value:"false",paraId:8,tocIndex:0},{value:"The name of the cluster property in the nodes data",paraId:8,tocIndex:0},{value:"edgeLabelProp",paraId:8,tocIndex:0},{value:"number",paraId:8,tocIndex:0},{value:"false",paraId:8,tocIndex:0},{value:"The name of the cluster property in the edges data",paraId:8,tocIndex:0},{value:"Usage",paraId:9,tocIndex:0},{value:"import G6, { Algorithm } from '@antv/g6'\nconst graph = new G6.Graph({\n  container: 'container',\n  width: 500,\n  height: 500\n})\n\nconst graphData = {\n  nodes: [\n    { id: 'A', cluster: 'nc1' },\n    { id: 'B', cluster: 'nc1' },\n    { id: 'C', cluster: 'nc2' },\n    { id: 'D', cluster: 'nc1' },\n    { id: 'E', cluster: 'nc3' },\n  ],\n  edges: [\n    { source: 'A', target: 'B', cluster: 'ec1' },\n    { source: 'B', target: 'C', cluster: 'ec2' },\n    { source: 'A', target: 'D', cluster: 'ec1' },\n    { source: 'A', target: 'E', cluster: 'ec2' },\n  ]\n}\n\ngraph.data(data)\ngraph.render()\n\nconst { GADDI } = Algorithm;\nconst patternData = {\n  nodes: [\n    { id: 'pn1', cluster: 'nc1' },\n    { id: 'pn2', cluster: 'nc1' },\n    { id: 'pn3', cluster: 'nc3' },\n  ],\n  edges: [\n    { source: 'pn1', target: 'pn2', cluster: 'ec1' },\n    { source: 'pn1', target: 'pn3', cluster: 'ec2' },\n  ]\n}\nconst resultMatches = GADDI(graphData, patternData, true, undefined, undefined, 'cluster', 'cluster');\n\nconsole.log(resultMatches);\n  // output:\n  // [{\n  //   nodes: [\n  //     { id: 'A', cluster: 'nc1' },\n  //     { id: 'B', cluster: 'nc1' },\n  //     { id: 'E', cluster: 'nc3' },],\n  //   edges: [\n  //     { source: 'A', target: 'B', cluster: 'ec1' },\n  //     { source: 'A', target: 'E', cluster: 'ec2' }\n  //   ]\n  // }]\n",paraId:10,tocIndex:0},{value:"Depth first search",paraId:11,tocIndex:1},{value:" (DFS) is an algorithm for traversing or searching tree or graph data structures. One starts at the root (selecting some arbitrary node as the root in the case of a graph) and explores as far as possible along each branch before backtracking.",paraId:11,tocIndex:1},{value:"Image Source",paraId:12,tocIndex:1},{value:"Parameters",paraId:13,tocIndex:1},{value:"Name",paraId:14,tocIndex:1},{value:"Type",paraId:14,tocIndex:1},{value:"Required",paraId:14,tocIndex:1},{value:"Description",paraId:14,tocIndex:1},{value:"graphData",paraId:14,tocIndex:1},{value:"GraphData",paraId:14,tocIndex:1},{value:"true",paraId:14,tocIndex:1},{value:"Graph data in G6 ",paraId:14,tocIndex:1},{value:"data format",paraId:15,tocIndex:1},{value:". Note that it should be assigned with graph instance to this parameter instead before v4.1.0",paraId:14,tocIndex:1},{value:"startNodeId",paraId:14,tocIndex:1},{value:"string",paraId:14,tocIndex:1},{value:"true",paraId:14,tocIndex:1},{value:"The ID of the node to be started",paraId:14,tocIndex:1},{value:"callbacks",paraId:14,tocIndex:1},{value:"IAlgorithmCallbacks",paraId:14,tocIndex:1},{value:"false",paraId:14,tocIndex:1},{value:"The callback function",paraId:14,tocIndex:1},{value:"Usage",paraId:16,tocIndex:1},{value:"import G6, { Algorithm } from '@antv/g6';\nconst graph = new G6.Graph({\n  container: 'container',\n  width: 500,\n  height: 500,\n});\n\nconst data = {\n  nodes: [\n    { id: 'A' },\n    { id: 'B' },\n    { id: 'C' },\n    { id: 'D' },\n    { id: 'E' },\n    { id: 'F' },\n    { id: 'G' },\n  ],\n  edges: [\n    { source: 'A', target: 'B' },\n    { source: 'B', target: 'C' },\n    { source: 'A', target: 'C' },\n    { source: 'D', arget: 'A' },\n    { source: 'D', target: 'E' },\n    { source: 'E', target: 'F' },\n  ],\n};\n\ngraph.data(data);\ngraph.render();\n\nconst { depthFirstSearch } = Algorithm;\ndepthFirstSearch(data, 'A', {\n  enter: ({ current, previous }) => {\n    // The callback function for the traversal's begining\n  },\n  leave: ({ current, previous }) => {\n    // The callback function for the traversal's ending\n  },\n});\n",paraId:17,tocIndex:1},{value:"Breadth-first search",paraId:18,tocIndex:2},{value:" (BFS) is an algorithm for traversing or searching tree or graph data structures. It starts at the tree root (or some arbitrary node of a graph, sometimes referred to as a 'search key') and explores the neighbor nodes first, before moving to the next level neighbors.",paraId:18,tocIndex:2},{value:"Image Source",paraId:19,tocIndex:2},{value:"Parameters",paraId:20,tocIndex:2},{value:"Name",paraId:21,tocIndex:2},{value:"Type",paraId:21,tocIndex:2},{value:"Required",paraId:21,tocIndex:2},{value:"Description",paraId:21,tocIndex:2},{value:"graphData",paraId:21,tocIndex:2},{value:"GraphData",paraId:21,tocIndex:2},{value:"true",paraId:21,tocIndex:2},{value:"Graph data in G6 ",paraId:21,tocIndex:2},{value:"data format",paraId:22,tocIndex:2},{value:". Note that it should be assigned with graph instance to this parameter instead before v4.1.0",paraId:21,tocIndex:2},{value:"startNodeId",paraId:21,tocIndex:2},{value:"string",paraId:21,tocIndex:2},{value:"true",paraId:21,tocIndex:2},{value:"The ID of the starting node",paraId:21,tocIndex:2},{value:"originalCallbacks",paraId:21,tocIndex:2},{value:"IAlgorithmCallbacks",paraId:21,tocIndex:2},{value:"false",paraId:21,tocIndex:2},{value:"The callback function",paraId:21,tocIndex:2},{value:"Usage",paraId:23,tocIndex:2},{value:"import G6, { Algorithm } from '@antv/g6';\nconst graph = new G6.Graph({\n  container: 'container',\n  width: 500,\n  height: 500,\n});\n\nconst data = {\n  nodes: [\n    { id: 'A' },\n    { id: 'B' },\n    { id: 'C' },\n    { id: 'D' },\n    { id: 'E' },\n    { id: 'F' },\n    { id: 'G' },\n  ],\n  edges: [\n    { source: 'A', target: 'B' },\n    { source: 'B', target: 'C' },\n    { source: 'A', target: 'C' },\n    { source: 'D', arget: 'A' },\n    { source: 'D', target: 'E' },\n    { source: 'E', target: 'F' },\n  ],\n};\n\ngraph.data(data);\ngraph.render();\n\nconst { breadthFirstSearch } = Algorithm;\nbreadthFirstSearch(data, 'A', {\n  enter: ({ current, previous }) => {\n    // The callback function for the traversal's begining\n  },\n  leave: ({ current, previous }) => {\n    // The callback function for the traversal's ending\n  },\n});\n",paraId:24,tocIndex:2},{value:"Supported after G6 4.0",paraId:25,tocIndex:3},{value:" Label Propagation compute the clusters for graph data automatically. Compare to LOUVAIN, Label Propagation has lower time complexity.",paraId:25,tocIndex:3},{value:"References: ",paraId:26,tocIndex:3},{value:"https://en.wikipedia.org/wiki/Label_propagation_algorithm",paraId:26,tocIndex:3},{value:"Parameters",paraId:27,tocIndex:3},{value:"Name",paraId:28,tocIndex:3},{value:"Type",paraId:28,tocIndex:3},{value:"Required",paraId:28,tocIndex:3},{value:"Description",paraId:28,tocIndex:3},{value:"data",paraId:28,tocIndex:3},{value:"GraphData",paraId:28,tocIndex:3},{value:"true",paraId:28,tocIndex:3},{value:"Graph data",paraId:28,tocIndex:3},{value:"directed",paraId:28,tocIndex:3},{value:"Boolean",paraId:28,tocIndex:3},{value:"false",paraId:28,tocIndex:3},{value:"Whether it is a directed graph, false by default",paraId:28,tocIndex:3},{value:"weightPropertyName",paraId:28,tocIndex:3},{value:"String",paraId:28,tocIndex:3},{value:"false",paraId:28,tocIndex:3},{value:"The property name of the edge weight, `'weight' by default. If there is no weight in each edge, every edge has unit weight",paraId:28,tocIndex:3},{value:"maxIteration",paraId:28,tocIndex:3},{value:"Number",paraId:28,tocIndex:3},{value:"false",paraId:28,tocIndex:3},{value:"Max iteration number, 10000 by default",paraId:28,tocIndex:3},{value:"Return",paraId:29,tocIndex:3},{value:"Returns the clustered data with ",paraId:30,tocIndex:3},{value:"clusters",paraId:30,tocIndex:3},{value:" and ",paraId:30,tocIndex:3},{value:"clusterEdges",paraId:30,tocIndex:3},{value:" arrays. And each node data in the input ",paraId:30,tocIndex:3},{value:"data",paraId:30,tocIndex:3},{value:" will be assigned with corresponding ",paraId:30,tocIndex:3},{value:"clusterId",paraId:30,tocIndex:3},{value:". The type of the return value is:",paraId:30,tocIndex:3},{value:"interface ClusterData {\n  clusters: {\n    // Clusters array\n    id: string; // the ID of a cluster\n    nodes: NodeConfig[]; // the nodes in the cluster\n  }[];\n  clusterEdges: {\n    // The edges between clusters\n    source: string; // source cluster ID\n    target: string; // target cluster ID\n    count: number; // the real edges number of this cluster edge\n  }[];\n}\n",paraId:31,tocIndex:3},{value:"Example of the return value:",paraId:32,tocIndex:3},{value:"{\n  clusters: [\n    {id: 'cluster1', nodes: [ {id: 'node1', clusterId: 'cluster1'}, {id: 'node2', clusterId: 'cluster1'} ]},\n    {id: 'cluster2', nodes: [ {id: 'node3', clusterId: 'cluster2'} ]},\n  ],\n  clusterEdges: [\n    {source: 'cluster1', target: 'cluster2', count: 10},\n    {source: 'cluster1', target: 'cluster1', count: 3},\n  ]\n}\n",paraId:33,tocIndex:3},{value:"Usage",paraId:34,tocIndex:3},{value:"import G6, { Algorithm } from '@antv/g6';\nconst graph = new G6.Graph({\n  container: 'container',\n  width: 500,\n  height: 500,\n});\n\nconst data = {\n  nodes: [\n    { id: 'A' },\n    { id: 'B' },\n    { id: 'C' },\n    { id: 'D' },\n    { id: 'E' },\n    { id: 'F' },\n    { id: 'G' },\n  ],\n  edges: [\n    { source: 'A', target: 'B' },\n    { source: 'B', target: 'C' },\n    { source: 'A', target: 'C' },\n    { source: 'D', arget: 'A' },\n    { source: 'D', target: 'E' },\n    { source: 'E', target: 'F' },\n  ],\n};\n\ngraph.data(data);\ngraph.render();\n\nconst { labelPropagation } = Algorithm;\n\n// result includes clusters array and clusterEdges array. Each node in the data will be assigned with corresponding clusterId\nlet result = labelPropagation(data);\n",paraId:35,tocIndex:3},{value:"Supported after G6 4.0",paraId:36,tocIndex:4},{value:" LOUVAIN auto clustering algorithm cluster the nodes according to the edge density between nodes. Compare to Label Propagation, LOUVAIN is more accurate.",paraId:36,tocIndex:4},{value:"References: ",paraId:37,tocIndex:4},{value:"https://en.wikipedia.org/wiki/Louvain_method",paraId:37,tocIndex:4},{value:"Parameters",paraId:38,tocIndex:4},{value:"Name",paraId:39,tocIndex:4},{value:"Type",paraId:39,tocIndex:4},{value:"Required",paraId:39,tocIndex:4},{value:"Description",paraId:39,tocIndex:4},{value:"data",paraId:39,tocIndex:4},{value:"GraphData",paraId:39,tocIndex:4},{value:"true",paraId:39,tocIndex:4},{value:"Graph data",paraId:39,tocIndex:4},{value:"directed",paraId:39,tocIndex:4},{value:"Boolean",paraId:39,tocIndex:4},{value:"false",paraId:39,tocIndex:4},{value:"Whether it is a directed graph, false by default",paraId:39,tocIndex:4},{value:"weightPropertyName",paraId:39,tocIndex:4},{value:"String",paraId:39,tocIndex:4},{value:"false",paraId:39,tocIndex:4},{value:"The property name of the edge weight, `'weight' by default. If there is no weight in each edge, every edge has unit weight",paraId:39,tocIndex:4},{value:"threshold",paraId:39,tocIndex:4},{value:"Number",paraId:39,tocIndex:4},{value:"false",paraId:39,tocIndex:4},{value:"The convergence threshold, 0.0001 by default",paraId:39,tocIndex:4},{value:"Return",paraId:40,tocIndex:4},{value:"Returns the clustered data with ",paraId:41,tocIndex:4},{value:"clusters",paraId:41,tocIndex:4},{value:" and ",paraId:41,tocIndex:4},{value:"clusterEdges",paraId:41,tocIndex:4},{value:" arrays. And each node data in the input ",paraId:41,tocIndex:4},{value:"data",paraId:41,tocIndex:4},{value:" will be assigned with corresponding ",paraId:41,tocIndex:4},{value:"clusterId",paraId:41,tocIndex:4},{value:". The type of the return value is:",paraId:41,tocIndex:4},{value:"interface ClusterData {\n  clusters: {\n    // Clusters array\n    id: string; // the ID of a cluster\n    nodes: NodeConfig[]; // the nodes in the cluster\n    sumTot?: number; // The number of edges in the cluster\n  }[];\n  clusterEdges: {\n    // The edges between clusters\n    source: string; // source cluster ID\n    target: string; // target cluster ID\n    count: number; // the real edges number of this cluster edge\n  }[];\n}\n",paraId:42,tocIndex:4},{value:"Example of the return value:",paraId:43,tocIndex:4},{value:"{\n  clusters: [\n    {id: 'cluster1', sumTot: 8, nodes: [ {id: 'node1', clusterId: 'cluster1'}, {id: 'node2', clusterId: 'cluster1'} ]},\n    {id: 'cluster2', sumTot: 15, nodes: [ {id: 'node3', clusterId: 'cluster2'} ]},\n  ],\n  clusterEdges: [\n    {source: 'cluster1', target: 'cluster2', count: 10},\n    {source: 'cluster1', target: 'cluster1', count: 3},\n  ]\n}\n",paraId:44,tocIndex:4},{value:"Usage",paraId:45,tocIndex:4},{value:"import G6, { Algorithm } from '@antv/g6';\nconst graph = new G6.Graph({\n  container: 'container',\n  width: 500,\n  height: 500,\n});\n\nconst data = {\n  nodes: [\n    { id: 'A' },\n    { id: 'B' },\n    { id: 'C' },\n    { id: 'D' },\n    { id: 'E' },\n    { id: 'F' },\n    { id: 'G' },\n  ],\n  edges: [\n    { source: 'A', target: 'B' },\n    { source: 'B', target: 'C' },\n    { source: 'A', target: 'C' },\n    { source: 'D', arget: 'A' },\n    { source: 'D', target: 'E' },\n    { source: 'E', target: 'F' },\n  ],\n};\n\ngraph.data(data);\ngraph.render();\n\nconst { louvain } = Algorithm;\n\n// result includes clusters array and clusterEdges array. Each node in the data will be assigned with corresponding clusterId\nlet result = louvain(data);\n",paraId:46,tocIndex:4},{value:"In a given directed graph, check whether a ring is included. If at least one ring is included in the given graph, the first ring included is returned. Returns ",paraId:47,tocIndex:5},{value:"null",paraId:47,tocIndex:5},{value:" if there is no cycle in the graph.",paraId:47,tocIndex:5},{value:"References:",paraId:48,tocIndex:5},{value:"detect-cycle-in-a-graph",paraId:49,tocIndex:5},{value:"detect-cycle",paraId:50,tocIndex:5},{value:"Parameters",paraId:51,tocIndex:5},{value:"Name",paraId:52,tocIndex:5},{value:"Type",paraId:52,tocIndex:5},{value:"Required",paraId:52,tocIndex:5},{value:"Description",paraId:52,tocIndex:5},{value:"graphData",paraId:52,tocIndex:5},{value:"GraphData",paraId:52,tocIndex:5},{value:"true",paraId:52,tocIndex:5},{value:"Graph data in G6 ",paraId:52,tocIndex:5},{value:"data format",paraId:53,tocIndex:5},{value:". Note that it should be assigned with graph instance to this parameter instead before v4.1.0",paraId:52,tocIndex:5},{value:"Return",paraId:54,tocIndex:5},{value:"Returns the detected cycle. Returns ",paraId:55,tocIndex:5},{value:"null",paraId:55,tocIndex:5},{value:" if there is no cycle.",paraId:55,tocIndex:5},{value:"Usage",paraId:56,tocIndex:5},{value:"import G6, { Algorithm } from '@antv/g6';\nconst graph = new G6.Graph({\n  container: 'container',\n  width: 500,\n  height: 500,\n});\n\nconst data = {\n  nodes: [\n    { id: 'A' },\n    { id: 'B' },\n    { id: 'C' },\n    { id: 'D' },\n    { id: 'E' },\n    { id: 'F' },\n    { id: 'G' },\n  ],\n  edges: [\n    { source: 'A', target: 'B' },\n    { source: 'B', target: 'C' },\n    { source: 'A', target: 'C' },\n    { source: 'D', arget: 'A' },\n    { source: 'D', target: 'E' },\n    { source: 'E', target: 'F' },\n  ],\n};\n\ngraph.data(data);\ngraph.render();\n\nconst { detectDirectedCycle } = Algorithm;\n\n// There is no cycle in the graph, the result is null\nlet result = detectDirectedCycle(data);\n\n// There will be a cycle after adding edge F->D\ndata.edges.push({\n  source: 'F',\n  target: 'D',\n});\n\ngraph.changeData(data);\n\n// Returns:\n/**\n* {\n    D: Node,\n    F: Node,\n    E: Node,\n  }\n*/\nresult = detectDirectedCycle(data);\n",paraId:57,tocIndex:5},{value:"Find all simple cycles (elementary circuits) of a directed graph, and for undirected graph, find a list of cycles which form a ",paraId:58,tocIndex:6},{value:"basis for cycles",paraId:58,tocIndex:6},{value:" of graph.",paraId:58,tocIndex:6},{value:"References:",paraId:59,tocIndex:6},{value:"Detect all of the cycles in an undirected graph.",paraId:60,tocIndex:6},{value:"Detect all of the cycles in a directed graph: ",paraId:61,tocIndex:6},{value:"Johnson's algorithm ",paraId:61,tocIndex:6},{value:".",paraId:61,tocIndex:6},{value:"Parameters",paraId:62,tocIndex:6},{value:"Name",paraId:63,tocIndex:6},{value:"Type",paraId:63,tocIndex:6},{value:"Required",paraId:63,tocIndex:6},{value:"Description",paraId:63,tocIndex:6},{value:"graphData",paraId:63,tocIndex:6},{value:"GraphData",paraId:63,tocIndex:6},{value:"true",paraId:63,tocIndex:6},{value:"Graph data in G6 ",paraId:63,tocIndex:6},{value:"data format",paraId:64,tocIndex:6},{value:". Note that it should be assigned with graph instance to this parameter instead before v4.1.0",paraId:63,tocIndex:6},{value:"directed",paraId:63,tocIndex:6},{value:"boolean",paraId:63,tocIndex:6},{value:"false",paraId:63,tocIndex:6},{value:"Whether the graph is directed, use the value of ",paraId:63,tocIndex:6},{value:"graph.get('directed')",paraId:63,tocIndex:6},{value:" by default. ｜",paraId:63,tocIndex:6},{value:"nodeIds",paraId:63,tocIndex:6},{value:"string[]",paraId:63,tocIndex:6},{value:"false",paraId:63,tocIndex:6},{value:"The nodes that should be included in or excluded from the cycles. If not configured, return all of the cycles.｜",paraId:63,tocIndex:6},{value:"include",paraId:63,tocIndex:6},{value:"boolean",paraId:63,tocIndex:6},{value:"false",paraId:63,tocIndex:6},{value:"If it is ",paraId:63,tocIndex:6},{value:"true",paraId:63,tocIndex:6},{value:", the returned cycles shuld include one of the nodes in ",paraId:63,tocIndex:6},{value:"nodeIds",paraId:63,tocIndex:6},{value:", otherwise the cycles should not have any nodes in ",paraId:63,tocIndex:6},{value:"nodeIds",paraId:63,tocIndex:6},{value:". ",paraId:63,tocIndex:6},{value:"true",paraId:63,tocIndex:6},{value:" by default.｜",paraId:63,tocIndex:6},{value:"Return",paraId:65,tocIndex:6},{value:"Type of return value: [{[key: string]: Node}]",paraId:66,tocIndex:6},{value:"Return a list of cyles. Each cycle is an object, whose key is a node ID and whose value is its next node in the cycle.",paraId:66,tocIndex:6},{value:"Usage",paraId:67,tocIndex:6},{value:"const { detectAllCycles } = Algorithm;\n\nconst allCycles = detectAllCycles(data, true);\n\n// Find all cycles that includes node B\nconst allCycleIncludeB = detectAllCycles(data, true, ['B']);\n\n// Find all cycles that does not includes node B\nconst allCycleExcludeB = detectAllCycles(data, false, ['B'], false);\n",paraId:68,tocIndex:6},{value:"Compute the shortest path between two nodes in the graph.",paraId:69,tocIndex:7},{value:"Parameters",paraId:70,tocIndex:7},{value:"Name",paraId:71,tocIndex:7},{value:"Type",paraId:71,tocIndex:7},{value:"Required",paraId:71,tocIndex:7},{value:"Description",paraId:71,tocIndex:7},{value:"graphData",paraId:71,tocIndex:7},{value:"GraphData",paraId:71,tocIndex:7},{value:"true",paraId:71,tocIndex:7},{value:"Graph data in G6 ",paraId:71,tocIndex:7},{value:"data format",paraId:72,tocIndex:7},{value:". Note that it should be assigned with graph instance to this parameter instead before v4.1.0",paraId:71,tocIndex:7},{value:"start",paraId:71,tocIndex:7},{value:"INode / string",paraId:71,tocIndex:7},{value:"true",paraId:71,tocIndex:7},{value:"G6 Node Instance or node ID, indicating the start of the path ｜",paraId:71,tocIndex:7},{value:"end",paraId:71,tocIndex:7},{value:"INode / string",paraId:71,tocIndex:7},{value:"true",paraId:71,tocIndex:7},{value:"G6 Node Instance or node ID, indicating the end of the path ｜",paraId:71,tocIndex:7},{value:"directed",paraId:71,tocIndex:7},{value:"boolean",paraId:71,tocIndex:7},{value:"false",paraId:71,tocIndex:7},{value:"Whether the graph is directed, use the value of ",paraId:71,tocIndex:7},{value:"graph.get('directed')",paraId:71,tocIndex:7},{value:" by default. ｜",paraId:71,tocIndex:7},{value:"weightPropertyName",paraId:71,tocIndex:7},{value:"string",paraId:71,tocIndex:7},{value:"false",paraId:71,tocIndex:7},{value:"Configure the edge property as the edge weight. If not configured, every edge has weight 1.｜",paraId:71,tocIndex:7},{value:"Return",paraId:73,tocIndex:7},{value:"Type of return value: Object，",paraId:74,tocIndex:7},{value:" {\n  length: number, // the length of the path\n  path: string[], // the node IDs that form the path\n  allPath: string[][] // all the shortest path from the start to the end\n}\n",paraId:75,tocIndex:7},{value:"Usage",paraId:76,tocIndex:7},{value:"const data = {\n  nodes: [\n    {\n      id: 'A',\n      label: 'A',\n    },\n    {\n      id: 'B',\n      label: 'B',\n    },\n    {\n      id: 'C',\n      label: 'C',\n    },\n    {\n      id: 'D',\n      label: 'D',\n    },\n    {\n      id: 'E',\n      label: 'E',\n    },\n    {\n      id: 'F',\n      label: 'F',\n    },\n    {\n      id: 'G',\n      label: 'G',\n    },\n    {\n      id: 'H',\n      label: 'H',\n    },\n  ],\n  edges: [\n    {\n      source: 'A',\n      target: 'B',\n    },\n    {\n      source: 'B',\n      target: 'C',\n    },\n    {\n      source: 'C',\n      target: 'G',\n    },\n    {\n      source: 'A',\n      target: 'D',\n    },\n    {\n      source: 'A',\n      target: 'E',\n    },\n    {\n      source: 'E',\n      target: 'F',\n    },\n    {\n      source: 'F',\n      target: 'D',\n    },\n    {\n      source: 'D',\n      target: 'E',\n    },\n  ],\n};\n\nconst graph = new G6.Graph({\n  container: 'container',\n  width: 500,\n  height: 500,\n});\ngraph.data(data);\ngraph.render();\n\nconst { findShortestPath } = Algorithm;\n// Find the shortest path between node A and node C in this undirected graph\nconst { length, path, allPath } = findShortestPath(data, 'A', 'C');\nconsole.log(length, path);\n// Expected output: 2, ['A', 'B', 'C']\n",paraId:77,tocIndex:7},{value:"Find all paths between two nodes in the graph.",paraId:78,tocIndex:8},{value:"Parameters",paraId:79,tocIndex:8},{value:"Name",paraId:80,tocIndex:8},{value:"Type",paraId:80,tocIndex:8},{value:"Required",paraId:80,tocIndex:8},{value:"Description",paraId:80,tocIndex:8},{value:"graphData",paraId:80,tocIndex:8},{value:"GraphData",paraId:80,tocIndex:8},{value:"true",paraId:80,tocIndex:8},{value:"Graph data in G6 ",paraId:80,tocIndex:8},{value:"data format",paraId:81,tocIndex:8},{value:". . Note that it should be assigned with graph instance to this parameter instead before v4.1.0",paraId:80,tocIndex:8},{value:"start",paraId:80,tocIndex:8},{value:"INode / string",paraId:80,tocIndex:8},{value:"true",paraId:80,tocIndex:8},{value:"G6 Node Instance or node ID, indicating the start of the path ｜",paraId:80,tocIndex:8},{value:"end",paraId:80,tocIndex:8},{value:"INode / string",paraId:80,tocIndex:8},{value:"true",paraId:80,tocIndex:8},{value:"G6 Node Instance or node ID, indicating the end of the path ｜",paraId:80,tocIndex:8},{value:"directed",paraId:80,tocIndex:8},{value:"boolean",paraId:80,tocIndex:8},{value:"false",paraId:80,tocIndex:8},{value:"Whether the graph is directed, use the value of ",paraId:80,tocIndex:8},{value:"graph.get('directed')",paraId:80,tocIndex:8},{value:" by default. ｜",paraId:80,tocIndex:8},{value:"Return",paraId:82,tocIndex:8},{value:"Type of return value: string[][]",paraId:83,tocIndex:8},{value:"Return a list of paths, in which each path is an array of node IDs.",paraId:83,tocIndex:8},{value:"Usage",paraId:84,tocIndex:8},{value:"const data = {\n  nodes: [\n    {\n      id: 'A',\n      label: 'A',\n    },\n    {\n      id: 'B',\n      label: 'B',\n    },\n    {\n      id: 'C',\n      label: 'C',\n    },\n    {\n      id: 'D',\n      label: 'D',\n    },\n    {\n      id: 'E',\n      label: 'E',\n    },\n    {\n      id: 'F',\n      label: 'F',\n    },\n    {\n      id: 'G',\n      label: 'G',\n    },\n    {\n      id: 'H',\n      label: 'H',\n    },\n  ],\n  edges: [\n    {\n      source: 'A',\n      target: 'B',\n    },\n    {\n      source: 'B',\n      target: 'C',\n    },\n    {\n      source: 'C',\n      target: 'G',\n    },\n    {\n      source: 'A',\n      target: 'D',\n    },\n    {\n      source: 'A',\n      target: 'E',\n    },\n    {\n      source: 'E',\n      target: 'F',\n    },\n    {\n      source: 'F',\n      target: 'D',\n    },\n    {\n      source: 'D',\n      target: 'E',\n    },\n  ],\n};\n\nconst graph = new G6.Graph({\n  container: 'container',\n  width: 500,\n  height: 500,\n});\ngraph.data(data);\ngraph.render();\n\nconst { findAllPath } = Algorithm;\nconst allPath = findAllPath(data, 'A', 'E');\nconsole.log(allPath);\n// Expected output: [['A', 'D', 'F', 'E'], ['A', 'D', 'E'], ['A', 'E']]\n",paraId:85,tocIndex:8},{value:"Find the connect component of the graph. In the case of a directed graph, the strongly connected components are returned.",paraId:86,tocIndex:9},{value:"Translated with ",paraId:87,tocIndex:9},{value:"www.DeepL.com/Translator",paraId:87,tocIndex:9},{value:" (free version)",paraId:87,tocIndex:9},{value:"Reference:",paraId:88,tocIndex:9},{value:"Detect the strongly connected components in a directed graph: ",paraId:89,tocIndex:9},{value:"Tarjan's Algorithm",paraId:89,tocIndex:9},{value:"Parameters",paraId:90,tocIndex:9},{value:"Name",paraId:91,tocIndex:9},{value:"Type",paraId:91,tocIndex:9},{value:"Required",paraId:91,tocIndex:9},{value:"Description",paraId:91,tocIndex:9},{value:"graphData",paraId:91,tocIndex:9},{value:"GraphData",paraId:91,tocIndex:9},{value:"true",paraId:91,tocIndex:9},{value:"Graph data in G6 ",paraId:91,tocIndex:9},{value:"data format",paraId:92,tocIndex:9},{value:". . Note that it should be assigned with graph instance to this parameter instead before v4.1.0",paraId:91,tocIndex:9},{value:"directed",paraId:91,tocIndex:9},{value:"boolean",paraId:91,tocIndex:9},{value:"false",paraId:91,tocIndex:9},{value:"Whether the graph is directed, use the value of ",paraId:91,tocIndex:9},{value:"graph.get('directed')",paraId:91,tocIndex:9},{value:" by default. ｜",paraId:91,tocIndex:9},{value:"Return",paraId:93,tocIndex:9},{value:"Type of return value: INode[][]",paraId:94,tocIndex:9},{value:"Return a list of connected components or strongly-connect components. Each component is a list of node instances.",paraId:94,tocIndex:9},{value:"Usage",paraId:95,tocIndex:9},{value:"const data = {\n  nodes: [\n    {\n      id: 'A',\n    },\n    {\n      id: 'B',\n    },\n    {\n      id: 'C',\n    },\n    {\n      id: 'D',\n    },\n    {\n      id: 'E',\n    },\n    {\n      id: 'F',\n    },\n    {\n      id: 'G',\n    },\n    {\n      id: 'H',\n    },\n  ],\n  edges: [\n    {\n      source: 'A',\n      target: 'B',\n    },\n    {\n      source: 'B',\n      target: 'C',\n    },\n    {\n      source: 'A',\n      target: 'C',\n    },\n    {\n      source: 'D',\n      target: 'A',\n    },\n    {\n      source: 'D',\n      target: 'E',\n    },\n    {\n      source: 'E',\n      target: 'F',\n    },\n    {\n      source: 'F',\n      target: 'D',\n    },\n    {\n      source: 'G',\n      target: 'H',\n    },\n    {\n      source: 'H',\n      target: 'G',\n    },\n  ],\n};\nconst graph = new G6.Graph({\n  container: 'container',\n  width: 500,\n  height: 400,\n});\ngraph.data(data);\ngraph.render();\n\n// Connected components\nconst components = connectedComponent(data, false);\ncomponents.forEach((component) => {\n  console.log(component.map((node) => node.get('id')));\n});\n// Expected output: ['A', 'B', 'C', 'D', 'E', 'F'], ['G', 'H']\n\n// Strongly-connected components\nconst components2 = connectedComponent(data, true);\ncomponents2.forEach((component) => {\n  console.log(component.map((node) => node.get('id')));\n});\n// Expected output: ['A'], ['B'], ['C'], ['D', 'E', 'F'], ['G', 'H']\n",paraId:96,tocIndex:9},{value:"The PageRank algorithm assumes that the importance of the current node is determined by the importance of other nodes pointing to it, and that the more inbound links a node receives from other nodes, the more important it is. PageRank is determined by counting the number and quality of links to a node.",paraId:97,tocIndex:10},{value:"Reference:",paraId:98,tocIndex:10},{value:"PageRank",paraId:99,tocIndex:10},{value:"Parameters",paraId:100,tocIndex:10},{value:"Name",paraId:101,tocIndex:10},{value:"Type",paraId:101,tocIndex:10},{value:"Required",paraId:101,tocIndex:10},{value:"Description",paraId:101,tocIndex:10},{value:"graphData",paraId:101,tocIndex:10},{value:"GraphData",paraId:101,tocIndex:10},{value:"true",paraId:101,tocIndex:10},{value:"Graph data in G6 ",paraId:101,tocIndex:10},{value:"data format",paraId:102,tocIndex:10},{value:". Note that it should be assigned with graph instance to this parameter instead before v4.1.0",paraId:101,tocIndex:10},{value:"epsilon",paraId:101,tocIndex:10},{value:"number",paraId:101,tocIndex:10},{value:"false",paraId:101,tocIndex:10},{value:"The precision level used to identify whether the calculation is converged. ｜",paraId:101,tocIndex:10},{value:"linkProb",paraId:101,tocIndex:10},{value:"number",paraId:101,tocIndex:10},{value:"false",paraId:101,tocIndex:10},{value:"The the probability that the outgoing links will be visited next, 0.85 by default.｜",paraId:101,tocIndex:10},{value:"Return",paraId:103,tocIndex:10},{value:"Type of return value: Object, {[key: string]: number}",paraId:104,tocIndex:10},{value:"The PageRank value for each node.",paraId:104,tocIndex:10}]},53220:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Behavior is the compound interactions in G6. In general, a Behavior includes one or more event listeners and a set of item operations.",paraId:0},{value:"By default, Behavior has three callbacks: ",paraId:1},{value:"shouldBegin",paraId:1},{value:", ",paraId:1},{value:"shouldUpdate",paraId:1},{value:", and ",paraId:1},{value:"shouldEnd",paraId:1},{value:", representing the beginning of the behavior, whether to update the items, the ending of the behavior respectively. If they return ",paraId:1},{value:"false",paraId:1},{value:", the default behavior will be prevented.",paraId:1},{value:"This document is going to introduce how to customize a behavior. The infomation about the built-in behaviors can be found in the ",paraId:2},{value:"Built-in Behaviors",paraId:3},{value:". When the ",paraId:2},{value:"built-in Behaviors",paraId:4},{value:" cannot satisfy your requirments, custom a type of Behavior by ",paraId:2},{value:"G6.registerBehavior(behaviorName, behavior)",paraId:2},{value:". See ",paraId:2},{value:"Behavior API",paraId:5},{value:" for detail.",paraId:2},{value:"// highlight-start\nG6.registerBehavior(behaviorName: string, behavior: BehaviorOption)\n// highlight-end\n\n// Custom a type of Behavior\nG6.registerBehavior('behaviorName', {\n  // Bind the event and its callback\n  getEvents() {\n    return {\n      'node:click': 'onClick',\n      mousemove: 'onMousemove',\n      'edge:click': 'onEdgeClick',\n    };\n  },\n  /**\n   * Handle the callback for node:click\n   * @override\n   * @param  {Object} evt The handler\n   */\n  onClick(evt) {\n    const node = evt.item;\n    const graph = this.graph;\n    const point = { x: evt.x, y: evt.y };\n    const model = node.getModel();\n    // TODO\n  },\n  /**\n   * Handle the callback for mousemove\n   * @override\n   * @param  {Object} evt The handler\n   */\n  onMousemove(evt) {\n    // TODO\n  },\n  /**\n   * Handle the callback for :click\n   * @override\n   * @param  {Object} evt The handler\n   */\n  onEdgeClick(evt) {\n    // TODO\n  },\n});\n",paraId:6},{value:"Name",paraId:7,tocIndex:0},{value:"Type",paraId:7,tocIndex:0},{value:"Required",paraId:7,tocIndex:0},{value:"Description",paraId:7,tocIndex:0},{value:"behaviorName",paraId:7,tocIndex:0},{value:"String",paraId:7,tocIndex:0},{value:"true",paraId:7,tocIndex:0},{value:"The name of custom Behavior.",paraId:7,tocIndex:0},{value:"behavior",paraId:7,tocIndex:0},{value:"BehaviorOption",paraId:7,tocIndex:0},{value:"true",paraId:7,tocIndex:0},{value:"The configurations of custom Behavior. For more information, please refer to ",paraId:7,tocIndex:0},{value:"Behavior API",paraId:8,tocIndex:0},{value:".",paraId:7,tocIndex:0},{value:"Define and handle events when user customize a Behavior.",paraId:9,tocIndex:1},{value:"The usage of ",paraId:10,tocIndex:1},{value:"getEvents()",paraId:10,tocIndex:1},{value:" can be refered to ",paraId:10,tocIndex:1},{value:"Event",paraId:11,tocIndex:1},{value:"。",paraId:10,tocIndex:1},{value:"Usage",paraId:12,tocIndex:1},{value:"G6.registerBehavior('behaviorName', {\n  getEvents() {\n    return {\n      'node:click': 'onNodeClick',\n      'edge:click': 'onEdgeClick',\n      'mousemove': 'onMouseMove'\n    }\n  }\n}\n",paraId:13,tocIndex:1},{value:"onNodeClick",paraId:14,tocIndex:2},{value:", ",paraId:14,tocIndex:2},{value:"onEdgeClick",paraId:14,tocIndex:2},{value:", and ",paraId:14,tocIndex:2},{value:"onMouseMove",paraId:14,tocIndex:2},{value:" are custom events for handling ",paraId:14,tocIndex:2},{value:"node:click",paraId:14,tocIndex:2},{value:", ",paraId:14,tocIndex:2},{value:"edge:click",paraId:14,tocIndex:2},{value:", and ",paraId:14,tocIndex:2},{value:"mousemove",paraId:14,tocIndex:2},{value:".",paraId:14,tocIndex:2},{value:"Parameters",paraId:15,tocIndex:2},{value:"Name",paraId:16,tocIndex:2},{value:"Type",paraId:16,tocIndex:2},{value:"Required",paraId:16,tocIndex:2},{value:"Description",paraId:16,tocIndex:2},{value:"evt",paraId:16,tocIndex:2},{value:"Event",paraId:16,tocIndex:2},{value:"false",paraId:16,tocIndex:2},{value:"contains event handler, current target, and coordinates.",paraId:16,tocIndex:2},{value:"The parameter ",paraId:17,tocIndex:2},{value:"evt",paraId:17,tocIndex:2},{value:" contains:",paraId:17,tocIndex:2},{value:"Name",paraId:18,tocIndex:2},{value:"Type",paraId:18,tocIndex:2},{value:"Description",paraId:18,tocIndex:2},{value:"x",paraId:18,tocIndex:2},{value:"Number",paraId:18,tocIndex:2},{value:"x coordinate of view port.",paraId:18,tocIndex:2},{value:"y",paraId:18,tocIndex:2},{value:"Number",paraId:18,tocIndex:2},{value:"y coordinate of view port.",paraId:18,tocIndex:2},{value:"canvasX",paraId:18,tocIndex:2},{value:"Number",paraId:18,tocIndex:2},{value:"x coordinate of the canvas.",paraId:18,tocIndex:2},{value:"canvasY",paraId:18,tocIndex:2},{value:"Number",paraId:18,tocIndex:2},{value:"y coordinate of the canvas.",paraId:18,tocIndex:2},{value:"clientX",paraId:18,tocIndex:2},{value:"Number",paraId:18,tocIndex:2},{value:"x coordinate of the client / screen.",paraId:18,tocIndex:2},{value:"clientY",paraId:18,tocIndex:2},{value:"Number",paraId:18,tocIndex:2},{value:"y coordinate of the client / screen.",paraId:18,tocIndex:2},{value:"event",paraId:18,tocIndex:2},{value:"MouseEvent",paraId:18,tocIndex:2},{value:"Event handler.",paraId:18,tocIndex:2},{value:"target",paraId:18,tocIndex:2},{value:"Shape",paraId:18,tocIndex:2},{value:"The target.",paraId:18,tocIndex:2},{value:"type",paraId:18,tocIndex:2},{value:"String",paraId:18,tocIndex:2},{value:"Operation type.",paraId:18,tocIndex:2},{value:"currentTarget",paraId:18,tocIndex:2},{value:"Object",paraId:18,tocIndex:2},{value:"item",paraId:18,tocIndex:2},{value:"Shape",paraId:18,tocIndex:2},{value:"The target item.",paraId:18,tocIndex:2},{value:"removed",paraId:18,tocIndex:2},{value:"Boolean",paraId:18,tocIndex:2},{value:"Whether the target is removed / destroyed.",paraId:18,tocIndex:2},{value:"timeStamp",paraId:18,tocIndex:2},{value:"Number",paraId:18,tocIndex:2},{value:"The time stamp.",paraId:18,tocIndex:2},{value:"bubbles",paraId:18,tocIndex:2},{value:"Boolean",paraId:18,tocIndex:2},{value:"Whether it is a bubbled event.",paraId:18,tocIndex:2},{value:"defaultPrevented",paraId:18,tocIndex:2},{value:"Boolean",paraId:18,tocIndex:2},{value:"Whether to prevent the default event.",paraId:18,tocIndex:2},{value:"cancelable",paraId:18,tocIndex:2},{value:"Boolean",paraId:18,tocIndex:2},{value:"Whether it is cancelable.",paraId:18,tocIndex:2},{value:"Usage",paraId:19,tocIndex:2},{value:"G6.registerBehavior('behaviorName', {\n  getEvents() {\n    return {\n      'node:click': 'onNodeClick',\n      'edge:click': 'onEdgeClick',\n      mousemove: 'onMouseMove',\n    };\n  },\n  onNodeClick(evt) {\n    // TODO\n  },\n  onEdgeClick(evt) {\n    // TODO\n  },\n  onMouseMove(evt) {\n    // TODO\n  },\n});\n",paraId:20,tocIndex:2},{value:"Default configurations while customing a Behavior. The configurations will be mixed by the configurations from user.",paraId:21,tocIndex:3},{value:"Tips: This function is not required",paraId:22,tocIndex:3},{value:".",paraId:22,tocIndex:3},{value:"Usage",paraId:23,tocIndex:3},{value:"G6.registerBehavior('behaviorName', {\n  getDefaultCfg() {\n    return {\n      trigger: 'click' // mouseneter or click\n    }\n  }\n}\n",paraId:24,tocIndex:3},{value:"Whether to prevent the behavior. Return ",paraId:25,tocIndex:4},{value:"true",paraId:25,tocIndex:4},{value:" by default, which means do not prevent the behavior. User should call it by themselves. ",paraId:25,tocIndex:4},{value:"Supported after v4.7.16",paraId:25,tocIndex:4},{value:" The last parameter is the behavior instance, which will be convenient to get it in arrow function formatted ",paraId:25,tocIndex:4},{value:"shouldBegin",paraId:25,tocIndex:4},{value:".",paraId:25,tocIndex:4},{value:"Usage",paraId:26,tocIndex:4},{value:"G6.registerBehavior('behaviorName', {\n  shouldBegin(evt, self) {\n    // Customize it according to your scenario\n    return true;\n  },\n});\n",paraId:27,tocIndex:4},{value:"Whether to update the data and the view. Returns ",paraId:28,tocIndex:5},{value:"true",paraId:28,tocIndex:5},{value:" by default, which means allow updating. ",paraId:28,tocIndex:5},{value:"Supported after v4.7.16",paraId:28,tocIndex:5},{value:" The last parameter is the behavior instance, which will be convenient to get it in arrow function formatted ",paraId:28,tocIndex:5},{value:"shouldUpdate",paraId:28,tocIndex:5},{value:".",paraId:28,tocIndex:5},{value:"Usage",paraId:29,tocIndex:5},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 500,\n  height: 500,\n  modes: {\n    default: [\n      'drag-canvas',\n      {\n        type: 'self-behavior',\n        shouldUpdate: (e, self) => {\n          if (e.target.type !== 'text') {\n            return false;\n          }\n          return true;\n        },\n      },\n    ],\n  },\n});\n",paraId:30,tocIndex:5},{value:"Whether to end the behavior. Returns ",paraId:31,tocIndex:6},{value:"true",paraId:31,tocIndex:6},{value:" by default. ",paraId:31,tocIndex:6},{value:"Supported after v4.7.16",paraId:31,tocIndex:6},{value:" The last parameter is the behavior instance, which will be convenient to get it in arrow function formatted ",paraId:31,tocIndex:6},{value:"shouldEnd",paraId:31,tocIndex:6},{value:".",paraId:31,tocIndex:6}]},29946:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"The events in this chapter can be binded or unbinded to graph by ",paraId:0},{value:"graph.on",paraId:1},{value:" and ",paraId:0},{value:"graph.off",paraId:2},{value:".",paraId:0},{value:"The parameters of callbacks for common events, Node events, and Edge events are described in ",paraId:3},{value:"Behavior API",paraId:4},{value:".",paraId:3},{value:"Listen to the interaction events such as ",paraId:5,tocIndex:0},{value:"click",paraId:5,tocIndex:0},{value:", ",paraId:5,tocIndex:0},{value:"mousemove",paraId:5,tocIndex:0},{value:" by the following way:",paraId:5,tocIndex:0},{value:"graph.on(eventName, evt => {\n  // some operations\n})\n",paraId:6,tocIndex:0},{value:"Where, the event object ",paraId:7,tocIndex:0},{value:"evt",paraId:7,tocIndex:0},{value:" has the properties:",paraId:7,tocIndex:0},{value:"type",paraId:8,tocIndex:0},{value:": The type of the event",paraId:8,tocIndex:0},{value:"name",paraId:8,tocIndex:0},{value:": The name of the event",paraId:8,tocIndex:0},{value:"x",paraId:8,tocIndex:0},{value:": The x coordinate on the canvas",paraId:8,tocIndex:0},{value:"y",paraId:8,tocIndex:0},{value:": The y coordinate on the canvas",paraId:8,tocIndex:0},{value:"clientX",paraId:8,tocIndex:0},{value:": The x coordinate about the client",paraId:8,tocIndex:0},{value:"clientY",paraId:8,tocIndex:0},{value:": The y coordinate about the client",paraId:8,tocIndex:0},{value:"canvasX",paraId:8,tocIndex:0},{value:": The x coordinate about parent DOM of the canvas",paraId:8,tocIndex:0},{value:"canvasY",paraId:8,tocIndex:0},{value:": The y coordinate about parent DOM of the canvas",paraId:8,tocIndex:0},{value:"（The differences between x/y, clientX/clientY, and canvasX/canvasY can be found in ",paraId:9,tocIndex:0},{value:"Coordinate Systems in G6",paraId:10,tocIndex:0},{value:"）",paraId:9,tocIndex:0},{value:"item",paraId:11,tocIndex:0},{value:": The item being manipulated, which can be a node, an edge, or a Combo）",paraId:11,tocIndex:0},{value:"target",paraId:11,tocIndex:0},{value:": The target ",paraId:11,tocIndex:0},{value:"Shape",paraId:12,tocIndex:0},{value:" on the ",paraId:11,tocIndex:0},{value:"item",paraId:11,tocIndex:0},{value:" being manupulated, or the canvas instance",paraId:11,tocIndex:0},{value:"bubbles",paraId:11,tocIndex:0},{value:": Whether bubbles",paraId:11,tocIndex:0},{value:"defaultPrevented",paraId:11,tocIndex:0},{value:": Whether prevent the original event",paraId:11,tocIndex:0},{value:"originalEvent",paraId:11,tocIndex:0},{value:": The original client event object. where the ",paraId:11,tocIndex:0},{value:"button",paraId:11,tocIndex:0},{value:" can be used to distinguish the left/middle/right button of the mouse on some events like ",paraId:11,tocIndex:0},{value:"click",paraId:11,tocIndex:0},{value:" or ",paraId:11,tocIndex:0},{value:"dblclick",paraId:11,tocIndex:0},{value:"timeStamp",paraId:11,tocIndex:0},{value:": The time stamp the event triggered",paraId:11,tocIndex:0},{value:"propagationStopped",paraId:11,tocIndex:0},{value:": Wheher stop the propogation",paraId:11,tocIndex:0},{value:"propagationPath",paraId:11,tocIndex:0},{value:": The triggering path",paraId:11,tocIndex:0},{value:"eventName",paraId:13,tocIndex:0},{value:" can be refered to the following parts.",paraId:13,tocIndex:0},{value:"Event Name",paraId:14,tocIndex:1},{value:"Description",paraId:14,tocIndex:1},{value:"click",paraId:14,tocIndex:1},{value:"Activated by clicking the ",paraId:14,tocIndex:1},{value:"left button",paraId:14,tocIndex:1},{value:" of mouse or Enter button.",paraId:14,tocIndex:1},{value:"dblclick",paraId:14,tocIndex:1},{value:"Activated by double clicking the ",paraId:14,tocIndex:1},{value:"left button",paraId:14,tocIndex:1},{value:" of mouse.",paraId:14,tocIndex:1},{value:"mouseenter",paraId:14,tocIndex:1},{value:"Activated when mouse enters an item. ",paraId:14,tocIndex:1},{value:"This is not a bubbled event",paraId:14,tocIndex:1},{value:", which means this event will not be activated when the mouse moves to the descendant items.",paraId:14,tocIndex:1},{value:"mousemove",paraId:14,tocIndex:1},{value:"Activated while the mouse is moving inside an item. It cannot be activated by keyboard.",paraId:14,tocIndex:1},{value:"mouseout",paraId:14,tocIndex:1},{value:"Activated while the mouse moves out of an item.",paraId:14,tocIndex:1},{value:"mouseover",paraId:14,tocIndex:1},{value:"Activated when the mouse moves over an item.",paraId:14,tocIndex:1},{value:"mouseleave",paraId:14,tocIndex:1},{value:"Activated when the mouse leaves an item. ",paraId:14,tocIndex:1},{value:"This is not a bubbled event",paraId:14,tocIndex:1},{value:", which means this event will not be activated when the mouse leaves the descendant items.",paraId:14,tocIndex:1},{value:"mousedown",paraId:14,tocIndex:1},{value:"Activated when the left or right button is clicked down. It cannot be activated by keyboard.",paraId:14,tocIndex:1},{value:"mouseup",paraId:14,tocIndex:1},{value:"Activated when the left or right button is released. It cannot be activated by keyboard.",paraId:14,tocIndex:1},{value:"contextmenu",paraId:14,tocIndex:1},{value:"Open the context menu when user clicks the right button of mouse. ",paraId:14,tocIndex:1},{value:"Demo",paraId:15,tocIndex:1},{value:".",paraId:14,tocIndex:1},{value:"dragstart",paraId:14,tocIndex:1},{value:"Activated when user begins to drag. This event is applied on a dragged item.",paraId:14,tocIndex:1},{value:"drag",paraId:14,tocIndex:1},{value:"Activated during the dragging process. This event is applied on a dragged item.",paraId:14,tocIndex:1},{value:"dragend",paraId:14,tocIndex:1},{value:"Activated when user stops dragging. This event is applied on a dragged item.",paraId:14,tocIndex:1},{value:"dragenter",paraId:14,tocIndex:1},{value:"Activated when user drags an item into a target item. This event is applied on a dragged item.",paraId:14,tocIndex:1},{value:"dragleave",paraId:14,tocIndex:1},{value:"Activated when user drags an item out of a target item. This event is applied on the target item.",paraId:14,tocIndex:1},{value:"drop",paraId:14,tocIndex:1},{value:"Activated when user drops an item on a target item. This event is applied on the target item.",paraId:14,tocIndex:1},{value:"keydown",paraId:14,tocIndex:1},{value:"Activated when user presses down a button on keyboard.",paraId:14,tocIndex:1},{value:"keyup",paraId:14,tocIndex:1},{value:"Activated when user releases a button on keyboard.",paraId:14,tocIndex:1},{value:"wheel",paraId:14,tocIndex:1},{value:"Activated when user scroll the wheel.",paraId:14,tocIndex:1},{value:"touchstart",paraId:14,tocIndex:1},{value:"Activated when a finger touches the screen. If there are fingers on the screen already, it will be activated too.",paraId:14,tocIndex:1},{value:"touchmove",paraId:14,tocIndex:1},{value:"Activated during the processes of finger moving on the screen. Call ",paraId:14,tocIndex:1},{value:"preventDefault()",paraId:14,tocIndex:1},{value:" to prevent scrolling.",paraId:14,tocIndex:1},{value:"touchend",paraId:14,tocIndex:1},{value:"Activated when a finger leaves the screen.",paraId:14,tocIndex:1},{value:"Event Name",paraId:16,tocIndex:2},{value:"Description",paraId:16,tocIndex:2},{value:"node:click",paraId:16,tocIndex:2},{value:"Activated when user clicks the ",paraId:16,tocIndex:2},{value:"left button",paraId:16,tocIndex:2},{value:" of the mouse on the node.",paraId:16,tocIndex:2},{value:"node:dblclick",paraId:16,tocIndex:2},{value:"Activated when user double clicks the ",paraId:16,tocIndex:2},{value:"left button",paraId:16,tocIndex:2},{value:" of the mouse on the node.",paraId:16,tocIndex:2},{value:"node:mouseenter",paraId:16,tocIndex:2},{value:"Activated when the mouse enters the node.",paraId:16,tocIndex:2},{value:"node:mousemove",paraId:16,tocIndex:2},{value:"Activated while the mouse is moving inside the node. It cannot be activated by keyboard.",paraId:16,tocIndex:2},{value:"node:mouseout",paraId:16,tocIndex:2},{value:"Activated while the mouse moves out of the node.",paraId:16,tocIndex:2},{value:"node:mouseover",paraId:16,tocIndex:2},{value:"Activated when the mouse moves over the node.",paraId:16,tocIndex:2},{value:"node:mouseleave",paraId:16,tocIndex:2},{value:"Activated when the mouse leaves the node.",paraId:16,tocIndex:2},{value:"node:mousedown",paraId:16,tocIndex:2},{value:"Activated when the left or right button is clicked down on the node. It cannot be activated by keyboard.",paraId:16,tocIndex:2},{value:"node:mouseup",paraId:16,tocIndex:2},{value:"Activated when the left or right button is released on the node. It cannot be activated by keyboard.",paraId:16,tocIndex:2},{value:"node:dragstart",paraId:16,tocIndex:2},{value:"Activated when user begins to drag the node. This event is applied on the dragged node.",paraId:16,tocIndex:2},{value:"node:drag",paraId:16,tocIndex:2},{value:"Activated during the dragging process on the node. This event is applied on the dragged node.",paraId:16,tocIndex:2},{value:"node:dragend",paraId:16,tocIndex:2},{value:"Activated when user stops dragging on the node. This event is applied on the dragged node.",paraId:16,tocIndex:2},{value:"node:dragenter",paraId:16,tocIndex:2},{value:"Activated when user drags an item into a target node item. This event is applied on the target node item.",paraId:16,tocIndex:2},{value:"node:dragleave",paraId:16,tocIndex:2},{value:"Activated when user drags an item out of a target node item. This event is applied on the target node item.",paraId:16,tocIndex:2},{value:"node:dragover",paraId:16,tocIndex:2},{value:"Activated when user drags an item over a target node item. This event is applied on the target node item",paraId:16,tocIndex:2},{value:"node:drop",paraId:16,tocIndex:2},{value:"Activated when user drops an item on a target item. This event is applied on the target item.",paraId:16,tocIndex:2},{value:"node:touchstart",paraId:16,tocIndex:2},{value:"On touch screen, this event is activated when user begin to touch the node",paraId:16,tocIndex:2},{value:"node:touchmove",paraId:16,tocIndex:2},{value:"On touch screen, this event is activated when user is touching the node",paraId:16,tocIndex:2},{value:"node:touchend",paraId:16,tocIndex:2},{value:"On touch screen, this event is activated when user finish touching the node",paraId:16,tocIndex:2},{value:"node:contextmenu",paraId:16,tocIndex:2},{value:"Open the context menu when user clicks the right button of mouse on the node. ",paraId:16,tocIndex:2},{value:"Demo",paraId:17,tocIndex:2},{value:".",paraId:16,tocIndex:2},{value:"Event Name",paraId:18,tocIndex:3},{value:"Description",paraId:18,tocIndex:3},{value:"edge:click",paraId:18,tocIndex:3},{value:"Activated when user clicks the ",paraId:18,tocIndex:3},{value:"left button",paraId:18,tocIndex:3},{value:" of the mouse on the edge.",paraId:18,tocIndex:3},{value:"edge:dblclick",paraId:18,tocIndex:3},{value:"Activated when user double clicks the ",paraId:18,tocIndex:3},{value:"left button",paraId:18,tocIndex:3},{value:" of the mouse on the edge.",paraId:18,tocIndex:3},{value:"edge:mouseenter",paraId:18,tocIndex:3},{value:"Activated when the mouse enters the edge.",paraId:18,tocIndex:3},{value:"edge:mousemove",paraId:18,tocIndex:3},{value:"Activated while the mouse is moving inside the edge. It cannot be activated by keyboard.",paraId:18,tocIndex:3},{value:"edge:mouseout",paraId:18,tocIndex:3},{value:"Activated while the mouse moves out of the edge.",paraId:18,tocIndex:3},{value:"edge:mouseover",paraId:18,tocIndex:3},{value:"Activated when the mouse moves over the edge.",paraId:18,tocIndex:3},{value:"edge:mouseleave",paraId:18,tocIndex:3},{value:"Activated when the mouse leaves the edge.",paraId:18,tocIndex:3},{value:"edge:mousedown",paraId:18,tocIndex:3},{value:"Activated when the left or right button is clicked down on the edge. It cannot be activated by keyboard.",paraId:18,tocIndex:3},{value:"edge:mouseup",paraId:18,tocIndex:3},{value:"Activated when the left or right button is released on the edge. It cannot be activated by keyboard.",paraId:18,tocIndex:3},{value:"edge:dragenter",paraId:18,tocIndex:3},{value:"Activated when user drags an item into a target edge item. This event is applied on the target edge item.",paraId:18,tocIndex:3},{value:"edge:dragleave",paraId:18,tocIndex:3},{value:"Activated when user drags an item out of a target edge item. This event is applied on the target edge item.",paraId:18,tocIndex:3},{value:"edge:dragover",paraId:18,tocIndex:3},{value:"Activated when user drags an item over a target edge item. This event is applied on the target edge item",paraId:18,tocIndex:3},{value:"edge:drop",paraId:18,tocIndex:3},{value:"Activated when user drops an item on a target edge item. This event is applied on the target edge item.",paraId:18,tocIndex:3},{value:"edge:contextmenu",paraId:18,tocIndex:3},{value:"Open the context menu when user clicks the right button of mouse on the edge. ",paraId:18,tocIndex:3},{value:"Demo",paraId:19,tocIndex:3},{value:".",paraId:18,tocIndex:3},{value:"Combo inherit all the interaction events of Node.",paraId:20,tocIndex:4},{value:"Event Name",paraId:21,tocIndex:5},{value:"Description",paraId:21,tocIndex:5},{value:"canvas:click",paraId:21,tocIndex:5},{value:"Activated when user clicks the ",paraId:21,tocIndex:5},{value:"left button",paraId:21,tocIndex:5},{value:" of the mouse on the canvas.",paraId:21,tocIndex:5},{value:"canvas:dblclick",paraId:21,tocIndex:5},{value:"Activated when user double clicks the ",paraId:21,tocIndex:5},{value:"left button",paraId:21,tocIndex:5},{value:" of the mouse on the canvas.",paraId:21,tocIndex:5},{value:"canvas:mouseenter",paraId:21,tocIndex:5},{value:"Activated when the mouse enters the canvas.",paraId:21,tocIndex:5},{value:"canvas:mousemove",paraId:21,tocIndex:5},{value:"Activated while the mouse is moving inside the canvas. It cannot be activated by keyboard.",paraId:21,tocIndex:5},{value:"canvas:mouseout",paraId:21,tocIndex:5},{value:"Activated while the mouse moves out of the canvas.",paraId:21,tocIndex:5},{value:"canvas:mouseover",paraId:21,tocIndex:5},{value:"Activated when the mouse moves over the canvas.",paraId:21,tocIndex:5},{value:"canvas:mouseleave",paraId:21,tocIndex:5},{value:"Activated when the mouse leaves the canvas.",paraId:21,tocIndex:5},{value:"canvas:mousedown",paraId:21,tocIndex:5},{value:"Activated when the left or right button is clicked down on the canvas. It cannot be activated by keyboard.",paraId:21,tocIndex:5},{value:"canvas:mouseup",paraId:21,tocIndex:5},{value:"Activated when the left or right button is released on the canvas. It cannot be activated by keyboard.",paraId:21,tocIndex:5},{value:"canvas:contextmenu",paraId:21,tocIndex:5},{value:"Open the context menu when user clicks the right button of mouse on the canvas. ",paraId:21,tocIndex:5},{value:"Demo",paraId:22,tocIndex:5},{value:".",paraId:21,tocIndex:5},{value:"canvas:dragstart",paraId:21,tocIndex:5},{value:"Activated when user begins to drag the canvas. This event is applied on the dragged canvas.",paraId:21,tocIndex:5},{value:"canvas:drag",paraId:21,tocIndex:5},{value:"Activated during the dragging process on the canvas. This event is applied on the dragged canvas.",paraId:21,tocIndex:5},{value:"canvas:dragend",paraId:21,tocIndex:5},{value:"Activated when user stops dragging on the canvas. This event is applied on the dragged canvas.",paraId:21,tocIndex:5},{value:"canvas:dragenter",paraId:21,tocIndex:5},{value:"Activated when user drags the canvas into a target item. This event is applied on the target item.",paraId:21,tocIndex:5},{value:"canvas:dragleave",paraId:21,tocIndex:5},{value:"Activated when user drags the canvas out of a target item. This event is applied on the target item.",paraId:21,tocIndex:5},{value:"canvas:drop",paraId:21,tocIndex:5},{value:"Activated when user drags and drops an item on the canvas.",paraId:21,tocIndex:5},{value:"canvas:touchstart",paraId:21,tocIndex:5},{value:"On touch screen, this event is activated when user begin to touch the canvas",paraId:21,tocIndex:5},{value:"canvas:touchmove",paraId:21,tocIndex:5},{value:"On touch screen, this event is activated when user is touching the canvas",paraId:21,tocIndex:5},{value:"canvas:touchend",paraId:21,tocIndex:5},{value:"On touch screen, this event is activated when user finish touching the canvas",paraId:21,tocIndex:5},{value:"Before and after being called some functions, G6 exports the timing events. These timing events can be listened by the following way:",paraId:23,tocIndex:6},{value:"graph.on(timingEventName, evt => {\n  // some operations\n})\n",paraId:24,tocIndex:6},{value:"timingEventName",paraId:25,tocIndex:6},{value:" is shown below:",paraId:25,tocIndex:6},{value:"Event Name",paraId:26,tocIndex:6},{value:"Description",paraId:26,tocIndex:6},{value:"beforerender",paraId:26,tocIndex:6},{value:"Emitted before ",paraId:26,tocIndex:6},{value:"graph.render",paraId:26,tocIndex:6},{value:" / ",paraId:26,tocIndex:6},{value:"graph.read",paraId:26,tocIndex:6},{value:" being called.",paraId:26,tocIndex:6},{value:"afterrender",paraId:26,tocIndex:6},{value:"Emitted after ",paraId:26,tocIndex:6},{value:"graph.render",paraId:26,tocIndex:6},{value:" / ",paraId:26,tocIndex:6},{value:"graph.read",paraId:26,tocIndex:6},{value:" being called.",paraId:26,tocIndex:6},{value:"beforechangedata",paraId:26,tocIndex:6},{value:"Emitted before ",paraId:26,tocIndex:6},{value:"graph.changeData",paraId:26,tocIndex:6},{value:" being called.",paraId:26,tocIndex:6},{value:"afterchangedata",paraId:26,tocIndex:6},{value:"Emitted after ",paraId:26,tocIndex:6},{value:"graph.changeData",paraId:26,tocIndex:6},{value:" being called.",paraId:26,tocIndex:6},{value:"beforeadditem",paraId:26,tocIndex:6},{value:"Emitted before ",paraId:26,tocIndex:6},{value:"graph.add",paraId:26,tocIndex:6},{value:" / ",paraId:26,tocIndex:6},{value:"graph.addItem",paraId:26,tocIndex:6},{value:" being called.",paraId:26,tocIndex:6},{value:"afteradditem",paraId:26,tocIndex:6},{value:"Emitted after ",paraId:26,tocIndex:6},{value:"graph.add",paraId:26,tocIndex:6},{value:" / ",paraId:26,tocIndex:6},{value:"graph.addItem",paraId:26,tocIndex:6},{value:" being called.",paraId:26,tocIndex:6},{value:"beforeremoveitem",paraId:26,tocIndex:6},{value:"Emitted before ",paraId:26,tocIndex:6},{value:"graph.remove",paraId:26,tocIndex:6},{value:" / ",paraId:26,tocIndex:6},{value:"graph.removeItem",paraId:26,tocIndex:6},{value:" being called.",paraId:26,tocIndex:6},{value:"afterremoveitem",paraId:26,tocIndex:6},{value:"Emitted after ",paraId:26,tocIndex:6},{value:"graph.remove",paraId:26,tocIndex:6},{value:" / ",paraId:26,tocIndex:6},{value:"graph.removeItem",paraId:26,tocIndex:6},{value:" being called.",paraId:26,tocIndex:6},{value:"beforeupdateitem",paraId:26,tocIndex:6},{value:"Emitted before ",paraId:26,tocIndex:6},{value:"graph.update",paraId:26,tocIndex:6},{value:" / ",paraId:26,tocIndex:6},{value:"graph.updateItem",paraId:26,tocIndex:6},{value:" being called.",paraId:26,tocIndex:6},{value:"afterupdateitem",paraId:26,tocIndex:6},{value:"Emitted after ",paraId:26,tocIndex:6},{value:"graph.update",paraId:26,tocIndex:6},{value:" / ",paraId:26,tocIndex:6},{value:"graph.updateItem",paraId:26,tocIndex:6},{value:" being called.",paraId:26,tocIndex:6},{value:"beforeitemvisibilitychange",paraId:26,tocIndex:6},{value:"Emitted before ",paraId:26,tocIndex:6},{value:"graph.showItem",paraId:26,tocIndex:6},{value:" / ",paraId:26,tocIndex:6},{value:"graph.hideItem",paraId:26,tocIndex:6},{value:" being called.",paraId:26,tocIndex:6},{value:"afteritemvisibilitychange",paraId:26,tocIndex:6},{value:"Emitted after ",paraId:26,tocIndex:6},{value:"graph.showItem",paraId:26,tocIndex:6},{value:" / ",paraId:26,tocIndex:6},{value:"graph.hideItem",paraId:26,tocIndex:6},{value:" being called.",paraId:26,tocIndex:6},{value:"beforeitemstatechange",paraId:26,tocIndex:6},{value:"Emitted before ",paraId:26,tocIndex:6},{value:"graph.setItemState",paraId:26,tocIndex:6},{value:" being called.",paraId:26,tocIndex:6},{value:"afteritemstatechange",paraId:26,tocIndex:6},{value:"Emitted after ",paraId:26,tocIndex:6},{value:"graph.setItemState",paraId:26,tocIndex:6},{value:" being called.",paraId:26,tocIndex:6},{value:"beforeitemrefresh",paraId:26,tocIndex:6},{value:"Emitted before ",paraId:26,tocIndex:6},{value:"graph.refreshItem",paraId:26,tocIndex:6},{value:" being called.",paraId:26,tocIndex:6},{value:"afteritemrefresh",paraId:26,tocIndex:6},{value:"Emitted after ",paraId:26,tocIndex:6},{value:"graph.refreshItem",paraId:26,tocIndex:6},{value:" being called.",paraId:26,tocIndex:6},{value:"beforeitemstatesclear",paraId:26,tocIndex:6},{value:"Emitted before ",paraId:26,tocIndex:6},{value:"graph.clearItemStates",paraId:26,tocIndex:6},{value:" being called.",paraId:26,tocIndex:6},{value:"afteritemstatesclear",paraId:26,tocIndex:6},{value:"Emitted after ",paraId:26,tocIndex:6},{value:"graph.clearItemStates",paraId:26,tocIndex:6},{value:" being called.",paraId:26,tocIndex:6},{value:"beforemodechange",paraId:26,tocIndex:6},{value:"Emitted before ",paraId:26,tocIndex:6},{value:"graph.setMode",paraId:26,tocIndex:6},{value:" / ",paraId:26,tocIndex:6},{value:"graph.addBehaviors",paraId:26,tocIndex:6},{value:" / ",paraId:26,tocIndex:6},{value:"graph.removeBehaviors",paraId:26,tocIndex:6},{value:" being called.",paraId:26,tocIndex:6},{value:"aftermodechange",paraId:26,tocIndex:6},{value:"Emitted after ",paraId:26,tocIndex:6},{value:"graph.setMode",paraId:26,tocIndex:6},{value:" / ",paraId:26,tocIndex:6},{value:"graph.addBehaviors",paraId:26,tocIndex:6},{value:" / ",paraId:26,tocIndex:6},{value:"graph.removeBehaviors",paraId:26,tocIndex:6},{value:" being called.",paraId:26,tocIndex:6},{value:"beforelayout",paraId:26,tocIndex:6},{value:"Emitted before graph layout. ",paraId:26,tocIndex:6},{value:"graph.render",paraId:26,tocIndex:6},{value:" will layout the graph, so ",paraId:26,tocIndex:6},{value:"graph.render",paraId:26,tocIndex:6},{value:" will activate this event as well.",paraId:26,tocIndex:6},{value:"afterlayout",paraId:26,tocIndex:6},{value:"Emitted after graph layout being done. ",paraId:26,tocIndex:6},{value:"graph.render",paraId:26,tocIndex:6},{value:" will layout the graph, so ",paraId:26,tocIndex:6},{value:"graph.render",paraId:26,tocIndex:6},{value:" will activate this event as well.",paraId:26,tocIndex:6},{value:"beforegraphrefreshposition",paraId:26,tocIndex:6},{value:"Emitted before ",paraId:26,tocIndex:6},{value:"graph.refreshPositions",paraId:26,tocIndex:6},{value:" beging called",paraId:26,tocIndex:6},{value:"aftergraphrefreshposition",paraId:26,tocIndex:6},{value:"Emitted after ",paraId:26,tocIndex:6},{value:"graph.refreshPositions",paraId:26,tocIndex:6},{value:" beging called",paraId:26,tocIndex:6},{value:"beforegraphrefresh",paraId:26,tocIndex:6},{value:"Emitted before ",paraId:26,tocIndex:6},{value:"graph.refresh",paraId:26,tocIndex:6},{value:" beging called",paraId:26,tocIndex:6},{value:"aftergraphrefresh",paraId:26,tocIndex:6},{value:"Emitted after ",paraId:26,tocIndex:6},{value:"graph.refresh",paraId:26,tocIndex:6},{value:" beging called",paraId:26,tocIndex:6},{value:"beforeanimate",paraId:26,tocIndex:6},{value:"Emitted before global animation",paraId:26,tocIndex:6},{value:"afteranimate",paraId:26,tocIndex:6},{value:"Emitted after global animation",paraId:26,tocIndex:6},{value:"beforecreateedge",paraId:26,tocIndex:6},{value:"Emitted before an edge is created by the built-in behavior ",paraId:26,tocIndex:6},{value:"create-edge",paraId:26,tocIndex:6},{value:"aftercreateedge",paraId:26,tocIndex:6},{value:"Emitted after an edge is created by the built-in behavior ",paraId:26,tocIndex:6},{value:"create-edge",paraId:26,tocIndex:6},{value:"beforecollapseexpandcombo",paraId:26,tocIndex:6},{value:"Emitted before an combo is collapsed or expanded, the parameter ",paraId:26,tocIndex:6},{value:"action",paraId:26,tocIndex:6},{value:" indicates collapse or expand",paraId:26,tocIndex:6},{value:"aftercollapseexpandcombo",paraId:26,tocIndex:6},{value:"Emitted after an combo is collapsed or expanded, the parameter ",paraId:26,tocIndex:6},{value:"action",paraId:26,tocIndex:6},{value:" indicates collapse or expand",paraId:26,tocIndex:6},{value:"graphstatechange",paraId:26,tocIndex:6},{value:"Emitted after ",paraId:26,tocIndex:6},{value:"graph.updateItemState",paraId:26,tocIndex:6},{value:" being called.",paraId:26,tocIndex:6},{value:"afteractivaterelations",paraId:26,tocIndex:6},{value:"Emitted while activating a node by ",paraId:26,tocIndex:6},{value:"'activate-relations'",paraId:26,tocIndex:6},{value:" Behavior which is assigned to the the instance of Graph.",paraId:26,tocIndex:6},{value:"nodeselectchange",paraId:26,tocIndex:6},{value:"Emitted while the selected items are changed by ",paraId:26,tocIndex:6},{value:"'brush-select'",paraId:26,tocIndex:6},{value:", ",paraId:26,tocIndex:6},{value:"'click-select'",paraId:26,tocIndex:6},{value:" or ",paraId:26,tocIndex:6},{value:"'lasso-select'",paraId:26,tocIndex:6},{value:" Behavior which is assigned to the instance of Graph.",paraId:26,tocIndex:6},{value:"itemcollapsed",paraId:26,tocIndex:6},{value:"Emitted while a node is clicked to collapse or expand by ",paraId:26,tocIndex:6},{value:"'collapse-expand'",paraId:26,tocIndex:6},{value:" Behavior which is assigned to the instance of TreeGraph.",paraId:26,tocIndex:6},{value:"tooltipchange",paraId:26,tocIndex:6},{value:"Emitted after the show/hide state is changed by ",paraId:26,tocIndex:6},{value:"'tooltip'",paraId:26,tocIndex:6},{value:" or ",paraId:26,tocIndex:6},{value:"'edge-tooltip'",paraId:26,tocIndex:6},{value:" Behavior which is assigned to the instance of Graph.",paraId:26,tocIndex:6},{value:"wheelzoom",paraId:26,tocIndex:6},{value:"Emitted after the canvas is zoomed by ",paraId:26,tocIndex:6},{value:"'zoom-canvas'",paraId:26,tocIndex:6},{value:" Behavior which is assigned to the instance of Graph.",paraId:26,tocIndex:6},{value:"viewportchange",paraId:26,tocIndex:6},{value:"Emitted after the canvas is translated by ",paraId:26,tocIndex:6},{value:"graph.moveTo",paraId:26,tocIndex:6},{value:", ",paraId:26,tocIndex:6},{value:"graph.translate",paraId:26,tocIndex:6},{value:", and ",paraId:26,tocIndex:6},{value:"graph.zoom",paraId:26,tocIndex:6},{value:".",paraId:26,tocIndex:6},{value:"dragnodeend",paraId:26,tocIndex:6},{value:"Emitted while drag node end by ",paraId:26,tocIndex:6},{value:"'drag-node'",paraId:26,tocIndex:6},{value:" Behavior.",paraId:26,tocIndex:6},{value:"stackchange",paraId:26,tocIndex:6},{value:"Emitted while the redo or undo stacks are changed.",paraId:26,tocIndex:6},{value:"Timing Events in the Plugins",paraId:27,tocIndex:6},{value:"TimeBar plugin:",paraId:28,tocIndex:6},{value:"Event Name",paraId:29,tocIndex:6},{value:"Description",paraId:29,tocIndex:6},{value:"valuechange",paraId:29,tocIndex:6},{value:"Emitted when the value range of the timebar is chaged.",paraId:29,tocIndex:6},{value:"timebarstartplay",paraId:29,tocIndex:6},{value:"Emitted when the timeline starts to play.",paraId:29,tocIndex:6},{value:"timebarendplay",paraId:29,tocIndex:6},{value:"Emitted when the timeline ends playing.",paraId:29,tocIndex:6},{value:"Tooltip:",paraId:30,tocIndex:6},{value:"Event Name",paraId:31,tocIndex:6},{value:"Description",paraId:31,tocIndex:6},{value:"tooltipchange",paraId:31,tocIndex:6},{value:"Emitted when the Tooltip is changed.",paraId:31,tocIndex:6},{value:"The callback paramters are different from custom events.",paraId:32,tocIndex:7},{value:"No parameters.",paraId:33,tocIndex:8},{value:"No parameters.",paraId:34,tocIndex:9},{value:"Name",paraId:35,tocIndex:10},{value:"Type",paraId:35,tocIndex:10},{value:"Description",paraId:35,tocIndex:10},{value:"type",paraId:35,tocIndex:10},{value:"String",paraId:35,tocIndex:10},{value:"The type of the item to be added.",paraId:35,tocIndex:10},{value:"model",paraId:35,tocIndex:10},{value:"Object",paraId:35,tocIndex:10},{value:"The data model of the item to be added.",paraId:35,tocIndex:10},{value:"Name",paraId:36,tocIndex:11},{value:"Type",paraId:36,tocIndex:11},{value:"Description",paraId:36,tocIndex:11},{value:"item",paraId:36,tocIndex:11},{value:"Item",paraId:36,tocIndex:11},{value:"The added item.",paraId:36,tocIndex:11},{value:"model",paraId:36,tocIndex:11},{value:"Object",paraId:36,tocIndex:11},{value:"The data model of the added item.",paraId:36,tocIndex:11},{value:"Name",paraId:37,tocIndex:12},{value:"Type",paraId:37,tocIndex:12},{value:"Description",paraId:37,tocIndex:12},{value:"item",paraId:37,tocIndex:12},{value:"Item",paraId:37,tocIndex:12},{value:"The removed item data model.",paraId:37,tocIndex:12},{value:"type",paraId:37,tocIndex:12},{value:"'node' / 'edge' / 'combo'",paraId:37,tocIndex:12},{value:"The type of removed item.",paraId:37,tocIndex:12},{value:"Name",paraId:38,tocIndex:13},{value:"Type",paraId:38,tocIndex:13},{value:"Description",paraId:38,tocIndex:13},{value:"item",paraId:38,tocIndex:13},{value:"Item",paraId:38,tocIndex:13},{value:"The updated item.",paraId:38,tocIndex:13},{value:"model",paraId:38,tocIndex:13},{value:"Object",paraId:38,tocIndex:13},{value:"The data model of the item to be updated.",paraId:38,tocIndex:13},{value:"Name",paraId:39,tocIndex:14},{value:"Type",paraId:39,tocIndex:14},{value:"Description",paraId:39,tocIndex:14},{value:"item",paraId:39,tocIndex:14},{value:"Item",paraId:39,tocIndex:14},{value:"The manipulated item.",paraId:39,tocIndex:14},{value:"visible",paraId:39,tocIndex:14},{value:"Boolean",paraId:39,tocIndex:14},{value:"Whether the item is visible. ",paraId:39,tocIndex:14},{value:"true",paraId:39,tocIndex:14},{value:" for visible, ",paraId:39,tocIndex:14},{value:"false",paraId:39,tocIndex:14},{value:" for invisible.",paraId:39,tocIndex:14},{value:"Name",paraId:40,tocIndex:15},{value:"Type",paraId:40,tocIndex:15},{value:"Description",paraId:40,tocIndex:15},{value:"item",paraId:40,tocIndex:15},{value:"Item",paraId:40,tocIndex:15},{value:"The manipulated item.",paraId:40,tocIndex:15},{value:"state",paraId:40,tocIndex:15},{value:"String",paraId:40,tocIndex:15},{value:"The state name.",paraId:40,tocIndex:15},{value:"enabled",paraId:40,tocIndex:15},{value:"Boolean",paraId:40,tocIndex:15},{value:"Wheter the state is enabled. ",paraId:40,tocIndex:15},{value:"true",paraId:40,tocIndex:15},{value:" for enabled, ",paraId:40,tocIndex:15},{value:"false",paraId:40,tocIndex:15},{value:" for unabled.",paraId:40,tocIndex:15},{value:"Name",paraId:41,tocIndex:16},{value:"Type",paraId:41,tocIndex:16},{value:"Description",paraId:41,tocIndex:16},{value:"item",paraId:41,tocIndex:16},{value:"Item",paraId:41,tocIndex:16},{value:"The manipulated item.",paraId:41,tocIndex:16},{value:"states",paraId:41,tocIndex:16},{value:"Array / String",paraId:41,tocIndex:16},{value:"The states to be cleared.",paraId:41,tocIndex:16},{value:"Name",paraId:42,tocIndex:17},{value:"Type",paraId:42,tocIndex:17},{value:"Description",paraId:42,tocIndex:17},{value:"mode",paraId:42,tocIndex:17},{value:"String",paraId:42,tocIndex:17},{value:"The name of current mode.",paraId:42,tocIndex:17},{value:"Name",paraId:43,tocIndex:18},{value:"Type",paraId:43,tocIndex:18},{value:"Description",paraId:43,tocIndex:18},{value:"item",paraId:43,tocIndex:18},{value:"Item",paraId:43,tocIndex:18},{value:"The manipulated item.",paraId:43,tocIndex:18},{value:"No parameters.",paraId:44,tocIndex:19},{value:"Name",paraId:45,tocIndex:20},{value:"Type",paraId:45,tocIndex:20},{value:"Description",paraId:45,tocIndex:20},{value:"item",paraId:45,tocIndex:20},{value:"Item",paraId:45,tocIndex:20},{value:"The manipulated item.",paraId:45,tocIndex:20},{value:"action",paraId:45,tocIndex:20},{value:"String",paraId:45,tocIndex:20},{value:"The name of the manipulation.",paraId:45,tocIndex:20},{value:"Name",paraId:46,tocIndex:21},{value:"Type",paraId:46,tocIndex:21},{value:"Description",paraId:46,tocIndex:21},{value:"states",paraId:46,tocIndex:21},{value:"Object",paraId:46,tocIndex:21},{value:"The items with different states, e.g. ",paraId:46,tocIndex:21},{value:"{ hover: [Node, Node], selected: [ Node ] }",paraId:46,tocIndex:21},{value:"Name",paraId:47,tocIndex:22},{value:"Type",paraId:47,tocIndex:22},{value:"Description",paraId:47,tocIndex:22},{value:"item",paraId:47,tocIndex:22},{value:"Item",paraId:47,tocIndex:22},{value:"The manipulated item currently",paraId:47,tocIndex:22},{value:"action",paraId:47,tocIndex:22},{value:"String",paraId:47,tocIndex:22},{value:"The current action name",paraId:47,tocIndex:22},{value:"Name",paraId:48,tocIndex:23},{value:"Type",paraId:48,tocIndex:23},{value:"Description",paraId:48,tocIndex:23},{value:"target",paraId:48,tocIndex:23},{value:"Item",paraId:48,tocIndex:23},{value:"The manipulated item.",paraId:48,tocIndex:23},{value:"selectedItems",paraId:48,tocIndex:23},{value:"Object",paraId:48,tocIndex:23},{value:"All selected items, formed as ",paraId:48,tocIndex:23},{value:"{ nodes: [...], edges: [...]}",paraId:48,tocIndex:23},{value:".",paraId:48,tocIndex:23},{value:"beforecreateedge",paraId:49,tocIndex:24},{value:" has no parameters. The parameters of ",paraId:49,tocIndex:24},{value:"aftercreateedge",paraId:49,tocIndex:24},{value:" are:",paraId:49,tocIndex:24},{value:"Name",paraId:50,tocIndex:24},{value:"Type",paraId:50,tocIndex:24},{value:"Description",paraId:50,tocIndex:24},{value:"edge",paraId:50,tocIndex:24},{value:"Item",paraId:50,tocIndex:24},{value:"The created edge",paraId:50,tocIndex:24},{value:"Name",paraId:51,tocIndex:25},{value:"Type",paraId:51,tocIndex:25},{value:"Description",paraId:51,tocIndex:25},{value:"action",paraId:51,tocIndex:25},{value:"string",paraId:51,tocIndex:25},{value:"The action, ",paraId:51,tocIndex:25},{value:"'collapse'",paraId:51,tocIndex:25},{value:" or ",paraId:51,tocIndex:25},{value:"'expand'",paraId:51,tocIndex:25},{value:"combo",paraId:51,tocIndex:25},{value:"Item",paraId:51,tocIndex:25},{value:"The manipulated combo",paraId:51,tocIndex:25},{value:"Name",paraId:52,tocIndex:26},{value:"Type",paraId:52,tocIndex:26},{value:"Description",paraId:52,tocIndex:26},{value:"item",paraId:52,tocIndex:26},{value:"Item",paraId:52,tocIndex:26},{value:"The manipulated item.",paraId:52,tocIndex:26},{value:"collapsed",paraId:52,tocIndex:26},{value:"Boolean",paraId:52,tocIndex:26},{value:"The collapsed state of the manipulated item after this operation.",paraId:52,tocIndex:26},{value:"Name",paraId:53,tocIndex:27},{value:"Type",paraId:53,tocIndex:27},{value:"Description",paraId:53,tocIndex:27},{value:"item",paraId:53,tocIndex:27},{value:"Item",paraId:53,tocIndex:27},{value:"The manipulated item.",paraId:53,tocIndex:27},{value:"action",paraId:53,tocIndex:27},{value:"String",paraId:53,tocIndex:27},{value:"The ",paraId:53,tocIndex:27},{value:"'show'",paraId:53,tocIndex:27},{value:" or ",paraId:53,tocIndex:27},{value:"'hide'",paraId:53,tocIndex:27},{value:" state of this tooltip.",paraId:53,tocIndex:27},{value:"Name",paraId:54,tocIndex:28},{value:"Type",paraId:54,tocIndex:28},{value:"Description",paraId:54,tocIndex:28},{value:"deltaX",paraId:54,tocIndex:28},{value:"Number",paraId:54,tocIndex:28},{value:"The x-axis direction of the wheel scroll, value is ",paraId:54,tocIndex:28},{value:"1",paraId:54,tocIndex:28},{value:", ",paraId:54,tocIndex:28},{value:"0",paraId:54,tocIndex:28},{value:", or ",paraId:54,tocIndex:28},{value:"-1",paraId:54,tocIndex:28},{value:", where ",paraId:54,tocIndex:28},{value:"0",paraId:54,tocIndex:28},{value:" means no scrolling on this direction.",paraId:54,tocIndex:28},{value:"deltaY",paraId:54,tocIndex:28},{value:"Number",paraId:54,tocIndex:28},{value:"The y-axis direction of the wheel scroll, value is ",paraId:54,tocIndex:28},{value:"1",paraId:54,tocIndex:28},{value:", ",paraId:54,tocIndex:28},{value:"0",paraId:54,tocIndex:28},{value:", or ",paraId:54,tocIndex:28},{value:"-1",paraId:54,tocIndex:28},{value:", where ",paraId:54,tocIndex:28},{value:"0",paraId:54,tocIndex:28},{value:" means no scrolling on this direction.",paraId:54,tocIndex:28},{value:"... Other parameters of wheel event.",paraId:54,tocIndex:28},{value:"Name",paraId:55,tocIndex:29},{value:"Type",paraId:55,tocIndex:29},{value:"Description",paraId:55,tocIndex:29},{value:"action",paraId:55,tocIndex:29},{value:"'translate' / 'move' / 'zoom'",paraId:55,tocIndex:29},{value:"The action of view port changing.",paraId:55,tocIndex:29},{value:"matrix",paraId:55,tocIndex:29},{value:"Array",paraId:55,tocIndex:29},{value:"The matrix of the graph after the view port changed.",paraId:55,tocIndex:29},{value:"Name",paraId:56,tocIndex:30},{value:"Type",paraId:56,tocIndex:30},{value:"Description",paraId:56,tocIndex:30},{value:"items",paraId:56,tocIndex:30},{value:"Item[]",paraId:56,tocIndex:30},{value:"The manipulated items.",paraId:56,tocIndex:30},{value:"targetItem",paraId:56,tocIndex:30},{value:"null/Node/Combo",paraId:56,tocIndex:30},{value:"The position where the node is placed after dragging, the default is null, that is, placed on the canvas.",paraId:56,tocIndex:30},{value:"Name",paraId:57,tocIndex:31},{value:"Type",paraId:57,tocIndex:31},{value:"Description",paraId:57,tocIndex:31},{value:"redoStack",paraId:57,tocIndex:31},{value:"Object[]",paraId:57,tocIndex:31},{value:"The redo stack.",paraId:57,tocIndex:31},{value:"undoStack",paraId:57,tocIndex:31},{value:"Object[]",paraId:57,tocIndex:31},{value:"The undo stack.",paraId:57,tocIndex:31},{value:"action",paraId:57,tocIndex:31},{value:"String",paraId:57,tocIndex:31},{value:"The type of operation.",paraId:57,tocIndex:31},{value:"stackType",paraId:57,tocIndex:31},{value:"String",paraId:57,tocIndex:31},{value:"The type of stack.",paraId:57,tocIndex:31},{value:"Name",paraId:58,tocIndex:32},{value:"Type",paraId:58,tocIndex:32},{value:"Description",paraId:58,tocIndex:32},{value:"value",paraId:58,tocIndex:32},{value:"number[]",paraId:58,tocIndex:32},{value:"The current value range, ",paraId:58,tocIndex:32},{value:"value[0]",paraId:58,tocIndex:32},{value:" is the start and ",paraId:58,tocIndex:32},{value:"value[1]",paraId:58,tocIndex:32},{value:" is the end.",paraId:58,tocIndex:32},{value:"No parameters.",paraId:59,tocIndex:33},{value:"Name",paraId:60,tocIndex:34},{value:"Type",paraId:60,tocIndex:34},{value:"Description",paraId:60,tocIndex:34},{value:"item",paraId:60,tocIndex:34},{value:"Item",paraId:60,tocIndex:34},{value:"The item the tooltip related to (a node or an edge).",paraId:60,tocIndex:34},{value:"action",paraId:60,tocIndex:34},{value:"'show' / 'hide'",paraId:60,tocIndex:34},{value:"The current action.",paraId:60,tocIndex:34}]},30727:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Graph is the carrier of G6. All the operations about events, behaviors, items are mounted on the instance of Graph.",paraId:0},{value:"// highlight-start\nnew Graph(cfg: GraphOptions) => Graph\n// highlight-end\n\nconst graph = new G6.Graph({\n  container: '',\n  width: 500,\n  height: 500,\n  modes: {\n    default: ['drag-canvas'],\n  },\n  layout: {\n    type: 'radial',\n    unitRadius: 50,\n    center: [500, 300],\n  },\n});\n",paraId:1},{value:" ",paraId:2,tocIndex:0},{value:"string | HTMLElement",paraId:2,tocIndex:0},{value:" ",paraId:2,tocIndex:0},{value:"required",paraId:2,tocIndex:0},{value:" ",paraId:2,tocIndex:0},{value:"The DOM container of graph, it can be the id of a DOM element or the an HTML node.",paraId:3,tocIndex:0},{value:" ",paraId:4,tocIndex:1},{value:"Number",paraId:4,tocIndex:1},{value:" ",paraId:4,tocIndex:1},{value:"optional",paraId:4,tocIndex:1},{value:" ",paraId:4,tocIndex:1},{value:"The width of the canvas for graph with the unit 'px'.",paraId:5,tocIndex:1},{value:" ",paraId:6,tocIndex:2},{value:"Number",paraId:6,tocIndex:2},{value:" ",paraId:6,tocIndex:2},{value:"optional",paraId:6,tocIndex:2},{value:" ",paraId:6,tocIndex:2},{value:"The height of the canvas for graph with the unit 'px'.",paraId:7,tocIndex:2},{value:" ",paraId:8,tocIndex:3},{value:"Boolean",paraId:8,tocIndex:3},{value:" ",paraId:8,tocIndex:3},{value:"optional",paraId:8,tocIndex:3},{value:" ",paraId:8,tocIndex:3},{value:"default:",paraId:8,tocIndex:3},{value:" ",paraId:8,tocIndex:3},{value:"false",paraId:8,tocIndex:3},{value:"Whether to fit the canvas to the view port.",paraId:9,tocIndex:3},{value:" ",paraId:10,tocIndex:4},{value:"Array | Number",paraId:10,tocIndex:4},{value:" ",paraId:10,tocIndex:4},{value:"optional",paraId:10,tocIndex:4},{value:" ",paraId:10,tocIndex:4},{value:"default:",paraId:10,tocIndex:4},{value:" ",paraId:10,tocIndex:4},{value:"0",paraId:10,tocIndex:4},{value:"Takes effect only when ",paraId:11,tocIndex:4},{value:"fitView: true",paraId:11,tocIndex:4},{value:". It is the padding between canvas and the border of view port.",paraId:11,tocIndex:4},{value:"- It can be a value, e.g. ",paraId:11,tocIndex:4},{value:"fitViewPadding: 20",paraId:11,tocIndex:4},{value:", which means the padding to the top, left, right, bottom are the same.",paraId:11,tocIndex:4},{value:"- Or an array, e.g. ",paraId:11,tocIndex:4},{value:"fitViewPadding: [ 20, 40, 50, 20 ]",paraId:11,tocIndex:4},{value:", the four values in the array indicate the padding to the top, right, bottom, left respectively.",paraId:11,tocIndex:4},{value:" ",paraId:12,tocIndex:5},{value:"Boolean",paraId:12,tocIndex:5},{value:" ",paraId:12,tocIndex:5},{value:"optional",paraId:12,tocIndex:5},{value:" ",paraId:12,tocIndex:5},{value:"default:",paraId:12,tocIndex:5},{value:" ",paraId:12,tocIndex:5},{value:"false",paraId:12,tocIndex:5},{value:"Supported by v3.5.1.",paraId:13,tocIndex:5},{value:" Whether to translate the graph to align its center with the canvas. Its priority is lower than ",paraId:13,tocIndex:5},{value:"fitView",paraId:13,tocIndex:5},{value:".",paraId:13,tocIndex:5},{value:" ",paraId:14,tocIndex:6},{value:"Boolean",paraId:14,tocIndex:6},{value:" ",paraId:14,tocIndex:6},{value:"optional",paraId:14,tocIndex:6},{value:" ",paraId:14,tocIndex:6},{value:"default:",paraId:14,tocIndex:6},{value:" ",paraId:14,tocIndex:6},{value:"false",paraId:14,tocIndex:6},{value:"Whether to connect the edges to nodes' center.",paraId:15,tocIndex:6},{value:" ",paraId:16,tocIndex:7},{value:"Boolean",paraId:16,tocIndex:7},{value:" ",paraId:16,tocIndex:7},{value:"optional",paraId:16,tocIndex:7},{value:" ",paraId:16,tocIndex:7},{value:"default:",paraId:16,tocIndex:7},{value:" ",paraId:16,tocIndex:7},{value:"true",paraId:16,tocIndex:7},{value:"Whether to group the nodes and edges separately. When it is false, all the items (including nodes and edges) are in the same group, and the order/zindex of them are determined according to the order of their generation. When you are using Combo, ",paraId:17,tocIndex:7},{value:"MUST",paraId:17,tocIndex:7},{value:" set ",paraId:17,tocIndex:7},{value:"groupByTypes",paraId:17,tocIndex:7},{value:" to ",paraId:17,tocIndex:7},{value:"false",paraId:17,tocIndex:7},{value:".",paraId:17,tocIndex:7},{value:" ",paraId:18,tocIndex:8},{value:"Boolean",paraId:18,tocIndex:8},{value:" ",paraId:18,tocIndex:8},{value:"optional",paraId:18,tocIndex:8},{value:" ",paraId:18,tocIndex:8},{value:"default:",paraId:18,tocIndex:8},{value:" ",paraId:18,tocIndex:8},{value:"true",paraId:18,tocIndex:8},{value:"Whether to paint the graph automatically while item updated or view port changed. In order to enhance the performance, we recommend to turn off ",paraId:19,tocIndex:8},{value:"antoPaint",paraId:19,tocIndex:8},{value:" when you are doing bulk operation on nodes or edges. This can be refered to ",paraId:19,tocIndex:8},{value:"setAutoPaint()",paraId:20,tocIndex:8},{value:".",paraId:19,tocIndex:8},{value:" ",paraId:21,tocIndex:9},{value:"Object",paraId:21,tocIndex:9},{value:" ",paraId:21,tocIndex:9},{value:"optional",paraId:21,tocIndex:9},{value:" ",paraId:21,tocIndex:9},{value:"default:",paraId:21,tocIndex:9},{value:" ",paraId:21,tocIndex:9},{value:"{}",paraId:21,tocIndex:9},{value:"The interaction modes of this graph. Please refer to ",paraId:22,tocIndex:9},{value:"Interaction Mode",paraId:23,tocIndex:9},{value:" for detail.",paraId:22,tocIndex:9},{value:" ",paraId:24,tocIndex:10},{value:"Object",paraId:24,tocIndex:10},{value:" ",paraId:24,tocIndex:10},{value:"optional",paraId:24,tocIndex:10},{value:" ",paraId:24,tocIndex:10},{value:"default:",paraId:24,tocIndex:10},{value:" ",paraId:24,tocIndex:10},{value:"[]",paraId:24,tocIndex:10},{value:"The default modes of this graph. Please refer to ",paraId:25,tocIndex:10},{value:"Default Behavior",paraId:26,tocIndex:10},{value:" for detail.",paraId:25,tocIndex:10},{value:" ",paraId:27,tocIndex:11},{value:"Object",paraId:27,tocIndex:11},{value:" ",paraId:27,tocIndex:11},{value:"optional",paraId:27,tocIndex:11},{value:" ",paraId:27,tocIndex:11},{value:"default:",paraId:27,tocIndex:11},{value:" ",paraId:27,tocIndex:11},{value:"{}",paraId:27,tocIndex:11},{value:"The node styles on different states, e.g. hover, selected. It is a new feature of G6 3.1.",paraId:28,tocIndex:11},{value:"⚠️ Note:",paraId:29,tocIndex:11},{value:" If you are using version 3.1 or below, just change ",paraId:29,tocIndex:11},{value:"nodeStyle",paraId:29,tocIndex:11},{value:" to ",paraId:29,tocIndex:11},{value:"nodeStateStyles",paraId:29,tocIndex:11},{value:" and ",paraId:29,tocIndex:11},{value:"edgeStyle",paraId:29,tocIndex:11},{value:" to ",paraId:29,tocIndex:11},{value:"edgeStateStyles",paraId:29,tocIndex:11},{value:" and keep the configuration unchanged.",paraId:29,tocIndex:11},{value:" ",paraId:30,tocIndex:12},{value:"Object",paraId:30,tocIndex:12},{value:" ",paraId:30,tocIndex:12},{value:"optional",paraId:30,tocIndex:12},{value:" ",paraId:30,tocIndex:12},{value:"default:",paraId:30,tocIndex:12},{value:" ",paraId:30,tocIndex:12},{value:"{}",paraId:30,tocIndex:12},{value:"The edge styles on different states, e.g. hover, selected. It is a new feature of G6 3.1.",paraId:31,tocIndex:12},{value:" ",paraId:32,tocIndex:13},{value:"Object",paraId:32,tocIndex:13},{value:" ",paraId:32,tocIndex:13},{value:"optional",paraId:32,tocIndex:13},{value:" ",paraId:32,tocIndex:13},{value:"default:",paraId:32,tocIndex:13},{value:" ",paraId:32,tocIndex:13},{value:"{}",paraId:32,tocIndex:13},{value:"The combo styles on different states, e.g. hover, selected. It is a new feature of G6 3.5.",paraId:33,tocIndex:13},{value:" ",paraId:34,tocIndex:14},{value:"Object",paraId:34,tocIndex:14},{value:" ",paraId:34,tocIndex:14},{value:"optional",paraId:34,tocIndex:14},{value:" ",paraId:34,tocIndex:14},{value:"default:",paraId:34,tocIndex:14},{value:" ",paraId:34,tocIndex:14},{value:"{}",paraId:34,tocIndex:14},{value:"Default node configurations in global, including type, size, color and so on. Its priority is lower than the configurations in data.",paraId:35,tocIndex:14},{value:" ",paraId:36,tocIndex:15},{value:"Object",paraId:36,tocIndex:15},{value:" ",paraId:36,tocIndex:15},{value:"optional",paraId:36,tocIndex:15},{value:" ",paraId:36,tocIndex:15},{value:"default:",paraId:36,tocIndex:15},{value:" ",paraId:36,tocIndex:15},{value:"{}",paraId:36,tocIndex:15},{value:"Default edge configurations in global, including type, size, color and so on. Its priority is lower than the configurations in data.",paraId:37,tocIndex:15},{value:" ",paraId:38,tocIndex:16},{value:"Object",paraId:38,tocIndex:16},{value:" ",paraId:38,tocIndex:16},{value:"optional",paraId:38,tocIndex:16},{value:" ",paraId:38,tocIndex:16},{value:"default:",paraId:38,tocIndex:16},{value:" ",paraId:38,tocIndex:16},{value:"{}",paraId:38,tocIndex:16},{value:"Default combo configurations in global, including type, size, color and so on. Its priority is lower than the configurations in data. It is a new feature of G6 3.5.",paraId:39,tocIndex:16},{value:" _Array _ ",paraId:40,tocIndex:17},{value:"optional",paraId:40,tocIndex:17},{value:" ",paraId:40,tocIndex:17},{value:"default:",paraId:40,tocIndex:17},{value:" ",paraId:40,tocIndex:17},{value:"[]",paraId:40,tocIndex:17},{value:"Plugins for graph. Please refer to ",paraId:41,tocIndex:17},{value:"Plugin",paraId:42,tocIndex:17},{value:" for detail.",paraId:41,tocIndex:17},{value:" _Boolean _ ",paraId:43,tocIndex:18},{value:"optional",paraId:43,tocIndex:18},{value:" ",paraId:43,tocIndex:18},{value:"default:",paraId:43,tocIndex:18},{value:" ",paraId:43,tocIndex:18},{value:"false",paraId:43,tocIndex:18},{value:"Wheter activate the global animation. Which will take effect while changing layouts, changing data, and other global operations.",paraId:44,tocIndex:18},{value:" ",paraId:45,tocIndex:19},{value:"Object",paraId:45,tocIndex:19},{value:" ",paraId:45,tocIndex:19},{value:"optional",paraId:45,tocIndex:19},{value:" ",paraId:45,tocIndex:19},{value:"default:",paraId:45,tocIndex:19},{value:" ",paraId:45,tocIndex:19},{value:"{}",paraId:45,tocIndex:19},{value:"The configurations for global animation. Takes effect only when ",paraId:46,tocIndex:19},{value:"animate: true",paraId:46,tocIndex:19},{value:". For more detail about animateCfg, see ",paraId:46,tocIndex:19},{value:"Basic Animation Docs",paraId:47,tocIndex:19},{value:".",paraId:46,tocIndex:19},{value:" ",paraId:48,tocIndex:20},{value:"Function",paraId:48,tocIndex:20},{value:" ",paraId:48,tocIndex:20},{value:"optional",paraId:48,tocIndex:20},{value:" ",paraId:48,tocIndex:20},{value:"default:",paraId:48,tocIndex:20},{value:" ",paraId:48,tocIndex:20},{value:"null",paraId:48,tocIndex:20},{value:"The callback function for every frame of animation. The path of custom animation for node can be defined here. The nodes will move linearly when ",paraId:49,tocIndex:20},{value:"onFrame",paraId:49,tocIndex:20},{value:" is null.",paraId:49,tocIndex:20},{value:" ",paraId:50,tocIndex:21},{value:"Number",paraId:50,tocIndex:21},{value:" ",paraId:50,tocIndex:21},{value:"optional",paraId:50,tocIndex:21},{value:" ",paraId:50,tocIndex:21},{value:"default:",paraId:50,tocIndex:21},{value:" ",paraId:50,tocIndex:21},{value:"500",paraId:50,tocIndex:21},{value:"Duration of animation with unit millisecond.",paraId:51,tocIndex:21},{value:" ",paraId:52,tocIndex:22},{value:"string",paraId:52,tocIndex:22},{value:" ",paraId:52,tocIndex:22},{value:"optional",paraId:52,tocIndex:22},{value:" ",paraId:52,tocIndex:22},{value:"default:",paraId:52,tocIndex:22},{value:" ",paraId:52,tocIndex:22},{value:"easeLinear",paraId:52,tocIndex:22},{value:"The easing function name of animation. Please refer to ease in d3.",paraId:53,tocIndex:22},{value:" ",paraId:54,tocIndex:23},{value:"Number",paraId:54,tocIndex:23},{value:" ",paraId:54,tocIndex:23},{value:"optional",paraId:54,tocIndex:23},{value:" ",paraId:54,tocIndex:23},{value:"default:",paraId:54,tocIndex:23},{value:" ",paraId:54,tocIndex:23},{value:"0.02",paraId:54,tocIndex:23},{value:"The minimum zoom ratio. If the ratio to be scaled in ",paraId:55,tocIndex:23},{value:"fitView",paraId:55,tocIndex:23},{value:", ",paraId:55,tocIndex:23},{value:"zoom",paraId:55,tocIndex:23},{value:", or ",paraId:55,tocIndex:23},{value:"zoomTo",paraId:55,tocIndex:23},{value:" is smaller than the minZoom, the minZoom will take effect and the current funcion will return false.",paraId:55,tocIndex:23},{value:" ",paraId:56,tocIndex:24},{value:"Number",paraId:56,tocIndex:24},{value:" ",paraId:56,tocIndex:24},{value:"optional",paraId:56,tocIndex:24},{value:" ",paraId:56,tocIndex:24},{value:"default:",paraId:56,tocIndex:24},{value:" ",paraId:56,tocIndex:24},{value:"10",paraId:56,tocIndex:24},{value:"The maximum zoom ratio. If the ratio to be scaled in ",paraId:57,tocIndex:24},{value:"fitView",paraId:57,tocIndex:24},{value:", ",paraId:57,tocIndex:24},{value:"zoom",paraId:57,tocIndex:24},{value:", or ",paraId:57,tocIndex:24},{value:"zoomTo",paraId:57,tocIndex:24},{value:" is bigger than the maxZoom, the maxZoom will take effect and the current funcion will return false.",paraId:57,tocIndex:24},{value:" ",paraId:58,tocIndex:25},{value:"Object",paraId:58,tocIndex:25},{value:" ",paraId:58,tocIndex:25},{value:"optional",paraId:58,tocIndex:25},{value:" ",paraId:58,tocIndex:25},{value:"default:",paraId:58,tocIndex:25},{value:" ",paraId:58,tocIndex:25},{value:"{}",paraId:58,tocIndex:25},{value:"Configurations for layout. The ",paraId:59,tocIndex:25},{value:"type",paraId:59,tocIndex:25},{value:" in it is the name of layout method with the options: ",paraId:59,tocIndex:25},{value:"'random'",paraId:59,tocIndex:25},{value:", ",paraId:59,tocIndex:25},{value:"'radial'",paraId:59,tocIndex:25},{value:", ",paraId:59,tocIndex:25},{value:"'mds'",paraId:59,tocIndex:25},{value:", ",paraId:59,tocIndex:25},{value:"'circular'",paraId:59,tocIndex:25},{value:", ",paraId:59,tocIndex:25},{value:"'fruchterman'",paraId:59,tocIndex:25},{value:", ",paraId:59,tocIndex:25},{value:"'force'",paraId:59,tocIndex:25},{value:", ",paraId:59,tocIndex:25},{value:"'dagre'",paraId:59,tocIndex:25},{value:", ",paraId:59,tocIndex:25},{value:"'concentric'",paraId:59,tocIndex:25},{value:", ",paraId:59,tocIndex:25},{value:"'grid'",paraId:59,tocIndex:25},{value:". When ",paraId:59,tocIndex:25},{value:"layout",paraId:59,tocIndex:25},{value:" is not assigned on graph:",paraId:59,tocIndex:25},{value:"If there are ",paraId:60,tocIndex:25},{value:"x",paraId:60,tocIndex:25},{value:" and ",paraId:60,tocIndex:25},{value:"y",paraId:60,tocIndex:25},{value:" in node data, the graph will render with these information;",paraId:60,tocIndex:25},{value:"If there is no positions information in node data, the graph will arrange nodes with Random Layout by default.",paraId:60,tocIndex:25},{value:"For more configurations for different layout methods, please refer to ",paraId:61,tocIndex:25},{value:"Layout API",paraId:62,tocIndex:25},{value:".",paraId:61,tocIndex:25},{value:"Sublayout Pipeline",paraId:63,tocIndex:26},{value:" ",paraId:63,tocIndex:26},{value:"Supports by v4.3.0 and latter versions",paraId:63,tocIndex:26},{value:"Sublayout pipeline supports several sublayouts on different subgraphs by configuring ",paraId:64,tocIndex:26},{value:"GraphOptions.layout",paraId:64,tocIndex:26},{value:".",paraId:64,tocIndex:26},{value:"You can configure ",paraId:65,tocIndex:26},{value:"layout.pipes",paraId:65,tocIndex:26},{value:" array when initializing the graph instance. Each item in the array is a sublayout pipe, and it contains the infomation about the layout type(",paraId:65,tocIndex:26},{value:"type",paraId:65,tocIndex:26},{value:"), configurations for this layout type, and node filtering function (",paraId:65,tocIndex:26},{value:"nodesFilter",paraId:65,tocIndex:26},{value:"). NOTICE that, if some nodes belong to several sublayouts in the same time, the result positions of these nodes will follow the last sublayout.",paraId:65,tocIndex:26},{value:"The format of the ",paraId:66,tocIndex:26},{value:"layout.pipes",paraId:66,tocIndex:26},{value:":",paraId:66,tocIndex:26},{value:"type Pipes =\n  {\n    // the name of the layout method for this subgraph\n    type: 'random' | 'radial' | 'mds' | 'circular' | 'fruchterman' | 'force' | 'gForce' | 'dagre' | 'concentric' | 'grid' | 'forceAtlas2',\n    // node filtering function, the parameter is the node data, and it returns a boolean to indicate if the node belongs to this subgraph\n    nodesFilter: (node: NodeData) => boolean;\n    ... // the configurations for this layout method, refer to the docs for different layout method pls\n  }[];\n",paraId:67,tocIndex:26},{value:"Usage demo:",paraId:68,tocIndex:26},{value:"// configure the layout.pipes when initializing the graph instance\nconst graph = new G6.Graph({\n  // ...       // other graph configurations\n  layout: {\n    pipes: [\n      {\n        // the name of the layout method for this subgraph\n        type: 'circular',\n        // indicate if the node belongs to the subgraph\n        nodesFilter: (node) => node.subGraphId === '1',\n        // ... other configurations for this layout method\n      },\n      {\n        type: 'grid',\n        nodesFilter: (node) => node.subGraphId === '2',\n        // other configurations for this layout method\n        begin: [100, 0],\n      }\n    ]\n  },\n});\n",paraId:69,tocIndex:26},{value:" _'canvas' / 'svg' _ ",paraId:70,tocIndex:27},{value:"optional",paraId:70,tocIndex:27},{value:" ",paraId:70,tocIndex:27},{value:"default:",paraId:70,tocIndex:27},{value:" ",paraId:70,tocIndex:27},{value:"'canvas'",paraId:70,tocIndex:27},{value:"Render the graph with Canvas or SVG. It is supported expecting V3.3.x.",paraId:71,tocIndex:27},{value:" ",paraId:72,tocIndex:28},{value:"boolean",paraId:72,tocIndex:28},{value:" ",paraId:72,tocIndex:28},{value:"optional",paraId:72,tocIndex:28},{value:" ",paraId:72,tocIndex:28},{value:"default:",paraId:72,tocIndex:28},{value:" ",paraId:72,tocIndex:28},{value:"false",paraId:72,tocIndex:28},{value:"Whether to enable stack，that is, whether to support redo & undo operation. Support by V3.6 and latter versions.",paraId:73,tocIndex:28},{value:" ",paraId:74,tocIndex:29},{value:"number",paraId:74,tocIndex:29},{value:" ",paraId:74,tocIndex:29},{value:"optional",paraId:74,tocIndex:29},{value:" ",paraId:74,tocIndex:29},{value:"default:",paraId:74,tocIndex:29},{value:" ",paraId:74,tocIndex:29},{value:"10",paraId:74,tocIndex:29},{value:"The max step number of redo & undo, works only when the ",paraId:75,tocIndex:29},{value:"enabledStack",paraId:75,tocIndex:29},{value:" is ",paraId:75,tocIndex:29},{value:"true",paraId:75,tocIndex:29},{value:". Support by V3.6 and latter versions.",paraId:75,tocIndex:29}]},21969:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Graphics Group (hereinafter referred to as Group) in G6 is similar to ",paraId:0},{value:" ",paraId:0},{value:"<g>",paraId:0},{value:" tag in SVG ",paraId:0},{value:": Group a container of a group of graphics. The transformations on a Group such as clipping, rotating, zooming, and translating will be applied to all the children of the Group. The properties like color and position will also be inherited by its children. Besides, Group can be nested for complicated objects. For more information about Group, please refer to ",paraId:0},{value:"Graphics Group",paraId:1},{value:" document.",paraId:0},{value:"// Find the graphics group of the item\nconst group = item.getContainer();\n\n// equal to\nconst group = item.get('group');\n",paraId:2,tocIndex:0},{value:"Add a new group to the group.",paraId:3,tocIndex:2},{value:"Parameters",paraId:4,tocIndex:2},{value:"Name",paraId:5,tocIndex:2},{value:"Type",paraId:5,tocIndex:2},{value:"Description",paraId:5,tocIndex:2},{value:"cfg",paraId:5,tocIndex:2},{value:"Object",paraId:5,tocIndex:2},{value:"Not required. It is the configurations of the group",paraId:5,tocIndex:2},{value:"The ",paraId:6,tocIndex:2},{value:"cfg",paraId:6,tocIndex:2},{value:" above is not required, and it contains:",paraId:6,tocIndex:2},{value:"Name",paraId:7,tocIndex:2},{value:"Type",paraId:7,tocIndex:2},{value:"Description",paraId:7,tocIndex:2},{value:"id",paraId:7,tocIndex:2},{value:"String",paraId:7,tocIndex:2},{value:"The unique id of this group",paraId:7,tocIndex:2},{value:"name",paraId:7,tocIndex:2},{value:"String",paraId:7,tocIndex:2},{value:"Required, and the name of the shape which ",paraId:7,tocIndex:2},{value:"must be unique",paraId:7,tocIndex:2},{value:" in a custom node/edge/combo type. Besides, ",paraId:7,tocIndex:2},{value:"name",paraId:7,tocIndex:2},{value:" can be used for searching this shape, e.g. ",paraId:7,tocIndex:2},{value:"const shape = group.find(element => element.get('name') === 'shape-name')",paraId:7,tocIndex:2},{value:". The usage of find can be found at ",paraId:7,tocIndex:2},{value:"find(fn)",paraId:8,tocIndex:2},{value:"visible",paraId:7,tocIndex:2},{value:"Boolean",paraId:7,tocIndex:2},{value:"Whether the group is visible",paraId:7,tocIndex:2},{value:"capture",paraId:7,tocIndex:2},{value:"Boolean",paraId:7,tocIndex:2},{value:"Whether the group is capturable",paraId:7,tocIndex:2},{value:"draggable",paraId:7,tocIndex:2},{value:"Boolean",paraId:7,tocIndex:2},{value:"Whether the group is allowed to response ",paraId:7,tocIndex:2},{value:"dragstart",paraId:7,tocIndex:2},{value:", ",paraId:7,tocIndex:2},{value:"drag",paraId:7,tocIndex:2},{value:", and ",paraId:7,tocIndex:2},{value:"dragend",paraId:7,tocIndex:2},{value:" events. E.g. when user add a group into a custom node with ",paraId:7,tocIndex:2},{value:"draggable: true",paraId:7,tocIndex:2},{value:", the group will response the dragging events on the node, and the ",paraId:7,tocIndex:2},{value:"'drag-node'",paraId:7,tocIndex:2},{value:" in the ",paraId:7,tocIndex:2},{value:"modes",paraId:7,tocIndex:2},{value:" of the graph instance will take effect on the group",paraId:7,tocIndex:2},{value:"zIndex",paraId:7,tocIndex:2},{value:"Number",paraId:7,tocIndex:2},{value:"The visual index of the shape, similar to z-index of DOM. It is not required. ",paraId:7,tocIndex:2},{value:"group.sort()",paraId:7,tocIndex:2},{value:" will sort the visual index of the shapes inside the group according to their zIndex",paraId:7,tocIndex:2},{value:"Usage",paraId:9,tocIndex:2},{value:"// No configurations\ngroup.addGroup();\n\n// Configured\ngroup.addGroup({\n  id: 'groupId',\n  draggable: true,\n  // other configurations\n});\n",paraId:10,tocIndex:2},{value:"Add a new shape into the group",paraId:11,tocIndex:3},{value:"⚠️Attention:",paraId:11,tocIndex:3},{value:" the clip and transform operations will affect all the shapes in the group. The graphics and their properties are introduced in ",paraId:11,tocIndex:3},{value:"Shape Doc",paraId:12,tocIndex:3},{value:".",paraId:11,tocIndex:3},{value:"Parameters",paraId:13,tocIndex:3},{value:"Name",paraId:14,tocIndex:3},{value:"Type",paraId:14,tocIndex:3},{value:"Description",paraId:14,tocIndex:3},{value:"type",paraId:14,tocIndex:3},{value:"String",paraId:14,tocIndex:3},{value:"The type of the shape. Options: ",paraId:14,tocIndex:3},{value:"'rect'",paraId:14,tocIndex:3},{value:", ",paraId:14,tocIndex:3},{value:"'circle'",paraId:14,tocIndex:3},{value:", ",paraId:14,tocIndex:3},{value:"'fan'",paraId:14,tocIndex:3},{value:", ",paraId:14,tocIndex:3},{value:"'ellipse'",paraId:14,tocIndex:3},{value:", ",paraId:14,tocIndex:3},{value:"'marker'",paraId:14,tocIndex:3},{value:", ",paraId:14,tocIndex:3},{value:"'image'",paraId:14,tocIndex:3},{value:", and so on. Please refer to ",paraId:14,tocIndex:3},{value:"Graphics Shape Properties",paraId:15,tocIndex:3},{value:" document",paraId:14,tocIndex:3},{value:"cfg",paraId:14,tocIndex:3},{value:"Object",paraId:14,tocIndex:3},{value:"The configurations of the shape.",paraId:14,tocIndex:3},{value:"The ",paraId:16,tocIndex:3},{value:"cfg",paraId:16,tocIndex:3},{value:" above contains:",paraId:16,tocIndex:3},{value:"Name",paraId:17,tocIndex:3},{value:"Type",paraId:17,tocIndex:3},{value:"Description",paraId:17,tocIndex:3},{value:"attrs",paraId:17,tocIndex:3},{value:"Object",paraId:17,tocIndex:3},{value:"The style configurations for the shape. e.g. ",paraId:17,tocIndex:3},{value:"{x: 0, y: 10, fill: '#0f0'}",paraId:17,tocIndex:3},{value:"name",paraId:17,tocIndex:3},{value:"String",paraId:17,tocIndex:3},{value:"Required, and the name of the shape which ",paraId:17,tocIndex:3},{value:"must be unique",paraId:17,tocIndex:3},{value:" in a custom node/edge/combo type. Besides, ",paraId:17,tocIndex:3},{value:"name",paraId:17,tocIndex:3},{value:" can be used for searching this shape, e.g. ",paraId:17,tocIndex:3},{value:"const shape = group.find(element => element.get('name') === 'shape-name')",paraId:17,tocIndex:3},{value:". The usage of find can be found at ",paraId:17,tocIndex:3},{value:"find(fn)",paraId:18,tocIndex:3},{value:"visible",paraId:17,tocIndex:3},{value:"Boolean",paraId:17,tocIndex:3},{value:"Whether the shape is visible",paraId:17,tocIndex:3},{value:"capture",paraId:17,tocIndex:3},{value:"Boolean",paraId:17,tocIndex:3},{value:"Whether the shape is capturable by mouse events",paraId:17,tocIndex:3},{value:"draggable",paraId:17,tocIndex:3},{value:"Boolean",paraId:17,tocIndex:3},{value:"Whether the shape is allowed to response ",paraId:17,tocIndex:3},{value:"dragstart",paraId:17,tocIndex:3},{value:", ",paraId:17,tocIndex:3},{value:"drag",paraId:17,tocIndex:3},{value:", and ",paraId:17,tocIndex:3},{value:"dragend",paraId:17,tocIndex:3},{value:" events. E.g. when user add a shape into a custom node with ",paraId:17,tocIndex:3},{value:"draggable: true",paraId:17,tocIndex:3},{value:", the shape will response the dragging events on the node, and the ",paraId:17,tocIndex:3},{value:"'drag-node'",paraId:17,tocIndex:3},{value:" in the ",paraId:17,tocIndex:3},{value:"modes",paraId:17,tocIndex:3},{value:" of the graph instance will take effect",paraId:17,tocIndex:3},{value:"zIndex",paraId:17,tocIndex:3},{value:"Number",paraId:17,tocIndex:3},{value:"The visual index of the shape, similar to z-index of DOM. It is not required. ",paraId:17,tocIndex:3},{value:"group.sort()",paraId:17,tocIndex:3},{value:" will sort the visual index of the shapes inside the group according to their zIndex",paraId:17,tocIndex:3},{value:"Usage",paraId:19,tocIndex:3},{value:"group.addShape('rect', {\n  attrs: {\n    x: 0, // required\n    y: 0, // required\n    fill: 'red',\n    shadowOffsetX: 10,\n    shadowOffsetY: 10,\n    shadowColor: 'blue',\n    shadowBlur: 10,\n    opacity: 0.8,\n  },\n  // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n  name: 'rect-shape',\n  zIndex: 1,\n});\n",paraId:20,tocIndex:3},{value:"Whether the group contains the child.",paraId:21,tocIndex:4},{value:"The type of the return value: Boolean.",paraId:21,tocIndex:4},{value:"Parameters",paraId:22,tocIndex:4},{value:"Name",paraId:23,tocIndex:4},{value:"Type",paraId:23,tocIndex:4},{value:"Description",paraId:23,tocIndex:4},{value:"child",paraId:23,tocIndex:4},{value:"Group / Shape",paraId:23,tocIndex:4},{value:"A sub group or an instance of shape.",paraId:23,tocIndex:4},{value:"Usage",paraId:24,tocIndex:4},{value:"const has = group.contain(child);\n",paraId:25,tocIndex:4},{value:"Find ",paraId:26,tocIndex:5},{value:"the first",paraId:26,tocIndex:5},{value:" element that matches the rule.",paraId:26,tocIndex:5},{value:"Parameters",paraId:27,tocIndex:5},{value:"Name",paraId:28,tocIndex:5},{value:"Type",paraId:28,tocIndex:5},{value:"Description",paraId:28,tocIndex:5},{value:"fn",paraId:28,tocIndex:5},{value:"Function",paraId:28,tocIndex:5},{value:"Customized callback function.",paraId:28,tocIndex:5},{value:"Usage",paraId:29,tocIndex:5},{value:"const child = group.find(function (item) {\n  return item.attr('fill') === 'red'; // Find the first graphics filled with red\n});\n",paraId:30,tocIndex:5},{value:"Find the element by its id. ",paraId:31,tocIndex:6},{value:"The type of the return value: Object。",paraId:31,tocIndex:6},{value:"Parameters",paraId:32,tocIndex:6},{value:"Name",paraId:33,tocIndex:6},{value:"Type",paraId:33,tocIndex:6},{value:"Description",paraId:33,tocIndex:6},{value:"id",paraId:33,tocIndex:6},{value:"String",paraId:33,tocIndex:6},{value:"The id of the group.",paraId:33,tocIndex:6},{value:"Usage",paraId:34,tocIndex:6},{value:"const group1 = group.findById('group1');\n",paraId:35,tocIndex:6},{value:"Find all the elements that match the rule.",paraId:36,tocIndex:7},{value:"The type of the return value: [ Object ]",paraId:36,tocIndex:7},{value:"Parameters",paraId:37,tocIndex:7},{value:"Name",paraId:38,tocIndex:7},{value:"Type",paraId:38,tocIndex:7},{value:"Description",paraId:38,tocIndex:7},{value:"fn",paraId:38,tocIndex:7},{value:"Function",paraId:38,tocIndex:7},{value:"Customized callback function.",paraId:38,tocIndex:7},{value:"Usage",paraId:39,tocIndex:7},{value:"const children = group.findAll(function (item) {\n  return item.get('id') < 10; // get all the elements with the id smaller than 10\n});\n",paraId:40,tocIndex:7},{value:"Get the top shape which is on (x, y). ",paraId:41,tocIndex:8},{value:"The type of the return value: Object",paraId:41,tocIndex:8},{value:"Parameters",paraId:42,tocIndex:8},{value:"Name",paraId:43,tocIndex:8},{value:"Type",paraId:43,tocIndex:8},{value:"Description",paraId:43,tocIndex:8},{value:"x",paraId:43,tocIndex:8},{value:"number",paraId:43,tocIndex:8},{value:"x coordinate",paraId:43,tocIndex:8},{value:"y",paraId:43,tocIndex:8},{value:"number",paraId:43,tocIndex:8},{value:"y coordinate",paraId:43,tocIndex:8},{value:"Usage",paraId:44,tocIndex:8},{value:"// Get the top element on (10, 30)\nconst element = group.getShape(10, 30);\n",paraId:45,tocIndex:8},{value:"Get ",paraId:46,tocIndex:9},{value:"the first",paraId:46,tocIndex:9},{value:" element of the group. ",paraId:46,tocIndex:9},{value:"The type of the return value: Object",paraId:46,tocIndex:9},{value:"Usage",paraId:47,tocIndex:9},{value:"const child = group.getFirst();\n\n// Equal to\nconst childrens = group.get('children');\nconst child = childrens[0];\n",paraId:48,tocIndex:9},{value:"Get the last element of the group. ",paraId:49,tocIndex:10},{value:"The type of the return value: Object",paraId:49,tocIndex:10},{value:"Usage",paraId:50,tocIndex:10},{value:"const child = group.getLast();\n\n// Equal to\nconst childrens = group.get('children');\nconst child = childrens[childrens.length - 1];\n",paraId:51,tocIndex:10},{value:"Get the ",paraId:52,tocIndex:11},{value:"index",paraId:52,tocIndex:11},{value:"-th child of the group started from ",paraId:52,tocIndex:11},{value:"0",paraId:52,tocIndex:11},{value:".",paraId:52,tocIndex:11},{value:"The type of the return value: Object",paraId:52,tocIndex:11},{value:"Parameters",paraId:53,tocIndex:11},{value:"Name",paraId:54,tocIndex:11},{value:"Type",paraId:54,tocIndex:11},{value:"Description",paraId:54,tocIndex:11},{value:"index",paraId:54,tocIndex:11},{value:"number",paraId:54,tocIndex:11},{value:"The index of the child. 0 by default.",paraId:54,tocIndex:11},{value:"Usage",paraId:55,tocIndex:11},{value:"const child = group.getChildByIndex(2);\n",paraId:56,tocIndex:11},{value:"Remove a group or a graphics from the group.",paraId:57,tocIndex:12},{value:"Parameters",paraId:58,tocIndex:12},{value:"Name",paraId:59,tocIndex:12},{value:"Type",paraId:59,tocIndex:12},{value:"Description",paraId:59,tocIndex:12},{value:"child",paraId:59,tocIndex:12},{value:"Group / Shape",paraId:59,tocIndex:12},{value:"A sub group or an instance of Shape.",paraId:59,tocIndex:12},{value:"Usage",paraId:60,tocIndex:12},{value:"group.removeChild(child);\n",paraId:61,tocIndex:12},{value:"Sort method. ",paraId:62,tocIndex:13},{value:"In general, it is called for ordering the children of the group.",paraId:62,tocIndex:13},{value:"Typical scenerio: we set index for each ",paraId:63,tocIndex:13},{value:"shape",paraId:63,tocIndex:13},{value:" when add ",paraId:63,tocIndex:13},{value:"shape",paraId:63,tocIndex:13},{value:" by ",paraId:63,tocIndex:13},{value:"group.addShape()",paraId:63,tocIndex:13},{value:". After adding, sort the shapes by calling ",paraId:63,tocIndex:13},{value:"group.sort()",paraId:63,tocIndex:13},{value:".",paraId:63,tocIndex:13},{value:"Usage",paraId:64,tocIndex:13},{value:"group.sort();\n",paraId:65,tocIndex:13},{value:"Clear all the children in the group.",paraId:66,tocIndex:14},{value:"Usage",paraId:67,tocIndex:14},{value:"group.clear();\n",paraId:68,tocIndex:14}]},24202:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Combo inherits from Node. The functions of Node are also available for Combo. This document will only introduce the common functions for Combo Class. All the built-in combos can be found in ",paraId:0},{value:"Built-in Combos Doc",paraId:1},{value:" and ",paraId:0},{value:"demo",paraId:2},{value:", Custom Combo can be found in ",paraId:0},{value:"Custom Combo Doc",paraId:3},{value:" and ",paraId:0},{value:"demo",paraId:4},{value:".",paraId:0},{value:"Get all children including sub nodes and sub combos.",paraId:5,tocIndex:0},{value:"Return",paraId:6,tocIndex:0},{value:"Return the collection of Node and Combo: ",paraId:7,tocIndex:0},{value:"{ nodes: INode[], combos: ICombo[] }",paraId:7,tocIndex:0},{value:"Usage",paraId:8,tocIndex:0},{value:"const elements = combo.getChildren();\n",paraId:9,tocIndex:0},{value:"Get sub nodes of the combo。",paraId:10,tocIndex:1},{value:"Return",paraId:11,tocIndex:1},{value:"The type of return value： ",paraId:12,tocIndex:1},{value:"INode[]",paraId:12,tocIndex:1},{value:".",paraId:12,tocIndex:1},{value:"Get sub combos of the combo。",paraId:13,tocIndex:2},{value:"Return",paraId:14,tocIndex:2},{value:"The type of return value： ",paraId:15,tocIndex:2},{value:"ICombo[]",paraId:15,tocIndex:2},{value:".",paraId:15,tocIndex:2},{value:"Add the ",paraId:16,tocIndex:3},{value:"item",paraId:16,tocIndex:3},{value:" (Node or Combo) into the Combo as its child.",paraId:16,tocIndex:3},{value:"Parameters",paraId:17,tocIndex:3},{value:"Name",paraId:18,tocIndex:3},{value:"Type",paraId:18,tocIndex:3},{value:"Required",paraId:18,tocIndex:3},{value:"Description",paraId:18,tocIndex:3},{value:"item",paraId:18,tocIndex:3},{value:"INode / ICombo",paraId:18,tocIndex:3},{value:"true",paraId:18,tocIndex:3},{value:"The item of node or combo",paraId:18,tocIndex:3},{value:"Return",paraId:19,tocIndex:3},{value:"The type of return value: ",paraId:20,tocIndex:3},{value:"boolean",paraId:20,tocIndex:3},{value:";",paraId:20,tocIndex:3},{value:"Return ",paraId:20,tocIndex:3},{value:"true",paraId:20,tocIndex:3},{value:" to indicate successful executed.",paraId:20,tocIndex:3},{value:"Usage",paraId:21,tocIndex:3},{value:"const node = graph.findById('node1');\n\n// Return true to indicate successful executed.\nconst result = combo.addChild(node);\n",paraId:22,tocIndex:3},{value:"Add the Node to the Combo.",paraId:23,tocIndex:4},{value:"Parameters",paraId:24,tocIndex:4},{value:"Name",paraId:25,tocIndex:4},{value:"Type",paraId:25,tocIndex:4},{value:"Required",paraId:25,tocIndex:4},{value:"Description",paraId:25,tocIndex:4},{value:"node",paraId:25,tocIndex:4},{value:"string / INode",paraId:25,tocIndex:4},{value:"true",paraId:25,tocIndex:4},{value:"Node ID or the item of the node",paraId:25,tocIndex:4},{value:"Return",paraId:26,tocIndex:4},{value:"The type of return value: ",paraId:27,tocIndex:4},{value:"boolean",paraId:27,tocIndex:4},{value:";",paraId:27,tocIndex:4},{value:"Return ",paraId:27,tocIndex:4},{value:"true",paraId:27,tocIndex:4},{value:" to indicate successful executed.",paraId:27,tocIndex:4},{value:"Add a sub combo into the combo as the its child.",paraId:28,tocIndex:5},{value:"Parameters",paraId:29,tocIndex:5},{value:"Name",paraId:30,tocIndex:5},{value:"Type",paraId:30,tocIndex:5},{value:"Required",paraId:30,tocIndex:5},{value:"Description",paraId:30,tocIndex:5},{value:"combo",paraId:30,tocIndex:5},{value:"ICombo",paraId:30,tocIndex:5},{value:"true",paraId:30,tocIndex:5},{value:"The item of the combo",paraId:30,tocIndex:5},{value:"Return",paraId:31,tocIndex:5},{value:"The type of return value: ",paraId:32,tocIndex:5},{value:"boolean",paraId:32,tocIndex:5},{value:";",paraId:32,tocIndex:5},{value:"Return ",paraId:32,tocIndex:5},{value:"true",paraId:32,tocIndex:5},{value:" to indicate successful executed.",paraId:32,tocIndex:5},{value:"Remove the child item (a Node or a Combo).",paraId:33,tocIndex:6},{value:"Parameters",paraId:34,tocIndex:6},{value:"Name",paraId:35,tocIndex:6},{value:"Type",paraId:35,tocIndex:6},{value:"Required",paraId:35,tocIndex:6},{value:"Description",paraId:35,tocIndex:6},{value:"item",paraId:35,tocIndex:6},{value:"INode / ICombo",paraId:35,tocIndex:6},{value:"true",paraId:35,tocIndex:6},{value:"The item of node or combo",paraId:35,tocIndex:6},{value:"Return",paraId:36,tocIndex:6},{value:"The type of return value: ",paraId:37,tocIndex:6},{value:"boolean",paraId:37,tocIndex:6},{value:";",paraId:37,tocIndex:6},{value:"Return ",paraId:37,tocIndex:6},{value:"true",paraId:37,tocIndex:6},{value:" to indicate successful executed.",paraId:37,tocIndex:6},{value:"Remove a sub combo from the parent. The ",paraId:38,tocIndex:7},{value:"combo",paraId:38,tocIndex:7},{value:" will still exist on the graph but it is not belong to the parent combo any more. If you want to delete the combo from the graph, call ",paraId:38,tocIndex:7},{value:"graph.removeItem",paraId:39,tocIndex:7},{value:" instead",paraId:38,tocIndex:7},{value:"Parameters",paraId:40,tocIndex:7},{value:"Name",paraId:41,tocIndex:7},{value:"Type",paraId:41,tocIndex:7},{value:"Required",paraId:41,tocIndex:7},{value:"Description",paraId:41,tocIndex:7},{value:"combo",paraId:41,tocIndex:7},{value:"ICombo",paraId:41,tocIndex:7},{value:"true",paraId:41,tocIndex:7},{value:"The item of Combo",paraId:41,tocIndex:7},{value:"Return",paraId:42,tocIndex:7},{value:"The type of return value: ",paraId:43,tocIndex:7},{value:"boolean",paraId:43,tocIndex:7},{value:";",paraId:43,tocIndex:7},{value:"Return ",paraId:43,tocIndex:7},{value:"true",paraId:43,tocIndex:7},{value:" to indicate successful executed.",paraId:43,tocIndex:7},{value:"Remove a child node from the combo. The node will still exist on the graph but it is not belong to the combo any more. If you want to delete the node from the graph, call ",paraId:44,tocIndex:8},{value:"graph.removeItem",paraId:45,tocIndex:8},{value:" instead",paraId:44,tocIndex:8},{value:"Parameters",paraId:46,tocIndex:8},{value:"Name",paraId:47,tocIndex:8},{value:"Type",paraId:47,tocIndex:8},{value:"Required",paraId:47,tocIndex:8},{value:"Description",paraId:47,tocIndex:8},{value:"node",paraId:47,tocIndex:8},{value:"INode",paraId:47,tocIndex:8},{value:"true",paraId:47,tocIndex:8},{value:"Node ID or the item of Node",paraId:47,tocIndex:8},{value:"Return",paraId:48,tocIndex:8},{value:"The type of return value: ",paraId:49,tocIndex:8},{value:"boolean",paraId:49,tocIndex:8},{value:";",paraId:49,tocIndex:8},{value:"Return ",paraId:49,tocIndex:8},{value:"true",paraId:49,tocIndex:8},{value:" to indicate successful executed.",paraId:49,tocIndex:8}]},27971:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Except for the common properties, there are special configurations for each type of built-in Combos. The ",paraId:0},{value:"style",paraId:0},{value:"s of them depend on their keyShape. The common properties for built-in Combos can be refered to:",paraId:0},{value:" ",paraId:1,tocIndex:0},{value:"String",paraId:1,tocIndex:0},{value:" ",paraId:1,tocIndex:0},{value:"required",paraId:1,tocIndex:0},{value:" ",paraId:1,tocIndex:0},{value:"The id of the Combo, ",paraId:2,tocIndex:0},{value:"Must be a unique string",paraId:2,tocIndex:0},{value:".",paraId:2,tocIndex:0},{value:" ",paraId:3,tocIndex:1},{value:"String",paraId:3,tocIndex:1},{value:" ",paraId:3,tocIndex:1},{value:"optional",paraId:3,tocIndex:1},{value:" ",paraId:3,tocIndex:1},{value:"The ID of the parent Combo",paraId:4,tocIndex:1},{value:" ",paraId:5,tocIndex:2},{value:"Number | Array",paraId:5,tocIndex:2},{value:" ",paraId:5,tocIndex:2},{value:"optional",paraId:5,tocIndex:2},{value:" ",paraId:5,tocIndex:2},{value:"The minimum size of the combo. The default value for 'circle' type Combo is 20, [20, 5] for 'rect' type.",paraId:6,tocIndex:2},{value:" ",paraId:7,tocIndex:3},{value:"Number | Number[]",paraId:7,tocIndex:3},{value:" ",paraId:7,tocIndex:3},{value:"optional",paraId:7,tocIndex:3},{value:" ",paraId:7,tocIndex:3},{value:"The padding of the Combo. The default value for 'circle' type Combo is 25, [25, 20, 15, 20] for 'rect'.",paraId:8,tocIndex:3},{value:" ",paraId:9,tocIndex:4},{value:"Object",paraId:9,tocIndex:4},{value:" ",paraId:9,tocIndex:4},{value:"optional",paraId:9,tocIndex:4},{value:" ",paraId:9,tocIndex:4},{value:"The Combo style. ",paraId:10,tocIndex:4},{value:"style",paraId:10,tocIndex:4},{value:" is an object to configure the filling color, stroke color, shadow, and so on. The complete configurations are listed in ",paraId:10,tocIndex:4},{value:"Overview of Combos -- style",paraId:11,tocIndex:4},{value:"。",paraId:10,tocIndex:4},{value:" ",paraId:12,tocIndex:5},{value:"String",paraId:12,tocIndex:5},{value:" ",paraId:12,tocIndex:5},{value:"optional",paraId:12,tocIndex:5},{value:" ",paraId:12,tocIndex:5},{value:"The label text of the combo.",paraId:13,tocIndex:5},{value:" ",paraId:14,tocIndex:6},{value:"Object",paraId:14,tocIndex:6},{value:" ",paraId:14,tocIndex:6},{value:"optional",paraId:14,tocIndex:6},{value:" ",paraId:14,tocIndex:6},{value:"The configurations of the combo. Please refer to ",paraId:15,tocIndex:6},{value:"Overview of Combos -- label and label configure",paraId:16,tocIndex:6},{value:" for detailed configurations.",paraId:15,tocIndex:6},{value:" ",paraId:17,tocIndex:7},{value:"Object",paraId:17,tocIndex:7},{value:" ",paraId:17,tocIndex:7},{value:"optional",paraId:17,tocIndex:7},{value:" ",paraId:17,tocIndex:7},{value:"The shape type of the Combo. It can be the type of built-in Combo, or the custom Combo. 'circle' by default. The table below shows the built-in Combos and their special properties:",paraId:18,tocIndex:7},{value:"Name",paraId:19,tocIndex:7},{value:"Description",paraId:19,tocIndex:7},{value:"Default",paraId:19,tocIndex:7},{value:"circle",paraId:19,tocIndex:7},{value:"Circle Combo: ",paraId:19,tocIndex:7},{value:"- ",paraId:19,tocIndex:7},{value:"size",paraId:19,tocIndex:7},{value:" is a number representing the diameter",paraId:19,tocIndex:7},{value:"- The circle is centered at the combo position",paraId:19,tocIndex:7},{value:"- ",paraId:19,tocIndex:7},{value:"color",paraId:19,tocIndex:7},{value:" takes effect on the stroke",paraId:19,tocIndex:7},{value:"- The label is placed on the top of the circle by default",paraId:19,tocIndex:7},{value:"- More properties are described in ",paraId:19,tocIndex:7},{value:"circle",paraId:20,tocIndex:7},{value:"- ",paraId:19,tocIndex:7},{value:"Demo",paraId:19,tocIndex:7},{value:"rect",paraId:19,tocIndex:7},{value:"Rect Combo: ",paraId:19,tocIndex:7},{value:"- ",paraId:19,tocIndex:7},{value:"size",paraId:19,tocIndex:7},{value:" is an array, e.g. [100, 50]",paraId:19,tocIndex:7},{value:"- The rect in centered at the combo position",paraId:19,tocIndex:7},{value:"- ",paraId:19,tocIndex:7},{value:"color",paraId:19,tocIndex:7},{value:" takes effect on the stroke",paraId:19,tocIndex:7},{value:"- The label is placed on the left top of the circle by default",paraId:19,tocIndex:7},{value:"- More properties are described in ",paraId:19,tocIndex:7},{value:"rect",paraId:21,tocIndex:7},{value:"- ",paraId:19,tocIndex:7},{value:"Demo",paraId:19,tocIndex:7},{value:"The special properties for each built-in Combos can be found in the subdocuments of ",paraId:22,tocIndex:8},{value:"Built-in Combos",paraId:23,tocIndex:8},{value:".",paraId:22,tocIndex:8}]},63924:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Edge inherits from item. The functions of Item are also available for Edge. This document will only introduce the common functions for Edge class. All the built-in edges can be found in ",paraId:0},{value:"Built-in Edges Doc",paraId:1},{value:" and ",paraId:0},{value:"demo",paraId:2},{value:", Custom Edge can be found in ",paraId:0},{value:"Custom Edge Doc",paraId:3},{value:" and ",paraId:0},{value:"demo",paraId:4},{value:".",paraId:0},{value:"Set the source item (node) of the edge.",paraId:5,tocIndex:0},{value:"Parameters",paraId:6,tocIndex:0},{value:"Name",paraId:7,tocIndex:0},{value:"Type",paraId:7,tocIndex:0},{value:"Required",paraId:7,tocIndex:0},{value:"Description",paraId:7,tocIndex:0},{value:"source",paraId:7,tocIndex:0},{value:"Node",paraId:7,tocIndex:0},{value:"true",paraId:7,tocIndex:0},{value:"The item of source node.",paraId:7,tocIndex:0},{value:"Usage",paraId:8,tocIndex:0},{value:"const edge = new Edge({\n  // ...\n});\n\nconst node = new Node({\n  // ...\n});\n\nedge.setSource(node);\n",paraId:9,tocIndex:0},{value:"Set the target item (node) of the edge.",paraId:10,tocIndex:1},{value:"Parameters",paraId:11,tocIndex:1},{value:"Name",paraId:12,tocIndex:1},{value:"Type",paraId:12,tocIndex:1},{value:"Required",paraId:12,tocIndex:1},{value:"Description",paraId:12,tocIndex:1},{value:"target",paraId:12,tocIndex:1},{value:"Node",paraId:12,tocIndex:1},{value:"true",paraId:12,tocIndex:1},{value:"The item of target node.",paraId:12,tocIndex:1},{value:"Usage",paraId:13,tocIndex:1},{value:"edge.setTarget(node);\n",paraId:14,tocIndex:1},{value:"Get the current source item (node) of the edge.",paraId:15,tocIndex:2},{value:"Return",paraId:16,tocIndex:2},{value:"The type of return value: Node;",paraId:17,tocIndex:2},{value:"Returns the item of source node.",paraId:17,tocIndex:2},{value:"Usage",paraId:18,tocIndex:2},{value:"const node = edge.getSource();\n",paraId:19,tocIndex:2},{value:"Get the current target item (node) of the edge.",paraId:20,tocIndex:3},{value:"Return",paraId:21,tocIndex:3},{value:"The type of return value: Node;",paraId:22,tocIndex:3},{value:"Returns the item of target node.",paraId:22,tocIndex:3},{value:"Usage",paraId:23,tocIndex:3},{value:"const node = edge.getTarget();\n",paraId:24,tocIndex:3}]},82767:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Except for the common properties, there are special configurations for each type of built-in Edges. The ",paraId:0,tocIndex:0},{value:"style",paraId:0,tocIndex:0},{value:"s of them depend on their keyShape. The common properties for built-in Edges can be refered to:",paraId:0,tocIndex:0},{value:" ",paraId:1,tocIndex:1},{value:"String",paraId:1,tocIndex:1},{value:" ",paraId:1,tocIndex:1},{value:"required",paraId:1,tocIndex:1},{value:" ",paraId:1,tocIndex:1},{value:"The id of the edge, ",paraId:2,tocIndex:1},{value:"MUST",paraId:2,tocIndex:1},{value:" be a unique string",paraId:2,tocIndex:1},{value:" ",paraId:3,tocIndex:2},{value:"String | Number",paraId:3,tocIndex:2},{value:" ",paraId:3,tocIndex:2},{value:"optional",paraId:3,tocIndex:2},{value:" ",paraId:3,tocIndex:2},{value:"The id of the source node.",paraId:4,tocIndex:2},{value:" ",paraId:5,tocIndex:3},{value:"String | Number",paraId:5,tocIndex:3},{value:" ",paraId:5,tocIndex:3},{value:"optional",paraId:5,tocIndex:3},{value:" ",paraId:5,tocIndex:3},{value:"The id of the target node.",paraId:6,tocIndex:3},{value:" ",paraId:7,tocIndex:4},{value:"String",paraId:7,tocIndex:4},{value:" ",paraId:7,tocIndex:4},{value:"optional",paraId:7,tocIndex:4},{value:" ",paraId:7,tocIndex:4},{value:"default:",paraId:7,tocIndex:4},{value:" ",paraId:7,tocIndex:4},{value:"'line'",paraId:7,tocIndex:4},{value:"The type of the edge. It can be the type of a Built-in Edge, or a custom Edge. 'line' by default",paraId:8,tocIndex:4},{value:" ",paraId:9,tocIndex:5},{value:"Number",paraId:9,tocIndex:5},{value:" ",paraId:9,tocIndex:5},{value:"optional",paraId:9,tocIndex:5},{value:" ",paraId:9,tocIndex:5},{value:"The index of link points on the source node. The link point is the intersection of the edge and related node.",paraId:10,tocIndex:5},{value:" ",paraId:11,tocIndex:6},{value:"Number",paraId:11,tocIndex:6},{value:" ",paraId:11,tocIndex:6},{value:"optional",paraId:11,tocIndex:6},{value:" ",paraId:11,tocIndex:6},{value:"The index of link points on the target node. The link point is the intersection of the edge and related node.",paraId:12,tocIndex:6},{value:" ",paraId:13,tocIndex:7},{value:"Object",paraId:13,tocIndex:7},{value:" ",paraId:13,tocIndex:7},{value:"optional",paraId:13,tocIndex:7},{value:" ",paraId:13,tocIndex:7},{value:"The edge style. ",paraId:14,tocIndex:7},{value:"style",paraId:14,tocIndex:7},{value:" is an object to configure the stroke color, shadow, and so on. The complete configurations is listed in: ",paraId:14,tocIndex:7},{value:"Shape Properties",paraId:15,tocIndex:7},{value:".",paraId:14,tocIndex:7},{value:" ",paraId:16,tocIndex:8},{value:"String",paraId:16,tocIndex:8},{value:" ",paraId:16,tocIndex:8},{value:"optional",paraId:16,tocIndex:8},{value:" ",paraId:16,tocIndex:8},{value:"label is a string which indicates the content of the label.",paraId:17,tocIndex:8},{value:"labelCfg is an object to configure the label. The commonly used configurations of labelCfg:",paraId:18,tocIndex:9},{value:"Name",paraId:19,tocIndex:9},{value:"Required",paraId:19,tocIndex:9},{value:"Type",paraId:19,tocIndex:9},{value:"Remark",paraId:19,tocIndex:9},{value:"refX",paraId:19,tocIndex:9},{value:"false",paraId:19,tocIndex:9},{value:"Number",paraId:19,tocIndex:9},{value:"x offset of the label",paraId:19,tocIndex:9},{value:"refY",paraId:19,tocIndex:9},{value:"false",paraId:19,tocIndex:9},{value:"Number",paraId:19,tocIndex:9},{value:"y offset of the label",paraId:19,tocIndex:9},{value:"position",paraId:19,tocIndex:9},{value:"false",paraId:19,tocIndex:9},{value:"String",paraId:19,tocIndex:9},{value:"The relative position to the edge. Options: ",paraId:19,tocIndex:9},{value:"start",paraId:19,tocIndex:9},{value:", ",paraId:19,tocIndex:9},{value:"middle",paraId:19,tocIndex:9},{value:", and ",paraId:19,tocIndex:9},{value:"end",paraId:19,tocIndex:9},{value:". ",paraId:19,tocIndex:9},{value:"middle",paraId:19,tocIndex:9},{value:" by default.",paraId:19,tocIndex:9},{value:"autoRotate",paraId:19,tocIndex:9},{value:"false",paraId:19,tocIndex:9},{value:"Boolean",paraId:19,tocIndex:9},{value:"Whether to activate ratating according to the edge automatically. ",paraId:19,tocIndex:9},{value:"false",paraId:19,tocIndex:9},{value:" by default",paraId:19,tocIndex:9},{value:"style",paraId:19,tocIndex:9},{value:"false",paraId:19,tocIndex:9},{value:"Object",paraId:19,tocIndex:9},{value:"The style property of the label. The complete configurations for the label style is listed in ",paraId:19,tocIndex:9},{value:"Shape Style Properties - Text",paraId:20,tocIndex:9},{value:"The special properties for each built-in Edges can be found in the subdocuments of ",paraId:21,tocIndex:10},{value:"Built-in Edges",paraId:22,tocIndex:10},{value:".",paraId:21,tocIndex:10}]},60934:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Item is the object of node / edge in G6.",paraId:0},{value:"Update the item according to the data model.",paraId:1,tocIndex:1},{value:"Parameters",paraId:2,tocIndex:1},{value:"Name",paraId:3,tocIndex:1},{value:"Type",paraId:3,tocIndex:1},{value:"Required",paraId:3,tocIndex:1},{value:"Description",paraId:3,tocIndex:1},{value:"model",paraId:3,tocIndex:1},{value:"Object",paraId:3,tocIndex:1},{value:"true",paraId:3,tocIndex:1},{value:"The data model of the item.",paraId:3,tocIndex:1},{value:"Tips: ",paraId:4,tocIndex:1},{value:"model",paraId:4,tocIndex:1},{value:" contains:",paraId:4,tocIndex:1},{value:"Name",paraId:5,tocIndex:1},{value:"Type",paraId:5,tocIndex:1},{value:"Required",paraId:5,tocIndex:1},{value:"Description",paraId:5,tocIndex:1},{value:"id",paraId:5,tocIndex:1},{value:"String",paraId:5,tocIndex:1},{value:"true",paraId:5,tocIndex:1},{value:"The unique id of the item.",paraId:5,tocIndex:1},{value:"style",paraId:5,tocIndex:1},{value:"Object",paraId:5,tocIndex:1},{value:"false",paraId:5,tocIndex:1},{value:"The style of the item.",paraId:5,tocIndex:1},{value:"type",paraId:5,tocIndex:1},{value:"String",paraId:5,tocIndex:1},{value:"false",paraId:5,tocIndex:1},{value:"The type of the item. The default type for edge is 'line', the default type for node is 'circle'. The default shapes will take effect when ",paraId:5,tocIndex:1},{value:"type",paraId:5,tocIndex:1},{value:" is null.",paraId:5,tocIndex:1},{value:"label",paraId:5,tocIndex:1},{value:"String",paraId:5,tocIndex:1},{value:"false",paraId:5,tocIndex:1},{value:"The label of the item. A label will be rendered if it exists.",paraId:5,tocIndex:1},{value:"Usage",paraId:6,tocIndex:1},{value:"const model = {\n  id: 'node',\n  type: 'rect',\n  label: 'node',\n  style: {\n    fill: 'red',\n  },\n};\n\nitem.update(model);\n",paraId:7,tocIndex:1},{value:"Refresh the item with its positions and style in the item's data model. This operation will clear the cache in the same time.",paraId:8,tocIndex:2},{value:"It is usually called after:",paraId:9,tocIndex:2},{value:"The data model of item is changed;",paraId:10,tocIndex:2},{value:"The positions of endpoints of an edge is changed.",paraId:10,tocIndex:2},{value:"Usage",paraId:11,tocIndex:2},{value:"item.refresh();\n",paraId:12,tocIndex:2},{value:"Update the position of the item. We recommend to call this function for single item to avoid repainting the whole canvas.",paraId:13,tocIndex:3},{value:"Parameters",paraId:14,tocIndex:3},{value:"Name",paraId:15,tocIndex:3},{value:"Type",paraId:15,tocIndex:3},{value:"Required",paraId:15,tocIndex:3},{value:"Description",paraId:15,tocIndex:3},{value:"cfg",paraId:15,tocIndex:3},{value:"Object",paraId:15,tocIndex:3},{value:"true",paraId:15,tocIndex:3},{value:"The configurations of the item, including ",paraId:15,tocIndex:3},{value:"x",paraId:15,tocIndex:3},{value:" and ",paraId:15,tocIndex:3},{value:"y",paraId:15,tocIndex:3},{value:". The x and y value in source data model will take effect if there are no ",paraId:15,tocIndex:3},{value:"x",paraId:15,tocIndex:3},{value:" and ",paraId:15,tocIndex:3},{value:"y",paraId:15,tocIndex:3},{value:" in ",paraId:15,tocIndex:3},{value:"cfg",paraId:15,tocIndex:3},{value:".",paraId:15,tocIndex:3},{value:"Usage",paraId:16,tocIndex:3},{value:"const cfg = {\n  x: 100,\n  y: 200,\n};\n// There are x and y in cfg, so the operation below will update the position\nitem.updatePosition(cfg);\n\nconst cfg1 = {\n  name: 'abc',\n  dept: 'antv',\n};\n// There are no x and y in cfg, the operation below will use x and y in item.getModel()\nitem.updatePosition(cfg1);\n",paraId:17,tocIndex:3},{value:"Destroy an item, including stopping the animation, deleting the items in a group, clearing the configurations, setting the ",paraId:18,tocIndex:5},{value:"destroyed",paraId:18,tocIndex:5},{value:" to be ",paraId:18,tocIndex:5},{value:"true",paraId:18,tocIndex:5},{value:", and so on.",paraId:18,tocIndex:5},{value:"Usage",paraId:19,tocIndex:5},{value:"item.destroy();\n",paraId:20,tocIndex:5},{value:"Get the ",paraId:21,tocIndex:7},{value:"bounding box",paraId:21,tocIndex:7},{value:" of the item.",paraId:21,tocIndex:7},{value:"Return",paraId:22,tocIndex:7},{value:"The type of return value: Object.",paraId:23,tocIndex:7},{value:"The return value includes:",paraId:24,tocIndex:7},{value:"Name",paraId:25,tocIndex:7},{value:"Type",paraId:25,tocIndex:7},{value:"Description",paraId:25,tocIndex:7},{value:"x",paraId:25,tocIndex:7},{value:"number",paraId:25,tocIndex:7},{value:"The x coordinate of view port.",paraId:25,tocIndex:7},{value:"y",paraId:25,tocIndex:7},{value:"number",paraId:25,tocIndex:7},{value:"The y coordinate of view port.",paraId:25,tocIndex:7},{value:"width",paraId:25,tocIndex:7},{value:"number",paraId:25,tocIndex:7},{value:"The width of the bbox.",paraId:25,tocIndex:7},{value:"height",paraId:25,tocIndex:7},{value:"number",paraId:25,tocIndex:7},{value:"The height of the bbox.",paraId:25,tocIndex:7},{value:"centerX",paraId:25,tocIndex:7},{value:"number",paraId:25,tocIndex:7},{value:"The x coordinate of the center of the bbox.",paraId:25,tocIndex:7},{value:"centerY",paraId:25,tocIndex:7},{value:"number",paraId:25,tocIndex:7},{value:"The y coordinate of the center of the bbox.",paraId:25,tocIndex:7},{value:"Usage",paraId:26,tocIndex:7},{value:"item.getBBox();\n",paraId:27,tocIndex:7},{value:"Get the container of the item.",paraId:28,tocIndex:8},{value:"Return",paraId:29,tocIndex:8},{value:"The type of return value: G.Group;",paraId:30,tocIndex:8},{value:"Return the graphics group where the item in.",paraId:30,tocIndex:8},{value:"Usage",paraId:31,tocIndex:8},{value:"// Get the container of the item\nconst group = item.getContainer();\n\n// Equals to\nconst group = item.get('group');\n",paraId:32,tocIndex:8},{value:"Get the key shape of the item. ",paraId:33,tocIndex:9},{value:"keyShape",paraId:33,tocIndex:9},{value:" is used for calculating the node size, edge length, and so on.",paraId:33,tocIndex:9},{value:"Return",paraId:34,tocIndex:9},{value:"The type of return value: G.Shape;",paraId:35,tocIndex:9},{value:"Return the ",paraId:35,tocIndex:9},{value:"keyShape",paraId:35,tocIndex:9},{value:" of the item.",paraId:35,tocIndex:9},{value:"Usage",paraId:36,tocIndex:9},{value:"// Get the keyShape of the item\nconst keyShape = item.getKeyShape();\n\n// Equals to\nconst keyShape = item.get('keyShape');\n",paraId:37,tocIndex:9},{value:"Get the data model of the item.",paraId:38,tocIndex:10},{value:"Return",paraId:39,tocIndex:10},{value:"The type of return value: Object;",paraId:40,tocIndex:10},{value:"Return the data model of the item.",paraId:40,tocIndex:10},{value:"Usage",paraId:41,tocIndex:10},{value:"// Get the data model of the item\nconst model = item.getModel();\n\n// Equals to\nconst model = item.get('model');\n",paraId:42,tocIndex:10},{value:"Get the type of the item.",paraId:43,tocIndex:11},{value:"Return",paraId:44,tocIndex:11},{value:"The type of return value: String;",paraId:45,tocIndex:11},{value:"Return the type of the item. It might be ",paraId:45,tocIndex:11},{value:"'node'",paraId:45,tocIndex:11},{value:" or ",paraId:45,tocIndex:11},{value:"'edge'",paraId:45,tocIndex:11},{value:".",paraId:45,tocIndex:11},{value:"Usage",paraId:46,tocIndex:11},{value:"// Get the type of the item\nconst type = item.getType();\n\n// Equals to\nconst type = item.get('type');\n",paraId:47,tocIndex:11},{value:"Whether to enable the item to be picked and enable its interaction events.",paraId:48,tocIndex:12},{value:"Parameters",paraId:49,tocIndex:12},{value:"Name",paraId:50,tocIndex:12},{value:"Type",paraId:50,tocIndex:12},{value:"Required",paraId:50,tocIndex:12},{value:"Description",paraId:50,tocIndex:12},{value:"enable",paraId:50,tocIndex:12},{value:"Boolean",paraId:50,tocIndex:12},{value:"true",paraId:50,tocIndex:12},{value:"The flag to enable if it is ",paraId:50,tocIndex:12},{value:"true",paraId:50,tocIndex:12},{value:".",paraId:50,tocIndex:12},{value:"Usage",paraId:51,tocIndex:12},{value:"// Do not allow the item response interaction events\nitem.enableCapture(false);\n\n// Allow the item to response the interaction events\nitem.enableCapture(true);\n",paraId:52,tocIndex:12},{value:"Clear the cache. It is usually called after updating or refreshing operation.",paraId:53,tocIndex:13},{value:"Usage",paraId:54,tocIndex:13},{value:"// Clear the cache\nitem.clearCache();\n",paraId:55,tocIndex:13},{value:"Show the item. Show the item itself. Different from that, when the item is a node, ",paraId:56,tocIndex:15},{value:"graph.showItem(item)",paraId:57,tocIndex:15},{value:" will show the node and its related edges in the same time.",paraId:56,tocIndex:15},{value:"Usage",paraId:58,tocIndex:15},{value:"item.show();\n",paraId:59,tocIndex:15},{value:"Hide the item. Hide the item itself. Different from that, when the item is a node, ",paraId:60,tocIndex:16},{value:"graph.hideItem(item)",paraId:61,tocIndex:16},{value:" will hide the node and its related edges in the same time.",paraId:60,tocIndex:16},{value:"Usage",paraId:62,tocIndex:16},{value:"item.hide();\n",paraId:63,tocIndex:16},{value:"Change the visibility of the item.",paraId:64,tocIndex:17},{value:"Parameters",paraId:65,tocIndex:17},{value:"Name",paraId:66,tocIndex:17},{value:"Type",paraId:66,tocIndex:17},{value:"Required",paraId:66,tocIndex:17},{value:"Description",paraId:66,tocIndex:17},{value:"visible",paraId:66,tocIndex:17},{value:"Boolean",paraId:66,tocIndex:17},{value:"true",paraId:66,tocIndex:17},{value:"The flag to hide or show the item. ",paraId:66,tocIndex:17},{value:"true",paraId:66,tocIndex:17},{value:" means show the item, ",paraId:66,tocIndex:17},{value:"false",paraId:66,tocIndex:17},{value:" means hide the item.",paraId:66,tocIndex:17},{value:"Usage",paraId:67,tocIndex:17},{value:"// Show the item\nitem.changeVisibility(true);\n\n// Hide the item\nitem.changeVisibility(false);\n",paraId:68,tocIndex:17},{value:"Query the visibility of the item.",paraId:69,tocIndex:18},{value:"Return",paraId:70,tocIndex:18},{value:"The type of return value: Boolean;",paraId:71,tocIndex:18},{value:"true",paraId:71,tocIndex:18},{value:" means the item is visibile. The item is invisible otherwise.",paraId:71,tocIndex:18},{value:"Usage",paraId:72,tocIndex:18},{value:"const visible = item.isVisible();\n",paraId:73,tocIndex:18},{value:"Set the visual level / zindex to the front to avoid being overlapped by other items.",paraId:74,tocIndex:19},{value:"Usage",paraId:75,tocIndex:19},{value:"item.toFront();\n",paraId:76,tocIndex:19},{value:"Set the visual level / zindex to the back.",paraId:77,tocIndex:20},{value:"Usage",paraId:78,tocIndex:20},{value:"item.toBack();\n",paraId:79,tocIndex:20},{value:"Update the state of the item.",paraId:80,tocIndex:21},{value:"Parameters",paraId:81,tocIndex:21},{value:"Name",paraId:82,tocIndex:21},{value:"Type",paraId:82,tocIndex:21},{value:"Required",paraId:82,tocIndex:21},{value:"Description",paraId:82,tocIndex:21},{value:"state",paraId:82,tocIndex:21},{value:"String",paraId:82,tocIndex:21},{value:"true",paraId:82,tocIndex:21},{value:"The state name of the item, e.g. ",paraId:82,tocIndex:21},{value:"'selected'",paraId:82,tocIndex:21},{value:", ",paraId:82,tocIndex:21},{value:"'hover'",paraId:82,tocIndex:21},{value:".",paraId:82,tocIndex:21},{value:"enable",paraId:82,tocIndex:21},{value:"Boolean",paraId:82,tocIndex:21},{value:"true",paraId:82,tocIndex:21},{value:"The flag to enable the state if it is ",paraId:82,tocIndex:21},{value:"true",paraId:82,tocIndex:21},{value:".",paraId:82,tocIndex:21},{value:"Usage",paraId:83,tocIndex:21},{value:"item.setState('selected', true);\nitem.setState('actived', false);\n",paraId:84,tocIndex:21},{value:"Clear all the states of the item. If the ",paraId:85,tocIndex:22},{value:"states",paraId:85,tocIndex:22},{value:" is null, this operatcion will clear ",paraId:85,tocIndex:22},{value:"the first",paraId:85,tocIndex:22},{value:" state of the item by default.",paraId:85,tocIndex:22},{value:"Parameters",paraId:86,tocIndex:22},{value:"Name",paraId:87,tocIndex:22},{value:"Type",paraId:87,tocIndex:22},{value:"Required",paraId:87,tocIndex:22},{value:"Description",paraId:87,tocIndex:22},{value:"states",paraId:87,tocIndex:22},{value:"String / Array",paraId:87,tocIndex:22},{value:"true",paraId:87,tocIndex:22},{value:"The names of the states to be cleared.",paraId:87,tocIndex:22},{value:"Usage",paraId:88,tocIndex:22},{value:"// Clear the state 'selected'\nitem.clearStates('selected');\n\n// Clear the states 'active' and 'hover'\nitem.clearStates(['actived', 'hover']);\n",paraId:89,tocIndex:22},{value:"Get all the states of the item.",paraId:90,tocIndex:23},{value:"Return",paraId:91,tocIndex:23},{value:"The type of return value: Array;",paraId:92,tocIndex:23},{value:"Returns an array of strings, which are the states of the item.",paraId:92,tocIndex:23},{value:"Usage",paraId:93,tocIndex:23},{value:"// Get all the states of the item\nconst states = item.getStates();\n",paraId:94,tocIndex:23},{value:"Query the ",paraId:95,tocIndex:24},{value:"state",paraId:95,tocIndex:24},{value:" value of the node.",paraId:95,tocIndex:24},{value:"Parameters",paraId:96,tocIndex:24},{value:"Name",paraId:97,tocIndex:24},{value:"Type",paraId:97,tocIndex:24},{value:"Required",paraId:97,tocIndex:24},{value:"Description",paraId:97,tocIndex:24},{value:"state",paraId:97,tocIndex:24},{value:"String",paraId:97,tocIndex:24},{value:"true",paraId:97,tocIndex:24},{value:"The state name.",paraId:97,tocIndex:24},{value:"Return",paraId:98,tocIndex:24},{value:"The type of return value: Boolean;",paraId:99,tocIndex:24},{value:"Returns ",paraId:99,tocIndex:24},{value:"true",paraId:99,tocIndex:24},{value:" if the item has the ",paraId:99,tocIndex:24},{value:"state",paraId:99,tocIndex:24},{value:". ",paraId:99,tocIndex:24},{value:"false",paraId:99,tocIndex:24},{value:" otherwise.",paraId:99,tocIndex:24},{value:"Usage",paraId:100,tocIndex:24},{value:"// Query value of state 'hover'\nconst state = item.hasState('hover');\n",paraId:101,tocIndex:24},{value:"Get the style of the item. The global style, default style, and custom style will be mixed in the return value.",paraId:102,tocIndex:26},{value:"Parameters",paraId:103,tocIndex:26},{value:"Name",paraId:104,tocIndex:26},{value:"Type",paraId:104,tocIndex:26},{value:"Required",paraId:104,tocIndex:26},{value:"Description",paraId:104,tocIndex:26},{value:"state",paraId:104,tocIndex:26},{value:"String",paraId:104,tocIndex:26},{value:"true",paraId:104,tocIndex:26},{value:"The state name.",paraId:104,tocIndex:26},{value:"Return",paraId:105,tocIndex:26},{value:"The type of return value: Object；",paraId:106,tocIndex:26},{value:"The global style, default style, and custom style will be mixed in the return value.",paraId:106,tocIndex:26},{value:"Usage",paraId:107,tocIndex:26},{value:"// Get the item's style of state 'selected'\nconst style = item.getStateStyle('selected');\n",paraId:108,tocIndex:26},{value:"Get the keyShape's style of the item.",paraId:109,tocIndex:27},{value:"Return",paraId:110,tocIndex:27},{value:"The type of return value: Object | undefined;",paraId:111,tocIndex:27},{value:"Returns the style of the ",paraId:111,tocIndex:27},{value:"keyShape",paraId:111,tocIndex:27},{value:" if it exists. Returns ",paraId:111,tocIndex:27},{value:"undefined",paraId:111,tocIndex:27},{value:" otherwise.",paraId:111,tocIndex:27},{value:"Usage",paraId:112,tocIndex:27},{value:"const style = item.getOriginStyle();\n",paraId:113,tocIndex:27},{value:"Get the item's styles of all the states.",paraId:114,tocIndex:28},{value:"Return",paraId:115,tocIndex:28},{value:"The type of return value: Object；",paraId:116,tocIndex:28},{value:"Returns the item's styles of all the states.",paraId:116,tocIndex:28},{value:"Usage",paraId:117,tocIndex:28},{value:"const styles = item.getCurrentStatesStyle();\n",paraId:118,tocIndex:28}]},95321:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"In a graph of G6, there are Node, Edge, and Combo items. Each ",paraId:0},{value:"item",paraId:1},{value:" is an instance with a data ",paraId:0},{value:"model",paraId:0},{value:" which defines the styles and configurations of the item. The ",paraId:0},{value:"Tutorial-Configure the Items",paraId:2},{value:" introduces two ways to configure the items: Configure the items globally when instantiating the Graph; Configure the items in the source data. No matter which way to configure the items, it is configuring the data ",paraId:0},{value:"model",paraId:0},{value:" for each item. This document introduces the configurations of the models of Node, Edge, and Combo.",paraId:0},{value:" ",paraId:3,tocIndex:0},{value:"String",paraId:3,tocIndex:0},{value:" ",paraId:3,tocIndex:0},{value:"required",paraId:3,tocIndex:0},{value:" ",paraId:3,tocIndex:0},{value:"The ID of the item, ",paraId:4,tocIndex:0},{value:"MUST",paraId:4,tocIndex:0},{value:" be unique and string",paraId:4,tocIndex:0},{value:" ",paraId:5,tocIndex:1},{value:"Object",paraId:5,tocIndex:1},{value:" ",paraId:5,tocIndex:1},{value:"optional",paraId:5,tocIndex:1},{value:" ",paraId:5,tocIndex:1},{value:"The style of the item's ",paraId:6,tocIndex:1},{value:"keyShape",paraId:7,tocIndex:1},{value:". Its properites are related to the type of the keyShape. Refer to ",paraId:6,tocIndex:1},{value:"Shape Style Properties",paraId:8,tocIndex:1},{value:" ",paraId:9,tocIndex:2},{value:"String",paraId:9,tocIndex:2},{value:" ",paraId:9,tocIndex:2},{value:"optional",paraId:9,tocIndex:2},{value:" ",paraId:9,tocIndex:2},{value:"The type name of the item. 'line' is the default value for Edge, 'circle' for Node, and 'circle' for Combo",paraId:10,tocIndex:2},{value:" ",paraId:11,tocIndex:3},{value:"String",paraId:11,tocIndex:3},{value:" ",paraId:11,tocIndex:3},{value:"optional",paraId:11,tocIndex:3},{value:" ",paraId:11,tocIndex:3},{value:"The text of the item's label. The text will be rendered if the ",paraId:12,tocIndex:3},{value:"label",paraId:12,tocIndex:3},{value:" property exist",paraId:12,tocIndex:3},{value:" ",paraId:13,tocIndex:4},{value:"Object",paraId:13,tocIndex:4},{value:" ",paraId:13,tocIndex:4},{value:"optional",paraId:13,tocIndex:4},{value:" ",paraId:13,tocIndex:4},{value:"The configurations for the label. It is different for Node, Combo, and Edge. Check out the following content for more detail",paraId:14,tocIndex:4}]},55380:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Node inherits from item. The functions of Item are also available for Node. This document will only introduce the common functions for Node class. All the built-in nodes can be found in ",paraId:0},{value:"Built-in Nodes Doc",paraId:1},{value:" and ",paraId:0},{value:"demo",paraId:2},{value:", Custom Node can be found in ",paraId:0},{value:"Custom Node Doc",paraId:3},{value:" and ",paraId:0},{value:"demo",paraId:4},{value:".",paraId:0},{value:"Lock the current node. The locked node will not response the drag event any more.",paraId:5,tocIndex:0},{value:"Tips: the locked node still can be moved while dragging and zooming the canvas. If you want to fix the node in these two situations, please refer to ",paraId:6,tocIndex:0},{value:"Fix the Locked Node While Dragging",paraId:7,tocIndex:0},{value:" and ",paraId:6,tocIndex:0},{value:"Fix the Locked Node while Zooming",paraId:8,tocIndex:0},{value:" to register a custom Behavior.",paraId:6,tocIndex:0},{value:"Usage",paraId:9,tocIndex:0},{value:"const node = graph.findById('node');\nnode.lock();\n",paraId:10,tocIndex:0},{value:"Unlock the locked node.",paraId:11,tocIndex:1},{value:"Usage",paraId:12,tocIndex:1},{value:"const node = graph.findById('node');\nnode.unlock();\n",paraId:13,tocIndex:1},{value:"Query the lock state of the node.",paraId:14,tocIndex:2},{value:"Return",paraId:15,tocIndex:2},{value:"The type of return value: Boolean;",paraId:16,tocIndex:2},{value:"The node is locked if it returns ",paraId:16,tocIndex:2},{value:"true",paraId:16,tocIndex:2},{value:", unlocked otherwise.",paraId:16,tocIndex:2},{value:"Usage",paraId:17,tocIndex:2},{value:"const node = graph.findById('node');\nconst hasLocked = node.hasLocked();\n",paraId:18,tocIndex:2},{value:"Parameters",paraId:19,tocIndex:3},{value:"Name",paraId:20,tocIndex:3},{value:"Type",paraId:20,tocIndex:3},{value:"Required",paraId:20,tocIndex:3},{value:"Description",paraId:20,tocIndex:3},{value:"type",paraId:20,tocIndex:3},{value:"'source' / 'target' / undefined",paraId:20,tocIndex:3},{value:"false",paraId:20,tocIndex:3},{value:"The type of the neighbors, 'source': only return the source nodes; 'target': only return the target nodes, undefined: return all of the neighbors",paraId:20,tocIndex:3},{value:"Return",paraId:21,tocIndex:3},{value:"Type of the return value: Array;",paraId:22,tocIndex:3},{value:"Return a list of node items.",paraId:22,tocIndex:3},{value:"Usage",paraId:23,tocIndex:3},{value:"const neighbors = node.getNeighbors('source');\n",paraId:24,tocIndex:3},{value:"Get the related edges (the node is the source or the target of the edge) of the node.",paraId:25,tocIndex:4},{value:"Return",paraId:26,tocIndex:4},{value:"The type of return value: Edge[];",paraId:27,tocIndex:4},{value:"Returns the set of related edge items.",paraId:27,tocIndex:4},{value:"Usage",paraId:28,tocIndex:4},{value:"// Get the related edges\nconst edges = node.getEdges();\n",paraId:29,tocIndex:4},{value:"Get the related in-edges, whose target is the node.",paraId:30,tocIndex:5},{value:"Return",paraId:31,tocIndex:5},{value:"The type of return value: Edge[];",paraId:32,tocIndex:5},{value:"Returns the set of related in-edges.",paraId:32,tocIndex:5},{value:"Usage",paraId:33,tocIndex:5},{value:"// Get the related in-edges\nconst edges = node.getInEdges();\n",paraId:34,tocIndex:5},{value:"Get the related out-edges, whose source is the node.",paraId:35,tocIndex:6},{value:"Return",paraId:36,tocIndex:6},{value:"The type of return value: Edge[];",paraId:37,tocIndex:6},{value:"Return the set of related out-edges.",paraId:37,tocIndex:6},{value:"Usage",paraId:38,tocIndex:6},{value:"// Get the related out-edges\nconst edges = node.getOutEdges();\n",paraId:39,tocIndex:6},{value:"Get all the anchor points of the node.",paraId:40,tocIndex:7},{value:"Return",paraId:41,tocIndex:7},{value:"The type of return value: Array;",paraId:42,tocIndex:7},{value:"The data structure of the return value:",paraId:42,tocIndex:7},{value:"[\n  [100, 105],\n  [200, 105]\n];\n",paraId:43,tocIndex:7},{value:"Usage",paraId:44,tocIndex:7},{value:"// Get the anchor points of the node\nconst anchor = node.getAnchorPoints();\n",paraId:45,tocIndex:7},{value:"Get the nearest anchor point of the node to ",paraId:46,tocIndex:8},{value:"point",paraId:46,tocIndex:8},{value:".",paraId:46,tocIndex:8},{value:"Parameters",paraId:47,tocIndex:8},{value:"Name",paraId:48,tocIndex:8},{value:"Type",paraId:48,tocIndex:8},{value:"Required",paraId:48,tocIndex:8},{value:"Description",paraId:48,tocIndex:8},{value:"point",paraId:48,tocIndex:8},{value:"Object",paraId:48,tocIndex:8},{value:"true",paraId:48,tocIndex:8},{value:"A point with x and y ouside the node.",paraId:48,tocIndex:8},{value:"Return",paraId:49,tocIndex:8},{value:"The type of return value: Object；",paraId:50,tocIndex:8},{value:"Returns (x, y) of the found anchor point. If there is no anchor point found, returns the center of the node.",paraId:50,tocIndex:8},{value:"Usage",paraId:51,tocIndex:8},{value:"const point = {\n  x: 100,\n  y: 105,\n};\n// Get the anchor point which is nearest to the point\nconst linkPoint = node.getLinkPoint(point);\n",paraId:52,tocIndex:8},{value:"Get the (x, y) of the anchor point with the ",paraId:53,tocIndex:9},{value:"index",paraId:53,tocIndex:9},{value:".",paraId:53,tocIndex:9},{value:"Parameters",paraId:54,tocIndex:9},{value:"Name",paraId:55,tocIndex:9},{value:"Type",paraId:55,tocIndex:9},{value:"Required",paraId:55,tocIndex:9},{value:"Description",paraId:55,tocIndex:9},{value:"index",paraId:55,tocIndex:9},{value:"Number",paraId:55,tocIndex:9},{value:"true",paraId:55,tocIndex:9},{value:"The index of the anchor point.",paraId:55,tocIndex:9},{value:"Return",paraId:56,tocIndex:9},{value:"The type of return value: Object;",paraId:57,tocIndex:9},{value:"Returns the (x, y) of found anchor point.",paraId:57,tocIndex:9},{value:"Usage",paraId:58,tocIndex:9},{value:"// Get the first anchor point of the node\nconst anchor = node.getLinkPointByAnchor(0);\n",paraId:59,tocIndex:9},{value:"Add the ",paraId:60,tocIndex:10},{value:"edge",paraId:60,tocIndex:10},{value:" to the node.",paraId:60,tocIndex:10},{value:"Parameters",paraId:61,tocIndex:10},{value:"Name",paraId:62,tocIndex:10},{value:"Type",paraId:62,tocIndex:10},{value:"Required",paraId:62,tocIndex:10},{value:"Description",paraId:62,tocIndex:10},{value:"edge",paraId:62,tocIndex:10},{value:"Edge",paraId:62,tocIndex:10},{value:"true",paraId:62,tocIndex:10},{value:"The item of the edge.",paraId:62,tocIndex:10},{value:"Usage",paraId:63,tocIndex:10},{value:"const edge = new Edge({\n  // TODO\n});\nnode.addEdge(edge);\n",paraId:64,tocIndex:10},{value:"Remove the ",paraId:65,tocIndex:11},{value:"edge",paraId:65,tocIndex:11},{value:" from the node.",paraId:65,tocIndex:11},{value:"Parameters",paraId:66,tocIndex:11},{value:"Name",paraId:67,tocIndex:11},{value:"Type",paraId:67,tocIndex:11},{value:"Required",paraId:67,tocIndex:11},{value:"Description",paraId:67,tocIndex:11},{value:"edge",paraId:67,tocIndex:11},{value:"Edge",paraId:67,tocIndex:11},{value:"true",paraId:67,tocIndex:11},{value:"The item of Edge.",paraId:67,tocIndex:11},{value:"Usage",paraId:68,tocIndex:11},{value:"const edge = graph.findById('edge1');\nnode.removeEdge(edge);\n",paraId:69,tocIndex:11}]},94156:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Except for the common properties, apart from the ",paraId:0},{value:"Item Model Properities",paraId:1},{value:", there are special configurations for Nodes. The ",paraId:0},{value:"style",paraId:0},{value:"s of them depend on their keyShape.",paraId:0},{value:" ",paraId:2,tocIndex:1},{value:"String",paraId:2,tocIndex:1},{value:" ",paraId:2,tocIndex:1},{value:"required",paraId:2,tocIndex:1},{value:" ",paraId:2,tocIndex:1},{value:"The ID of the node, ",paraId:3,tocIndex:1},{value:"MUST",paraId:3,tocIndex:1},{value:" be a unique string.",paraId:3,tocIndex:1},{value:" ",paraId:4,tocIndex:2},{value:"Number",paraId:4,tocIndex:2},{value:" ",paraId:4,tocIndex:2},{value:"optional",paraId:4,tocIndex:2},{value:" ",paraId:4,tocIndex:2},{value:"x coordinate.",paraId:5,tocIndex:2},{value:" ",paraId:6,tocIndex:3},{value:"Number",paraId:6,tocIndex:3},{value:" ",paraId:6,tocIndex:3},{value:"optional",paraId:6,tocIndex:3},{value:" ",paraId:6,tocIndex:3},{value:"y coordinate.",paraId:7,tocIndex:3},{value:" ",paraId:8,tocIndex:4},{value:"String",paraId:8,tocIndex:4},{value:" ",paraId:8,tocIndex:4},{value:"optional",paraId:8,tocIndex:4},{value:" ",paraId:8,tocIndex:4},{value:"default:",paraId:8,tocIndex:4},{value:": ",paraId:8,tocIndex:4},{value:"'circle'",paraId:8,tocIndex:4},{value:"The shape type of the node. It can be the type of built-in Node, or the custom Node. ",paraId:9,tocIndex:4},{value:"'circle'",paraId:9,tocIndex:4},{value:" by default.",paraId:9,tocIndex:4},{value:" ",paraId:10,tocIndex:5},{value:"Number | Array",paraId:10,tocIndex:5},{value:" ",paraId:10,tocIndex:5},{value:"optional",paraId:10,tocIndex:5},{value:" ",paraId:10,tocIndex:5},{value:"default:",paraId:10,tocIndex:5},{value:": ",paraId:10,tocIndex:5},{value:"20",paraId:10,tocIndex:5},{value:"The size of the node.",paraId:11,tocIndex:5},{value:" ",paraId:12,tocIndex:6},{value:"Array",paraId:12,tocIndex:6},{value:" ",paraId:12,tocIndex:6},{value:"optional",paraId:12,tocIndex:6},{value:" ",paraId:12,tocIndex:6},{value:"The interactions of the node and related edges. It can be null. [0, 0] represents the anchor on the left top; [1, 1] represents the anchor ont he right bottom.",paraId:13,tocIndex:6},{value:" ",paraId:14,tocIndex:7},{value:"Object",paraId:14,tocIndex:7},{value:" ",paraId:14,tocIndex:7},{value:"optional",paraId:14,tocIndex:7},{value:" ",paraId:14,tocIndex:7},{value:"The node style. ",paraId:15,tocIndex:7},{value:"style",paraId:15,tocIndex:7},{value:" is an object to configure the filling color, stroke color, shadow, and so on. Please refer to: ",paraId:15,tocIndex:7},{value:"Shape Properties",paraId:16,tocIndex:7},{value:"。",paraId:15,tocIndex:7},{value:" ",paraId:17,tocIndex:8},{value:"String",paraId:17,tocIndex:8},{value:" ",paraId:17,tocIndex:8},{value:"optional",paraId:17,tocIndex:8},{value:" ",paraId:17,tocIndex:8},{value:"The label text of the node.",paraId:18,tocIndex:8},{value:"Name",paraId:19,tocIndex:9},{value:"Required",paraId:19,tocIndex:9},{value:"Type",paraId:19,tocIndex:9},{value:"Remark",paraId:19,tocIndex:9},{value:"position",paraId:19,tocIndex:9},{value:"false",paraId:19,tocIndex:9},{value:"String",paraId:19,tocIndex:9},{value:"The relative positions to the node. Options: ",paraId:19,tocIndex:9},{value:"'center'",paraId:19,tocIndex:9},{value:", ",paraId:19,tocIndex:9},{value:"'top'",paraId:19,tocIndex:9},{value:", ",paraId:19,tocIndex:9},{value:"'left'",paraId:19,tocIndex:9},{value:", ",paraId:19,tocIndex:9},{value:"'right'",paraId:19,tocIndex:9},{value:", ",paraId:19,tocIndex:9},{value:"'bottom'",paraId:19,tocIndex:9},{value:". ",paraId:19,tocIndex:9},{value:"'center'",paraId:19,tocIndex:9},{value:" by default.",paraId:19,tocIndex:9},{value:"offset",paraId:19,tocIndex:9},{value:"false",paraId:19,tocIndex:9},{value:"Number",paraId:19,tocIndex:9},{value:"The offset value of the label. When the ",paraId:19,tocIndex:9},{value:"position",paraId:19,tocIndex:9},{value:" is ",paraId:19,tocIndex:9},{value:"'bottom'",paraId:19,tocIndex:9},{value:", the value is the top offset of the node; When the ",paraId:19,tocIndex:9},{value:"position",paraId:19,tocIndex:9},{value:" is ",paraId:19,tocIndex:9},{value:"'left'",paraId:19,tocIndex:9},{value:", the value is the right offset of the node; it is similar with other ",paraId:19,tocIndex:9},{value:"position",paraId:19,tocIndex:9},{value:".",paraId:19,tocIndex:9},{value:"style",paraId:19,tocIndex:9},{value:"false",paraId:19,tocIndex:9},{value:"Object",paraId:19,tocIndex:9},{value:"The style property of the label. The complete configurations for the label style is listed in ",paraId:19,tocIndex:9},{value:"Shape Style Properties - Text",paraId:20,tocIndex:9},{value:"The special properties for each built-in Nodes can be found in the subdocuments of ",paraId:21,tocIndex:10},{value:"Built-in Nodes",paraId:22,tocIndex:10},{value:".",paraId:21,tocIndex:10}]},99356:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"There are several plugins in G6 which can be used for G6's graph or other applications.",paraId:0},{value:"Legend",paraId:1},{value:" ",paraId:2},{value:"supported by v4.3.0 and later versions",paraId:2},{value:"SnapLine",paraId:3},{value:" ",paraId:2},{value:"supported by v4.3.0 and later versions",paraId:2},{value:"Grid",paraId:4},{value:"Minimap",paraId:5},{value:"Edge Bundling",paraId:6},{value:"Menu",paraId:7},{value:"ToolBar",paraId:8},{value:"TimeBar",paraId:9},{value:"Tooltip",paraId:10},{value:"Fisheye",paraId:11},{value:"EdgeFilterLens",paraId:12},{value:"Instantiate the plugin and configure the minimap onto the instance of Graph:",paraId:13,tocIndex:0},{value:"// Instantialize the Grid plugin\nconst grid = new G6.Grid();\n// Instantialize the Minimap plugin\nconst minimap = new G6.Minimap();\nconst graph = new G6.Graph({\n  //... Other configurations\n  plugins: [grid, minimap], // Configure Grid and Minimap to the graph\n});\n",paraId:14,tocIndex:0},{value:"Legend is a built-in legend plugin for G6. It is useful for npde/edge type demonstration, and the end-users are able to interact with the legend to highlight and filter the items on the graph. ",paraId:15,tocIndex:1},{value:"supported after v4.3.0",paraId:15,tocIndex:1},{value:".",paraId:15,tocIndex:1},{value:"Name",paraId:16,tocIndex:2},{value:"Type",paraId:16,tocIndex:2},{value:"Description",paraId:16,tocIndex:2},{value:"data",paraId:16,tocIndex:2},{value:"GraphData",paraId:16,tocIndex:2},{value:"The data for the legend, not related to the data of the graph. The legend for nodes currently supports ",paraId:16,tocIndex:2},{value:"'circle'",paraId:16,tocIndex:2},{value:", ",paraId:16,tocIndex:2},{value:"'rect'",paraId:16,tocIndex:2},{value:", and ",paraId:16,tocIndex:2},{value:"'ellipse'",paraId:16,tocIndex:2},{value:". The legend for edges currently supports ",paraId:16,tocIndex:2},{value:"'line'",paraId:16,tocIndex:2},{value:", ",paraId:16,tocIndex:2},{value:"'cubic'",paraId:16,tocIndex:2},{value:", and ",paraId:16,tocIndex:2},{value:"'quadratic'",paraId:16,tocIndex:2},{value:". ",paraId:16,tocIndex:2},{value:"type",paraId:16,tocIndex:2},{value:" for each data means the type of the legend item, and the ",paraId:16,tocIndex:2},{value:"order",paraId:16,tocIndex:2},{value:" could be assigned to each node/edge data for ordering in a legend group",paraId:16,tocIndex:2},{value:"position",paraId:16,tocIndex:2},{value:"'top' / 'top-left' / 'top-right' / 'right' / 'right-top' / 'right-bottom' / 'left' / 'left-top' / 'left-bottom' / 'bottom' / 'bottom-left' / 'bottom-right'",paraId:16,tocIndex:2},{value:"The relative of the position to the canvas. ",paraId:16,tocIndex:2},{value:"'top'",paraId:16,tocIndex:2},{value:" by default, which means the legend area is on the top of the canvas",paraId:16,tocIndex:2},{value:"padding",paraId:16,tocIndex:2},{value:"number / number[]",paraId:16,tocIndex:2},{value:"The inner distance between the content of the legend to the border of the legend area. Array with four numbers means the padding to the top, right, bottom, and left responsively",paraId:16,tocIndex:2},{value:"margin",paraId:16,tocIndex:2},{value:"number / number[]",paraId:16,tocIndex:2},{value:"The outer distance between the legend area to the border of the canvas. Array with four numbers means the distance to the top, right, bottom, and left responsively. Only the top distance takes effect when  ",paraId:16,tocIndex:2},{value:"position:'top'",paraId:16,tocIndex:2},{value:", situations for other ",paraId:16,tocIndex:2},{value:"position",paraId:16,tocIndex:2},{value:" configurations are similar to it",paraId:16,tocIndex:2},{value:"offsetX",paraId:16,tocIndex:2},{value:"number",paraId:16,tocIndex:2},{value:"The x-axis offset for the legend area, it is useful when you want to adjust the position of the lenged slightly",paraId:16,tocIndex:2},{value:"offsetY",paraId:16,tocIndex:2},{value:"number",paraId:16,tocIndex:2},{value:"The y-axis offset for the legend area, it is useful when you want to adjust the position of the lenged slightly",paraId:16,tocIndex:2},{value:"containerStyle",paraId:16,tocIndex:2},{value:"ShapeStyle",paraId:16,tocIndex:2},{value:"The style for the background rect, the format is similar as ",paraId:16,tocIndex:2},{value:"rect shape style",paraId:17,tocIndex:2},{value:"horiSep",paraId:16,tocIndex:2},{value:"number",paraId:16,tocIndex:2},{value:"The horizontal seperation of the legend items",paraId:16,tocIndex:2},{value:"vertiSep",paraId:16,tocIndex:2},{value:"number",paraId:16,tocIndex:2},{value:"The vertical seperation of the legend items",paraId:16,tocIndex:2},{value:"layout",paraId:16,tocIndex:2},{value:"'vertical' / 'horizontal'",paraId:16,tocIndex:2},{value:"The layout of the legend items. ",paraId:16,tocIndex:2},{value:"'horizontal'",paraId:16,tocIndex:2},{value:" by default",paraId:16,tocIndex:2},{value:"align",paraId:16,tocIndex:2},{value:"'center' / 'right' / 'left'",paraId:16,tocIndex:2},{value:"The alignment of the legend items.  ",paraId:16,tocIndex:2},{value:"'center'",paraId:16,tocIndex:2},{value:" by default",paraId:16,tocIndex:2},{value:"title",paraId:16,tocIndex:2},{value:"string",paraId:16,tocIndex:2},{value:"The title string for the legend, the style of the title could be configured by ",paraId:16,tocIndex:2},{value:"titleConfig",paraId:16,tocIndex:2},{value:"titleConfig",paraId:16,tocIndex:2},{value:"object",paraId:16,tocIndex:2},{value:"The style of the legend title, detail configurations are shown in following lines",paraId:16,tocIndex:2},{value:"titleConfig.position",paraId:16,tocIndex:2},{value:"'center' / 'right' / 'left'",paraId:16,tocIndex:2},{value:"The alignment of the title to the legend content. ",paraId:16,tocIndex:2},{value:"'center'",paraId:16,tocIndex:2},{value:" by default",paraId:16,tocIndex:2},{value:"titleConfig.offsetX",paraId:16,tocIndex:2},{value:"number",paraId:16,tocIndex:2},{value:"The x-axis offset for the legend title, it is useful when you want to adjust the position of the title slightly",paraId:16,tocIndex:2},{value:"titleConfig.offsetY",paraId:16,tocIndex:2},{value:"number",paraId:16,tocIndex:2},{value:"The y-axis offset for the legend title, it is useful when you want to adjust the position of the title slightly",paraId:16,tocIndex:2},{value:"titleConfig[key]",paraId:16,tocIndex:2},{value:"ShapeStyle",paraId:16,tocIndex:2},{value:"Other styles for the text, configurations are same as ",paraId:16,tocIndex:2},{value:"text shape style",paraId:18,tocIndex:2},{value:"filter",paraId:16,tocIndex:2},{value:"object",paraId:16,tocIndex:2},{value:"Configurations for the graph item filtering while the end-user interacting with the legend items. Detials are shown in the following lines",paraId:16,tocIndex:2},{value:"filter.enable",paraId:16,tocIndex:2},{value:"boolean",paraId:16,tocIndex:2},{value:"Whether allow filtering the items in the main graph while the end-user interaction with the legend items. ",paraId:16,tocIndex:2},{value:"false",paraId:16,tocIndex:2},{value:" by default",paraId:16,tocIndex:2},{value:"filter.multiple",paraId:16,tocIndex:2},{value:"boolean",paraId:16,tocIndex:2},{value:"Whether support active multiple types of legend items, ",paraId:16,tocIndex:2},{value:"false",paraId:16,tocIndex:2},{value:" by default, which means only one type of legend item will be activated in the same time. If it is ",paraId:16,tocIndex:2},{value:"true",paraId:16,tocIndex:2},{value:", multiple items could be activated only when the ",paraId:16,tocIndex:2},{value:"filter.trigger",paraId:16,tocIndex:2},{value:" is ",paraId:16,tocIndex:2},{value:"'click'",paraId:16,tocIndex:2},{value:"filter.trigger",paraId:16,tocIndex:2},{value:"'click' / 'mouseenter'",paraId:16,tocIndex:2},{value:"The interaction way to the legend items. ",paraId:16,tocIndex:2},{value:"click",paraId:16,tocIndex:2},{value:" by default, which means while the end-user clicking a legend item, the legend item and corresponding filtered items on the main graph will be activated",paraId:16,tocIndex:2},{value:"filter.legendStateStyles",paraId:16,tocIndex:2},{value:"{ active?: ShapeStyle, inactive?: ShapeStyle",paraId:16,tocIndex:2},{value:"The state styles for the legend items while filtering, inluding ",paraId:16,tocIndex:2},{value:"filter.legendStateStyles.active",paraId:16,tocIndex:2},{value:" and ",paraId:16,tocIndex:2},{value:"filter.legendStateStyles.inactive",paraId:16,tocIndex:2},{value:". The type of each one is ",paraId:16,tocIndex:2},{value:"ShapeStyle",paraId:16,tocIndex:2},{value:". Similar to the ",paraId:16,tocIndex:2},{value:"nodeStateStyles",paraId:16,tocIndex:2},{value:" of Graph",paraId:16,tocIndex:2},{value:"filter.graphActiveState",paraId:16,tocIndex:2},{value:"string",paraId:16,tocIndex:2},{value:"The activate state name for the items on the main graph. When a lenged item is activated, the corresponding items of the main graph will be set to ",paraId:16,tocIndex:2},{value:"filter.graphActiveState",paraId:16,tocIndex:2},{value:", ",paraId:16,tocIndex:2},{value:"'active'",paraId:16,tocIndex:2},{value:" by default. And you should assign the state style for this state name on Graph",paraId:16,tocIndex:2},{value:"filter.graphInactiveState",paraId:16,tocIndex:2},{value:"string",paraId:16,tocIndex:2},{value:"The inactivate state name for the items on the main graph. When a lenged item is inactivated, the corresponding items of the main graph will be set to ",paraId:16,tocIndex:2},{value:"filter.graphInactiveState",paraId:16,tocIndex:2},{value:", ",paraId:16,tocIndex:2},{value:"'inactive'",paraId:16,tocIndex:2},{value:" by default. And you should assign the state style for this state name on Graph",paraId:16,tocIndex:2},{value:"filter.filterFunctions",paraId:16,tocIndex:2},{value:"{ [key: string]: (d) => boolean; }",paraId:16,tocIndex:2},{value:"Since the data of the legend is not related to the main graph, you should configure filtering functions for each legend item type. The ",paraId:16,tocIndex:2},{value:"key",paraId:16,tocIndex:2},{value:" is corresponding to the ",paraId:16,tocIndex:2},{value:"type",paraId:16,tocIndex:2},{value:" of the legend item, and the value is a function. For the function, the parameter is the item data of the main graph, and the return value is a boolean which means whether the item of the main graph should be activated",paraId:16,tocIndex:2},{value:"SnapLine is a built-in components in G6. ",paraId:19,tocIndex:3},{value:"supported by v4.3.0 and later versions",paraId:19,tocIndex:3},{value:".",paraId:19,tocIndex:3},{value:"Name",paraId:20,tocIndex:4},{value:"Type",paraId:20,tocIndex:4},{value:"Required",paraId:20,tocIndex:4},{value:"Description",paraId:20,tocIndex:4},{value:"line",paraId:20,tocIndex:4},{value:"ShapeStyle",paraId:20,tocIndex:4},{value:"false",paraId:20,tocIndex:4},{value:"the style of SnapLine",paraId:20,tocIndex:4},{value:"itemAlignType",paraId:20,tocIndex:4},{value:"boolean、'horizontal' 、'vertical'、'center';",paraId:20,tocIndex:4},{value:"false",paraId:20,tocIndex:4},{value:"the type of SnapLine",paraId:20,tocIndex:4},{value:"Grid plugin draws grids on the canvas.",paraId:21,tocIndex:5},{value:"Use the code in ",paraId:22,tocIndex:5},{value:"Configure to Graph",paraId:23,tocIndex:5},{value:" to instantiate grid plugin with the following configurations.",paraId:22,tocIndex:5},{value:"Name",paraId:24,tocIndex:6},{value:"Type",paraId:24,tocIndex:6},{value:"Required",paraId:24,tocIndex:6},{value:"Description",paraId:24,tocIndex:6},{value:"img",paraId:24,tocIndex:6},{value:"Srting",paraId:24,tocIndex:6},{value:"false",paraId:24,tocIndex:6},{value:"base64 formatted string for the grid image",paraId:24,tocIndex:6},{value:"Minimap is a tool for quick preview and exploration on large graph.",paraId:25,tocIndex:7},{value:"It can be configured to adjust the styles and functions.",paraId:26,tocIndex:7},{value:"Name",paraId:27,tocIndex:8},{value:"Type",paraId:27,tocIndex:8},{value:"Required",paraId:27,tocIndex:8},{value:"Description",paraId:27,tocIndex:8},{value:"container",paraId:27,tocIndex:8},{value:"Object",paraId:27,tocIndex:8},{value:"false",paraId:27,tocIndex:8},{value:"The DOM container of Minimap. The plugin will generate a new one if ",paraId:27,tocIndex:8},{value:"container",paraId:27,tocIndex:8},{value:" is not defined",paraId:27,tocIndex:8},{value:"className",paraId:27,tocIndex:8},{value:"String",paraId:27,tocIndex:8},{value:"false",paraId:27,tocIndex:8},{value:"The className of the DOM element of the Minimap",paraId:27,tocIndex:8},{value:"viewportClassName",paraId:27,tocIndex:8},{value:"String",paraId:27,tocIndex:8},{value:"false",paraId:27,tocIndex:8},{value:"The className of the DOM element of the view port on the Minimap",paraId:27,tocIndex:8},{value:"type",paraId:27,tocIndex:8},{value:"String",paraId:27,tocIndex:8},{value:"false",paraId:27,tocIndex:8},{value:"Render type. Options: ",paraId:27,tocIndex:8},{value:"'default'",paraId:27,tocIndex:8},{value:": Render all the graphics shapes on the graph; ",paraId:27,tocIndex:8},{value:"'keyShape'",paraId:27,tocIndex:8},{value:": Only render the keyShape of the items on the graph to reach better performance; ",paraId:27,tocIndex:8},{value:"'delegate'",paraId:27,tocIndex:8},{value:": Only render the delegate of the items on the graph to reach better performance. Performance: ",paraId:27,tocIndex:8},{value:"'default'",paraId:27,tocIndex:8},{value:" < ",paraId:27,tocIndex:8},{value:"'keyShape'",paraId:27,tocIndex:8},{value:" < ",paraId:27,tocIndex:8},{value:"'delegate'",paraId:27,tocIndex:8},{value:". ",paraId:27,tocIndex:8},{value:"'default'",paraId:27,tocIndex:8},{value:" by default",paraId:27,tocIndex:8},{value:"size",paraId:27,tocIndex:8},{value:"Array",paraId:27,tocIndex:8},{value:"false",paraId:27,tocIndex:8},{value:"The size of the Minimap",paraId:27,tocIndex:8},{value:"delegateStyle",paraId:27,tocIndex:8},{value:"Object",paraId:27,tocIndex:8},{value:"false",paraId:27,tocIndex:8},{value:"Takes effect when ",paraId:27,tocIndex:8},{value:"type",paraId:27,tocIndex:8},{value:" is ",paraId:27,tocIndex:8},{value:"'delegate'",paraId:27,tocIndex:8},{value:". The style of the delegate of the items on the graph",paraId:27,tocIndex:8},{value:"hideEdge",paraId:27,tocIndex:8},{value:"Boolean",paraId:27,tocIndex:8},{value:"false",paraId:27,tocIndex:8},{value:"Supported by v4.7.16",paraId:27,tocIndex:8},{value:" Whether to hide the edges on minimap to enhance the performance",paraId:27,tocIndex:8},{value:"The ",paraId:28,tocIndex:8},{value:"delegateStyle",paraId:28,tocIndex:8},{value:" has the properties:",paraId:28,tocIndex:8},{value:"Name",paraId:29,tocIndex:8},{value:"Type",paraId:29,tocIndex:8},{value:"Required",paraId:29,tocIndex:8},{value:"Description",paraId:29,tocIndex:8},{value:"fill",paraId:29,tocIndex:8},{value:"String",paraId:29,tocIndex:8},{value:"false",paraId:29,tocIndex:8},{value:"Filling color",paraId:29,tocIndex:8},{value:"stroke",paraId:29,tocIndex:8},{value:"String",paraId:29,tocIndex:8},{value:"false",paraId:29,tocIndex:8},{value:"Stroke color",paraId:29,tocIndex:8},{value:"lineWidth",paraId:29,tocIndex:8},{value:"Number",paraId:29,tocIndex:8},{value:"false",paraId:29,tocIndex:8},{value:"The width of the stroke",paraId:29,tocIndex:8},{value:"opacity",paraId:29,tocIndex:8},{value:"Number",paraId:29,tocIndex:8},{value:"false",paraId:29,tocIndex:8},{value:"Opacity",paraId:29,tocIndex:8},{value:"fillOpacity",paraId:29,tocIndex:8},{value:"Number",paraId:29,tocIndex:8},{value:"false",paraId:29,tocIndex:8},{value:"Filling opacity",paraId:29,tocIndex:8},{value:"The theory of the ",paraId:30,tocIndex:9},{value:"Minimap",paraId:31,tocIndex:9},{value:" is copy the graphics from the main graph onto the canvas of the minimap, which will lead to double rendering cost. To alleviate this problem, G6 provides another Image Minimap which is drawn by one ",paraId:30,tocIndex:9},{value:"<img />",paraId:30,tocIndex:9},{value:" instead of canvas. But you have to provide the ",paraId:30,tocIndex:9},{value:"graphImg",paraId:30,tocIndex:9},{value:" which is the url or base64 string of the main graph's screenshot image, and the image is controlled by yourself totally, which means you might need to update the image by calling ",paraId:30,tocIndex:9},{value:"minimap.updateGraphImg",paraId:30,tocIndex:9},{value:" manually when the content of the main graph is changed.",paraId:30,tocIndex:9},{value:"Configure the Image Minimap when instantiating the minimap.",paraId:32,tocIndex:9},{value:"Name",paraId:33,tocIndex:10},{value:"Type",paraId:33,tocIndex:10},{value:"Required",paraId:33,tocIndex:10},{value:"Description",paraId:33,tocIndex:10},{value:"graphImg",paraId:33,tocIndex:10},{value:"String",paraId:33,tocIndex:10},{value:"true",paraId:33,tocIndex:10},{value:"The src or base64 string of the minimap",paraId:33,tocIndex:10},{value:"width",paraId:33,tocIndex:10},{value:"Number",paraId:33,tocIndex:10},{value:"false",paraId:33,tocIndex:10},{value:"The width of the minimap. The aspect ratio of the minimap will always be the same as the main graph. The ",paraId:33,tocIndex:10},{value:"width",paraId:33,tocIndex:10},{value:"'s priority is higher than ",paraId:33,tocIndex:10},{value:"height",paraId:33,tocIndex:10},{value:", that is, if the ",paraId:33,tocIndex:10},{value:"width",paraId:33,tocIndex:10},{value:"is assigned, the ",paraId:33,tocIndex:10},{value:"height",paraId:33,tocIndex:10},{value:" will be adjusted to meet the aspect ratio",paraId:33,tocIndex:10},{value:"height",paraId:33,tocIndex:10},{value:"Number",paraId:33,tocIndex:10},{value:"false",paraId:33,tocIndex:10},{value:"The height of the minimap. The aspect ratio of the minimap will always be the same as the main graph. If the ",paraId:33,tocIndex:10},{value:"width",paraId:33,tocIndex:10},{value:" is not assigned while the ",paraId:33,tocIndex:10},{value:"height",paraId:33,tocIndex:10},{value:" is assigned, the ",paraId:33,tocIndex:10},{value:"width",paraId:33,tocIndex:10},{value:" will be equal to ",paraId:33,tocIndex:10},{value:"height",paraId:33,tocIndex:10},{value:" * aspect ratio",paraId:33,tocIndex:10},{value:"container",paraId:33,tocIndex:10},{value:"Object",paraId:33,tocIndex:10},{value:"false",paraId:33,tocIndex:10},{value:"The DOM container of Minimap. The plugin will generate a new one if ",paraId:33,tocIndex:10},{value:"container",paraId:33,tocIndex:10},{value:" is not defined",paraId:33,tocIndex:10},{value:"className",paraId:33,tocIndex:10},{value:"String",paraId:33,tocIndex:10},{value:"false",paraId:33,tocIndex:10},{value:"The className of the DOM element of the Minimap",paraId:33,tocIndex:10},{value:"viewportClassName",paraId:33,tocIndex:10},{value:"String",paraId:33,tocIndex:10},{value:"false",paraId:33,tocIndex:10},{value:"The className of the DOM element of the view port on the Minimap",paraId:33,tocIndex:10},{value:"delegateStyle",paraId:33,tocIndex:10},{value:"Object",paraId:33,tocIndex:10},{value:"false",paraId:33,tocIndex:10},{value:"Takes effect when ",paraId:33,tocIndex:10},{value:"type",paraId:33,tocIndex:10},{value:" is ",paraId:33,tocIndex:10},{value:"'delegate'",paraId:33,tocIndex:10},{value:". The style of the delegate of the items on the graph",paraId:33,tocIndex:10},{value:"The ",paraId:34,tocIndex:10},{value:"delegateStyle",paraId:34,tocIndex:10},{value:" has the properties:",paraId:34,tocIndex:10},{value:"Name",paraId:35,tocIndex:10},{value:"Type",paraId:35,tocIndex:10},{value:"Required",paraId:35,tocIndex:10},{value:"Description",paraId:35,tocIndex:10},{value:"fill",paraId:35,tocIndex:10},{value:"String",paraId:35,tocIndex:10},{value:"false",paraId:35,tocIndex:10},{value:"Filling color",paraId:35,tocIndex:10},{value:"stroke",paraId:35,tocIndex:10},{value:"String",paraId:35,tocIndex:10},{value:"false",paraId:35,tocIndex:10},{value:"Stroke color",paraId:35,tocIndex:10},{value:"lineWidth",paraId:35,tocIndex:10},{value:"Number",paraId:35,tocIndex:10},{value:"false",paraId:35,tocIndex:10},{value:"The width of the stroke",paraId:35,tocIndex:10},{value:"opacity",paraId:35,tocIndex:10},{value:"Number",paraId:35,tocIndex:10},{value:"false",paraId:35,tocIndex:10},{value:"Opacity",paraId:35,tocIndex:10},{value:"fillOpacity",paraId:35,tocIndex:10},{value:"Number",paraId:35,tocIndex:10},{value:"false",paraId:35,tocIndex:10},{value:"Filling opacity",paraId:35,tocIndex:10},{value:"Update the ",paraId:36,tocIndex:12},{value:"graphImg",paraId:36,tocIndex:12},{value:" for the minimap. We recommand you to update the graphImg when the main graph is updated.",paraId:36,tocIndex:12},{value:"Parameters:",paraId:37,tocIndex:12},{value:"Name",paraId:38,tocIndex:12},{value:"Type",paraId:38,tocIndex:12},{value:"Required",paraId:38,tocIndex:12},{value:"Description",paraId:38,tocIndex:12},{value:"img",paraId:38,tocIndex:12},{value:"String",paraId:38,tocIndex:12},{value:"true",paraId:38,tocIndex:12},{value:"minimap 的图片地址或 base64 文本",paraId:38,tocIndex:12},{value:"graphImg",paraId:39,tocIndex:13},{value:" is required when instantiating the Image Minimap.",paraId:39,tocIndex:13},{value:"// Instantiating the Image Minimap\nconst imageMinimap = new G6.ImageMinimap({\n  width: 200,\n  graphImg: 'https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*eD7nT6tmYgAAAAAAAAAAAABkARQnAQ'\n});\nconst graph = new G6.Graph({\n  //... Other configurations\n  plugins: [imageMinimap], // configure the imageMinimap\n});\n\ngraph.data(data);\ngraph.render()\n\n... // Some operations which update the main graph\nimageMinimap.updateGraphImg(img); // Update the minimap's image (generated by yourself)\n\n",paraId:40,tocIndex:13},{value:"In complex graph with large number of edges, edge bundling helps you to improve the visual clutter.",paraId:41,tocIndex:14},{value:"Edge bundling on American airline graph. ",paraId:42,tocIndex:14},{value:"Demo Link",paraId:42,tocIndex:14},{value:". ",paraId:42,tocIndex:14},{value:"Demo Document",paraId:42,tocIndex:14},{value:".",paraId:42,tocIndex:14},{value:"The edge bundling plugin can be configured to adjust the styles and functions.",paraId:43,tocIndex:14},{value:"Name",paraId:44,tocIndex:15},{value:"Type",paraId:44,tocIndex:15},{value:"Required",paraId:44,tocIndex:15},{value:"Default",paraId:44,tocIndex:15},{value:"Description",paraId:44,tocIndex:15},{value:"K",paraId:44,tocIndex:15},{value:"Number",paraId:44,tocIndex:15},{value:"false",paraId:44,tocIndex:15},{value:"0.1",paraId:44,tocIndex:15},{value:"The strength of the bundling",paraId:44,tocIndex:15},{value:"lambda",paraId:44,tocIndex:15},{value:"Number",paraId:44,tocIndex:15},{value:"false",paraId:44,tocIndex:15},{value:"0.1",paraId:44,tocIndex:15},{value:"The initial step length",paraId:44,tocIndex:15},{value:"divisions",paraId:44,tocIndex:15},{value:"Number",paraId:44,tocIndex:15},{value:"false",paraId:44,tocIndex:15},{value:"1",paraId:44,tocIndex:15},{value:"The initial number of division on each edge. It will be multipled by ",paraId:44,tocIndex:15},{value:"divRate",paraId:44,tocIndex:15},{value:" in each cycle",paraId:44,tocIndex:15},{value:"divRate",paraId:44,tocIndex:15},{value:"Number",paraId:44,tocIndex:15},{value:"false",paraId:44,tocIndex:15},{value:"2",paraId:44,tocIndex:15},{value:"The rate of the divisions increasement. Large number means smoother result, but the performance will be worse when the number is too large",paraId:44,tocIndex:15},{value:"cycles",paraId:44,tocIndex:15},{value:"Number",paraId:44,tocIndex:15},{value:"false",paraId:44,tocIndex:15},{value:"6",paraId:44,tocIndex:15},{value:"The number of outer interations",paraId:44,tocIndex:15},{value:"iterations",paraId:44,tocIndex:15},{value:"Number",paraId:44,tocIndex:15},{value:"false",paraId:44,tocIndex:15},{value:"90",paraId:44,tocIndex:15},{value:"The initial number of inner interations. It will be multiplied by ",paraId:44,tocIndex:15},{value:"iterRate",paraId:44,tocIndex:15},{value:" in each cycle",paraId:44,tocIndex:15},{value:"iterRate",paraId:44,tocIndex:15},{value:"Number",paraId:44,tocIndex:15},{value:"false",paraId:44,tocIndex:15},{value:"0.6666667",paraId:44,tocIndex:15},{value:"The rate of the iterations decreasement",paraId:44,tocIndex:15},{value:"bundleThreshold",paraId:44,tocIndex:15},{value:"Number",paraId:44,tocIndex:15},{value:"false",paraId:44,tocIndex:15},{value:"0.6",paraId:44,tocIndex:15},{value:"The edge similarity threshold for bundling. Large number means the edges in one bundle have smaller similarity, in other words, more edges in one bundle",paraId:44,tocIndex:15},{value:"Menu is used to configure the right-click menu on the node.",paraId:45,tocIndex:16},{value:"Name",paraId:46,tocIndex:17},{value:"Type",paraId:46,tocIndex:17},{value:"Required",paraId:46,tocIndex:17},{value:"Description",paraId:46,tocIndex:17},{value:"className",paraId:46,tocIndex:17},{value:"string",paraId:46,tocIndex:17},{value:"null",paraId:46,tocIndex:17},{value:"the class name of the menu dom",paraId:46,tocIndex:17},{value:"getContent",paraId:46,tocIndex:17},{value:"(evt?: IG6GraphEvent) => HTMLDivElement / string",paraId:46,tocIndex:17},{value:"the menu content，supports DOM or string",paraId:46,tocIndex:17},{value:"handleMenuClick",paraId:46,tocIndex:17},{value:"(target: HTMLElement, item: Item, graph?: IGraph) => void",paraId:46,tocIndex:17},{value:"undefined",paraId:46,tocIndex:17},{value:"the callback function when click the menu",paraId:46,tocIndex:17},{value:"shouldBegin",paraId:46,tocIndex:17},{value:"(evt: G6Event) => boolean",paraId:46,tocIndex:17},{value:"undefined",paraId:46,tocIndex:17},{value:"whether allow the menu show up, you can return ",paraId:46,tocIndex:17},{value:"true",paraId:46,tocIndex:17},{value:" or ",paraId:46,tocIndex:17},{value:"false",paraId:46,tocIndex:17},{value:" according to the ",paraId:46,tocIndex:17},{value:"evt.item",paraId:46,tocIndex:17},{value:" or ",paraId:46,tocIndex:17},{value:"evt.target",paraId:46,tocIndex:17},{value:"offsetX",paraId:46,tocIndex:17},{value:"number",paraId:46,tocIndex:17},{value:"6",paraId:46,tocIndex:17},{value:"The x offset of the menu to the parent container",paraId:46,tocIndex:17},{value:"offsetY",paraId:46,tocIndex:17},{value:"number",paraId:46,tocIndex:17},{value:"6",paraId:46,tocIndex:17},{value:"The y offset of the menu to the parent container",paraId:46,tocIndex:17},{value:"itemTypes",paraId:46,tocIndex:17},{value:"string[]",paraId:46,tocIndex:17},{value:"['node', 'edge', 'combo']",paraId:46,tocIndex:17},{value:"which types of items the menu takes effect on. E.g. if you want the menu shows up only on node, assign ",paraId:46,tocIndex:17},{value:"itemTypes",paraId:46,tocIndex:17},{value:" with ['node']",paraId:46,tocIndex:17},{value:"trigger",paraId:46,tocIndex:17},{value:"'click' / 'contextmenu'",paraId:46,tocIndex:17},{value:"'contextmenu'",paraId:46,tocIndex:17},{value:"the trigger for the menu, ",paraId:46,tocIndex:17},{value:"'contextmenu'",paraId:46,tocIndex:17},{value:" by default, which means the menu will show up when the end user right click on some item. ",paraId:46,tocIndex:17},{value:"'click'",paraId:46,tocIndex:17},{value:" means left click. ",paraId:46,tocIndex:17},{value:"'click' is supported by v4.3.2 and later versions",paraId:46,tocIndex:17},{value:"Use G6 build-in menu by default.",paraId:47,tocIndex:18},{value:"// Instantiate Menu plugin\nconst menu = new G6.Menu();\nconst graph = new G6.Graph({\n  //... other Configuration\n  plugins: [menu],\n});\n",paraId:48,tocIndex:18},{value:"const menu = new G6.Menu({\n  getContent(e) {\n    const outDiv = document.createElement('div');\n    outDiv.style.width = '180px';\n    outDiv.innerHTML = `<ul>\n        <li>menu01</li>\n        <li>menu01</li>\n        <li>menu01</li>\n        <li>menu01</li>\n        <li>menu01</li>\n      </ul>`\n    return outDiv\n  },\n  handleMenuClick(target, item) {\n    console.log(target, item)\n  },\n});\n\nconst graph = new G6.Graph({\n  //... other Configuration\n  plugins: [menu], // the Menu plugin\n});\n",paraId:49,tocIndex:19},{value:"const menu = new G6.Menu({\n  getContent(evt) {\n    return `<ul>\n      <li title='1'>menu02</li>\n      <li title='2'>menu02</li>\n      <li>menu02</li>\n      <li>menu02</li>\n      <li>menu02</li>\n    </ul>`;\n  },\n  handleMenuClick(target, item) {\n    console.log(target, item)\n  },\n});\n\nconst graph = new G6.Graph({\n  //... other Configuration\n  plugins: [menu], // The Menu plugin\n});\n",paraId:50,tocIndex:20},{value:"ToolBar has the following operations by default:",paraId:51,tocIndex:21},{value:"Undo;",paraId:52,tocIndex:21},{value:"Redo;",paraId:52,tocIndex:21},{value:"Zoom-in;",paraId:52,tocIndex:21},{value:"Zoom-out;",paraId:52,tocIndex:21},{value:"Fit the View;",paraId:52,tocIndex:21},{value:"Actual Size.",paraId:52,tocIndex:21},{value:"Name",paraId:53,tocIndex:22},{value:"Type",paraId:53,tocIndex:22},{value:"Default",paraId:53,tocIndex:22},{value:"Description",paraId:53,tocIndex:22},{value:"container",paraId:53,tocIndex:22},{value:"HTMLDivElement",paraId:53,tocIndex:22},{value:"null",paraId:53,tocIndex:22},{value:"The container of the ToolBar. It will take use the DOM of the canvas by default",paraId:53,tocIndex:22},{value:"className",paraId:53,tocIndex:22},{value:"string",paraId:53,tocIndex:22},{value:"null",paraId:53,tocIndex:22},{value:"The class name of the sub DOM nodes of the ToolBar",paraId:53,tocIndex:22},{value:"getContent",paraId:53,tocIndex:22},{value:"(graph?: IGraph) => HTMLDivElement / string",paraId:53,tocIndex:22},{value:"The content of the ToolBar",paraId:53,tocIndex:22},{value:"handleClick",paraId:53,tocIndex:22},{value:"(code: string, graph: IGraph) => void",paraId:53,tocIndex:22},{value:"undefined",paraId:53,tocIndex:22},{value:"The callback functions for the icons of the ToolBar",paraId:53,tocIndex:22},{value:"position",paraId:53,tocIndex:22},{value:"Point",paraId:53,tocIndex:22},{value:"null",paraId:53,tocIndex:22},{value:"The position of the ToolBar",paraId:53,tocIndex:22},{value:"ToolBar provides some default operations above.",paraId:54,tocIndex:24},{value:"const toolbar = new G6.ToolBar();\n\nconst graph = new G6.Graph({\n  //... Other configurations\n  plugins: [toolbar], // Use the ToolBar plugin\n});\n",paraId:55,tocIndex:24},{value:"const tc = document.createElement('div');\ntc.id = 'toolbarContainer';\ndocument.body.appendChild(tc);\n\nconst toolbar = new G6.ToolBar({\n  container: tc,\n  getContent: () => {\n    return `\n      <ul>\n        <li code='add'>Add Node</li>\n        <li code='undo'>Undo</li>\n      </ul>\n    `\n  },\n  handleClick: (code, graph) => {\n    if (code === 'add') {\n      graph.addItem('node', {\n        id: 'node2',\n        label: 'node2',\n        x: 300,\n        y: 150\n      })\n    } else if (code === 'undo') {\n      // redefine undo operator\n      toolbar.undo()\n      toolbar.autoZoom()\n    } else {\n      // Other operations remain default\n      toolbar.handleDefaultOperator(code)\n    }\n  }\n});\n\nconst graph = new G6.Graph({\n  //... Other configurations\n  plugins: [toolbar], // Use the ToolBar plugin\n});\n",paraId:56,tocIndex:25},{value:"const toolbar = new G6.ToolBar({\n  getContent: () => {\n    const outDiv = document.createElement('div');\n    outDiv.style.width = '180px';\n    outDiv.innerHTML = `<ul>\n        <li>example 01</li>\n        <li>example 02</li>\n        <li>example 03</li>\n        <li>example 04</li>\n        <li>example 05</li>\n      </ul>`\n    return outDiv\n  },\n  handleClick: (code, graph) => {\n\n  }\n});\n\nconst graph = new G6.Graph({\n  //... Other configurations\n  plugins: [toolbar], // Use the ToolBar plugin\n});\n",paraId:57,tocIndex:26},{value:"ToolTip helps user to explore detail infomations on the node and edge. Do note that, This Tooltip Plugins will replace the tooltip in the built-in behavior after G6 4.0.",paraId:58,tocIndex:27},{value:"Name",paraId:59,tocIndex:28},{value:"Type",paraId:59,tocIndex:28},{value:"Default",paraId:59,tocIndex:28},{value:"Description",paraId:59,tocIndex:28},{value:"className",paraId:59,tocIndex:28},{value:"string",paraId:59,tocIndex:28},{value:"null",paraId:59,tocIndex:28},{value:"Tge class name of the tooltip's container",paraId:59,tocIndex:28},{value:"container",paraId:59,tocIndex:28},{value:"HTMLDivElement",paraId:59,tocIndex:28},{value:"null",paraId:59,tocIndex:28},{value:"The container of the Tooltip. The canvas DOM will be used by default",paraId:59,tocIndex:28},{value:"getContent",paraId:59,tocIndex:28},{value:"(evt?: IG6GraphEvent) => HTMLDivElement / string",paraId:59,tocIndex:28},{value:"The content of the Tooltip",paraId:59,tocIndex:28},{value:"shouldBegin",paraId:59,tocIndex:28},{value:"(evt: G6Event) => boolean",paraId:59,tocIndex:28},{value:"undefined",paraId:59,tocIndex:28},{value:"Whether allow the tooltip show up. You can return true or false according to the content of the ",paraId:59,tocIndex:28},{value:"evt.item",paraId:59,tocIndex:28},{value:" (current item of the event) or ",paraId:59,tocIndex:28},{value:"evt.target",paraId:59,tocIndex:28},{value:" (current shape of the event)",paraId:59,tocIndex:28},{value:"offsetX",paraId:59,tocIndex:28},{value:"number",paraId:59,tocIndex:28},{value:"6",paraId:59,tocIndex:28},{value:"the offset of tooltip along x axis, the padding of the parent container should be take into consider",paraId:59,tocIndex:28},{value:"offsetY",paraId:59,tocIndex:28},{value:"number",paraId:59,tocIndex:28},{value:"6",paraId:59,tocIndex:28},{value:"the offset of tooltip along y axis, the padding of the parent container should be take into consider",paraId:59,tocIndex:28},{value:"itemTypes",paraId:59,tocIndex:28},{value:"string[]",paraId:59,tocIndex:28},{value:"['node', 'edge', 'combo']",paraId:59,tocIndex:28},{value:"the item types that allow the tooltip show up. e.g. if you only want the node tooltip, set the ",paraId:59,tocIndex:28},{value:"itemTypes",paraId:59,tocIndex:28},{value:" to be ['node']",paraId:59,tocIndex:28},{value:"trigger",paraId:59,tocIndex:28},{value:"'mouseenter' / 'click'",paraId:59,tocIndex:28},{value:"'mouseenter'",paraId:59,tocIndex:28},{value:"Supported by v4.2.1. The trigger to show the tooltip. By default, the tooltip shows up when the mouse enter a node/edge/combo, where the trigger is ",paraId:59,tocIndex:28},{value:"'mouseebter'",paraId:59,tocIndex:28},{value:". If the trigger is assigned to ",paraId:59,tocIndex:28},{value:"'click'",paraId:59,tocIndex:28},{value:", the tooltip shows up when the user click a node/edge/combo",paraId:59,tocIndex:28},{value:"fixToNode",paraId:59,tocIndex:28},{value:"boolean / [number, number]",paraId:59,tocIndex:28},{value:"false",paraId:59,tocIndex:28},{value:"Supported by v4.2.1. Whether fix the position of the tooltip when mouse moving on the node. By default, the ",paraId:59,tocIndex:28},{value:"fixToNode",paraId:59,tocIndex:28},{value:" is ",paraId:59,tocIndex:28},{value:"false",paraId:59,tocIndex:28},{value:", which means the tooltip follows the position of the mouse. If the ",paraId:59,tocIndex:28},{value:"fixToNode",paraId:59,tocIndex:28},{value:" is assigned to an array as ",paraId:59,tocIndex:28},{value:"[number, number]",paraId:59,tocIndex:28},{value:", it means fixing the tooltip to a relative position to the target node. e.g. ",paraId:59,tocIndex:28},{value:"[1, 0.5]",paraId:59,tocIndex:28},{value:" means the tooltip will be fixed to the right of the node after showing up, and do not follow the mouse when mouse move on the node. The meaning of the array is similar to the ",paraId:59,tocIndex:28},{value:"Anchor Point",paraId:60,tocIndex:28},{value:". ",paraId:59,tocIndex:28},{value:"fixToNode",paraId:59,tocIndex:28},{value:" is only available for tooltip on node",paraId:59,tocIndex:28},{value:"The content of the Tooltip is the type and id of the item by default. Users are free to custom the content of the Tooltip by configuring ",paraId:61,tocIndex:29},{value:"getContent",paraId:61,tocIndex:29},{value:":",paraId:61,tocIndex:29},{value:"const tooltip = new G6.Tooltip({\n  offsetX: 10,\n  offsetY: 20,\n  getContent(e) {\n    const outDiv = document.createElement('div');\n    outDiv.style.width = '180px';\n    outDiv.innerHTML = `\n      <h4>Custom Tooltip</h4>\n      <ul>\n        <li>Label: ${e.item.getModel().label || e.item.getModel().id}</li>\n      </ul>`\n    return outDiv\n  },\n  itemTypes: ['node']\n});\n\nconst graph = new G6.Graph({\n  //... Other configurations\n  plugins: [tooltip], // Use Tooltip plugin\n});\n",paraId:62,tocIndex:30},{value:"const tooltip = new G6.Tooltip({\n  getContent(e) {\n    return `<div style='width: 180px;'>\n      <ul id='menu'>\n        <li title='1'>example 01</li>\n        <li title='2'>example 02</li>\n        <li>example 03</li>\n        <li>example 04</li>\n        <li>example 05</li>\n      </ul>\n    </div>`;\n  },\n});\n\nconst graph = new G6.Graph({\n  //... Other configurations\n  plugins: [tooltip], // Use Tooltip plugin\n});\n",paraId:63,tocIndex:31},{value:"TimeBar Plugin exposes several timing events. They could be listened by ",paraId:64,tocIndex:32},{value:"graph.on('eventname', e => {})",paraId:64,tocIndex:32},{value:".",paraId:64,tocIndex:32},{value:"Event Name",paraId:65,tocIndex:32},{value:"Description",paraId:65,tocIndex:32},{value:"tooltipchange",paraId:65,tocIndex:32},{value:"Emitted when the Tooltip is changed.",paraId:65,tocIndex:32},{value:"Fisheye is designed for focus_context exploration, it keeps the context and the relationships between context and the focus while magnifing the focus area.",paraId:66,tocIndex:33},{value:"Name",paraId:67,tocIndex:34},{value:"Type",paraId:67,tocIndex:34},{value:"Required",paraId:67,tocIndex:34},{value:"Default",paraId:67,tocIndex:34},{value:"Description",paraId:67,tocIndex:34},{value:"trigger",paraId:67,tocIndex:34},{value:"'mousemove' / 'click'",paraId:67,tocIndex:34},{value:"false",paraId:67,tocIndex:34},{value:"'mousemove'",paraId:67,tocIndex:34},{value:"The trigger for the lens",paraId:67,tocIndex:34},{value:"d",paraId:67,tocIndex:34},{value:"Number",paraId:67,tocIndex:34},{value:"false",paraId:67,tocIndex:34},{value:"1.5",paraId:67,tocIndex:34},{value:"Magnify coefficient. Larger the value, larger the focus area will be magnified",paraId:67,tocIndex:34},{value:"r",paraId:67,tocIndex:34},{value:"Number",paraId:67,tocIndex:34},{value:"false",paraId:67,tocIndex:34},{value:"300",paraId:67,tocIndex:34},{value:"The radius of the focus area",paraId:67,tocIndex:34},{value:"delegateStyle",paraId:67,tocIndex:34},{value:"Object",paraId:67,tocIndex:34},{value:"false",paraId:67,tocIndex:34},{value:"{ stroke: '#000', strokeOpacity: 0.8, lineWidth: 2, fillOpacity: 0.1, fill: '#ccc' }",paraId:67,tocIndex:34},{value:"The style of the lens's delegate",paraId:67,tocIndex:34},{value:"showLabel",paraId:67,tocIndex:34},{value:"Boolean",paraId:67,tocIndex:34},{value:"false",paraId:67,tocIndex:34},{value:"false",paraId:67,tocIndex:34},{value:"If the label is hidden, whether to show the label of nodes inside the focus area",paraId:67,tocIndex:34},{value:"maxR",paraId:67,tocIndex:34},{value:"Number",paraId:67,tocIndex:34},{value:"The height of the graph",paraId:67,tocIndex:34},{value:"The maximum radius scaled by the wheel",paraId:67,tocIndex:34},{value:"minR",paraId:67,tocIndex:34},{value:"Number",paraId:67,tocIndex:34},{value:"0.05 * The height of the graph",paraId:67,tocIndex:34},{value:"The minimum radius scaled by the wheel",paraId:67,tocIndex:34},{value:"maxD",paraId:67,tocIndex:34},{value:"Number",paraId:67,tocIndex:34},{value:"5",paraId:67,tocIndex:34},{value:"when ",paraId:67,tocIndex:34},{value:"trigger",paraId:67,tocIndex:34},{value:" is ",paraId:67,tocIndex:34},{value:"'mousemove'",paraId:67,tocIndex:34},{value:" or ",paraId:67,tocIndex:34},{value:"'click'",paraId:67,tocIndex:34},{value:", minimap allow users to adjust the magnifying coefficient ",paraId:67,tocIndex:34},{value:"d",paraId:67,tocIndex:34},{value:" by dragging left / right on the lens. ",paraId:67,tocIndex:34},{value:"maxD",paraId:67,tocIndex:34},{value:" is the maximum magnifying coefficient that limits this interaction. The suggested range for ",paraId:67,tocIndex:34},{value:"maxD",paraId:67,tocIndex:34},{value:" is [0, 5]. Note that updating the configurations by ",paraId:67,tocIndex:34},{value:"minimap.updateParam",paraId:67,tocIndex:34},{value:" will not be limited by ",paraId:67,tocIndex:34},{value:"maxD",paraId:67,tocIndex:34},{value:"minD",paraId:67,tocIndex:34},{value:"Number",paraId:67,tocIndex:34},{value:"0",paraId:67,tocIndex:34},{value:"when ",paraId:67,tocIndex:34},{value:"trigger",paraId:67,tocIndex:34},{value:" is ",paraId:67,tocIndex:34},{value:"'mousemove'",paraId:67,tocIndex:34},{value:" or ",paraId:67,tocIndex:34},{value:"'click'",paraId:67,tocIndex:34},{value:", minimap allow users to adjust the magnifying coefficient ",paraId:67,tocIndex:34},{value:"d",paraId:67,tocIndex:34},{value:" by dragging left / right on the lens. ",paraId:67,tocIndex:34},{value:"minD",paraId:67,tocIndex:34},{value:" is the minimum magnifying coefficient that limits this interaction. The suggested range for ",paraId:67,tocIndex:34},{value:"minD",paraId:67,tocIndex:34},{value:" is [0, 5]. Note that updating the configurations by ",paraId:67,tocIndex:34},{value:"minimap.updateParam",paraId:67,tocIndex:34},{value:" will not be limited by ",paraId:67,tocIndex:34},{value:"minD",paraId:67,tocIndex:34},{value:"scaleRBy",paraId:67,tocIndex:34},{value:"'wheel'/'drag'/'unset'/undefined",paraId:67,tocIndex:34},{value:"false",paraId:67,tocIndex:34},{value:"'unset'",paraId:67,tocIndex:34},{value:"The trigger for end users to scale the range of the lens",paraId:67,tocIndex:34},{value:"scaleDBy",paraId:67,tocIndex:34},{value:"'wheel'/'drag'/'unset'/undefined",paraId:67,tocIndex:34},{value:"false",paraId:67,tocIndex:34},{value:"'unset'",paraId:67,tocIndex:34},{value:"The trigger for end users to scale the magnification factor of the lens",paraId:67,tocIndex:34},{value:"showDPercent",paraId:67,tocIndex:34},{value:"Boolean",paraId:67,tocIndex:34},{value:"false",paraId:67,tocIndex:34},{value:"true",paraId:67,tocIndex:34},{value:"Whether show the percent of current magnification factor on the bottom of the lens, where the percent is about the D, minD, and maxD",paraId:67,tocIndex:34},{value:"Update partial of the configurations of the FishEye instance, including ",paraId:68,tocIndex:36},{value:"trigger",paraId:68,tocIndex:36},{value:", ",paraId:68,tocIndex:36},{value:"d",paraId:68,tocIndex:36},{value:", ",paraId:68,tocIndex:36},{value:"r",paraId:68,tocIndex:36},{value:", ",paraId:68,tocIndex:36},{value:"maxR",paraId:68,tocIndex:36},{value:", ",paraId:68,tocIndex:36},{value:"minR",paraId:68,tocIndex:36},{value:", ",paraId:68,tocIndex:36},{value:"maxD",paraId:68,tocIndex:36},{value:", ",paraId:68,tocIndex:36},{value:"minD",paraId:68,tocIndex:36},{value:", ",paraId:68,tocIndex:36},{value:"scaleRBy",paraId:68,tocIndex:36},{value:", and ",paraId:68,tocIndex:36},{value:"scaleDBy",paraId:68,tocIndex:36},{value:". E.g.",paraId:68,tocIndex:36},{value:"const fisheye = new G6.Fisheye({\n  trigger: 'mousemove'\n});\n\n... // Other operations\n\nfisheye.updateParams({\n  d: 2,\n  r: 500,\n  // ...\n})\n",paraId:69,tocIndex:36},{value:"const fisheye = new G6.Fisheye({\n  trigger: 'mousemove',\n  d: 1.5,\n  r: 300,\n  delegateStyle: clone(lensDelegateStyle),\n  showLabel: false\n});\n\nconst graph = new G6.Graph({\n  //... Other graph configurations\n  plugins: [fisheye], // configuring fisheye plugin\n});\n",paraId:70,tocIndex:37},{value:"Edge Filter Lens is designed for edge filtering, the desired edges will be kept inside the lens while the others will be hidden.",paraId:71,tocIndex:38},{value:"Name",paraId:72,tocIndex:39},{value:"Type",paraId:72,tocIndex:39},{value:"Required",paraId:72,tocIndex:39},{value:"Default",paraId:72,tocIndex:39},{value:"Description",paraId:72,tocIndex:39},{value:"trigger",paraId:72,tocIndex:39},{value:"'drag' / 'mousemove' / 'click'",paraId:72,tocIndex:39},{value:"false",paraId:72,tocIndex:39},{value:"'mousemove'",paraId:72,tocIndex:39},{value:"The trigger for the lens",paraId:72,tocIndex:39},{value:"type",paraId:72,tocIndex:39},{value:"'one' / 'both' / 'only-source' / 'only-target'",paraId:72,tocIndex:39},{value:"false",paraId:72,tocIndex:39},{value:"'both'",paraId:72,tocIndex:39},{value:"Simple filtering conditions related to the end nodes. ",paraId:72,tocIndex:39},{value:"'one'",paraId:72,tocIndex:39},{value:": show the edge whose one or more end nodes are inside the filter lens; ",paraId:72,tocIndex:39},{value:"'both'",paraId:72,tocIndex:39},{value:": show the edge whose both end nodes are inside the lens; ",paraId:72,tocIndex:39},{value:"'only-source'",paraId:72,tocIndex:39},{value:": show the edge whose source node is inside the lens and target node is not; ",paraId:72,tocIndex:39},{value:"'only-target'",paraId:72,tocIndex:39},{value:": show the edge whose target node is inside the lens and source node is not. More complicated conditions can be defined by the ",paraId:72,tocIndex:39},{value:"shouldShow",paraId:72,tocIndex:39},{value:"shouldShow",paraId:72,tocIndex:39},{value:"(d?: unknown) => boolean",paraId:72,tocIndex:39},{value:"false",paraId:72,tocIndex:39},{value:"undefined",paraId:72,tocIndex:39},{value:"The custom conditions for filtering. The parameter ",paraId:72,tocIndex:39},{value:"d",paraId:72,tocIndex:39},{value:" is the data of each edge, you can return boolean value according to the data, where ",paraId:72,tocIndex:39},{value:"true",paraId:72,tocIndex:39},{value:" means show.",paraId:72,tocIndex:39},{value:"r",paraId:72,tocIndex:39},{value:"Number",paraId:72,tocIndex:39},{value:"false",paraId:72,tocIndex:39},{value:"60",paraId:72,tocIndex:39},{value:"The radius of the filter area",paraId:72,tocIndex:39},{value:"delegateStyle",paraId:72,tocIndex:39},{value:"Object",paraId:72,tocIndex:39},{value:"false",paraId:72,tocIndex:39},{value:"{ stroke: '#000', strokeOpacity: 0.8, lineWidth: 2, fillOpacity: 0.1, fill: '#ccc' }",paraId:72,tocIndex:39},{value:"The style of the lens's delegate",paraId:72,tocIndex:39},{value:"showLabel",paraId:72,tocIndex:39},{value:"'edge' / 'node' / 'both'",paraId:72,tocIndex:39},{value:"false",paraId:72,tocIndex:39},{value:"'edge'",paraId:72,tocIndex:39},{value:"If the label is hidden, whether to show the label of nodes inside the focus area",paraId:72,tocIndex:39},{value:"maxR",paraId:72,tocIndex:39},{value:"Number",paraId:72,tocIndex:39},{value:"The height of the graph",paraId:72,tocIndex:39},{value:"The maximum radius scaled by the wheel",paraId:72,tocIndex:39},{value:"minR",paraId:72,tocIndex:39},{value:"Number",paraId:72,tocIndex:39},{value:"0.05 * The height of the graph",paraId:72,tocIndex:39},{value:"The minimum radius scaled by the wheel",paraId:72,tocIndex:39},{value:"scaleRBy",paraId:72,tocIndex:39},{value:"'wheel'/'drag'/'unset'/undefined",paraId:72,tocIndex:39},{value:"false",paraId:72,tocIndex:39},{value:"'unset'",paraId:72,tocIndex:39},{value:"The trigger for end users to scale the range of the lens",paraId:72,tocIndex:39},{value:"Update partial of the configurations of the filter lens instance, including ",paraId:73,tocIndex:41},{value:"trigger",paraId:73,tocIndex:41},{value:", ",paraId:73,tocIndex:41},{value:"type",paraId:73,tocIndex:41},{value:", ",paraId:73,tocIndex:41},{value:"r",paraId:73,tocIndex:41},{value:", ",paraId:73,tocIndex:41},{value:"maxR",paraId:73,tocIndex:41},{value:", ",paraId:73,tocIndex:41},{value:"minR",paraId:73,tocIndex:41},{value:", ",paraId:73,tocIndex:41},{value:"shouldShow",paraId:73,tocIndex:41},{value:", ",paraId:73,tocIndex:41},{value:"showLabel",paraId:73,tocIndex:41},{value:", and ",paraId:73,tocIndex:41},{value:"scaleRBy",paraId:73,tocIndex:41},{value:". E.g.",paraId:73,tocIndex:41},{value:"const filterLens = new G6.EdgeFilterLens({\n  trigger: 'drag'\n});\n\n... // Other operations\n\nfilterLens.updateParams({\n  r: 500,\n  // ...\n})\n",paraId:74,tocIndex:41},{value:"const filterLens = new G6.EdgeFilterLens({\n  trigger: 'mousemove',\n  r: 300,\n  shouldShow: d => {\n    return d.size > 10;\n  }\n});\n\nconst graph = new G6.Graph({\n  //... Other graph configurations\n  plugins: [filterLens], // configuring edge filter lens plugin\n});\n",paraId:75,tocIndex:42},{value:"There are three types of built-in TimeBar in G6:",paraId:76,tocIndex:43},{value:"Time bar with a line chart as background;",paraId:77,tocIndex:43},{value:"Simple time bar;",paraId:77,tocIndex:43},{value:"Time bar with descrete ticks.",paraId:77,tocIndex:43},{value:"All the three types of timebar supports play, fast forward, and fast backward.",paraId:78,tocIndex:43},{value:"Time bar with a line chart as background",paraId:79},{value:"Simple time bar",paraId:79},{value:"Time bar with descrete ticks",paraId:79},{value:"Refer to the demos ",paraId:80,tocIndex:43},{value:"HERE",paraId:80,tocIndex:43},{value:"Same to other plugins of G6, the users can initiate the TimeBar and assign it to the graph as:",paraId:81,tocIndex:44},{value:"import G6 from '@antv/g6';\n\nconst timebar = new G6.TimeBar({\n  width: 500,\n  height: 150,\n  padding: 10,\n  type: 'trend',\n  trend: {\n    data: timeBarData,\n  },\n});\n\nconst graph = new G6.Graph({\n  container: 'container',\n  width,\n  height,\n  plugins: [timebar],\n});\n",paraId:82,tocIndex:44},{value:"If you want to use the TimeBar with line chart, assign the ",paraId:83,tocIndex:44},{value:"type",paraId:83,tocIndex:44},{value:" to be ",paraId:83,tocIndex:44},{value:"trend",paraId:83,tocIndex:44},{value:" when instantiating the TimeBar, which results in:",paraId:83,tocIndex:44},{value:"Assigning the ",paraId:84,tocIndex:44},{value:"type",paraId:84,tocIndex:44},{value:" to be ",paraId:84,tocIndex:44},{value:"simple",paraId:84,tocIndex:44},{value:" results in:",paraId:84,tocIndex:44},{value:"And assigning the ",paraId:85,tocIndex:44},{value:"type",paraId:85,tocIndex:44},{value:" to be ",paraId:85,tocIndex:44},{value:"tick",paraId:85,tocIndex:44},{value:" results in a TimeBar with descrete ticks. Note that it is different from the above two types of TimeBar, **The TimeBar with decrete ticks is configured with the ",paraId:85,tocIndex:44},{value:"tick",paraId:85,tocIndex:44},{value:" object but not the ",paraId:85,tocIndex:44},{value:"trend",paraId:85,tocIndex:44},{value:" object.",paraId:85,tocIndex:44},{value:"const timebar = new G6.TimeBar({\n  width,\n  height: 150,\n  type: 'tick',\n  tick: {\n    data: timeBarData,\n    width,\n    height: 42,\n    tickLabelFormatter: d => {\n      const dateStr = `${d.date}`;\n      if ((count - 1) % 10 === 0) {\n        return `${dateStr.substr(0, 4)}-${dateStr.substr(4, 2)}-${dateStr.substr(6, 2)}`;\n      }\n      return false;\n    },\n    tooltipFomatter: d => {\n      const dateStr = `${d}`;\n      return `${dateStr.substr(0, 4)}-${dateStr.substr(4, 2)}-${dateStr.substr(6, 2)}`;\n    },\n  },\n});\n",paraId:86,tocIndex:44},{value:"TimeBar Plugin exposes several timing events. They could be listened by ",paraId:87,tocIndex:45},{value:"graph.on('eventname', e => {})",paraId:87,tocIndex:45},{value:".",paraId:87,tocIndex:45},{value:"Event Name",paraId:88,tocIndex:45},{value:"Description",paraId:88,tocIndex:45},{value:"valuechange",paraId:88,tocIndex:45},{value:"Emitted when the value range of the timebar is chaged.",paraId:88,tocIndex:45},{value:"timebarstartplay",paraId:88,tocIndex:45},{value:"Emitted when the timeline starts to play.",paraId:88,tocIndex:45},{value:"timebarendplay",paraId:88,tocIndex:45},{value:"Emitted when the timeline ends playing.",paraId:88,tocIndex:45},{value:"Controll the timebar instance begin to play. e.g. ",paraId:89,tocIndex:47},{value:"timebar.play()",paraId:89,tocIndex:47},{value:".",paraId:89,tocIndex:47},{value:"Controll the timebar instance to pause. e.g. ",paraId:90,tocIndex:48},{value:"timebar.pause()",paraId:90,tocIndex:48},{value:".",paraId:90,tocIndex:48},{value:"The complete interfaces for the TimeBar is shown below:",paraId:91,tocIndex:49},{value:"interface TimeBarConfig extends IPluginBaseConfig {\n  // position size\n  readonly x?: number;\n  readonly y?: number;\n  readonly width?: number;\n  readonly height?: number;\n  readonly padding?: number;\n\n  readonly type?: 'trend' | 'simple' | 'tick';\n  // the configuration for the TimeBar with line chart and simple TimeBar, takes effect whtn the type is 'trend' or 'simple'\n  readonly trend?: TrendConfig;\n\n  // the configurations for the two sliders\n  readonly slider?: SliderOption;\n\n  // when the type is 'tick', it is the configuration for the TimeBar with descrete ticks\n  // when the type is 'trend' or 'simpe', it is the configuration for the time tick labels under the timeBar\n  readonly tick?: TimeBarSliceOption | TickCfg;\n\n  // the buttons for play, fast forward, and back forward\n  readonly controllerCfg?: ControllerCfg;\n\n  // [Supported from v4.5.1] the CSS style for the DOM container of the timebar\n  readonly containerCSS?: Object;\n\n  // [Supported from v4.5.1] the item types that will be filtered by the timebar. e.g. ['node', 'edge']. The default value is ['node']\n  readonly filterItemTypes?: string[];\n\n  // [Deprecated from v4.5.1, replaced by filterItemTypes] whether to consider the edge filtering. If it is false, only filter the nodes and the edges whose end nodes are filtered out while the selected range of the timeBar is changed. If it is true, there should be `date` properties on the edges data, and the timeBar will filter the edges which is not in the selected range in the same time\n  readonly filterEdge?: boolean;\n\n  // [Supported from v4.5.1] whether filter the nodes and edges on the graph by graph.changeData, which means the data of the graph will be changed by the timebar. If it is false, the graph.hideItem and graph.showItem will be called to hide/show the nodes and edges instead of changeData\n  readonly changeData?: boolean;\n\n  // the callback function after the time range is changed. When it is not assigned, the graph elements will be filtered after the time range is changed\n  rangeChange?: (graph: IGraph, minValue: string, maxValue: string) => void;\n\n  // [Supported from v4.5.1] user returns the date value according to the data of a node or an edge\n  getDate?: (d: any) => number;\n\n  // [Supported from v4.5.1] user returns the value according to the data of a node or an edge. The value is used to draw the trend line for timebar with type 'trend'\n  getValue?: (d: any) => number;\n\n  // [Supported from v4.5.1] user returns true or false to decide whether to ignore the node or the edge while filtering. If it is true, the item with data model will be ignored. Or the item will be filtered according to the min and max date value\n  shouldIgnore?: (itemType: 'node' | 'edge', model: any, dateRage: { min: number, max: number }) => boolean;\n}\n",paraId:92,tocIndex:49},{value:"Name",paraId:93,tocIndex:50},{value:"Type",paraId:93,tocIndex:50},{value:"Default Value",paraId:93,tocIndex:50},{value:"Description",paraId:93,tocIndex:50},{value:"container",paraId:93,tocIndex:50},{value:"HTMLDivElement",paraId:93,tocIndex:50},{value:"null",paraId:93,tocIndex:50},{value:"The DOM container of the TimeBar. By default, the plugin will create a container DOM with 'g6-component-timebar' as className",paraId:93,tocIndex:50},{value:"x",paraId:93,tocIndex:50},{value:"number",paraId:93,tocIndex:50},{value:"0",paraId:93,tocIndex:50},{value:"The beginning x position of the TimeBar plugin",paraId:93,tocIndex:50},{value:"y",paraId:93,tocIndex:50},{value:"number",paraId:93,tocIndex:50},{value:"0",paraId:93,tocIndex:50},{value:"The beginning y position of the TimeBar plugin",paraId:93,tocIndex:50},{value:"width",paraId:93,tocIndex:50},{value:"number",paraId:93,tocIndex:50},{value:"Requred",paraId:93,tocIndex:50},{value:", the width of the TimeBar",paraId:93,tocIndex:50},{value:"height",paraId:93,tocIndex:50},{value:"number",paraId:93,tocIndex:50},{value:"Requred",paraId:93,tocIndex:50},{value:", the height of the TimeBar",paraId:93,tocIndex:50},{value:"padding",paraId:93,tocIndex:50},{value:"number/number[]",paraId:93,tocIndex:50},{value:"10",paraId:93,tocIndex:50},{value:"The padding of the container of the TimeBar",paraId:93,tocIndex:50},{value:"type",paraId:93,tocIndex:50},{value:"'trend' / 'simple' / 'tick'",paraId:93,tocIndex:50},{value:"trend",paraId:93,tocIndex:50},{value:"The type of the TimeBar, 'trend' by default",paraId:93,tocIndex:50},{value:"trend",paraId:93,tocIndex:50},{value:"TrendConfig",paraId:93,tocIndex:50},{value:"null",paraId:93,tocIndex:50},{value:"The configuration for the TimeBar with line chart and simple TimeBar, takes effect whtn the type is 'trend' or 'simple'",paraId:93,tocIndex:50},{value:"slider",paraId:93,tocIndex:50},{value:"SliderOption",paraId:93,tocIndex:50},{value:"null",paraId:93,tocIndex:50},{value:"The configurations for the two sliders",paraId:93,tocIndex:50},{value:"tick",paraId:93,tocIndex:50},{value:"TimeBarSliceOption / TickCfg",paraId:93,tocIndex:50},{value:"null",paraId:93,tocIndex:50},{value:"If the type is 'tick', it is the configuration for the TimeBar with descrete ticks. If it the type is 'trend' or 'simple', it is the configuration for the time tick labels under the timeBar",paraId:93,tocIndex:50},{value:"controllerCfg",paraId:93,tocIndex:50},{value:"ControllerCfg",paraId:93,tocIndex:50},{value:"null",paraId:93,tocIndex:50},{value:"The buttons for play, fast forward, and back forward",paraId:93,tocIndex:50},{value:"containerCSS",paraId:93,tocIndex:50},{value:"Object",paraId:93,tocIndex:50},{value:"null",paraId:93,tocIndex:50},{value:"[Supported from v4.5.1] The CSS style for the DOM container of the timebar",paraId:93,tocIndex:50},{value:"filterItemTypes",paraId:93,tocIndex:50},{value:"string[]",paraId:93,tocIndex:50},{value:"null",paraId:93,tocIndex:50},{value:"[Supported from v4.5.1] The item types that will be filtered by the timebar. e.g. ['node', 'edge']. The default value is ['node']",paraId:93,tocIndex:50},{value:"filterEdge",paraId:93,tocIndex:50},{value:"boolean",paraId:93,tocIndex:50},{value:"false",paraId:93,tocIndex:50},{value:"[Deprecated from v4.5.1, replaced by filterItemTypes] Whether to consider the edge filtering. If it is false, only filter the nodes and the edges whose end nodes are filtered out while the selected range of the timeBar is changed. If it is true, there should be ",paraId:93,tocIndex:50},{value:"date",paraId:93,tocIndex:50},{value:" properties on the edges data, and the timeBar will filter the edges which is not in the selected range in the same time",paraId:93,tocIndex:50},{value:"changeData",paraId:93,tocIndex:50},{value:"boolean",paraId:93,tocIndex:50},{value:"null",paraId:93,tocIndex:50},{value:"[Supported from v4.5.1] Whether filter the nodes and edges on the graph by graph.changeData, which means the data of the graph will be changed by the timebar. If it is false, the graph.hideItem and graph.showItem will be called to hide/show the nodes and edges instead of changeData",paraId:93,tocIndex:50},{value:"rangeChange",paraId:93,tocIndex:50},{value:"Function",paraId:93,tocIndex:50},{value:"null",paraId:93,tocIndex:50},{value:"The callback function after the time range is changed. When it is not assigned, the graph elements will be filtered after the time range is changed",paraId:93,tocIndex:50},{value:"getDate",paraId:93,tocIndex:50},{value:"(d: any) => number",paraId:93,tocIndex:50},{value:"null",paraId:93,tocIndex:50},{value:"[Supported from v4.5.1] User returns the date value according to the data of a node or an edge",paraId:93,tocIndex:50},{value:"getValue",paraId:93,tocIndex:50},{value:"(d: any) => number",paraId:93,tocIndex:50},{value:"null",paraId:93,tocIndex:50},{value:"[Supported from v4.5.1] User returns the value according to the data of a node or an edge. The value is used to draw the trend line for timebar with type 'trend'",paraId:93,tocIndex:50},{value:"shouldIgnore",paraId:93,tocIndex:50},{value:"(itemType: 'node'",paraId:93,tocIndex:50},{value:"'edge', model: any, dateRage: { min: number, max: number }) => boolean",paraId:93,tocIndex:50},{value:"null",paraId:93,tocIndex:50},{value:"Does not support the configurations for the style of the tick labels.",paraId:94,tocIndex:51},{value:"interface TrendConfig {\n  // The data\n  readonly data: {\n    date: string;\n    value: string;\n  }[];\n  // The position and size\n  readonly x?: number;\n  readonly y?: number;\n  readonly width?: number;\n  readonly height?: number;\n  // The styles\n  readonly smooth?: boolean;\n  readonly isArea?: boolean;\n  readonly lineStyle?: ShapeStyle;\n  readonly areaStyle?: ShapeStyle;\n  readonly interval?: Interval;\n}\n",paraId:95,tocIndex:51},{value:"Name",paraId:96,tocIndex:52},{value:"Type",paraId:96,tocIndex:52},{value:"Default Value",paraId:96,tocIndex:52},{value:"Description",paraId:96,tocIndex:52},{value:"x",paraId:96,tocIndex:52},{value:"number",paraId:96,tocIndex:52},{value:"0",paraId:96,tocIndex:52},{value:"The beginning x position of the trend line chart",paraId:96,tocIndex:52},{value:"y",paraId:96,tocIndex:52},{value:"number",paraId:96,tocIndex:52},{value:"0",paraId:96,tocIndex:52},{value:"The beginning y position of the trend line chart",paraId:96,tocIndex:52},{value:"width",paraId:96,tocIndex:52},{value:"number",paraId:96,tocIndex:52},{value:"The width of the TimeBar",paraId:96,tocIndex:52},{value:"The width of the trend line chart of the TimeBar, we suggest to use the default value. If you wanna custom it, please assign the ",paraId:96,tocIndex:52},{value:"width",paraId:96,tocIndex:52},{value:" of the slider in the same time",paraId:96,tocIndex:52},{value:"height",paraId:96,tocIndex:52},{value:"number",paraId:96,tocIndex:52},{value:"28 when type='trend'",paraId:96,tocIndex:52},{value:"8 when type='simple'",paraId:96,tocIndex:52},{value:"The height of the TimeBar",paraId:96,tocIndex:52},{value:"smooth",paraId:96,tocIndex:52},{value:"boolean",paraId:96,tocIndex:52},{value:"false",paraId:96,tocIndex:52},{value:"Whether to show a smooth line on the trend line chart",paraId:96,tocIndex:52},{value:"isArea",paraId:96,tocIndex:52},{value:"boolean",paraId:96,tocIndex:52},{value:"false",paraId:96,tocIndex:52},{value:"Whether to show a area chart instead",paraId:96,tocIndex:52},{value:"lineStyle",paraId:96,tocIndex:52},{value:"ShapeStyle",paraId:96,tocIndex:52},{value:"null",paraId:96,tocIndex:52},{value:"The configurations for the style of the line in the line chart",paraId:96,tocIndex:52},{value:"areaStyle",paraId:96,tocIndex:52},{value:"ShapeStyle",paraId:96,tocIndex:52},{value:"null",paraId:96,tocIndex:52},{value:"The configuration for the style of the area in the chart when ",paraId:96,tocIndex:52},{value:"isArea",paraId:96,tocIndex:52},{value:" is ",paraId:96,tocIndex:52},{value:"true",paraId:96,tocIndex:52},{value:"interval",paraId:96,tocIndex:52},{value:"Interval",paraId:96,tocIndex:52},{value:"null",paraId:96,tocIndex:52},{value:"The configuration for the style of the bars in the chart. When it is assigned, a mixed trend chart will take place. ",paraId:96,tocIndex:52},{value:"Interval = { data: number[], style: ShapeStyle }",paraId:96,tocIndex:52},{value:". Except the configurations in ",paraId:96,tocIndex:52},{value:"ShapeStyle",paraId:96,tocIndex:52},{value:" for the style of the shapes in the bar charts, ",paraId:96,tocIndex:52},{value:"barWidth",paraId:96,tocIndex:52},{value:" for the width of one bar is also configurable for ",paraId:96,tocIndex:52},{value:"style",paraId:96,tocIndex:52},{value:"export type SliderOption = Partial<{\n  readonly width?: number;\n  readonly height?: number;\n  readonly backgroundStyle?: ShapeStyle;\n  readonly foregroundStyle?: ShapeStyle;\n  // The style of the sliders\n  readonly handlerStyle?: {\n    width?: number;\n    height?: number;\n    style?: ShapeStyle;\n  };\n  readonly textStyle?: ShapeStyle;\n  // The start and end position for the sliders, which indicate the data range for the filtering. Ranges from 0 to 1\n  readonly start: number;\n  readonly end: number;\n  // The labels for the sliders\n  readonly minText: string;\n  readonly maxText: string;\n}>;\n",paraId:97,tocIndex:53},{value:"Name",paraId:98,tocIndex:54},{value:"Type",paraId:98,tocIndex:54},{value:"Default Value",paraId:98,tocIndex:54},{value:"Description",paraId:98,tocIndex:54},{value:"width",paraId:98,tocIndex:54},{value:"number",paraId:98,tocIndex:54},{value:"The width of the container of the TimeBar - 2 * padding",paraId:98,tocIndex:54},{value:"The width of the background trend chart. We suggest to use the default value. If you wanna custom it, assign it the the ",paraId:98,tocIndex:54},{value:"width",paraId:98,tocIndex:54},{value:" in the ",paraId:98,tocIndex:54},{value:"trend",paraId:98,tocIndex:54},{value:" in the same time",paraId:98,tocIndex:54},{value:"height",paraId:98,tocIndex:54},{value:"number",paraId:98,tocIndex:54},{value:"28 when type='trend'",paraId:98,tocIndex:54},{value:"8 when type='simple'",paraId:98,tocIndex:54},{value:"The height of the background trend chart. We suggest to use the default value. If you wanna custom it, assign it the the ",paraId:98,tocIndex:54},{value:"height",paraId:98,tocIndex:54},{value:" in the ",paraId:98,tocIndex:54},{value:"trend",paraId:98,tocIndex:54},{value:" in the same time",paraId:98,tocIndex:54},{value:"backgroundStyle",paraId:98,tocIndex:54},{value:"ShapeStyle",paraId:98,tocIndex:54},{value:"null",paraId:98,tocIndex:54},{value:"The configuration for the style of the background",paraId:98,tocIndex:54},{value:"foregroundStyle",paraId:98,tocIndex:54},{value:"ShapeStyle",paraId:98,tocIndex:54},{value:"null",paraId:98,tocIndex:54},{value:"The configuration for the style of the forground",paraId:98,tocIndex:54},{value:"handlerStyle",paraId:98,tocIndex:54},{value:"ShapeStyle",paraId:98,tocIndex:54},{value:"null",paraId:98,tocIndex:54},{value:"The configuration for the style of the two sliders",paraId:98,tocIndex:54},{value:"textStyle",paraId:98,tocIndex:54},{value:"ShapeStyle",paraId:98,tocIndex:54},{value:"null",paraId:98,tocIndex:54},{value:"The configuration for the style of the labels on the two sliders",paraId:98,tocIndex:54},{value:"start",paraId:98,tocIndex:54},{value:"number",paraId:98,tocIndex:54},{value:"0.1",paraId:98,tocIndex:54},{value:"The start position for the sliders, which indicate the start of the data range for the filtering. Ranges from 0 to ",paraId:98,tocIndex:54},{value:"end",paraId:98,tocIndex:54},{value:"end",paraId:98,tocIndex:54},{value:"number",paraId:98,tocIndex:54},{value:"0.9",paraId:98,tocIndex:54},{value:"The end position for the sliders, which indicate the end of the data range for the filtering. Ranges from ",paraId:98,tocIndex:54},{value:"start",paraId:98,tocIndex:54},{value:" to 1",paraId:98,tocIndex:54},{value:"minText",paraId:98,tocIndex:54},{value:"string",paraId:98,tocIndex:54},{value:"min",paraId:98,tocIndex:54},{value:"The label for the left slider",paraId:98,tocIndex:54},{value:"maxText",paraId:98,tocIndex:54},{value:"string",paraId:98,tocIndex:54},{value:"max",paraId:98,tocIndex:54},{value:"The label for the right slider",paraId:98,tocIndex:54},{value:"export interface TimeBarSliceOption {\n  // position size\n  readonly x?: number;\n  readonly y?: number;\n  readonly width?: number;\n  readonly height?: number;\n  readonly padding?: number;\n\n  // styles\n  readonly selectedTickStyle?: TickStyle;\n  readonly unselectedTickStyle?: TickStyle\n  readonly tooltipBackgroundColor?: string;\n\n  readonly start?: number;\n  readonly end?: number;\n\n  // data\n  readonly data: {\n    date: string;\n    value: string;\n  }[];\n\n  // custom the formatter function for the tick labels\n  readonly tickLabelFormatter?: (d: any) => string | boolean;\n  // custom the formatter function for the tooltip\n  readonly tooltipFomatter?: (d: any) => string;\n}\n",paraId:99,tocIndex:55},{value:"Name",paraId:100,tocIndex:56},{value:"Type",paraId:100,tocIndex:56},{value:"Default Value",paraId:100,tocIndex:56},{value:"Description",paraId:100,tocIndex:56},{value:"x",paraId:100,tocIndex:56},{value:"number",paraId:100,tocIndex:56},{value:"0",paraId:100,tocIndex:56},{value:"The beginning x position for the TimeBar",paraId:100,tocIndex:56},{value:"y",paraId:100,tocIndex:56},{value:"number",paraId:100,tocIndex:56},{value:"0",paraId:100,tocIndex:56},{value:"The beginning y position for the TimeBar",paraId:100,tocIndex:56},{value:"width",paraId:100,tocIndex:56},{value:"number",paraId:100,tocIndex:56},{value:"Requred",paraId:100,tocIndex:56},{value:", the width of the TimeBar",paraId:100,tocIndex:56},{value:"height",paraId:100,tocIndex:56},{value:"number",paraId:100,tocIndex:56},{value:"Requred",paraId:100,tocIndex:56},{value:", the height of the TimeBar",paraId:100,tocIndex:56},{value:"padding",paraId:100,tocIndex:56},{value:"number / number[]",paraId:100,tocIndex:56},{value:"0",paraId:100,tocIndex:56},{value:"The padding of the container of the TimeBar",paraId:100,tocIndex:56},{value:"selectedTickStyle",paraId:100,tocIndex:56},{value:"ShapeStyle",paraId:100,tocIndex:56},{value:"null",paraId:100,tocIndex:56},{value:"The style of the tick(s) which is(are) selected",paraId:100,tocIndex:56},{value:"unselectedTickStyle",paraId:100,tocIndex:56},{value:"ShapeStyle",paraId:100,tocIndex:56},{value:"null",paraId:100,tocIndex:56},{value:"The style of the tick(s) which is(are) unselected",paraId:100,tocIndex:56},{value:"tooltipBackgroundColor",paraId:100,tocIndex:56},{value:"ShapeStyle",paraId:100,tocIndex:56},{value:"null",paraId:100,tocIndex:56},{value:"The background style for the tooltip",paraId:100,tocIndex:56},{value:"start",paraId:100,tocIndex:56},{value:"number",paraId:100,tocIndex:56},{value:"0.1",paraId:100,tocIndex:56},{value:"The start position for the sliders, which indicate the start of the data range for the filtering. Ranges from 0 to ",paraId:100,tocIndex:56},{value:"end",paraId:100,tocIndex:56},{value:"end",paraId:100,tocIndex:56},{value:"number",paraId:100,tocIndex:56},{value:"0.9",paraId:100,tocIndex:56},{value:"The end position for the sliders, which indicate the end of the data range for the filtering. Ranges from ",paraId:100,tocIndex:56},{value:"start",paraId:100,tocIndex:56},{value:" to 1",paraId:100,tocIndex:56},{value:"data",paraId:100,tocIndex:56},{value:"any[]",paraId:100,tocIndex:56},{value:"[]",paraId:100,tocIndex:56},{value:"Requred",paraId:100,tocIndex:56},{value:", the data for the ticks",paraId:100,tocIndex:56},{value:"tickLabelFormatter",paraId:100,tocIndex:56},{value:"Function",paraId:100,tocIndex:56},{value:"null",paraId:100,tocIndex:56},{value:"The formatter function for customing the labels of the ticks",paraId:100,tocIndex:56},{value:"tooltipFomatter",paraId:100,tocIndex:56},{value:"Function",paraId:100,tocIndex:56},{value:"null",paraId:100,tocIndex:56},{value:"The formatter function for customing the tooltip",paraId:100,tocIndex:56},{value:"export interface TickCfg {\n  // the fomatter for the time tick labels\n  readonly tickLabelFormatter?: (d: any) => string | undefined;\n  // the shape style for the time tick labels. [Supported from v4.5.1] tickLabelStyle.rotate can be configured to controll the rotate of the tick label to avoid overlappings\n  readonly tickLabelStyle?: ShapeStyle;\n  // the shape style for the short vertical lines uppon the time tick labels\n  readonly tickLineStyle?: ShapeStyle;\n}\n",paraId:101,tocIndex:57},{value:"Name",paraId:102,tocIndex:58},{value:"Type",paraId:102,tocIndex:58},{value:"Default Value",paraId:102,tocIndex:58},{value:"Description",paraId:102,tocIndex:58},{value:"tickLabelFormatter",paraId:102,tocIndex:58},{value:"Function",paraId:102,tocIndex:58},{value:"null",paraId:102,tocIndex:58},{value:"The formatter function for customing the labels of the ticks",paraId:102,tocIndex:58},{value:"tickLabelStyle",paraId:102,tocIndex:58},{value:"ShapeStyle",paraId:102,tocIndex:58},{value:"{}",paraId:102,tocIndex:58},{value:"The shape style for the time tick labels. [Supported from v4.5.1] tickLabelStyle.rotate can be configured to controll the rotate of the tick label to avoid overlappings",paraId:102,tocIndex:58},{value:"tickLineStyle",paraId:102,tocIndex:58},{value:"ShapeStyle",paraId:102,tocIndex:58},{value:"{}",paraId:102,tocIndex:58},{value:"The shape style for the short vertical lines uppon the time tick labels",paraId:102,tocIndex:58},{value:"Does not support for now",paraId:103,tocIndex:59},{value:"Does not support the style configuration for controller buttons",paraId:104,tocIndex:59},{value:"Does not support loop play",paraId:105,tocIndex:59},{value:"type ControllerCfg = Partial<{\n  /** the begining position and the size of the controller, the width and height will not scale the sub-controllers but only affects the positions of them. To change the size of the sub-controllers, try ControllerCfg.scale or the scale in the style of sub-controller */\n  readonly x?: number;\n  readonly y?: number;\n  readonly width: number;\n  readonly height: number;\n  /** the scale of the whole controller */\n  readonly scale?: number;\n  /** the fill and stroke color of the background */\n  readonly fill?: string;\n  readonly stroke?: string;\n  /** the font family for the whole controller, whose priority is lower than the fontFamily in the text style of each sub-controller */\n  readonly fontFamily?: string;\n\n  /** the play spped, means the playing time for 1 tick */\n  readonly speed?: number;\n  /** whether play in loop */\n  readonly loop?: boolean;\n  /** whether hide the 'time type controller' on the right-bottom */\n  readonly hideTimeTypeController: boolean;\n\n  /** style of the backward button. scale, offsetX, offsetY are also can be assigned to it to controll the size and position of the backward button */\n  readonly preBtnStyle?: ShapeStyle;\n\n  /** style of the forward button. scale, offsetX, offsetY are also can be assigned to it to controll the size and position of the forward button */\n  readonly nextBtnStyle?: ShapeStyle;\n\n  /** style of the play button. scale, offsetX, offsetY are also can be assigned to it to controll the size and position of the paly button */\n  readonly playBtnStyle?: ShapeStyle;\n\n  /** style of the 'speed controller'. scale, offsetX, offsetY are also can be assigned to it and each sub-styles to controll the size and position of the speed controller and sub-shapes*/\n  readonly speedControllerStyle?: {\n    offsetX?: number,\n    offsetY?: number;\n    scale?: number\n    pointer?: ShapeStyle,\n    scroller?: ShapeStyle,\n    text?: ShapeStyle\n  };\n\n  /** style of the 'time type controller'. scale, offsetX, offsetY  are also can be assigned to it and each sub-styles to controll the size and position of the speed controller and sub-shapes */\n  readonly timeTypeControllerStyle?: {\n    offsetX?: number,\n    offsetY?: number;\n    scale?: number\n    check?: ShapeStyle,\n    box?: ShapeStyle,\n    text?: ShapeStyle\n  };\n  /** [Supported from v4.5.1] The style of the background rect of the controller */\n  readonly containerStyle?: ExtendedShapeStyle;\n  /** the text for the right-bottom switch controlling play with single time point or time range */\n  readonly timePointControllerText?: string;\n  readonly timeRangeControllerText?: string;\n  /** [Supported from v4.7.11] the default type of the playing, 'single' means single time point, and 'range' means time range. 'range' by default */\n  readonly defaultTimeType?: 'single' | 'range';\n}>\n",paraId:106,tocIndex:59},{value:"Name",paraId:107,tocIndex:60},{value:"Type",paraId:107,tocIndex:60},{value:"Default Value",paraId:107,tocIndex:60},{value:"Description",paraId:107,tocIndex:60},{value:"x",paraId:107,tocIndex:60},{value:"number",paraId:107,tocIndex:60},{value:"0",paraId:107,tocIndex:60},{value:"The beginning x position for the buttons group of the TimeBar",paraId:107,tocIndex:60},{value:"y",paraId:107,tocIndex:60},{value:"number",paraId:107,tocIndex:60},{value:"0",paraId:107,tocIndex:60},{value:"The beginning y position for the buttons group of the TimeBar",paraId:107,tocIndex:60},{value:"width",paraId:107,tocIndex:60},{value:"number",paraId:107,tocIndex:60},{value:"The width of the TimeBar",paraId:107,tocIndex:60},{value:"The width of the buttons group of the TimeBar, do not scale the sub-controllers but only affects the positions of them",paraId:107,tocIndex:60},{value:"height",paraId:107,tocIndex:60},{value:"number",paraId:107,tocIndex:60},{value:"40",paraId:107,tocIndex:60},{value:"The width of the buttons group of the TimeBar, do not scale the sub-controllers but only affects the positions of them",paraId:107,tocIndex:60},{value:"scale",paraId:107,tocIndex:60},{value:"number",paraId:107,tocIndex:60},{value:"1",paraId:107,tocIndex:60},{value:"The scale of the whole controller",paraId:107,tocIndex:60},{value:"speed",paraId:107,tocIndex:60},{value:"number",paraId:107,tocIndex:60},{value:"1",paraId:107,tocIndex:60},{value:"The play speed",paraId:107,tocIndex:60},{value:"loop",paraId:107,tocIndex:60},{value:"boolean",paraId:107,tocIndex:60},{value:"false",paraId:107,tocIndex:60},{value:"Does not support for now",paraId:107,tocIndex:60},{value:", whether play in loop",paraId:107,tocIndex:60},{value:"hideTimeTypeController",paraId:107,tocIndex:60},{value:"boolean",paraId:107,tocIndex:60},{value:"true",paraId:107,tocIndex:60},{value:"Whther hide the time type controller on the right bottom",paraId:107,tocIndex:60},{value:"fill",paraId:107,tocIndex:60},{value:"string",paraId:107,tocIndex:60},{value:"The fillling color for the background of the controller",paraId:107,tocIndex:60},{value:"stroke",paraId:107,tocIndex:60},{value:"string",paraId:107,tocIndex:60},{value:"The stroke color for the background of the buttons group",paraId:107,tocIndex:60},{value:"preBtnStyle",paraId:107,tocIndex:60},{value:"ShapeStyle",paraId:107,tocIndex:60},{value:"null",paraId:107,tocIndex:60},{value:"The style of the backward button. ",paraId:107,tocIndex:60},{value:"scale",paraId:107,tocIndex:60},{value:", ",paraId:107,tocIndex:60},{value:"offsetX",paraId:107,tocIndex:60},{value:", ",paraId:107,tocIndex:60},{value:"offsetY",paraId:107,tocIndex:60},{value:" are also can be assigned to it to controll the size and position of the backward button",paraId:107,tocIndex:60},{value:"nextBtnStyle",paraId:107,tocIndex:60},{value:"ShapeStyle",paraId:107,tocIndex:60},{value:"null",paraId:107,tocIndex:60},{value:"The style of the forward button. ",paraId:107,tocIndex:60},{value:"scale",paraId:107,tocIndex:60},{value:", ",paraId:107,tocIndex:60},{value:"offsetX",paraId:107,tocIndex:60},{value:", ",paraId:107,tocIndex:60},{value:"offsetY",paraId:107,tocIndex:60},{value:" are also can be assigned to it to controll the size and position of the forward button",paraId:107,tocIndex:60},{value:"playBtnStyle",paraId:107,tocIndex:60},{value:"ShapeStyle",paraId:107,tocIndex:60},{value:"null",paraId:107,tocIndex:60},{value:"The style of the play button. ",paraId:107,tocIndex:60},{value:"scale",paraId:107,tocIndex:60},{value:", ",paraId:107,tocIndex:60},{value:"offsetX",paraId:107,tocIndex:60},{value:", ",paraId:107,tocIndex:60},{value:"offsetY",paraId:107,tocIndex:60},{value:" are also can be assigned to it to controll the size and position of the paly button",paraId:107,tocIndex:60},{value:"speedControllerStyle",paraId:107,tocIndex:60},{value:"{ offsetX?: number, offsetY?: number, scale?: number, pointer?: ShapeStyle, text?: ShapeStyle, scroller?: ShapeStyle}",paraId:107,tocIndex:60},{value:"null",paraId:107,tocIndex:60},{value:"The style of the 'speed controller'. ",paraId:107,tocIndex:60},{value:"scale",paraId:107,tocIndex:60},{value:", ",paraId:107,tocIndex:60},{value:"offsetX",paraId:107,tocIndex:60},{value:", ",paraId:107,tocIndex:60},{value:"offsetY",paraId:107,tocIndex:60},{value:" are also can be assigned to it and each sub-styles to controll the size and position of the speed controller and sub-shapes",paraId:107,tocIndex:60},{value:"timeTypeControllerStyle",paraId:107,tocIndex:60},{value:"{ offsetX?: number, offsetY?: number, scale?: number, box?: ShapeStyle, check?: ShapeStyle, text?: ShapeStyle }",paraId:107,tocIndex:60},{value:"null",paraId:107,tocIndex:60},{value:"The style of the 'time type controller'. ",paraId:107,tocIndex:60},{value:"scale",paraId:107,tocIndex:60},{value:", ",paraId:107,tocIndex:60},{value:"offsetX",paraId:107,tocIndex:60},{value:", ",paraId:107,tocIndex:60},{value:"offsetY",paraId:107,tocIndex:60},{value:" are also can be assigned to it and each sub-styles to controll the size and position of the speed controller and sub-shapes",paraId:107,tocIndex:60},{value:"containerStyle ｜ ShapeStyle",paraId:107,tocIndex:60},{value:"{}",paraId:107,tocIndex:60},{value:"[Supported from v4.5.1] The style of the background rect of the controller",paraId:107,tocIndex:60},{value:"timePointControllerText",paraId:107,tocIndex:60},{value:"string",paraId:107,tocIndex:60},{value:'"单一时间"',paraId:107,tocIndex:60},{value:"The text for the right-bottom switch controlling play with single time point or time range",paraId:107,tocIndex:60},{value:"timeRangeControllerText",paraId:107,tocIndex:60},{value:"string",paraId:107,tocIndex:60},{value:'"时间范围"',paraId:107,tocIndex:60},{value:"The text for the right-bottom switch controlling play with single time point or time range",paraId:107,tocIndex:60}]},85162:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Initialize a tree graph.",paraId:0},{value:"// highlight-start\nnew G6.TreeGraph(cfg: GraphOptions) => TreeGraph\n// highlight-end\n\nconst treeGraph = new G6.TreeGraph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  modes: {\n    default: [\n      {\n        type: 'collapse-expand',\n        onChange(item, collapsed) {\n          const icon = item.get('group').findByClassName('collapse-icon');\n          if (collapsed) {\n            icon.attr('symbol', EXPAND_ICON);\n          } else {\n            icon.attr('symbol', COLLAPSE_ICON);\n          }\n        },\n      },\n      'drag-canvas',\n      'zoom-canvas',\n    ],\n  },\n  layout: {\n    type: 'dendrogram',\n    direction: 'LR', // H / V / LR / RL / TB / BT\n    nodeSep: 50,\n    rankSep: 100,\n    radial: true,\n  },\n});\n",paraId:1},{value:"If you are going to visualize a tree, TreeGraph of G6 is more appropriate than Graph. The main differences between ",paraId:2},{value:"G6.TreeGraph",paraId:2},{value:" and ",paraId:2},{value:"G6.Graph",paraId:2},{value:" are data structure and built-in layout algorithms:",paraId:2},{value:"Data structure: In G6, the tree data has nested structure. Edges are implicit in it. Each node data has ",paraId:3},{value:"id",paraId:3},{value:" and ",paraId:3},{value:"children",paraId:3},{value:" properties at least:",paraId:3},{value:"const data = {\n  id: 'root',\n  children: [\n    {\n      id: 'subTree1',\n      children: [...]\n    },\n    {\n      id: 'subTree2',\n      children: [...]\n    }\n  ]\n};\n",paraId:4},{value:"Tree layout algorithms:\n",paraId:5},{value:"Tree layout algorithms do not modify the source data. it generates a new data instead. And the source data will be a property of the new data. This mechanism will reduce the complexity of transformation from nested data to nodes and edges in graph.",paraId:6},{value:"The layout will be re-calculated after adding / deleting / expanding / collapsing nodes on the tree.",paraId:6},{value:"TreeGraph is inherited from Graph, please refer to ",paraId:7},{value:"G6.Graph(GraphOptions)",paraId:8},{value:" for its configurations. One difference is the ",paraId:7},{value:"layout",paraId:7},{value:" option. There are four layout algorithms for tree in G6: dendrogram, compactBox, mindmap, and indented, whose detailed configurations are listed in ",paraId:7},{value:"TreeGraph Layout",paraId:9},{value:".",paraId:7}]},48496:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"G6 provides a set of util functions for data pre-processing and graphics computation.",paraId:0},{value:"Import G6, and call a util function by ",paraId:1,tocIndex:0},{value:"G6.Util.functionName",paraId:1,tocIndex:0},{value:". The following demo shows the usage of ",paraId:1,tocIndex:0},{value:"processParallelEdges",paraId:1,tocIndex:0},{value:" to process multiple edges between two nodes.",paraId:1,tocIndex:0},{value:"import G6 from '@antv/g6';\n\nconst data = {\n  nodes: [\n    { id: '1' }, { id: '2' }\n  ]\n  edges: [\n    { source: '1', target: '2' },\n    { source: '1', target: '2' },\n  ];\n}\n\nconst offsetDiff = 10;\nconst multiEdgeType = 'quadratic';\nconst singleEdgeType = 'line';\nconst loopEdgeType = 'loop';\nG6.Util.processParallelEdges(data.edges, offsetDiff, multiEdgeType, singleEdgeType, loopEdgeType);\n",paraId:2,tocIndex:0},{value:"If the two end nodes of the two edges are the same, the two edges are said to be parallel to each other. When there are multiple edges between a pair of nodes, rendering them directly without processing may lead to edge overlappings. ",paraId:3,tocIndex:2},{value:"processParallelEdges",paraId:3,tocIndex:2},{value:" will find the parallel edges in the ",paraId:3,tocIndex:2},{value:"edges",paraId:3,tocIndex:2},{value:" and calculate a reasonable control point offset ",paraId:3,tocIndex:2},{value:"curveOffset",paraId:3,tocIndex:2},{value:" of Bezier curve for them, and assign ",paraId:3,tocIndex:2},{value:"curveOffset",paraId:3,tocIndex:2},{value:" to the edge data. Then, the ",paraId:3,tocIndex:2},{value:"curveOffset",paraId:3,tocIndex:2},{value:" will take effects while rendering with the edge type ",paraId:3,tocIndex:2},{value:"quadratic",paraId:3,tocIndex:2},{value:" or a custom type based on ",paraId:3,tocIndex:2},{value:"quadratic",paraId:3,tocIndex:2},{value:".",paraId:3,tocIndex:2},{value:"Name",paraId:4,tocIndex:3},{value:"Type",paraId:4,tocIndex:3},{value:"Required",paraId:4,tocIndex:3},{value:"Description",paraId:4,tocIndex:3},{value:"edges",paraId:4,tocIndex:3},{value:"EdgeConfig[]",paraId:4,tocIndex:3},{value:"true",paraId:4,tocIndex:3},{value:"The edge data array need to be processed",paraId:4,tocIndex:3},{value:"offsetDiff",paraId:4,tocIndex:3},{value:"number",paraId:4,tocIndex:3},{value:"false",paraId:4,tocIndex:3},{value:"The offset between two parallel edges, 15 by default",paraId:4,tocIndex:3},{value:"multiEdgeType",paraId:4,tocIndex:3},{value:"string",paraId:4,tocIndex:3},{value:"false",paraId:4,tocIndex:3},{value:"The edge type for the parallel edges, 'quadratic' by default. You can assign any custom edge type based on 'quadratic' to it",paraId:4,tocIndex:3},{value:"singleEdgeType",paraId:4,tocIndex:3},{value:"string",paraId:4,tocIndex:3},{value:"false",paraId:4,tocIndex:3},{value:"The edge type for the single edge between two nodes, undefined by default, which means the type of the edge is kept unchanged as it is in the input data",paraId:4,tocIndex:3},{value:"loopEdgeType",paraId:4,tocIndex:3},{value:"string",paraId:4,tocIndex:3},{value:"false",paraId:4,tocIndex:3},{value:"The edge type for a self-loop edge, undefined by default, which means the type of the edge is kept unchanged as it is in the input data",paraId:4,tocIndex:3},{value:"Demo",paraId:5},{value:"Traverse the tree data depth-first from top (the root) to bottom (the leaves).",paraId:6,tocIndex:5},{value:"Name",paraId:7,tocIndex:6},{value:"Type",paraId:7,tocIndex:6},{value:"Required",paraId:7,tocIndex:6},{value:"Description",paraId:7,tocIndex:6},{value:"data",paraId:7,tocIndex:6},{value:"TreeData",paraId:7,tocIndex:6},{value:"true",paraId:7,tocIndex:6},{value:"The tree data to be traversed",paraId:7,tocIndex:6},{value:"fn",paraId:7,tocIndex:6},{value:"function",paraId:7,tocIndex:6},{value:"true",paraId:7,tocIndex:6},{value:"The callback function called when visit a node. Returning ",paraId:7,tocIndex:6},{value:"false",paraId:7,tocIndex:6},{value:" from the callback function will stop traversal.",paraId:7,tocIndex:6},{value:"Parameters of the callback function ",paraId:8,tocIndex:6},{value:"fn",paraId:8,tocIndex:6},{value:" in the table above:",paraId:8,tocIndex:6},{value:"Name",paraId:9,tocIndex:6},{value:"Type",paraId:9,tocIndex:6},{value:"Description",paraId:9,tocIndex:6},{value:"node",paraId:9,tocIndex:6},{value:"T",paraId:9,tocIndex:6},{value:"Tree node being currently visited",paraId:9,tocIndex:6},{value:"parent",paraId:9,tocIndex:6},{value:"T",paraId:9,tocIndex:6},{value:"null",paraId:9,tocIndex:6},{value:"index",paraId:9,tocIndex:6},{value:"number",paraId:9,tocIndex:6},{value:"Index of current tree node among the parent's children",paraId:9,tocIndex:6},{value:"const treeData = {\n  id: '1',\n  children: [\n    {\n      id: '2',\n      children: [{ id: '3' }, { id: '4' }],\n    },\n    {\n      id: '5',\n      children: [\n        { id: '6' },\n        {\n          id: '7',\n          children: [{ id: '8' }, { id: '9' }],\n        },\n      ],\n    },\n    {\n      id: '10',\n      children: [{ id: '11' }],\n    },\n  ],\n};\n\ntraverseTree(treeData, (subTree) => {\n  subTree.color = '#f00';\n  return true;\n});\n",paraId:10,tocIndex:7},{value:"Traverse the tree data depth-first from bottom (the leaves) to top (the root).",paraId:11,tocIndex:8},{value:"Name",paraId:12,tocIndex:9},{value:"Type",paraId:12,tocIndex:9},{value:"Required",paraId:12,tocIndex:9},{value:"Description",paraId:12,tocIndex:9},{value:"data",paraId:12,tocIndex:9},{value:"TreeData",paraId:12,tocIndex:9},{value:"true",paraId:12,tocIndex:9},{value:"The tree data to be traversed",paraId:12,tocIndex:9},{value:"fn",paraId:12,tocIndex:9},{value:"function",paraId:12,tocIndex:9},{value:"true",paraId:12,tocIndex:9},{value:"The callback function called when visit a node. Returning ",paraId:12,tocIndex:9},{value:"false",paraId:12,tocIndex:9},{value:" from the callback function will stop traversal.",paraId:12,tocIndex:9},{value:"Parameters of the callback function ",paraId:13,tocIndex:9},{value:"fn",paraId:13,tocIndex:9},{value:" in the table above:",paraId:13,tocIndex:9},{value:"Name",paraId:14,tocIndex:9},{value:"Type",paraId:14,tocIndex:9},{value:"Description",paraId:14,tocIndex:9},{value:"node",paraId:14,tocIndex:9},{value:"T",paraId:14,tocIndex:9},{value:"Tree node being currently visited",paraId:14,tocIndex:9},{value:"parent",paraId:14,tocIndex:9},{value:"T",paraId:14,tocIndex:9},{value:"null",paraId:14,tocIndex:9},{value:"index",paraId:14,tocIndex:9},{value:"number",paraId:14,tocIndex:9},{value:"Index of current tree node among the parent's children",paraId:14,tocIndex:9},{value:"const treeData = {\n  id: '1',\n  children: [\n    {\n      id: '2',\n      children: [{ id: '3' }, { id: '4' }],\n    },\n    {\n      id: '5',\n      children: [\n        { id: '6' },\n        {\n          id: '7',\n          children: [{ id: '8' }, { id: '9' }],\n        },\n      ],\n    },\n    {\n      id: '10',\n      children: [{ id: '11' }],\n    },\n  ],\n};\n\ntraverseTreeUp(treeData, (subTree) => {\n  subTree.color = '#f00';\n  return true;\n});\n",paraId:15,tocIndex:10},{value:"Returns the bounding box of a set of node items.",paraId:16,tocIndex:12},{value:"Name",paraId:17,tocIndex:12},{value:"Type",paraId:17,tocIndex:12},{value:"Required",paraId:17,tocIndex:12},{value:"Description",paraId:17,tocIndex:12},{value:"items",paraId:17,tocIndex:12},{value:"Item[]",paraId:17,tocIndex:12},{value:"true",paraId:17,tocIndex:12},{value:"The array of node items to be calculated",paraId:17,tocIndex:12}]},42559:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Update the node positions according to the data model animatively. The ",paraId:0,tocIndex:0},{value:"animateCfg",paraId:0,tocIndex:0},{value:" of the graph will be the animation configurations.",paraId:0,tocIndex:0},{value:"Stop the animation on the canvas.",paraId:1,tocIndex:1},{value:"Usage",paraId:2,tocIndex:1},{value:"graph.stopAnimate();\n",paraId:3,tocIndex:1},{value:"Return if the graph is animating.",paraId:4,tocIndex:2}]},8257:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Add interaction behaviors to a mode or multiple modes.",paraId:0,tocIndex:0},{value:"Parameters",paraId:1,tocIndex:0},{value:"Name",paraId:2,tocIndex:0},{value:"Type",paraId:2,tocIndex:0},{value:"Required",paraId:2,tocIndex:0},{value:"Description",paraId:2,tocIndex:0},{value:"behaviors",paraId:2,tocIndex:0},{value:"string / Array",paraId:2,tocIndex:0},{value:"true",paraId:2,tocIndex:0},{value:"The name(s) of behavior(s) to be added.",paraId:2,tocIndex:0},{value:"modes",paraId:2,tocIndex:0},{value:"string / Array",paraId:2,tocIndex:0},{value:"true",paraId:2,tocIndex:0},{value:"The name(s) of mode(s)",paraId:2,tocIndex:0},{value:"Usage",paraId:3,tocIndex:0},{value:"// Add single behavior 'click-select' to a single mode 'default'\ngraph.addBehaviors('click-select', 'default');\n\n// Add multiple behaviors to single mode 'default'\ngraph.addBehaviors(['brush-select', 'click-select'], 'default');\n\n// Add single behavior 'brush-select' to multiple modes\ngraph.addBehaviors('brush-select', ['default', 'select']);\n\n// Add multiple behaviors to multiple modes\ngraph.addBehaviors(['brush-select', 'click-select'], ['default', 'select']);\n",paraId:4,tocIndex:0},{value:"Remove behavior(s) from mode(s).",paraId:5,tocIndex:1},{value:"Parameters",paraId:6,tocIndex:1},{value:"Name",paraId:7,tocIndex:1},{value:"Type",paraId:7,tocIndex:1},{value:"Required",paraId:7,tocIndex:1},{value:"Description",paraId:7,tocIndex:1},{value:"behaviors",paraId:7,tocIndex:1},{value:"string / Array",paraId:7,tocIndex:1},{value:"true",paraId:7,tocIndex:1},{value:"The name(s) of behavior(s) to be removed.",paraId:7,tocIndex:1},{value:"modes",paraId:7,tocIndex:1},{value:"string / Array",paraId:7,tocIndex:1},{value:"true",paraId:7,tocIndex:1},{value:"The name(s) of mode(s).",paraId:7,tocIndex:1},{value:"Usage",paraId:8,tocIndex:1},{value:"// remove single behavior 'click-select' from single mode 'default'\ngraph.removeBehaviors('click-select', 'default');\n\n// remove multiple behaviors from single mode 'default'\ngraph.removeBehaviors(['brush-select', 'click-select'], 'default');\n\n// remove single behavior 'brush-select' from multiple modes\ngraph.removeBehaviors('brush-select', ['default', 'select']);\n\n// remove multiple behaviors from multiple modes\ngraph.removeBehaviors(['brush-select', 'click-select'], ['default', 'select']);\n",paraId:9,tocIndex:1},{value:"Update the configurations for a behavior from mode.",paraId:10,tocIndex:2},{value:"Parameters",paraId:11,tocIndex:2},{value:"Name",paraId:12,tocIndex:2},{value:"Type",paraId:12,tocIndex:2},{value:"Required",paraId:12,tocIndex:2},{value:"Description",paraId:12,tocIndex:2},{value:"behavior",paraId:12,tocIndex:2},{value:"string",paraId:12,tocIndex:2},{value:"true",paraId:12,tocIndex:2},{value:"The type name of the behavior need to be updated",paraId:12,tocIndex:2},{value:"newCfg",paraId:12,tocIndex:2},{value:"object",paraId:12,tocIndex:2},{value:"true",paraId:12,tocIndex:2},{value:"The new configurations",paraId:12,tocIndex:2},{value:"mode",paraId:12,tocIndex:2},{value:"string",paraId:12,tocIndex:2},{value:"false",paraId:12,tocIndex:2},{value:"The mode name of the mode where the behavior need to be updated. 'default' by default",paraId:12,tocIndex:2},{value:"Usage",paraId:13,tocIndex:2},{value:"const graph = new Graph({\n  ... // Other graph configurations\n  modes: {\n    default: ['zoom-canvas', 'drag-canvas'],\n    select: ['click-select']\n  }\n});\n\ngraph.data(data);\ngraph.render();\n\n// update the behavior 'zoom-canvas' from mode 'default'\ngraph.updateBehavior('zoom-canvas', { sensitivity: 1.5, enableOptimize: true}, 'default');\n\n// update the behavior 'click-select' from mode 'select'\ngraph.updateBehavior('click-select', { trigger: 'ctrl' }, 'select');\n",paraId:14,tocIndex:2}]},10130:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Get the in-degree, out-degree, degree, or all of the three kinds of degree.",paraId:0,tocIndex:0},{value:"Parameter",paraId:1,tocIndex:0},{value:"Name",paraId:2,tocIndex:0},{value:"Type",paraId:2,tocIndex:0},{value:"Required",paraId:2,tocIndex:0},{value:"Description",paraId:2,tocIndex:0},{value:"node",paraId:2,tocIndex:0},{value:"string / INode",paraId:2,tocIndex:0},{value:"true",paraId:2,tocIndex:0},{value:"Node's ID or item",paraId:2,tocIndex:0},{value:"degreeType",paraId:2,tocIndex:0},{value:"'in'",paraId:2,tocIndex:0},{value:" \\ ",paraId:2,tocIndex:0},{value:"'out'",paraId:2,tocIndex:0},{value:" \\ ",paraId:2,tocIndex:0},{value:"'total'",paraId:2,tocIndex:0},{value:" \\ ",paraId:2,tocIndex:0},{value:"'all'",paraId:2,tocIndex:0},{value:"false",paraId:2,tocIndex:0},{value:"The degree type. If it is assigned to ",paraId:2,tocIndex:0},{value:"'in'",paraId:2,tocIndex:0},{value:", returns the in-degree; ",paraId:2,tocIndex:0},{value:"'out'",paraId:2,tocIndex:0},{value:" returns out-degree; ",paraId:2,tocIndex:0},{value:"'total'",paraId:2,tocIndex:0},{value:" returns total degree; ",paraId:2,tocIndex:0},{value:"'all'",paraId:2,tocIndex:0},{value:" returns an object contains three kinds of the degree: ",paraId:2,tocIndex:0},{value:"{ inDegree, outDegree, degree}",paraId:2,tocIndex:0},{value:"; If it is not assigned, returns total degree as default",paraId:2,tocIndex:0},{value:"refresh",paraId:2,tocIndex:0},{value:"boolean",paraId:2,tocIndex:0},{value:"false",paraId:2,tocIndex:0},{value:"Whether to force refresh the degree for the whole graph. The default value is ",paraId:2,tocIndex:0},{value:"false",paraId:2,tocIndex:0},{value:". You should assign it to be true after adding edges by ",paraId:2,tocIndex:0},{value:"addItem",paraId:2,tocIndex:0},{value:"Usage",paraId:3,tocIndex:0},{value:"graph.getNodeDegree('node1', 'in');\n",paraId:4,tocIndex:0},{value:"Get all-pairs shortest-path matrix of the graph.",paraId:5,tocIndex:1},{value:"Parameters",paraId:6,tocIndex:1},{value:"Name",paraId:7,tocIndex:1},{value:"Type",paraId:7,tocIndex:1},{value:"Required",paraId:7,tocIndex:1},{value:"Description",paraId:7,tocIndex:1},{value:"cache",paraId:7,tocIndex:1},{value:"boolean",paraId:7,tocIndex:1},{value:"false",paraId:7,tocIndex:1},{value:"Whether to use the cached matrix, 'true' by default.",paraId:7,tocIndex:1},{value:"directed",paraId:7,tocIndex:1},{value:"boolean",paraId:7,tocIndex:1},{value:"false",paraId:7,tocIndex:1},{value:"Whether the graph is directed, use the value of ",paraId:7,tocIndex:1},{value:"graph.get('directed')",paraId:7,tocIndex:1},{value:" by default.",paraId:7,tocIndex:1},{value:"Usage",paraId:8,tocIndex:1},{value:"const matrix = graph.getShortestPathMatrix();\n",paraId:9,tocIndex:1},{value:"Get the adjacency matrix of the graph.",paraId:10,tocIndex:2},{value:"Parameters",paraId:11,tocIndex:2},{value:"Name",paraId:12,tocIndex:2},{value:"Type",paraId:12,tocIndex:2},{value:"Required",paraId:12,tocIndex:2},{value:"Description",paraId:12,tocIndex:2},{value:"cache",paraId:12,tocIndex:2},{value:"boolean",paraId:12,tocIndex:2},{value:"false",paraId:12,tocIndex:2},{value:"Whether to use the cached matrix, 'true' by default.",paraId:12,tocIndex:2},{value:"directed",paraId:12,tocIndex:2},{value:"boolean",paraId:12,tocIndex:2},{value:"false",paraId:12,tocIndex:2},{value:"Whether the graph is directed, use the value of ",paraId:12,tocIndex:2},{value:"graph.get('directed')",paraId:12,tocIndex:2},{value:" by default.",paraId:12,tocIndex:2},{value:"Usage",paraId:13,tocIndex:2},{value:"const matrix = graph.getAdjMatrix();\n",paraId:14,tocIndex:2}]},24358:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Set the style and other configurations for each node.",paraId:0,tocIndex:0},{value:"⚠️Attention:",paraId:1,tocIndex:0},{value:" this funcion must ",paraId:1,tocIndex:0},{value:"be called before graph.render()",paraId:1,tocIndex:0},{value:". It does not take effect otherwise.",paraId:1,tocIndex:0},{value:"Parameters",paraId:2,tocIndex:0},{value:"Name",paraId:3,tocIndex:0},{value:"Type",paraId:3,tocIndex:0},{value:"Required",paraId:3,tocIndex:0},{value:"Description",paraId:3,tocIndex:0},{value:"nodeFn",paraId:3,tocIndex:0},{value:"Function",paraId:3,tocIndex:0},{value:"true",paraId:3,tocIndex:0},{value:"Return the configurations for each node.",paraId:3,tocIndex:0},{value:"Usage",paraId:4,tocIndex:0},{value:"graph.node((node) => {\n  return {\n    id: node.id,\n    type: 'rect',\n    style: {\n      fill: 'blue',\n    },\n  };\n});\n\ngraph.data(data);\ngraph.render();\n",paraId:5,tocIndex:0},{value:"Set the style and other configurations for each edge.",paraId:6,tocIndex:1},{value:"⚠️Attention:",paraId:7,tocIndex:1},{value:" this funcion must ",paraId:7,tocIndex:1},{value:"be called before graph.render()",paraId:7,tocIndex:1},{value:". It does not take effect otherwise.",paraId:7,tocIndex:1},{value:"Parameters",paraId:8,tocIndex:1},{value:"Name",paraId:9,tocIndex:1},{value:"Type",paraId:9,tocIndex:1},{value:"Required",paraId:9,tocIndex:1},{value:"Description",paraId:9,tocIndex:1},{value:"edgeFn",paraId:9,tocIndex:1},{value:"Function",paraId:9,tocIndex:1},{value:"true",paraId:9,tocIndex:1},{value:"Return the configurations for each edge.",paraId:9,tocIndex:1},{value:"Usage",paraId:10,tocIndex:1},{value:"graph.edge((edge) => {\n  return {\n    id: edge.id,\n    type: 'cubic-horizontal',\n    style: {\n      stroke: 'green',\n    },\n  };\n});\n\ngraph.data(data);\ngraph.render();\n",paraId:11,tocIndex:1},{value:"Set the style and other configurations for each combo.",paraId:12,tocIndex:2},{value:"⚠️Attention:",paraId:13,tocIndex:2},{value:" this funcion must ",paraId:13,tocIndex:2},{value:"be called before graph.render()",paraId:13,tocIndex:2},{value:". It does not take effect otherwise.",paraId:13,tocIndex:2},{value:"Parameters",paraId:14,tocIndex:2},{value:"Name",paraId:15,tocIndex:2},{value:"Type",paraId:15,tocIndex:2},{value:"Required",paraId:15,tocIndex:2},{value:"Description",paraId:15,tocIndex:2},{value:"comboFn",paraId:15,tocIndex:2},{value:"Function",paraId:15,tocIndex:2},{value:"true",paraId:15,tocIndex:2},{value:"Return the configurations for each combo.",paraId:15,tocIndex:2},{value:"Usage",paraId:16,tocIndex:2},{value:"graph.combo((combo) => {\n  return {\n    id: combo.id,\n    type: 'rect',\n    style: {\n      stroke: 'green',\n    },\n  };\n});\n\ngraph.data(data);\ngraph.render();\n",paraId:17,tocIndex:2},{value:"Collapse a Combo.",paraId:18,tocIndex:3},{value:"Parameters",paraId:19,tocIndex:3},{value:"Name",paraId:20,tocIndex:3},{value:"Type",paraId:20,tocIndex:3},{value:"Required",paraId:20,tocIndex:3},{value:"Description",paraId:20,tocIndex:3},{value:"combo",paraId:20,tocIndex:3},{value:"string / ICombo",paraId:20,tocIndex:3},{value:"true",paraId:20,tocIndex:3},{value:"The ID of the combo or the combo item to be collapsed",paraId:20,tocIndex:3},{value:"Usage",paraId:21,tocIndex:3},{value:"graph.collapseCombo('combo1')\n",paraId:22,tocIndex:3},{value:"Expand a Combo.",paraId:23,tocIndex:4},{value:"Parameters",paraId:24,tocIndex:4},{value:"Name",paraId:25,tocIndex:4},{value:"Type",paraId:25,tocIndex:4},{value:"Required",paraId:25,tocIndex:4},{value:"Description",paraId:25,tocIndex:4},{value:"combo",paraId:25,tocIndex:4},{value:"string / ICombo",paraId:25,tocIndex:4},{value:"true",paraId:25,tocIndex:4},{value:"The ID of the combo or the combo item to be expanded",paraId:25,tocIndex:4},{value:"Usage",paraId:26,tocIndex:4},{value:"graph.expandCombo('combo1')\n",paraId:27,tocIndex:4},{value:"Expand the ",paraId:28,tocIndex:5},{value:"combo",paraId:28,tocIndex:5},{value:" if it is collapsed. Collapse the ",paraId:28,tocIndex:5},{value:"combo",paraId:28,tocIndex:5},{value:" if it is expanded.",paraId:28,tocIndex:5},{value:"Parameters",paraId:29,tocIndex:5},{value:"Name",paraId:30,tocIndex:5},{value:"Type",paraId:30,tocIndex:5},{value:"Required",paraId:30,tocIndex:5},{value:"Description",paraId:30,tocIndex:5},{value:"combo",paraId:30,tocIndex:5},{value:"string / ICombo",paraId:30,tocIndex:5},{value:"true",paraId:30,tocIndex:5},{value:"The ID of the combo or the combo item to be collapsed or expanded",paraId:30,tocIndex:5},{value:"Usage",paraId:31,tocIndex:5},{value:"graph.collapseExpandCombo('combo1')\n",paraId:32,tocIndex:5},{value:"Create a new combo with existing nodes or combos to be its children.",paraId:33,tocIndex:6},{value:"Parameters",paraId:34,tocIndex:6},{value:"Name",paraId:35,tocIndex:6},{value:"Type",paraId:35,tocIndex:6},{value:"Required",paraId:35,tocIndex:6},{value:"Description",paraId:35,tocIndex:6},{value:"combo",paraId:35,tocIndex:6},{value:"string / ICombo",paraId:35,tocIndex:6},{value:"true",paraId:35,tocIndex:6},{value:"The ID or the configuration of the combo to be created",paraId:35,tocIndex:6},{value:"elements",paraId:35,tocIndex:6},{value:"string[]",paraId:35,tocIndex:6},{value:"The IDs of the existing nodes or combos to be the children of the newly created combo",paraId:35,tocIndex:6},{value:"stack",paraId:35,tocIndex:6},{value:"boolean",paraId:35,tocIndex:6},{value:"false",paraId:35,tocIndex:6},{value:"Supported by v4.7.17 and later versions",paraId:35,tocIndex:6},{value:" Whether to push the operator into the undo & redo stack. If the ",paraId:35,tocIndex:6},{value:"enableStack",paraId:35,tocIndex:6},{value:" is ",paraId:35,tocIndex:6},{value:"true",paraId:35,tocIndex:6},{value:", this operation will be automatically pushed into the stack by default. Set ",paraId:35,tocIndex:6},{value:"stack",paraId:35,tocIndex:6},{value:" to be ",paraId:35,tocIndex:6},{value:"false",paraId:35,tocIndex:6},{value:" if you do not want it.",paraId:35,tocIndex:6},{value:"Usage",paraId:36,tocIndex:6},{value:"// The first parameter is the id of the combo to be created\ngraph.createCombo('combo1', ['node1', 'node2', 'combo2'])\n\n// The first parameter is the configuration of the combo to be created\ngraph.createCombo({\n  id: 'combo1',\n  style: {\n    fill: '#f00'\n  }\n}, ['node1', 'node2', 'combo2'])\n",paraId:37,tocIndex:6},{value:"Ungroup the combo, which deletes the combo itself, and appends the children of the combo to its parent(if it exists).",paraId:38,tocIndex:7},{value:"Parameters",paraId:39,tocIndex:7},{value:"Name",paraId:40,tocIndex:7},{value:"Type",paraId:40,tocIndex:7},{value:"Required",paraId:40,tocIndex:7},{value:"Description",paraId:40,tocIndex:7},{value:"combo",paraId:40,tocIndex:7},{value:"string / ICombo",paraId:40,tocIndex:7},{value:"true",paraId:40,tocIndex:7},{value:"The ID of the item or the combo item to be updated",paraId:40,tocIndex:7},{value:"stack",paraId:40,tocIndex:7},{value:"boolean",paraId:40,tocIndex:7},{value:"false",paraId:40,tocIndex:7},{value:"Supported by v4.7.17 and later versions",paraId:40,tocIndex:7},{value:" Whether to push the operator into the undo & redo stack. If the ",paraId:40,tocIndex:7},{value:"enableStack",paraId:40,tocIndex:7},{value:" is ",paraId:40,tocIndex:7},{value:"true",paraId:40,tocIndex:7},{value:", this operation will be automatically pushed into the stack by default. Set ",paraId:40,tocIndex:7},{value:"stack",paraId:40,tocIndex:7},{value:" to be ",paraId:40,tocIndex:7},{value:"false",paraId:40,tocIndex:7},{value:" if you do not want it.",paraId:40,tocIndex:7},{value:"Usage",paraId:41,tocIndex:7},{value:"graph.uncombo('combo1')\n",paraId:42,tocIndex:7},{value:"Update the sizes and positions of all the combos according to the bboxes of its children.",paraId:43,tocIndex:8},{value:"Usage",paraId:44,tocIndex:8},{value:"// Update all the combos\ngraph.updateCombos();\n",paraId:45,tocIndex:8},{value:"Update the positions and sizes of the combo and all of its ancestors.",paraId:46,tocIndex:9},{value:"Parameters",paraId:47,tocIndex:9},{value:"Name",paraId:48,tocIndex:9},{value:"Type",paraId:48,tocIndex:9},{value:"Required",paraId:48,tocIndex:9},{value:"Description",paraId:48,tocIndex:9},{value:"combo",paraId:48,tocIndex:9},{value:"string / ICombo",paraId:48,tocIndex:9},{value:"true",paraId:48,tocIndex:9},{value:"The ID or the instance of the combo",paraId:48,tocIndex:9},{value:"Usage",paraId:49,tocIndex:9},{value:"// Update a node's position\nconst node1 = graph.findById('node1');\ngraph.updateItem(node1, {\n  x: 100,\n  y: 100,\n});\n\n// the combo who contains the node\nconst comboId = node1.getModel().comboId;\n\n// Update the combo and all its ancestors who contains node1\ngraph.updateCombo(comboId);\n",paraId:50,tocIndex:9},{value:"Update the hierarchy structure of the combo, such as move a combo into another one.",paraId:51,tocIndex:10},{value:"Parameters",paraId:52,tocIndex:10},{value:"Name",paraId:53,tocIndex:10},{value:"Type",paraId:53,tocIndex:10},{value:"Required",paraId:53,tocIndex:10},{value:"Description",paraId:53,tocIndex:10},{value:"item",paraId:53,tocIndex:10},{value:"string / INode / ICombo",paraId:53,tocIndex:10},{value:"The ID or the item of the node/combo to be updated",paraId:53,tocIndex:10},{value:"parentId",paraId:53,tocIndex:10},{value:"string",paraId:53,tocIndex:10},{value:"undefined",paraId:53,tocIndex:10},{value:"The ID of the new parent combo, undefined means updating the item with no parent",paraId:53,tocIndex:10},{value:"Usage",paraId:54,tocIndex:10},{value:"// move combo1 out of its parent combo. combo1 will be in the same hierarchy level as its old parent.\ngraph.updateComboTree('combo1')\n\n// move combo1 into combo2. combo1 will be the child of combo2.\ngraph.updateComboTree('combo1', 'combo2')\n",paraId:55,tocIndex:10}]},57619:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"In this part, we will describe the methods about transformation between point canvas, and client coordinates. The relationships and details could be refered to ",paraId:0},{value:"Coordinate Systems in G6",paraId:1},{value:".",paraId:0},{value:"Transform client/screen coordinates into point coordinates.",paraId:2,tocIndex:0},{value:"Parameters",paraId:3,tocIndex:0},{value:"Name",paraId:4,tocIndex:0},{value:"Type",paraId:4,tocIndex:0},{value:"Required",paraId:4,tocIndex:0},{value:"Description",paraId:4,tocIndex:0},{value:"clientX",paraId:4,tocIndex:0},{value:"Number",paraId:4,tocIndex:0},{value:"true",paraId:4,tocIndex:0},{value:"x coordinate of client/screen.",paraId:4,tocIndex:0},{value:"clientY",paraId:4,tocIndex:0},{value:"Number",paraId:4,tocIndex:0},{value:"true",paraId:4,tocIndex:0},{value:"y coordinate of client/screen.",paraId:4,tocIndex:0},{value:"Return",paraId:5,tocIndex:0},{value:"Type of the return value: Object;",paraId:6,tocIndex:0},{value:"Includes x and y.",paraId:6,tocIndex:0},{value:"Usage",paraId:7,tocIndex:0},{value:"const point = graph.getPointByClient(e.clientX, e.clientY);\nconsole.log('The x and y of point coordinate system are: ', point.x, point.y);\n",paraId:8,tocIndex:0},{value:"Transform point coordinates into client/screen coordinates.",paraId:9,tocIndex:1},{value:"Parameters",paraId:10,tocIndex:1},{value:"Name",paraId:11,tocIndex:1},{value:"Type",paraId:11,tocIndex:1},{value:"Required",paraId:11,tocIndex:1},{value:"Description",paraId:11,tocIndex:1},{value:"x",paraId:11,tocIndex:1},{value:"Number",paraId:11,tocIndex:1},{value:"true",paraId:11,tocIndex:1},{value:"x coordinate of point coordinate system.",paraId:11,tocIndex:1},{value:"y",paraId:11,tocIndex:1},{value:"Number",paraId:11,tocIndex:1},{value:"true",paraId:11,tocIndex:1},{value:"y coordinate of point coordinate system.",paraId:11,tocIndex:1},{value:"Return",paraId:12,tocIndex:1},{value:"Type of the return value: Object;",paraId:13,tocIndex:1},{value:"Includes ",paraId:13,tocIndex:1},{value:"x",paraId:13,tocIndex:1},{value:" and ",paraId:13,tocIndex:1},{value:"y",paraId:13,tocIndex:1},{value:".",paraId:13,tocIndex:1},{value:"Usage",paraId:14,tocIndex:1},{value:"const point = graph.getClientByPoint(100, 200);\nconsole.log('The x and y of client/screen are: ', point.x, point.y);\n",paraId:15,tocIndex:1},{value:"Transform canvas coordinates into point coordinates.",paraId:16,tocIndex:2},{value:"Parameters",paraId:17,tocIndex:2},{value:"Name",paraId:18,tocIndex:2},{value:"Type",paraId:18,tocIndex:2},{value:"Required",paraId:18,tocIndex:2},{value:"Description",paraId:18,tocIndex:2},{value:"canvasX",paraId:18,tocIndex:2},{value:"Number",paraId:18,tocIndex:2},{value:"true",paraId:18,tocIndex:2},{value:"The x coordinate of canvas.",paraId:18,tocIndex:2},{value:"canvasY",paraId:18,tocIndex:2},{value:"Number",paraId:18,tocIndex:2},{value:"true",paraId:18,tocIndex:2},{value:"The y coordinate of canvas.",paraId:18,tocIndex:2},{value:"Return",paraId:19,tocIndex:2},{value:"Type of the return value: Object;",paraId:20,tocIndex:2},{value:"Include x and y.",paraId:20,tocIndex:2},{value:"Usage",paraId:21,tocIndex:2},{value:"const point = graph.getPointByCanvas(100, 200);\nconsole.log('The x and y of point coordinate system: ', point.x, point.y);\n",paraId:22,tocIndex:2},{value:"Transform point coordinates into canvas coordinates.",paraId:23,tocIndex:3},{value:"Parameters",paraId:24,tocIndex:3},{value:"Name",paraId:25,tocIndex:3},{value:"Type",paraId:25,tocIndex:3},{value:"Required",paraId:25,tocIndex:3},{value:"Description",paraId:25,tocIndex:3},{value:"x",paraId:25,tocIndex:3},{value:"Number",paraId:25,tocIndex:3},{value:"true",paraId:25,tocIndex:3},{value:"The x coordinate of point coordinate system.",paraId:25,tocIndex:3},{value:"y",paraId:25,tocIndex:3},{value:"Number",paraId:25,tocIndex:3},{value:"true",paraId:25,tocIndex:3},{value:"The y coordinate of point coordinate system.",paraId:25,tocIndex:3},{value:"Return",paraId:26,tocIndex:3},{value:"Type of the return value: Object;",paraId:27,tocIndex:3},{value:"Includes x and y.",paraId:27,tocIndex:3},{value:"Usage",paraId:28,tocIndex:3},{value:"const point = graph.getCanvasByPoint(100, 200);\nconsole.log('The x and y coordinates of canvas: ', point.x, point.y);\n",paraId:29,tocIndex:3},{value:"Get the x/y in point coordinate system of the graph content's center. Supported by v4.2.1",paraId:30,tocIndex:4},{value:"Parameters",paraId:31,tocIndex:4},{value:"None",paraId:32,tocIndex:4},{value:"Return",paraId:33,tocIndex:4},{value:"Type of the return value: Object;",paraId:34,tocIndex:4},{value:"Includes x and y of point coordinate system.",paraId:34,tocIndex:4},{value:"Usage",paraId:35,tocIndex:4},{value:"const point = graph.getGraphCenterPoint();\nconsole.log('graph content center under point coordinate system', point.x, point.y);\n",paraId:36,tocIndex:4},{value:"Get the x/y in point coordinate system of the view port center. Supported by v4.2.1",paraId:37,tocIndex:5},{value:"Parameters",paraId:38,tocIndex:5},{value:"None",paraId:39,tocIndex:5},{value:"Return",paraId:40,tocIndex:5},{value:"Type of the return value: Object;",paraId:41,tocIndex:5},{value:"Includes x and y of point coordinate system.",paraId:41,tocIndex:5},{value:"Usage",paraId:42,tocIndex:5},{value:"const point = graph.getViewPortCenterPoint();\nconsole.log('view port center under point coordinate system', point.x, point.y);\n",paraId:43,tocIndex:5}]},70639:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Load the data for graph.",paraId:0},{value:"data",paraId:1},{value:" ",paraId:2,tocIndex:0},{value:"Object",paraId:2,tocIndex:0},{value:" ",paraId:2,tocIndex:0},{value:"required",paraId:2,tocIndex:0},{value:" ",paraId:2,tocIndex:0},{value:"Graph data, it should be an object containing an array of nodes and an array of edges. |",paraId:3,tocIndex:0},{value:"Usage",paraId:4,tocIndex:0},{value:"const data = {\n  nodes: [\n    {\n      id: 'node1',\n      label: 'node1',\n    },\n    {\n      id: 'node2',\n      label: 'node2',\n    },\n  ],\n  edges: [\n    {\n      source: 'node1',\n      target: 'node2',\n    },\n  ],\n};\n\n// graph is an instance of Graph\ngraph.data(data);\n",paraId:5,tocIndex:0},{value:"Get the graph data.",paraId:6,tocIndex:1},{value:"Return",paraId:7,tocIndex:1},{value:"Type of the return value: Object;",paraId:8,tocIndex:1},{value:"The return value has all the nodes and edges as below:",paraId:8,tocIndex:1},{value:"{\n\tnodes: [],\n  edges: [],\n  groups: [],\n}\n",paraId:9,tocIndex:1},{value:"Usage",paraId:10,tocIndex:1},{value:"graph.save();\n",paraId:11,tocIndex:1},{value:"Read the data and render the graph. It is equal to combining graph.data(data) and graph.render().",paraId:12,tocIndex:2},{value:"Parameters",paraId:13,tocIndex:2},{value:"Name",paraId:14,tocIndex:2},{value:"Type",paraId:14,tocIndex:2},{value:"Required",paraId:14,tocIndex:2},{value:"Description",paraId:14,tocIndex:2},{value:"data",paraId:14,tocIndex:2},{value:"Object",paraId:14,tocIndex:2},{value:"true",paraId:14,tocIndex:2},{value:"Graph data, it should be an object containing an array of nodes and an array of edges.",paraId:14,tocIndex:2},{value:"Usage",paraId:15,tocIndex:2},{value:"const data = {\n  nodes: [\n    {\n      id: 'node1',\n      label: 'node1',\n    },\n    {\n      id: 'node2',\n      label: 'node2',\n    },\n  ],\n  edges: [\n    {\n      source: 'node1',\n      target: 'node2',\n    },\n  ],\n};\n\n// graph is an instance of Graph\ngraph.read(data);\n",paraId:16,tocIndex:2},{value:"Change the data source, and render the graph according to the new data. If there is ",paraId:17,tocIndex:3},{value:"layout",paraId:17,tocIndex:3},{value:" configured on the graph, the new data will be placed according to the layout algorithm. If you do not want to layout the new data with origin layout algorithm, call ",paraId:17,tocIndex:3},{value:"graph.destroyLayout",paraId:17,tocIndex:3},{value:", ref to ",paraId:17,tocIndex:3},{value:"destroyLayout",paraId:18,tocIndex:3},{value:".",paraId:17,tocIndex:3},{value:"Parameters",paraId:19,tocIndex:3},{value:"Name",paraId:20,tocIndex:3},{value:"Type",paraId:20,tocIndex:3},{value:"Required",paraId:20,tocIndex:3},{value:"Description",paraId:20,tocIndex:3},{value:"data",paraId:20,tocIndex:3},{value:"Object",paraId:20,tocIndex:3},{value:"false",paraId:20,tocIndex:3},{value:"Graph data, it should be an object containing an array of nodes and an array of edges. If it is not assigned, the graph will be re-rendered with the current data on the graph",paraId:20,tocIndex:3},{value:"stack",paraId:20,tocIndex:3},{value:"boolean",paraId:20,tocIndex:3},{value:"false",paraId:20,tocIndex:3},{value:"Whether to push the operator into the undo & redo stack. If the ",paraId:20,tocIndex:3},{value:"enableStack",paraId:20,tocIndex:3},{value:" is ",paraId:20,tocIndex:3},{value:"true",paraId:20,tocIndex:3},{value:", this operation will be automatically pushed into the stack by default. Set ",paraId:20,tocIndex:3},{value:"stack",paraId:20,tocIndex:3},{value:" to be ",paraId:20,tocIndex:3},{value:"false",paraId:20,tocIndex:3},{value:" if you do not want it.",paraId:20,tocIndex:3},{value:"Usage",paraId:21,tocIndex:3},{value:"const data = {\n  nodes: [\n    {\n      id: 'node1',\n      label: 'node1',\n    },\n    {\n      id: 'node2',\n      label: 'node2',\n    },\n  ],\n  edges: [\n    {\n      source: 'node1',\n      target: 'node2',\n    },\n  ],\n};\n\n// graph is an instance of Graph\ngraph.changeData(data);\n\n// If there is no parameter, the graph will be re-rendered with the current data on the graph\ngraph.changeData();\n",paraId:22,tocIndex:3},{value:"Destroy the layout algorithm. After that, the ",paraId:23,tocIndex:4},{value:"changeData",paraId:23,tocIndex:4},{value:" will not place the new nodes with origin layout configurations.",paraId:23,tocIndex:4},{value:"Usage",paraId:24,tocIndex:4},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 1000,\n  height: 600,\n  modes: {\n    default: ['drag-canvas', 'drag-node'],\n  },\n  layout: {\n    type: 'circular',\n    center: [500, 300],\n  },\n  animate: true,\n});\ngraph.data(data);\ngraph.render();\ngraph.destroyLayout();\n// If there is no position info in data2, the new nodes will be placed according to position initing problem. If the position info exists, the new node will be placed according to its position info\ngraph.changeData(data2);\n",paraId:25,tocIndex:4}]},4568:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Clear all the items in the canvas. This function is used for reseting the data source and re-rendering the graph.",paraId:0,tocIndex:0},{value:"Usage",paraId:1,tocIndex:0},{value:"graph.clear();\n",paraId:2,tocIndex:0},{value:"Destroy the graph.",paraId:3,tocIndex:1},{value:"Usage",paraId:4,tocIndex:1},{value:"graph.destroy();\n",paraId:5,tocIndex:1}]},24936:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Export the whole graph as an image, whatever (a part of) the graph is out of the screen.",paraId:0,tocIndex:0},{value:"Parameters",paraId:1,tocIndex:0},{value:"Name",paraId:2,tocIndex:0},{value:"Type",paraId:2,tocIndex:0},{value:"Required",paraId:2,tocIndex:0},{value:"Description",paraId:2,tocIndex:0},{value:"name",paraId:2,tocIndex:0},{value:"String",paraId:2,tocIndex:0},{value:"false",paraId:2,tocIndex:0},{value:"The name of the image. 'graph' by default.",paraId:2,tocIndex:0},{value:"type",paraId:2,tocIndex:0},{value:"'image/png'",paraId:2,tocIndex:0},{value:" / ",paraId:2,tocIndex:0},{value:"'image/jpeg'",paraId:2,tocIndex:0},{value:" / ",paraId:2,tocIndex:0},{value:"'image/webp'",paraId:2,tocIndex:0},{value:" / ",paraId:2,tocIndex:0},{value:"'image/bmp'",paraId:2,tocIndex:0},{value:"false",paraId:2,tocIndex:0},{value:"The type of the image. When the ",paraId:2,tocIndex:0},{value:"renderer",paraId:2,tocIndex:0},{value:" of the graph is ",paraId:2,tocIndex:0},{value:"'canvas'",paraId:2,tocIndex:0},{value:"(default), ",paraId:2,tocIndex:0},{value:"type",paraId:2,tocIndex:0},{value:" takes effect. When the ",paraId:2,tocIndex:0},{value:"renderer",paraId:2,tocIndex:0},{value:" is ",paraId:2,tocIndex:0},{value:"'svg'",paraId:2,tocIndex:0},{value:", ",paraId:2,tocIndex:0},{value:"toFullDataURL",paraId:2,tocIndex:0},{value:" will export a svg file",paraId:2,tocIndex:0},{value:"imageConfig",paraId:2,tocIndex:0},{value:"Object",paraId:2,tocIndex:0},{value:"false",paraId:2,tocIndex:0},{value:"The configuration for the exported image, detials are shown below",paraId:2,tocIndex:0},{value:"where the ",paraId:3,tocIndex:0},{value:"imageConfig",paraId:3,tocIndex:0},{value:" is the configuration for exported image:",paraId:3,tocIndex:0},{value:"Name",paraId:4,tocIndex:0},{value:"Type",paraId:4,tocIndex:0},{value:"Required",paraId:4,tocIndex:0},{value:"Description",paraId:4,tocIndex:0},{value:"backgroundColor",paraId:4,tocIndex:0},{value:"String",paraId:4,tocIndex:0},{value:"false",paraId:4,tocIndex:0},{value:"The background color of the image. If it is not assigned, the background will be transparent.",paraId:4,tocIndex:0},{value:"padding",paraId:4,tocIndex:0},{value:"Number / Number[]",paraId:4,tocIndex:0},{value:"false",paraId:4,tocIndex:0},{value:"The top, right, bottom, right paddings of the exported image. When its type is number, the paddings around the graph are the same",paraId:4,tocIndex:0},{value:"Usage",paraId:5,tocIndex:0},{value:"graph.downloadFullImage('tree-graph', 'image/png', {\n  backgroundColor: '#ddd',\n  padding: [30, 15, 15, 15],\n});\n",paraId:6,tocIndex:0},{value:"Export the canvas as an image.",paraId:7,tocIndex:1},{value:"Parameters",paraId:8,tocIndex:1},{value:"Name",paraId:9,tocIndex:1},{value:"Type",paraId:9,tocIndex:1},{value:"Required",paraId:9,tocIndex:1},{value:"Description",paraId:9,tocIndex:1},{value:"name",paraId:9,tocIndex:1},{value:"String",paraId:9,tocIndex:1},{value:"false",paraId:9,tocIndex:1},{value:"The name of the image. 'graph' by default",paraId:9,tocIndex:1},{value:"type",paraId:9,tocIndex:1},{value:"'image/png'",paraId:9,tocIndex:1},{value:" / ",paraId:9,tocIndex:1},{value:"'image/jpeg'",paraId:9,tocIndex:1},{value:" / ",paraId:9,tocIndex:1},{value:"'image/webp'",paraId:9,tocIndex:1},{value:" / ",paraId:9,tocIndex:1},{value:"'image/bmp'",paraId:9,tocIndex:1},{value:"false",paraId:9,tocIndex:1},{value:"The type of the image. When the ",paraId:9,tocIndex:1},{value:"renderer",paraId:9,tocIndex:1},{value:" of the graph is ",paraId:9,tocIndex:1},{value:"'canvas'",paraId:9,tocIndex:1},{value:"(default), ",paraId:9,tocIndex:1},{value:"type",paraId:9,tocIndex:1},{value:" takes effect. When the ",paraId:9,tocIndex:1},{value:"renderer",paraId:9,tocIndex:1},{value:" is ",paraId:9,tocIndex:1},{value:"'svg'",paraId:9,tocIndex:1},{value:", ",paraId:9,tocIndex:1},{value:"toFullDataURL",paraId:9,tocIndex:1},{value:" will export a svg file",paraId:9,tocIndex:1},{value:"backgroundColor",paraId:9,tocIndex:1},{value:"String",paraId:9,tocIndex:1},{value:"false",paraId:9,tocIndex:1},{value:"The background color of the image. If it is not assigned, the background will be transparent.",paraId:9,tocIndex:1},{value:"Usage",paraId:10,tocIndex:1},{value:"graph.downloadImage();\n",paraId:11,tocIndex:1},{value:"Generate url of the image of the graph inside the view port.",paraId:12,tocIndex:2},{value:"Parameters",paraId:13,tocIndex:2},{value:"Name",paraId:14,tocIndex:2},{value:"Type",paraId:14,tocIndex:2},{value:"Required",paraId:14,tocIndex:2},{value:"Description",paraId:14,tocIndex:2},{value:"type",paraId:14,tocIndex:2},{value:"'image/png'",paraId:14,tocIndex:2},{value:" / ",paraId:14,tocIndex:2},{value:"'image/jpeg'",paraId:14,tocIndex:2},{value:" / ",paraId:14,tocIndex:2},{value:"'image/webp'",paraId:14,tocIndex:2},{value:" / ",paraId:14,tocIndex:2},{value:"'image/bmp'",paraId:14,tocIndex:2},{value:"false",paraId:14,tocIndex:2},{value:"The type of the image. When the ",paraId:14,tocIndex:2},{value:"renderer",paraId:14,tocIndex:2},{value:" of the graph is ",paraId:14,tocIndex:2},{value:"'canvas'",paraId:14,tocIndex:2},{value:"(default), ",paraId:14,tocIndex:2},{value:"type",paraId:14,tocIndex:2},{value:" takes effect. When the ",paraId:14,tocIndex:2},{value:"renderer",paraId:14,tocIndex:2},{value:" is ",paraId:14,tocIndex:2},{value:"'svg'",paraId:14,tocIndex:2},{value:", ",paraId:14,tocIndex:2},{value:"toFullDataURL",paraId:14,tocIndex:2},{value:" will export a svg file",paraId:14,tocIndex:2},{value:"backgroundColor",paraId:14,tocIndex:2},{value:"String",paraId:14,tocIndex:2},{value:"false",paraId:14,tocIndex:2},{value:"The background color of the image. If it is not assigned, the background will be transparent.",paraId:14,tocIndex:2},{value:"Return",paraId:15,tocIndex:2},{value:"Type of the return value: string;",paraId:16,tocIndex:2},{value:"The return value is the image url.",paraId:16,tocIndex:2},{value:"Usage",paraId:17,tocIndex:2},{value:"const dataURL = graph.toDataURL();\n",paraId:18,tocIndex:2},{value:"Generate url of the image of the whole graph including the part out of the view port.",paraId:19,tocIndex:3},{value:"Parameters",paraId:20,tocIndex:3},{value:"Name",paraId:21,tocIndex:3},{value:"Type",paraId:21,tocIndex:3},{value:"Required",paraId:21,tocIndex:3},{value:"Description",paraId:21,tocIndex:3},{value:"callback",paraId:21,tocIndex:3},{value:"Function",paraId:21,tocIndex:3},{value:"true",paraId:21,tocIndex:3},{value:"The callback function after finish generating the dataUrl of the full graph",paraId:21,tocIndex:3},{value:"Asynchronously",paraId:21,tocIndex:3},{value:"type",paraId:21,tocIndex:3},{value:"'image/png'",paraId:21,tocIndex:3},{value:" / ",paraId:21,tocIndex:3},{value:"'image/jpeg'",paraId:21,tocIndex:3},{value:" / ",paraId:21,tocIndex:3},{value:"'image/webp'",paraId:21,tocIndex:3},{value:" / ",paraId:21,tocIndex:3},{value:"'image/bmp'",paraId:21,tocIndex:3},{value:"false",paraId:21,tocIndex:3},{value:"The type of the image. When the ",paraId:21,tocIndex:3},{value:"renderer",paraId:21,tocIndex:3},{value:" of the graph is ",paraId:21,tocIndex:3},{value:"'canvas'",paraId:21,tocIndex:3},{value:"(default), ",paraId:21,tocIndex:3},{value:"type",paraId:21,tocIndex:3},{value:" takes effect. When the ",paraId:21,tocIndex:3},{value:"renderer",paraId:21,tocIndex:3},{value:" is ",paraId:21,tocIndex:3},{value:"'svg'",paraId:21,tocIndex:3},{value:", ",paraId:21,tocIndex:3},{value:"toFullDataURL",paraId:21,tocIndex:3},{value:" will export a svg file",paraId:21,tocIndex:3},{value:"imageConfig",paraId:21,tocIndex:3},{value:"Object",paraId:21,tocIndex:3},{value:"false",paraId:21,tocIndex:3},{value:"The configuration for the exported image, detials are shown below",paraId:21,tocIndex:3},{value:"where the ",paraId:22,tocIndex:3},{value:"imageConfig",paraId:22,tocIndex:3},{value:" is the configuration for exported image:",paraId:22,tocIndex:3},{value:"Name",paraId:23,tocIndex:3},{value:"Type",paraId:23,tocIndex:3},{value:"Required",paraId:23,tocIndex:3},{value:"Description",paraId:23,tocIndex:3},{value:"backgroundColor",paraId:23,tocIndex:3},{value:"String",paraId:23,tocIndex:3},{value:"false",paraId:23,tocIndex:3},{value:"The background color of the image. If it is not assigned, the background will be transparent.",paraId:23,tocIndex:3},{value:"padding",paraId:23,tocIndex:3},{value:"Number / Number[]",paraId:23,tocIndex:3},{value:"false",paraId:23,tocIndex:3},{value:"The top, right, bottom, right paddings of the exported image. When its type is number, the paddings around the graph are the same",paraId:23,tocIndex:3},{value:"No return value, you can process the result in the callback function as shown below:",paraId:24,tocIndex:3},{value:"Usage",paraId:25,tocIndex:3},{value:"graph.toFullDataUrl(\n  // The first parameter: callback, required\n  (res) => {\n    // ... something\n    console.log(res); // e.g. print the result\n  },\n  // The second and third parameter is not required\n  'image/jpeg',\n  (imageConfig: {\n    backgroundColor: '#fff',\n    padding: 10,\n  }),\n);\n",paraId:26,tocIndex:3}]},42300:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Get all the node items in the graph.",paraId:0,tocIndex:0},{value:"⚠️Attention:",paraId:1,tocIndex:0},{value:" it returns the items but not data models.",paraId:1,tocIndex:0},{value:"Return",paraId:2,tocIndex:0},{value:"Type of the return value: Array;",paraId:3,tocIndex:0},{value:"Return the node items in the graph.",paraId:3,tocIndex:0},{value:"Usage",paraId:4,tocIndex:0},{value:"const nodes = graph.getNodes();\n",paraId:5,tocIndex:0},{value:"Get all the edge items in the graph.",paraId:6,tocIndex:1},{value:"⚠️Attention:",paraId:7,tocIndex:1},{value:" it returns the items but not data models.",paraId:7,tocIndex:1},{value:"Return",paraId:8,tocIndex:1},{value:"Type of the return value: Array;",paraId:9,tocIndex:1},{value:"Return the edge items in the graph.",paraId:9,tocIndex:1},{value:"Usage",paraId:10,tocIndex:1},{value:"const edges = graph.getEdges();\n",paraId:11,tocIndex:1},{value:"Get all the combo items in the graph.",paraId:12,tocIndex:2},{value:"Return",paraId:13,tocIndex:2},{value:"Type of the return value: Array;",paraId:14,tocIndex:2},{value:"Return the combo items in the graph.",paraId:14,tocIndex:2},{value:"Usage",paraId:15,tocIndex:2},{value:"const combos = graph.getCombos();\n",paraId:16,tocIndex:2},{value:"Get the children of the ",paraId:17,tocIndex:3},{value:"combo",paraId:17,tocIndex:3},{value:".",paraId:17,tocIndex:3},{value:"Parameters",paraId:18,tocIndex:3},{value:"Name",paraId:19,tocIndex:3},{value:"Type",paraId:19,tocIndex:3},{value:"Required",paraId:19,tocIndex:3},{value:"Description",paraId:19,tocIndex:3},{value:"combo",paraId:19,tocIndex:3},{value:"string / ICombo",paraId:19,tocIndex:3},{value:"true",paraId:19,tocIndex:3},{value:"The ID or of the combo or the combo item",paraId:19,tocIndex:3},{value:"Return",paraId:20,tocIndex:3},{value:"Type of the return value: Object. Formated as:",paraId:21,tocIndex:3},{value:"{\n    nodes: INode[],\n    edges: ICombo[]\n}\n",paraId:22,tocIndex:3},{value:"Return the children (sub nodes and combos) of the ",paraId:23,tocIndex:3},{value:"combo",paraId:23,tocIndex:3},{value:".",paraId:23,tocIndex:3},{value:"Usage",paraId:24,tocIndex:3},{value:"const elements: {\n  nodes: INode[],\n  combos: ICombo[]\n} = graph.getComboChildren('combo1')\n",paraId:25,tocIndex:3},{value:"Parameters",paraId:26,tocIndex:4},{value:"Name",paraId:27,tocIndex:4},{value:"Type",paraId:27,tocIndex:4},{value:"Required",paraId:27,tocIndex:4},{value:"Description",paraId:27,tocIndex:4},{value:"node",paraId:27,tocIndex:4},{value:"string / INode",paraId:27,tocIndex:4},{value:"true",paraId:27,tocIndex:4},{value:"node ID or the node instance",paraId:27,tocIndex:4},{value:"type",paraId:27,tocIndex:4},{value:"'source' / 'target' / undefined",paraId:27,tocIndex:4},{value:"false",paraId:27,tocIndex:4},{value:"The type of the neighbors, 'source': only return the source nodes; 'target': only return the target nodes, undefined: return all of the neighbors",paraId:27,tocIndex:4},{value:"Return",paraId:28,tocIndex:4},{value:"Type of the return value: Array;",paraId:29,tocIndex:4},{value:"Return a list of node items.",paraId:29,tocIndex:4},{value:"Usage",paraId:30,tocIndex:4},{value:"const neighbors = graph.getNeighbors('node1', 'source');\n",paraId:31,tocIndex:4},{value:"Find single item according to a rule.",paraId:32,tocIndex:5},{value:"Parameters",paraId:33,tocIndex:5},{value:"Name",paraId:34,tocIndex:5},{value:"Type",paraId:34,tocIndex:5},{value:"Required",paraId:34,tocIndex:5},{value:"Description",paraId:34,tocIndex:5},{value:"type",paraId:34,tocIndex:5},{value:"string",paraId:34,tocIndex:5},{value:"true",paraId:34,tocIndex:5},{value:"Type of the item. Options: ",paraId:34,tocIndex:5},{value:"'node'",paraId:34,tocIndex:5},{value:", ",paraId:34,tocIndex:5},{value:"'edge'",paraId:34,tocIndex:5},{value:".",paraId:34,tocIndex:5},{value:"fn",paraId:34,tocIndex:5},{value:"Function",paraId:34,tocIndex:5},{value:"true",paraId:34,tocIndex:5},{value:"Rule for searching.",paraId:34,tocIndex:5},{value:"Return",paraId:35,tocIndex:5},{value:"Type of the return value: Object;",paraId:36,tocIndex:5},{value:"If there are items that match the rule, return the first one. Return ",paraId:36,tocIndex:5},{value:"undefined",paraId:36,tocIndex:5},{value:" otherwise.",paraId:36,tocIndex:5},{value:"Usage",paraId:37,tocIndex:5},{value:"const findNode = graph.find('node', (node) => {\n  return node.get('model').x === 100;\n});\n",paraId:38,tocIndex:5},{value:"Find an item by id.",paraId:39,tocIndex:6},{value:"Parameters",paraId:40,tocIndex:6},{value:"Name",paraId:41,tocIndex:6},{value:"Type",paraId:41,tocIndex:6},{value:"Required",paraId:41,tocIndex:6},{value:"Description",paraId:41,tocIndex:6},{value:"id",paraId:41,tocIndex:6},{value:"string",paraId:41,tocIndex:6},{value:"true",paraId:41,tocIndex:6},{value:"元素 ID",paraId:41,tocIndex:6},{value:"Return",paraId:42,tocIndex:6},{value:"Type of the return value: Object;",paraId:43,tocIndex:6},{value:"If there are items that match the rule, return the first one. Return ",paraId:43,tocIndex:6},{value:"undefined",paraId:43,tocIndex:6},{value:" otherwise.",paraId:43,tocIndex:6},{value:"Usage",paraId:44,tocIndex:6},{value:"const node = graph.findById('node');\n",paraId:45,tocIndex:6},{value:"Find all the items that match the rule.",paraId:46,tocIndex:7},{value:"Parameters",paraId:47,tocIndex:7},{value:"Name",paraId:48,tocIndex:7},{value:"Type",paraId:48,tocIndex:7},{value:"Required",paraId:48,tocIndex:7},{value:"Description",paraId:48,tocIndex:7},{value:"type",paraId:48,tocIndex:7},{value:"string",paraId:48,tocIndex:7},{value:"true",paraId:48,tocIndex:7},{value:"The type of the item. Options: ",paraId:48,tocIndex:7},{value:"'node'",paraId:48,tocIndex:7},{value:", ",paraId:48,tocIndex:7},{value:"'edge'",paraId:48,tocIndex:7},{value:".",paraId:48,tocIndex:7},{value:"fn",paraId:48,tocIndex:7},{value:"Function",paraId:48,tocIndex:7},{value:"true",paraId:48,tocIndex:7},{value:"Rule for searching.",paraId:48,tocIndex:7},{value:"Return",paraId:49,tocIndex:7},{value:"Type of the return value: Array;",paraId:50,tocIndex:7},{value:"If there are items that match the rule, return all of them. Return ",paraId:50,tocIndex:7},{value:"undefined",paraId:50,tocIndex:7},{value:" otherwise.",paraId:50,tocIndex:7},{value:"Usage",paraId:51,tocIndex:7},{value:"const nodes = graph.findAll('node', (node) => {\n  return node.get('model').x;\n});\n",paraId:52,tocIndex:7},{value:"Find all the items whose value of state is true.",paraId:53,tocIndex:8},{value:"Parameters",paraId:54,tocIndex:8},{value:"Name",paraId:55,tocIndex:8},{value:"Type",paraId:55,tocIndex:8},{value:"Required",paraId:55,tocIndex:8},{value:"Description",paraId:55,tocIndex:8},{value:"type",paraId:55,tocIndex:8},{value:"string",paraId:55,tocIndex:8},{value:"true",paraId:55,tocIndex:8},{value:"The type of the item. Options: ",paraId:55,tocIndex:8},{value:"'node'",paraId:55,tocIndex:8},{value:", ",paraId:55,tocIndex:8},{value:"'edge'",paraId:55,tocIndex:8},{value:".",paraId:55,tocIndex:8},{value:"state",paraId:55,tocIndex:8},{value:"string",paraId:55,tocIndex:8},{value:"true",paraId:55,tocIndex:8},{value:"State for searching.",paraId:55,tocIndex:8},{value:"Return",paraId:56,tocIndex:8},{value:"Type of the return value: Array;",paraId:57,tocIndex:8},{value:"Return all the items that match the state.",paraId:57,tocIndex:8},{value:"Usage",paraId:58,tocIndex:8},{value:"// Find all the items whose 'selected' state is true\nconst nodes = graph.findAllByState('node', 'selected');\n",paraId:59,tocIndex:8}]},46093:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Get an property of graph by key.",paraId:0,tocIndex:0},{value:"Parameters",paraId:1,tocIndex:0},{value:"Name",paraId:2,tocIndex:0},{value:"Type",paraId:2,tocIndex:0},{value:"Required",paraId:2,tocIndex:0},{value:"Description",paraId:2,tocIndex:0},{value:"key",paraId:2,tocIndex:0},{value:"string",paraId:2,tocIndex:0},{value:"true",paraId:2,tocIndex:0},{value:"Key of the property.",paraId:2,tocIndex:0},{value:"Usage",paraId:3,tocIndex:0},{value:"// get the group\nconst group = graph.get('group');\n\n// get the canvas instance\nconst canvas = graph.get('canvas');\n\n// get the value of autoPaint\nconst autoPaint = graph.get('autoPaint');\n",paraId:4,tocIndex:0},{value:"Set the value to an property.",paraId:5,tocIndex:1},{value:"Parameters",paraId:6,tocIndex:1},{value:"Name",paraId:7,tocIndex:1},{value:"Type",paraId:7,tocIndex:1},{value:"Required",paraId:7,tocIndex:1},{value:"Description",paraId:7,tocIndex:1},{value:"key",paraId:7,tocIndex:1},{value:"string",paraId:7,tocIndex:1},{value:"true",paraId:7,tocIndex:1},{value:"The key of the property.",paraId:7,tocIndex:1},{value:"val",paraId:7,tocIndex:1},{value:"string / Object / Array",paraId:7,tocIndex:1},{value:"true",paraId:7,tocIndex:1},{value:"The value of the property.",paraId:7,tocIndex:1},{value:"Usage",paraId:8,tocIndex:1},{value:"// Set capture to false\ngraph.set('capture', false);\n\n// Set customGroup to group\ngraph.set('customGroup', group);\n\n// Set nodeIdList to [1, 3, 5]\ngraph.set('nodeIdList', [1, 3, 5]);\n",paraId:9,tocIndex:1},{value:"Get the DOM container of the graph.",paraId:10,tocIndex:2},{value:"Parameter",paraId:11,tocIndex:2},{value:"No parameter.",paraId:12,tocIndex:2},{value:"Usage",paraId:13,tocIndex:2},{value:"graph.getContainer();\n",paraId:14,tocIndex:2},{value:"Get the root ",paraId:15,tocIndex:3},{value:"graphics group",paraId:16,tocIndex:3},{value:" of the graph.",paraId:15,tocIndex:3},{value:"Parameter",paraId:17,tocIndex:3},{value:"No parameter.",paraId:18,tocIndex:3},{value:"Usage",paraId:19,tocIndex:3},{value:"graph.getGroup();\n",paraId:20,tocIndex:3},{value:"Get the ",paraId:21,tocIndex:4},{value:"minZoom",paraId:21,tocIndex:4},{value:" for the graph, which is the lower limit of the zoom ratio.",paraId:21,tocIndex:4},{value:"Parameter",paraId:22,tocIndex:4},{value:"No parameter",paraId:23,tocIndex:4},{value:"Usage",paraId:24,tocIndex:4},{value:"graph.getMinZoom();\n",paraId:25,tocIndex:4},{value:"Set the ",paraId:26,tocIndex:5},{value:"minZoom",paraId:26,tocIndex:5},{value:" for the graph, which is the lower limit of the zoom ratio.",paraId:26,tocIndex:5},{value:"Parameter",paraId:27,tocIndex:5},{value:"Name",paraId:28,tocIndex:5},{value:"Type",paraId:28,tocIndex:5},{value:"Required",paraId:28,tocIndex:5},{value:"Description",paraId:28,tocIndex:5},{value:"ratio",paraId:28,tocIndex:5},{value:"number",paraId:28,tocIndex:5},{value:"true",paraId:28,tocIndex:5},{value:"The minimum zoom ratio value",paraId:28,tocIndex:5},{value:"Usage",paraId:29,tocIndex:5},{value:"graph.setMinZoom(0.001);\n",paraId:30,tocIndex:5},{value:"Get the ",paraId:31,tocIndex:6},{value:"maxZoom",paraId:31,tocIndex:6},{value:" for the graph, which is the upper limit of the zoom ratio.",paraId:31,tocIndex:6},{value:"Parameter",paraId:32,tocIndex:6},{value:"No parameter.",paraId:33,tocIndex:6},{value:"Usage",paraId:34,tocIndex:6},{value:"graph.getMaxZoom();\n",paraId:35,tocIndex:6},{value:"Set the ",paraId:36,tocIndex:7},{value:"maxZoom",paraId:36,tocIndex:7},{value:" for the graph, which is the upper limit of the zoom ratio.",paraId:36,tocIndex:7},{value:"Parameter",paraId:37,tocIndex:7},{value:"Name",paraId:38,tocIndex:7},{value:"Type",paraId:38,tocIndex:7},{value:"Required",paraId:38,tocIndex:7},{value:"Description",paraId:38,tocIndex:7},{value:"ratio",paraId:38,tocIndex:7},{value:"number",paraId:38,tocIndex:7},{value:"true",paraId:38,tocIndex:7},{value:"The maximum zoom ratio value",paraId:38,tocIndex:7},{value:"Usage",paraId:39,tocIndex:7},{value:"graph.setMaxZoom(1000);\n",paraId:40,tocIndex:7},{value:"Get the current width of the graph.",paraId:41,tocIndex:8},{value:"Parameter",paraId:42,tocIndex:8},{value:"No parameter.",paraId:43,tocIndex:8},{value:"Usage",paraId:44,tocIndex:8},{value:"graph.getWidth();\n",paraId:45,tocIndex:8},{value:"Get the current height of the graph.",paraId:46,tocIndex:9},{value:"Parameter",paraId:47,tocIndex:9},{value:"No parameter.",paraId:48,tocIndex:9},{value:"Usage",paraId:49,tocIndex:9},{value:"graph.getHeight();\n",paraId:50,tocIndex:9}]},91552:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Parameter",paraId:0,tocIndex:0},{value:"Name",paraId:1,tocIndex:0},{value:"Type",paraId:1,tocIndex:0},{value:"Required",paraId:1,tocIndex:0},{value:"Description",paraId:1,tocIndex:0},{value:"cfg",paraId:1,tocIndex:0},{value:"HullCfg",paraId:1,tocIndex:0},{value:"true",paraId:1,tocIndex:0},{value:"Configuration for the hull.",paraId:1,tocIndex:0},{value:"Details for HullCfg:",paraId:2,tocIndex:0},{value:"Name",paraId:3,tocIndex:0},{value:"Type",paraId:3,tocIndex:0},{value:"Required",paraId:3,tocIndex:0},{value:"Description",paraId:3,tocIndex:0},{value:"id",paraId:3,tocIndex:0},{value:"string",paraId:3,tocIndex:0},{value:"true",paraId:3,tocIndex:0},{value:"Hull id",paraId:3,tocIndex:0},{value:"type",paraId:3,tocIndex:0},{value:"round-convex",paraId:3,tocIndex:0},{value:" / ",paraId:3,tocIndex:0},{value:"smooth-convex",paraId:3,tocIndex:0},{value:" / ",paraId:3,tocIndex:0},{value:"bubble",paraId:3,tocIndex:0},{value:"false",paraId:3,tocIndex:0},{value:"Configuration for hull type: ",paraId:3,tocIndex:0},{value:"round-convex",paraId:3,tocIndex:0},{value:" generates a rounded-convex contour, ",paraId:3,tocIndex:0},{value:"smooth-convex",paraId:3,tocIndex:0},{value:" generates a smooth-convex contour / ",paraId:3,tocIndex:0},{value:"bubble",paraId:3,tocIndex:0},{value:" generates a smooth concave contour that could avoids nonMembers (",paraId:3,tocIndex:0},{value:"algorithm",paraId:3,tocIndex:0},{value:". The default value is ",paraId:3,tocIndex:0},{value:"round-convex",paraId:3,tocIndex:0},{value:".",paraId:3,tocIndex:0},{value:"members",paraId:3,tocIndex:0},{value:"Item[] / string[]",paraId:3,tocIndex:0},{value:"true",paraId:3,tocIndex:0},{value:"Node Instances or Node Ids that should be included in the hull.",paraId:3,tocIndex:0},{value:"nonMembers",paraId:3,tocIndex:0},{value:"Item[] / string[]",paraId:3,tocIndex:0},{value:"false",paraId:3,tocIndex:0},{value:"Node Instances or Node Ids that should be excluded from the hull, it only works when the hull type is set to be ",paraId:3,tocIndex:0},{value:"bubble",paraId:3,tocIndex:0},{value:".",paraId:3,tocIndex:0},{value:"padding",paraId:3,tocIndex:0},{value:"number",paraId:3,tocIndex:0},{value:"false",paraId:3,tocIndex:0},{value:"The offset between the hull polygon and the inner members.",paraId:3,tocIndex:0},{value:"style",paraId:3,tocIndex:0},{value:"object",paraId:3,tocIndex:0},{value:"false",paraId:3,tocIndex:0},{value:"The style properties for hull, including ",paraId:3,tocIndex:0},{value:"fill",paraId:3,tocIndex:0},{value:" ( the fill color), ",paraId:3,tocIndex:0},{value:"stroke",paraId:3,tocIndex:0},{value:" ( the stroke color) and ",paraId:3,tocIndex:0},{value:"opacity",paraId:3,tocIndex:0},{value:" (transparency of the hull shape).",paraId:3,tocIndex:0},{value:"Usage",paraId:4,tocIndex:0},{value:"let centerNodes = graph.getNodes().filter((node) => !node.getModel().isLeaf);\ngraph.on('afterlayout', () => {\n  const hull1 = graph.createHull({\n    id: 'centerNode-hull',\n    type: 'bubble',\n    members: centerNodes,\n    padding: 10,\n  });\n\n  const hull2 = graph.createHull({\n    id: 'leafNode-hull1',\n    members: ['node6', 'node7'],\n    padding: 10,\n    style: {\n      fill: 'lightgreen',\n      stroke: 'green',\n    },\n  });\n\n  const hull3 = graph.createHull({\n    id: 'leafNode-hull2',\n    members: ['node8', 'node9', 'node10', 'node11', 'node12'],\n    padding: 10,\n    style: {\n      fill: 'lightgreen',\n      stroke: 'green',\n    },\n  });\n\n  graph.on('afterupdateitem', (e) => {\n    hull1.updateData(hull1.members);\n    hull2.updateData(hull2.members);\n    hull3.updateData(hull3.members);\n  });\n});\n",paraId:5,tocIndex:0},{value:"Get all of the hulls in the current graph.",paraId:6,tocIndex:1},{value:"Return",paraId:7,tocIndex:1},{value:"Type of return value: {[key: string]: Hull;",paraId:8,tocIndex:1},{value:"The return object indicates the mapping of hull ID to the corresponding hull instance. Each key of the object is a string representing the ID of hull, and the value of the object is the corresponding hull instance.",paraId:8,tocIndex:1},{value:"Usage",paraId:9,tocIndex:1},{value:"const hullMap = graph.getHulls();\n",paraId:10,tocIndex:1},{value:"Remove a hull with id.",paraId:11,tocIndex:2},{value:"Parameter",paraId:12,tocIndex:2},{value:"Name",paraId:13,tocIndex:2},{value:"Type",paraId:13,tocIndex:2},{value:"Required",paraId:13,tocIndex:2},{value:"Description",paraId:13,tocIndex:2},{value:"hull",paraId:13,tocIndex:2},{value:"string / Hull",paraId:13,tocIndex:2},{value:"true",paraId:13,tocIndex:2},{value:"hull id or hull instance to be removed",paraId:13,tocIndex:2},{value:"Usage",paraId:14,tocIndex:2},{value:"graph.removeHull('myHull');\n",paraId:15,tocIndex:2},{value:"Remove all the hulls on the graph.",paraId:16,tocIndex:3},{value:"Parameter",paraId:17,tocIndex:3},{value:"No parameters.",paraId:18,tocIndex:3},{value:"Usage",paraId:19,tocIndex:3},{value:"graph.removeHulls();\n",paraId:20,tocIndex:3}]},61533:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Add item(node, edge) to the graph.",paraId:0,tocIndex:1},{value:"⚠️ Attention:",paraId:1,tocIndex:1},{value:" G6 will use the ",paraId:1,tocIndex:1},{value:"model",paraId:1,tocIndex:1},{value:" object as the model of the newly added item, and the ",paraId:1,tocIndex:1},{value:"model",paraId:1,tocIndex:1},{value:" might be modified. If you do not want it to be modified, use the deep cloned ",paraId:1,tocIndex:1},{value:"model",paraId:1,tocIndex:1},{value:" instead.",paraId:1,tocIndex:1},{value:"Parameters",paraId:2,tocIndex:1},{value:"Name",paraId:3,tocIndex:1},{value:"Type",paraId:3,tocIndex:1},{value:"Required",paraId:3,tocIndex:1},{value:"Description",paraId:3,tocIndex:1},{value:"type",paraId:3,tocIndex:1},{value:"string",paraId:3,tocIndex:1},{value:"true",paraId:3,tocIndex:1},{value:"The type of the item. Options: ",paraId:3,tocIndex:1},{value:"'node'",paraId:3,tocIndex:1},{value:", ",paraId:3,tocIndex:1},{value:"'edge'",paraId:3,tocIndex:1},{value:".",paraId:3,tocIndex:1},{value:"model",paraId:3,tocIndex:1},{value:"Object",paraId:3,tocIndex:1},{value:"true",paraId:3,tocIndex:1},{value:"The data model of the item, refer to ",paraId:3,tocIndex:1},{value:"Item Model Properties",paraId:4,tocIndex:1},{value:".",paraId:3,tocIndex:1},{value:"stack",paraId:3,tocIndex:1},{value:"boolean",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:"Whether to push the operator into the undo & redo stack. If the ",paraId:3,tocIndex:1},{value:"enableStack",paraId:3,tocIndex:1},{value:" is ",paraId:3,tocIndex:1},{value:"true",paraId:3,tocIndex:1},{value:", this operation will be automatically pushed into the stack by default. Set ",paraId:3,tocIndex:1},{value:"stack",paraId:3,tocIndex:1},{value:" to be ",paraId:3,tocIndex:1},{value:"false",paraId:3,tocIndex:1},{value:" if you do not want it.",paraId:3,tocIndex:1},{value:"Usage",paraId:5,tocIndex:1},{value:"const model = {\n  id: 'node',\n  label: 'node',\n  address: 'cq',\n  x: 200,\n  y: 150,\n  style: {\n    fill: 'blue',\n  },\n};\n\ngraph.addItem('node', model);\n",paraId:6,tocIndex:1},{value:"Remove the item. When the item is the id of a group, this operation will delete the corresponding group.",paraId:7,tocIndex:2},{value:"Parameters",paraId:8,tocIndex:2},{value:"Name",paraId:9,tocIndex:2},{value:"Type",paraId:9,tocIndex:2},{value:"Required",paraId:9,tocIndex:2},{value:"Description",paraId:9,tocIndex:2},{value:"item",paraId:9,tocIndex:2},{value:"string / Object",paraId:9,tocIndex:2},{value:"true",paraId:9,tocIndex:2},{value:"The id or the instance of the item.",paraId:9,tocIndex:2},{value:"stack",paraId:9,tocIndex:2},{value:"boolean",paraId:9,tocIndex:2},{value:"false",paraId:9,tocIndex:2},{value:"Whether to push the operator into the undo & redo stack. If the ",paraId:9,tocIndex:2},{value:"enableStack",paraId:9,tocIndex:2},{value:" is ",paraId:9,tocIndex:2},{value:"true",paraId:9,tocIndex:2},{value:", this operation will be automatically pushed into the stack by default. Set ",paraId:9,tocIndex:2},{value:"stack",paraId:9,tocIndex:2},{value:" to be ",paraId:9,tocIndex:2},{value:"false",paraId:9,tocIndex:2},{value:" if you do not want it.",paraId:9,tocIndex:2},{value:"Usage",paraId:10,tocIndex:2},{value:"// Find the item instance by id\nconst item = graph.findById('node');\ngraph.removeItem(item);\n",paraId:11,tocIndex:2},{value:"Update the item with new data model. If there are combos in the graph, after calling updateItem to update the position of a node, call ",paraId:12,tocIndex:4},{value:"updateCombo(combo)",paraId:13,tocIndex:4},{value:" to update the sizes and positions of the related combos.",paraId:12,tocIndex:4},{value:"Parameters",paraId:14,tocIndex:4},{value:"Name",paraId:15,tocIndex:4},{value:"Type",paraId:15,tocIndex:4},{value:"Required",paraId:15,tocIndex:4},{value:"Description",paraId:15,tocIndex:4},{value:"item",paraId:15,tocIndex:4},{value:"string / Object",paraId:15,tocIndex:4},{value:"true",paraId:15,tocIndex:4},{value:"The ID or the instance of the item",paraId:15,tocIndex:4},{value:"model",paraId:15,tocIndex:4},{value:"Object",paraId:15,tocIndex:4},{value:"true",paraId:15,tocIndex:4},{value:"New data model, refer to ",paraId:15,tocIndex:4},{value:"Item Model Properties",paraId:16,tocIndex:4},{value:"stack",paraId:15,tocIndex:4},{value:"boolean",paraId:15,tocIndex:4},{value:"false",paraId:15,tocIndex:4},{value:"Whether to push the operator into the undo & redo stack. If the ",paraId:15,tocIndex:4},{value:"enableStack",paraId:15,tocIndex:4},{value:" is ",paraId:15,tocIndex:4},{value:"true",paraId:15,tocIndex:4},{value:", this operation will be automatically pushed into the stack by default. Set ",paraId:15,tocIndex:4},{value:"stack",paraId:15,tocIndex:4},{value:" to be ",paraId:15,tocIndex:4},{value:"false",paraId:15,tocIndex:4},{value:" if you do not want it.",paraId:15,tocIndex:4},{value:"Usage",paraId:17,tocIndex:4},{value:"const model = {\n  id: 'node',\n  label: 'node',\n  address: 'cq',\n  x: 200,\n  y: 150,\n  style: {\n    fill: 'blue',\n  },\n};\n\n// Find the item instance by id\nconst item = graph.findById('node');\ngraph.updateItem(item, model);\n",paraId:18,tocIndex:4},{value:"The same as updateItem(item, model).",paraId:19,tocIndex:5},{value:"Update the sizes and positions of all the combos according to the bboxes of its children.",paraId:20,tocIndex:6},{value:"Usage",paraId:21,tocIndex:6},{value:"// Update all the combos\ngraph.updateCombos();\n",paraId:22,tocIndex:6},{value:"Update the positions and sizes of the combo and all of its ancestors.",paraId:23,tocIndex:7},{value:"Parameters",paraId:24,tocIndex:7},{value:"Name",paraId:25,tocIndex:7},{value:"Type",paraId:25,tocIndex:7},{value:"Required",paraId:25,tocIndex:7},{value:"Description",paraId:25,tocIndex:7},{value:"combo",paraId:25,tocIndex:7},{value:"string / ICombo",paraId:25,tocIndex:7},{value:"true",paraId:25,tocIndex:7},{value:"The ID or the instance of the combo",paraId:25,tocIndex:7},{value:"Usage",paraId:26,tocIndex:7},{value:"// Update a node's position\nconst node1 = graph.findById('node1');\ngraph.updateItem(node1, {\n  x: 100,\n  y: 100,\n});\n\n// the combo who contains the node\nconst comboId = node1.getModel().comboId;\n\n// Update the combo and all its ancestors who contains node1\ngraph.updateCombo(comboId);\n",paraId:27,tocIndex:7},{value:"Update the hierarchy structure of the combo, such as move a combo into another one.",paraId:28,tocIndex:8},{value:"Parameters",paraId:29,tocIndex:8},{value:"Name",paraId:30,tocIndex:8},{value:"Type",paraId:30,tocIndex:8},{value:"Required",paraId:30,tocIndex:8},{value:"Description",paraId:30,tocIndex:8},{value:"item",paraId:30,tocIndex:8},{value:"string / INode / ICombo",paraId:30,tocIndex:8},{value:"The ID or the item of the node/combo to be updated",paraId:30,tocIndex:8},{value:"parentId",paraId:30,tocIndex:8},{value:"string",paraId:30,tocIndex:8},{value:"undefined",paraId:30,tocIndex:8},{value:"The ID of the new parent combo, undefined means updating the item with no parent",paraId:30,tocIndex:8},{value:"Usage",paraId:31,tocIndex:8},{value:"// move combo1 out of its parent combo. combo1 will be in the same hierarchy level as its old parent.\ngraph.updateComboTree('combo1')\n\n// move combo1 into combo2. combo1 will be the child of combo2.\ngraph.updateComboTree('combo1', 'combo2')\n",paraId:32,tocIndex:8},{value:"Refresh the item.",paraId:33,tocIndex:9},{value:"Parameters",paraId:34,tocIndex:9},{value:"Name",paraId:35,tocIndex:9},{value:"Type",paraId:35,tocIndex:9},{value:"Required",paraId:35,tocIndex:9},{value:"Description",paraId:35,tocIndex:9},{value:"item",paraId:35,tocIndex:9},{value:"string / Object",paraId:35,tocIndex:9},{value:"true",paraId:35,tocIndex:9},{value:"The id or the instance of the item.",paraId:35,tocIndex:9},{value:"Usage",paraId:36,tocIndex:9},{value:"// Find the item instance by id\nconst item = graph.findById('node');\ngraph.refreshItem(item);\n",paraId:37,tocIndex:9},{value:"When the positions of nodes in their data models are changed, refresh the canvas to paint the nodes with new positions. It will update the edges in the same time.",paraId:38,tocIndex:10},{value:"Usage",paraId:39,tocIndex:10},{value:"graph.refreshPositions();\n",paraId:40,tocIndex:10},{value:"Set the style and other configurations for each node.",paraId:41,tocIndex:12},{value:"⚠️Attention:",paraId:42,tocIndex:12},{value:" this funcion must ",paraId:42,tocIndex:12},{value:"be called before graph.render()",paraId:42,tocIndex:12},{value:". It does not take effect otherwise.",paraId:42,tocIndex:12},{value:"Parameters",paraId:43,tocIndex:12},{value:"Name",paraId:44,tocIndex:12},{value:"Type",paraId:44,tocIndex:12},{value:"Required",paraId:44,tocIndex:12},{value:"Description",paraId:44,tocIndex:12},{value:"nodeFn",paraId:44,tocIndex:12},{value:"Function",paraId:44,tocIndex:12},{value:"true",paraId:44,tocIndex:12},{value:"Return the configurations for each node.",paraId:44,tocIndex:12},{value:"Usage",paraId:45,tocIndex:12},{value:"graph.node((node) => {\n  return {\n    id: node.id,\n    type: 'rect',\n    style: {\n      fill: 'blue',\n    },\n  };\n});\n\ngraph.data(data);\ngraph.render();\n",paraId:46,tocIndex:12},{value:"Set the style and other configurations for each edge.",paraId:47,tocIndex:13},{value:"⚠️Attention:",paraId:48,tocIndex:13},{value:" this funcion must ",paraId:48,tocIndex:13},{value:"be called before graph.render()",paraId:48,tocIndex:13},{value:". It does not take effect otherwise.",paraId:48,tocIndex:13},{value:"Parameters",paraId:49,tocIndex:13},{value:"Name",paraId:50,tocIndex:13},{value:"Type",paraId:50,tocIndex:13},{value:"Required",paraId:50,tocIndex:13},{value:"Description",paraId:50,tocIndex:13},{value:"edgeFn",paraId:50,tocIndex:13},{value:"Function",paraId:50,tocIndex:13},{value:"true",paraId:50,tocIndex:13},{value:"Return the configurations for each edge.",paraId:50,tocIndex:13},{value:"Usage",paraId:51,tocIndex:13},{value:"graph.edge((edge) => {\n  return {\n    id: edge.id,\n    type: 'cubic-horizontal',\n    style: {\n      stroke: 'green',\n    },\n  };\n});\n\ngraph.data(data);\ngraph.render();\n",paraId:52,tocIndex:13},{value:"Set the style and other configurations for each combo.",paraId:53,tocIndex:14},{value:"⚠️Attention:",paraId:54,tocIndex:14},{value:" this funcion must ",paraId:54,tocIndex:14},{value:"be called before graph.render()",paraId:54,tocIndex:14},{value:". It does not take effect otherwise.",paraId:54,tocIndex:14},{value:"Parameters",paraId:55,tocIndex:14},{value:"Name",paraId:56,tocIndex:14},{value:"Type",paraId:56,tocIndex:14},{value:"Required",paraId:56,tocIndex:14},{value:"Description",paraId:56,tocIndex:14},{value:"comboFn",paraId:56,tocIndex:14},{value:"Function",paraId:56,tocIndex:14},{value:"true",paraId:56,tocIndex:14},{value:"Return the configurations for each combo.",paraId:56,tocIndex:14},{value:"Usage",paraId:57,tocIndex:14},{value:"graph.combo((combo) => {\n  return {\n    id: combo.id,\n    type: 'rect',\n    style: {\n      stroke: 'green',\n    },\n  };\n});\n\ngraph.data(data);\ngraph.render();\n",paraId:58,tocIndex:14},{value:"Show the item. If the item is a node, the related edges will be shown in the same time. Different from that, ",paraId:59,tocIndex:16},{value:"item.show()",paraId:60,tocIndex:16},{value:" only show the node item itself.",paraId:59,tocIndex:16},{value:"Parameters",paraId:61,tocIndex:16},{value:"Name",paraId:62,tocIndex:16},{value:"Type",paraId:62,tocIndex:16},{value:"Required",paraId:62,tocIndex:16},{value:"Description",paraId:62,tocIndex:16},{value:"item",paraId:62,tocIndex:16},{value:"string / Object",paraId:62,tocIndex:16},{value:"true",paraId:62,tocIndex:16},{value:"The id or the instance of the item.",paraId:62,tocIndex:16},{value:"stack",paraId:62,tocIndex:16},{value:"boolean",paraId:62,tocIndex:16},{value:"false",paraId:62,tocIndex:16},{value:"Whether to push the operator into the undo & redo stack. If the ",paraId:62,tocIndex:16},{value:"enableStack",paraId:62,tocIndex:16},{value:" is ",paraId:62,tocIndex:16},{value:"true",paraId:62,tocIndex:16},{value:", this operation will be automatically pushed into the stack by default. Set ",paraId:62,tocIndex:16},{value:"stack",paraId:62,tocIndex:16},{value:" to be ",paraId:62,tocIndex:16},{value:"false",paraId:62,tocIndex:16},{value:" if you do not want it.",paraId:62,tocIndex:16},{value:"Usage",paraId:63,tocIndex:16},{value:"// Find the item instance by id\nconst item = graph.findById('nodeId');\ngraph.showItem(item);\n\n// equal to\ngraph.showItem('nodeId');\n",paraId:64,tocIndex:16},{value:"Hide the item. If the item is a node, the related edges will be hidden in the same time. Different from that, ",paraId:65,tocIndex:17},{value:"item.hide()",paraId:66,tocIndex:17},{value:" only hide the node item itself.",paraId:65,tocIndex:17},{value:"Parameters",paraId:67,tocIndex:17},{value:"Name",paraId:68,tocIndex:17},{value:"Type",paraId:68,tocIndex:17},{value:"Required",paraId:68,tocIndex:17},{value:"Description",paraId:68,tocIndex:17},{value:"item",paraId:68,tocIndex:17},{value:"string / Object",paraId:68,tocIndex:17},{value:"true",paraId:68,tocIndex:17},{value:"The id or the instance of the item.",paraId:68,tocIndex:17},{value:"stack",paraId:68,tocIndex:17},{value:"boolean",paraId:68,tocIndex:17},{value:"false",paraId:68,tocIndex:17},{value:"Whether to push the operator into the undo & redo stack. If the ",paraId:68,tocIndex:17},{value:"enableStack",paraId:68,tocIndex:17},{value:" is ",paraId:68,tocIndex:17},{value:"true",paraId:68,tocIndex:17},{value:", this operation will be automatically pushed into the stack by default. Set ",paraId:68,tocIndex:17},{value:"stack",paraId:68,tocIndex:17},{value:" to be ",paraId:68,tocIndex:17},{value:"false",paraId:68,tocIndex:17},{value:" if you do not want it.",paraId:68,tocIndex:17},{value:"Usage",paraId:69,tocIndex:17},{value:"// Find the item instance by id\nconst item = graph.findById('nodeId');\ngraph.hideItem(item);\n\n// Equal to\ngraph.hideItem('nodeId');\n",paraId:70,tocIndex:17}]},51662:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"There are several basic layout algorithms in G6 3.1. For more information, please refer to ",paraId:0},{value:"Graph Layout API",paraId:1},{value:" or ",paraId:0},{value:"TreeGraph Layout API",paraId:2},{value:".",paraId:0},{value:"Re-layout the graph with current layout configurations in graph.",paraId:3,tocIndex:0},{value:"Usage",paraId:4,tocIndex:0},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 1000,\n  height: 600,\n  layout: {\n    type: 'force',\n  },\n  modes: {\n    default: ['drag-node'],\n  },\n});\n\ngraph.data({\n  nodes: data.nodes,\n  edges: data.edges.map((edge, i) => {\n    edge.id = 'edge' + i;\n    return Object.assign({}, edge);\n  }),\n});\n\ngraph.render();\n\nfunction refreshDragedNodePosition(e) {\n  const model = e.item.get('model');\n  model.fx = e.x;\n  model.fy = e.y;\n}\n\ngraph.on('node:dragstart', (e) => {\n  // Relayout when dragging the node\n  graph.layout();\n  refreshDragedNodePosition(e);\n});\n\ngraph.on('node:drag', (e) => {\n  refreshDragedNodePosition(e);\n});\n\ngraph.on('node:dragend', (e) => {\n  e.item.get('model').fx = null;\n  e.item.get('model').fy = null;\n});\n",paraId:5,tocIndex:0},{value:"Update the layout configurations.",paraId:6,tocIndex:1},{value:"If there is ",paraId:7,tocIndex:1},{value:"type",paraId:7,tocIndex:1},{value:" in ",paraId:7,tocIndex:1},{value:"cfg",paraId:7,tocIndex:1},{value:", ",paraId:7,tocIndex:1},{value:"type",paraId:7,tocIndex:1},{value:" is a string and it is different from current layout method, ",paraId:7,tocIndex:1},{value:"updateLayout(cfg)",paraId:7,tocIndex:1},{value:" will change the layout method and relayout;",paraId:7,tocIndex:1},{value:"If there is no ",paraId:7,tocIndex:1},{value:"type",paraId:7,tocIndex:1},{value:" in ",paraId:7,tocIndex:1},{value:"cfg",paraId:7,tocIndex:1},{value:", ",paraId:7,tocIndex:1},{value:"updateLayout(cfg)",paraId:7,tocIndex:1},{value:" will relayout with current layout method and new layout configurations.",paraId:7,tocIndex:1},{value:"Parameters",paraId:8,tocIndex:1},{value:"Name",paraId:9,tocIndex:1},{value:"Type",paraId:9,tocIndex:1},{value:"Required",paraId:9,tocIndex:1},{value:"Description",paraId:9,tocIndex:1},{value:"cfg",paraId:9,tocIndex:1},{value:"Object",paraId:9,tocIndex:1},{value:"true",paraId:9,tocIndex:1},{value:"Configurations of new layout.",paraId:9,tocIndex:1},{value:"Usage",paraId:10,tocIndex:1},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 1000,\n  height: 600,\n  modes: {\n    default: ['drag-canvas', 'drag-node'],\n  },\n  layout: {\n    type: 'circular',\n    center: [500, 300],\n  },\n  animate: true,\n});\ngraph.data(data);\ngraph.render();\n\n// configure the layout while instantializing the graph, and update the layout in somewhere you want.\ngraph.updateLayout({\n  radius: 200,\n  startAngle: Math.PI / 4,\n  endAngle: Math.PI,\n  divisions: 5,\n  ordering: 'degree',\n});\n",paraId:11,tocIndex:1},{value:"Destroy the layout algorithm. After that, the ",paraId:12,tocIndex:2},{value:"changeData",paraId:12,tocIndex:2},{value:" will not place the new nodes with origin layout configurations.",paraId:12,tocIndex:2},{value:"Usage",paraId:13,tocIndex:2},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 1000,\n  height: 600,\n  modes: {\n    default: ['drag-canvas', 'drag-node'],\n  },\n  layout: {\n    type: 'circular',\n    center: [500, 300],\n  },\n  animate: true,\n});\ngraph.data(data);\ngraph.render();\ngraph.destroyLayout();\n// If there is no position info in data2, the new nodes will be placed according to position initing problem. If the position info exists, the new node will be placed according to its position info\ngraph.changeData(data2);\n",paraId:14,tocIndex:2}]},45722:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Switch the interaction mode of graph. For example, switch from edit mode to read-only mode.",paraId:0,tocIndex:0},{value:"Parameters",paraId:1,tocIndex:0},{value:"Name",paraId:2,tocIndex:0},{value:"Type",paraId:2,tocIndex:0},{value:"Required",paraId:2,tocIndex:0},{value:"Description",paraId:2,tocIndex:0},{value:"mode",paraId:2,tocIndex:0},{value:"string",paraId:2,tocIndex:0},{value:"true",paraId:2,tocIndex:0},{value:"The name of the mode.",paraId:2,tocIndex:0},{value:"Usage",paraId:3,tocIndex:0},{value:"const graph = new G6.Graph({\n    container: div,\n    width: 500,\n    height: 500,\n    modes: {\n      default: [...],\n      custom: [...]\n    }\n})\n\ngraph.setMode('custom')\n",paraId:4,tocIndex:0},{value:"Get the current mode.",paraId:5,tocIndex:1},{value:"Return",paraId:6,tocIndex:1},{value:"Type of return value: string;",paraId:7,tocIndex:1},{value:"The return value indicates the current mode.",paraId:7,tocIndex:1},{value:"Usage",paraId:8,tocIndex:1},{value:"// The return value is the current interaction mode\nconst mode = graph.getCurrentMode();\n",paraId:9,tocIndex:1}]},52843:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Bind event listeners for graph.",paraId:0,tocIndex:0},{value:"Parameters",paraId:1,tocIndex:0},{value:"Name",paraId:2,tocIndex:0},{value:"Type",paraId:2,tocIndex:0},{value:"Required",paraId:2,tocIndex:0},{value:"Description",paraId:2,tocIndex:0},{value:"eventName",paraId:2,tocIndex:0},{value:"string",paraId:2,tocIndex:0},{value:"true",paraId:2,tocIndex:0},{value:"Name of the event, options are in ",paraId:2,tocIndex:0},{value:"Event",paraId:3,tocIndex:0},{value:"handler",paraId:2,tocIndex:0},{value:"Function",paraId:2,tocIndex:0},{value:"true",paraId:2,tocIndex:0},{value:"The listener function",paraId:2,tocIndex:0},{value:"Here is the description for the objects ",paraId:4,tocIndex:0},{value:"item",paraId:4,tocIndex:0},{value:" and ",paraId:4,tocIndex:0},{value:"target",paraId:4,tocIndex:0},{value:" of the ",paraId:4,tocIndex:0},{value:"handler",paraId:4,tocIndex:0},{value:"'s parameter ",paraId:4,tocIndex:0},{value:"evt",paraId:4,tocIndex:0},{value:":",paraId:4,tocIndex:0},{value:"Name",paraId:5,tocIndex:0},{value:"Type",paraId:5,tocIndex:0},{value:"Required",paraId:5,tocIndex:0},{value:"Description",paraId:5,tocIndex:0},{value:"item",paraId:5,tocIndex:0},{value:"Item",paraId:5,tocIndex:0},{value:"true",paraId:5,tocIndex:0},{value:"The manipulated item",paraId:5,tocIndex:0},{value:"target",paraId:5,tocIndex:0},{value:"IShape",paraId:5,tocIndex:0},{value:"true",paraId:5,tocIndex:0},{value:"The manipulated ",paraId:5,tocIndex:0},{value:"Graphics Shape",paraId:6,tocIndex:0},{value:"Usage",paraId:7,tocIndex:0},{value:"const graph = new G6.Graph({\n  // ...\n});\n\n// bind the node click listener for nodes of the graph\ngraph.on('node:click', (evt) => {\n  const item = evt.item; // The manipulated node item\n  const target = evt.target; // The manipulated graphics shape\n  // ...\n});\n\n// bind the click listener for canvas\ngraph.on('click', (evt) => {\n  // ...\n});\n",paraId:8,tocIndex:0},{value:"Trigger some event manually. Similar to ",paraId:9,tocIndex:1},{value:"dispatch",paraId:9,tocIndex:1},{value:" in DOM.",paraId:9,tocIndex:1},{value:"Parameters",paraId:10,tocIndex:1},{value:"Name",paraId:11,tocIndex:1},{value:"Type",paraId:11,tocIndex:1},{value:"Required",paraId:11,tocIndex:1},{value:"Description",paraId:11,tocIndex:1},{value:"eventName",paraId:11,tocIndex:1},{value:"string",paraId:11,tocIndex:1},{value:"true",paraId:11,tocIndex:1},{value:"Name of the event, options are in ",paraId:11,tocIndex:1},{value:"Event",paraId:12,tocIndex:1},{value:". And you can custom a event name to trigger, use graph.on to bind lisenter for the custom event name too",paraId:11,tocIndex:1},{value:"params",paraId:11,tocIndex:1},{value:"object",paraId:11,tocIndex:1},{value:"true",paraId:11,tocIndex:1},{value:"The parameters of this event. If you want to trigger the events in ",paraId:11,tocIndex:1},{value:"Event Docs",paraId:13,tocIndex:1},{value:", you might need to simulate some required ",paraId:11,tocIndex:1},{value:"Event Parameters",paraId:14,tocIndex:1},{value:" for different situations",paraId:11,tocIndex:1},{value:"Usage",paraId:15,tocIndex:1},{value:"const node = graph.findById('node1');\n// Trigger the node click event\ngraph.emit('node:click', {\n  item: node, // the 'clicked' node\n  target: node.getKeyShape(), // the 'clicked' shape on the node. It uses the keyShape of the node here, you could assign any shapes in the graphics group (node.getContainer()) of the node\n  x: 10,\n  y: 10\n  // ...\n})\n\n// Trigger a customo event named 'someevent', and pass some custom parameters\n// listen to it by graph.on('someevent', e => {}). Notice that, you should bind the listener before emit it\ngraph.emit('someevent', {\n  name: 'xxx',\n  value: 'xxx'\n});\n\n",paraId:16,tocIndex:1},{value:"Unbind the specific listener.",paraId:17,tocIndex:2},{value:"Parameters",paraId:18,tocIndex:2},{value:"Name",paraId:19,tocIndex:2},{value:"Type",paraId:19,tocIndex:2},{value:"Required",paraId:19,tocIndex:2},{value:"Description",paraId:19,tocIndex:2},{value:"eventName",paraId:19,tocIndex:2},{value:"string",paraId:19,tocIndex:2},{value:"true",paraId:19,tocIndex:2},{value:"Name of the event, options are in ",paraId:19,tocIndex:2},{value:"Event",paraId:20,tocIndex:2},{value:"handler",paraId:19,tocIndex:2},{value:"Function",paraId:19,tocIndex:2},{value:"true",paraId:19,tocIndex:2},{value:"The listener function",paraId:19,tocIndex:2},{value:"The objects ",paraId:21,tocIndex:2},{value:"item",paraId:21,tocIndex:2},{value:" and ",paraId:21,tocIndex:2},{value:"target",paraId:21,tocIndex:2},{value:" of the ",paraId:21,tocIndex:2},{value:"handler",paraId:21,tocIndex:2},{value:"'s parameter ",paraId:21,tocIndex:2},{value:"evt",paraId:21,tocIndex:2},{value:" are the same as the ones described in ",paraId:21,tocIndex:2},{value:"graph.on(eventName, handler)",paraId:22,tocIndex:2},{value:". The ",paraId:21,tocIndex:2},{value:"handler",paraId:21,tocIndex:2},{value:" should be the same object of binded ",paraId:21,tocIndex:2},{value:"handler",paraId:21,tocIndex:2},{value:".",paraId:21,tocIndex:2},{value:"Usage",paraId:23,tocIndex:2},{value:"const graph = new G6.Graph({\n  // ...\n});\n\n// listeners\nconst fn = (evt) => {\n  const item = evt.item; // The manipulated node item\n  const target = evt.target; // The manipulated graphics shape\n  // ...\n};\n// bind node click listener\ngraph.on('node:click', fn);\n\n// Unbind the node click listener. The fn is the same object as above\ngraph.off('node:click', fn);\n",paraId:24,tocIndex:2},{value:"Unbind all the listeners for the graph.",paraId:25,tocIndex:3},{value:"Parameters",paraId:26,tocIndex:3},{value:"Name",paraId:27,tocIndex:3},{value:"Type",paraId:27,tocIndex:3},{value:"Required",paraId:27,tocIndex:3},{value:"Description",paraId:27,tocIndex:3},{value:"eventName",paraId:27,tocIndex:3},{value:"string",paraId:27,tocIndex:3},{value:"true",paraId:27,tocIndex:3},{value:"Name of the event, options are in ",paraId:27,tocIndex:3},{value:"Event",paraId:28,tocIndex:3},{value:"Usage",paraId:29,tocIndex:3},{value:"const graph = new G6.Graph({\n  // ...\n});\n\n// listeners\nconst fn1 = (evt) => {\n  const item = evt.item; // the manipulated node item\n  const target = evt.target; // the manipulated graphics shape\n  // ...\n};\nconst fn2 = (evt) => {\n  // ...\n};\n// bind two listeners for nodes of the graph\ngraph.on('node:click', fn1);\ngraph.on('node:click', fn2);\n\n// unbind all the click listeners\ngraph.off('node:click');\n",paraId:30,tocIndex:3},{value:"Unbind all the event listeners of the graph. There is no parameter for this function.",paraId:31,tocIndex:4},{value:"Usage",paraId:32,tocIndex:4},{value:"const graph = new G6.Graph({\n  // ...\n});\n\n// listeners\nconst fn1 = (evt) => {\n  // ...\n};\nconst fn2 = (evt) => {\n  // ...\n};\n// bind mouseenter listner for the nodes of the graph\ngraph.on('node:mouseenter', fn1);\n// bind afteranimate timing listener for graph\ngraph.on('afteranimate', fn2);\n\n// unbind all the events of the graph\ngraph.off();\n",paraId:33,tocIndex:4}]},23205:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"graph.render();\n",paraId:0,tocIndex:0},{value:"Render the graph with data onto the canvas.",paraId:1,tocIndex:0}]},82626:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Push operation。",paraId:0,tocIndex:0},{value:"Implemented the undo function, refer to ",paraId:1,tocIndex:0},{value:"here",paraId:1,tocIndex:0},{value:"Implemented the redo function, refer to",paraId:2,tocIndex:0},{value:"here",paraId:2,tocIndex:0},{value:"参数",paraId:3,tocIndex:0},{value:"| Name      | Type    | Required | Description                                      |\n| --------- | ------- | -------- | ------------------------------------------------ | --------------------------------------------------- |\n| action    | string  | false    | operation type，the value of 'update' by default |\n| data      | unknown | false    | Stacked data                                     |\n| stackType | 'redo'  / 'undo'   | false                                            | push operation type，the value of 'undo' by default |",paraId:4,tocIndex:0},{value:"get undo stack。",paraId:5,tocIndex:1},{value:"get redo stack。",paraId:6,tocIndex:2},{value:"get the data in stack。",paraId:7,tocIndex:3},{value:"The return value type：",paraId:8,tocIndex:3},{value:"{\n  undoStack: StackData[];\n  redoStack: StackData[];\n};\n",paraId:9,tocIndex:3},{value:"Clear the data in stack。",paraId:10,tocIndex:4}]},27581:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Set the item's state.",paraId:0,tocIndex:0},{value:"v3.4 and futher versions support multiple values for a state, refer to ",paraId:1,tocIndex:0},{value:"Take Use of State Mechanism",paraId:2,tocIndex:0},{value:".",paraId:1,tocIndex:0},{value:"This function will emit events ",paraId:3,tocIndex:0},{value:"beforitemstatechange",paraId:3,tocIndex:0},{value:" and ",paraId:3,tocIndex:0},{value:"afteritemstatechange",paraId:3,tocIndex:0},{value:".",paraId:3,tocIndex:0},{value:"Parameters",paraId:4,tocIndex:0},{value:"Name",paraId:5,tocIndex:0},{value:"Type",paraId:5,tocIndex:0},{value:"Required",paraId:5,tocIndex:0},{value:"Description",paraId:5,tocIndex:0},{value:"item",paraId:5,tocIndex:0},{value:"string / Object",paraId:5,tocIndex:0},{value:"true",paraId:5,tocIndex:0},{value:"The id or the instance of the item.",paraId:5,tocIndex:0},{value:"state",paraId:5,tocIndex:0},{value:"string",paraId:5,tocIndex:0},{value:"true",paraId:5,tocIndex:0},{value:"The value of state. State can be comstomized as selected, hover, actived, and so on.",paraId:5,tocIndex:0},{value:"enabled",paraId:5,tocIndex:0},{value:"Boolean",paraId:5,tocIndex:0},{value:"true",paraId:5,tocIndex:0},{value:"Whether to activate the state.",paraId:5,tocIndex:0},{value:"Usage",paraId:6,tocIndex:0},{value:"// boolean values for state 'selected'\ngraph.setItemState('node1', 'selected', true);\n\n// multiple values for state 'body'\ngraph.setItemState('node1', 'body', 'health');\ngraph.setItemState('node2', 'body', 'ill');\n",paraId:7,tocIndex:0},{value:"Clear the states of the item. This function could clear multiple states in the same time.",paraId:8,tocIndex:1},{value:"Parameters",paraId:9,tocIndex:1},{value:"Name",paraId:10,tocIndex:1},{value:"Type",paraId:10,tocIndex:1},{value:"Required",paraId:10,tocIndex:1},{value:"Description",paraId:10,tocIndex:1},{value:"item",paraId:10,tocIndex:1},{value:"string / Object",paraId:10,tocIndex:1},{value:"true",paraId:10,tocIndex:1},{value:"The id or the instance of the item.",paraId:10,tocIndex:1},{value:"states",paraId:10,tocIndex:1},{value:"string / Array / null ",paraId:10,tocIndex:1},{value:"false",paraId:10,tocIndex:1},{value:"It can be a single state value, an array, or null. When it is null, this operation will clear all state of the item.",paraId:10,tocIndex:1},{value:"Usage",paraId:11,tocIndex:1},{value:"// Clear single state 'a' of the node\ngraph.clearItemStates(node, 'a');\n\n// Clear multiple states of the node\ngraph.clearItemStates(node, ['a', 'b']);\n\n// Clear all the states of the node\ngraph.clearItemStates(node);\n",paraId:12,tocIndex:1},{value:"Raise the priority of the specified state to the highest priority.",paraId:13,tocIndex:2},{value:"Parameters",paraId:14,tocIndex:2},{value:"Name",paraId:15,tocIndex:2},{value:"Type",paraId:15,tocIndex:2},{value:"Required",paraId:15,tocIndex:2},{value:"Description",paraId:15,tocIndex:2},{value:"item",paraId:15,tocIndex:2},{value:"string / Object",paraId:15,tocIndex:2},{value:"true",paraId:15,tocIndex:2},{value:"The id or the instance of the item.",paraId:15,tocIndex:2},{value:"states",paraId:15,tocIndex:2},{value:"string",paraId:15,tocIndex:2},{value:"true",paraId:15,tocIndex:2},{value:"state value",paraId:15,tocIndex:2},{value:"Usage",paraId:16,tocIndex:2},{value:"// Adjust the a state of node to the highest priority\ngraph.priorityState(node, 'a');\n",paraId:17,tocIndex:2}]},13732:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Get the current zoom ratio.",paraId:0,tocIndex:0},{value:"Return",paraId:1,tocIndex:0},{value:"Type of return value: Number;",paraId:2,tocIndex:0},{value:"The return value indicates the current zoom ratio of view port. The default value is 1.",paraId:2,tocIndex:0},{value:"Usage",paraId:3,tocIndex:0},{value:"// The return value indicates the current zoom ratio\nconst zoom = graph.getZoom();\n",paraId:4,tocIndex:0},{value:"Change the scale of the graph with a relative ratio.",paraId:5,tocIndex:1},{value:"Parameters",paraId:6,tocIndex:1},{value:"Name",paraId:7,tocIndex:1},{value:"Type",paraId:7,tocIndex:1},{value:"Required",paraId:7,tocIndex:1},{value:"Description",paraId:7,tocIndex:1},{value:"ratio",paraId:7,tocIndex:1},{value:"Number",paraId:7,tocIndex:1},{value:"true",paraId:7,tocIndex:1},{value:"Relative zoom ratio",paraId:7,tocIndex:1},{value:"center",paraId:7,tocIndex:1},{value:"Object",paraId:7,tocIndex:1},{value:"false",paraId:7,tocIndex:1},{value:"The zoom center. If it is not assigned, (0, 0) will be regarded as the zoom center",paraId:7,tocIndex:1},{value:"animate",paraId:7,tocIndex:1},{value:"boolean",paraId:7,tocIndex:1},{value:"false",paraId:7,tocIndex:1},{value:"Whether move the graph with animation. If it is not assigned, animates following the graph's ",paraId:7,tocIndex:1},{value:"animate",paraId:7,tocIndex:1},{value:".",paraId:7,tocIndex:1},{value:"animateCfg",paraId:7,tocIndex:1},{value:"Object",paraId:7,tocIndex:1},{value:"false",paraId:7,tocIndex:1},{value:"The animation's configuraiton. Its configurations can be found in ",paraId:7,tocIndex:1},{value:"Basic Animation Docs",paraId:8,tocIndex:1},{value:".",paraId:7,tocIndex:1},{value:"Usage",paraId:9,tocIndex:1},{value:"// zoom to scale 3 at the center (100, 100)\ngraph.zoom(3, { x: 100, y: 100 });\n\n// zoom to scale 0.5 at the origin (0, 0) of canvas drawing coordinate system, which is not the same as the lefttop of the viewport. To see the transformantion and relationships between three coordinate systems in G6, checkout out the doc: https://g6.antv.antgroup.com/en/manual/advanced/coordinate-system\ngraph.zoom(0.5);\n\n// zoom to scale 3 at the center (100, 100) with animation\ngraph.zoom(3, { x: 100, y: 100 }, true, {\n  duration: 100,\n});\n",paraId:10,tocIndex:1},{value:"Scale the graph to a target ratio.",paraId:11,tocIndex:2},{value:"Parameters",paraId:12,tocIndex:2},{value:"Name",paraId:13,tocIndex:2},{value:"Type",paraId:13,tocIndex:2},{value:"Required",paraId:13,tocIndex:2},{value:"Description",paraId:13,tocIndex:2},{value:"toRatio",paraId:13,tocIndex:2},{value:"Number",paraId:13,tocIndex:2},{value:"true",paraId:13,tocIndex:2},{value:"The target ratio",paraId:13,tocIndex:2},{value:"center",paraId:13,tocIndex:2},{value:"Object",paraId:13,tocIndex:2},{value:"false",paraId:13,tocIndex:2},{value:"The zoom center. If it is not assigned, (0, 0) will be regarded as the zoom center",paraId:13,tocIndex:2},{value:"animate",paraId:13,tocIndex:2},{value:"boolean",paraId:13,tocIndex:2},{value:"false",paraId:13,tocIndex:2},{value:"Whether move the graph with animation. If it is not assigned, animates following the graph's ",paraId:13,tocIndex:2},{value:"animate",paraId:13,tocIndex:2},{value:".",paraId:13,tocIndex:2},{value:"animateCfg",paraId:13,tocIndex:2},{value:"Object",paraId:13,tocIndex:2},{value:"false",paraId:13,tocIndex:2},{value:"The animation's configuraiton. Its configurations can be found in ",paraId:13,tocIndex:2},{value:"Basic Animation Docs",paraId:14,tocIndex:2},{value:".",paraId:13,tocIndex:2},{value:"Usage",paraId:15,tocIndex:2},{value:"// Scale the graph 3 times at the center (100, 100)\ngraph.zoomTo(3, { x: 100, y: 100 });\n\n// Scale the graph 0.5 times at the center (0, 0)\ngraph.zoomTo(0.5);\n\n// Scale the graph 3 times at the center (100, 100) with animation\ngraph.zoomTo(3, { x: 100, y: 100 }, true, {\n  duration: 100,\n});\n",paraId:16,tocIndex:2},{value:"Change the size of the canvas.",paraId:17,tocIndex:3},{value:"Parameters",paraId:18,tocIndex:3},{value:"Name",paraId:19,tocIndex:3},{value:"Type",paraId:19,tocIndex:3},{value:"Required",paraId:19,tocIndex:3},{value:"Description",paraId:19,tocIndex:3},{value:"width",paraId:19,tocIndex:3},{value:"Number",paraId:19,tocIndex:3},{value:"true",paraId:19,tocIndex:3},{value:"The width of the canvas.",paraId:19,tocIndex:3},{value:"height",paraId:19,tocIndex:3},{value:"Number",paraId:19,tocIndex:3},{value:"true",paraId:19,tocIndex:3},{value:"The height of the canvas.",paraId:19,tocIndex:3},{value:"Usage",paraId:20,tocIndex:3},{value:"graph.changeSize(600, 350);\n",paraId:21,tocIndex:3},{value:"Move the canvas with ",paraId:22,tocIndex:4},{value:"relative displacement",paraId:22,tocIndex:4},{value:".",paraId:22,tocIndex:4},{value:"Parameters",paraId:23,tocIndex:4},{value:"Name",paraId:24,tocIndex:4},{value:"Type",paraId:24,tocIndex:4},{value:"Required",paraId:24,tocIndex:4},{value:"Description",paraId:24,tocIndex:4},{value:"dx",paraId:24,tocIndex:4},{value:"Number",paraId:24,tocIndex:4},{value:"true",paraId:24,tocIndex:4},{value:"Displacement in the horizontal direction.",paraId:24,tocIndex:4},{value:"dy",paraId:24,tocIndex:4},{value:"Number",paraId:24,tocIndex:4},{value:"true",paraId:24,tocIndex:4},{value:"Displacement in the vertical direction.",paraId:24,tocIndex:4},{value:"animate",paraId:24,tocIndex:4},{value:"boolean",paraId:24,tocIndex:4},{value:"false",paraId:24,tocIndex:4},{value:"Whether translate the graph with animation.",paraId:24,tocIndex:4},{value:"animateCfg",paraId:24,tocIndex:4},{value:"Object",paraId:24,tocIndex:4},{value:"false",paraId:24,tocIndex:4},{value:"The animation's configuraiton. Its configurations can be found in ",paraId:24,tocIndex:4},{value:"Basic Animation Docs",paraId:25,tocIndex:4},{value:". If it is not assigned, animates following the graph's ",paraId:24,tocIndex:4},{value:"animateCfg",paraId:24,tocIndex:4},{value:".",paraId:24,tocIndex:4},{value:"Usage",paraId:26,tocIndex:4},{value:"graph.translate(100, 100);\n\n// 带动画\ngraph.translate(100, 100, true, {\n  duration: 100,\n});\n",paraId:27,tocIndex:4},{value:"Move the canvas to a ",paraId:28,tocIndex:5},{value:"fixed position",paraId:28,tocIndex:5},{value:".",paraId:28,tocIndex:5},{value:"Parameters",paraId:29,tocIndex:5},{value:"Name",paraId:30,tocIndex:5},{value:"Type",paraId:30,tocIndex:5},{value:"Required",paraId:30,tocIndex:5},{value:"Description",paraId:30,tocIndex:5},{value:"x",paraId:30,tocIndex:5},{value:"Number",paraId:30,tocIndex:5},{value:"true",paraId:30,tocIndex:5},{value:"Displacement in the horizontal direction.",paraId:30,tocIndex:5},{value:"y",paraId:30,tocIndex:5},{value:"Number",paraId:30,tocIndex:5},{value:"true",paraId:30,tocIndex:5},{value:"Displacement in the vertical direction.",paraId:30,tocIndex:5},{value:"animate",paraId:30,tocIndex:5},{value:"boolean",paraId:30,tocIndex:5},{value:"false",paraId:30,tocIndex:5},{value:"Whether move the graph with animation. If it is not assigned, animates following the graph's ",paraId:30,tocIndex:5},{value:"animate",paraId:30,tocIndex:5},{value:".",paraId:30,tocIndex:5},{value:"animateCfg",paraId:30,tocIndex:5},{value:"Object",paraId:30,tocIndex:5},{value:"false",paraId:30,tocIndex:5},{value:"The animation's configuraiton. Its configurations can be found in ",paraId:30,tocIndex:5},{value:"Basic Animation Docs",paraId:31,tocIndex:5},{value:". If it is not assigned, animates following the graph's ",paraId:30,tocIndex:5},{value:"animateCfg",paraId:30,tocIndex:5},{value:".",paraId:30,tocIndex:5},{value:"Usage",paraId:32,tocIndex:5},{value:"graph.moveTo(200, 300);\n\n// with animation\ngraph.moveTo(200, 300, true, {\n  duration: 100,\n});\n",paraId:33,tocIndex:5},{value:"Fit the graph to the view port.",paraId:34,tocIndex:6},{value:"Parameters",paraId:35,tocIndex:6},{value:"Name",paraId:36,tocIndex:6},{value:"Type",paraId:36,tocIndex:6},{value:"Required",paraId:36,tocIndex:6},{value:"Description",paraId:36,tocIndex:6},{value:"padding",paraId:36,tocIndex:6},{value:"Number / Array",paraId:36,tocIndex:6},{value:"false",paraId:36,tocIndex:6},{value:"The padding of [top, right, bottom, left].",paraId:36,tocIndex:6},{value:"rules",paraId:36,tocIndex:6},{value:"{ onlyOutOfViewPort?: boolean; direction?: 'x' / 'y' / 'both'; ratioRule?: 'max' / 'min}",paraId:36,tocIndex:6},{value:"false",paraId:36,tocIndex:6},{value:"rules of fitView",paraId:36,tocIndex:6},{value:"animate",paraId:36,tocIndex:6},{value:"boolean",paraId:36,tocIndex:6},{value:"false",paraId:36,tocIndex:6},{value:"Supported by v4.6.15.",paraId:36,tocIndex:6},{value:" Whether move the graph with animation. If it is not assigned, animates following the graph's ",paraId:36,tocIndex:6},{value:"animate",paraId:36,tocIndex:6},{value:".",paraId:36,tocIndex:6},{value:"animateCfg",paraId:36,tocIndex:6},{value:"Object",paraId:36,tocIndex:6},{value:"false",paraId:36,tocIndex:6},{value:"Supported by v4.6.15.",paraId:36,tocIndex:6},{value:" The animation's configuraiton. Its configurations can be found in ",paraId:36,tocIndex:6},{value:"Basic Animation Docs",paraId:37,tocIndex:6},{value:". If it is not assigned, animates following the graph's ",paraId:36,tocIndex:6},{value:"animateCfg",paraId:36,tocIndex:6},{value:".",paraId:36,tocIndex:6},{value:"Usage",paraId:38,tocIndex:6},{value:"// When padding is a number, top = right = bottom = left = 20\ngraph.fitView(20);\n\n// Equal to graph.fitView(20)\ngraph.fitView([20]);\n\n// When padding is an array with 2 values, top = bottom = 20, right = left = 10\ngraph.fitView([20, 10]);\n\n// When padding is an array with four values\ngraph.fitView([20, 10, 20, 15]);\n\n// Use fitViewByRules, default rules: onlyOutOfViewPort = false, direction = 'both', ratioRule = 'min'\ngraph.fitViewByRule(0, {});\n\n// use fitViewByRules, custom rules\ngraph.fitView(0, { onlyOutOfViewPort: true, direction: 'y' });\n",paraId:39,tocIndex:6},{value:"Supported by v3.5.1.",paraId:40,tocIndex:7},{value:" Translate the graph to align its center with the canvas.",paraId:40,tocIndex:7},{value:"Parameters",paraId:41,tocIndex:7},{value:"Name",paraId:42,tocIndex:7},{value:"Type",paraId:42,tocIndex:7},{value:"Required",paraId:42,tocIndex:7},{value:"Description",paraId:42,tocIndex:7},{value:"animate",paraId:42,tocIndex:7},{value:"boolean",paraId:42,tocIndex:7},{value:"false",paraId:42,tocIndex:7},{value:"Supported by v4.6.15.",paraId:42,tocIndex:7},{value:" Whether move the graph with animation. If it is not assigned, animates following the graph's ",paraId:42,tocIndex:7},{value:"animate",paraId:42,tocIndex:7},{value:".",paraId:42,tocIndex:7},{value:"animateCfg",paraId:42,tocIndex:7},{value:"Object",paraId:42,tocIndex:7},{value:"false",paraId:42,tocIndex:7},{value:"Supported by v4.6.15.",paraId:42,tocIndex:7},{value:" The animation's configuraiton. Its configurations can be found in ",paraId:42,tocIndex:7},{value:"Basic Animation Docs",paraId:43,tocIndex:7},{value:". If it is not assigned, animates following the graph's ",paraId:42,tocIndex:7},{value:"animateCfg",paraId:42,tocIndex:7},{value:".",paraId:42,tocIndex:7},{value:"Usage",paraId:44,tocIndex:7},{value:"// Call the following function after rendering and animation\ngraph.fitCenter();\n",paraId:45,tocIndex:7},{value:"Move the graph to center at the item. This operation can be used as easing animation after searching a node.",paraId:46,tocIndex:8},{value:"Parameters",paraId:47,tocIndex:8},{value:"Name",paraId:48,tocIndex:8},{value:"Type",paraId:48,tocIndex:8},{value:"Required",paraId:48,tocIndex:8},{value:"Description",paraId:48,tocIndex:8},{value:"item",paraId:48,tocIndex:8},{value:"string / Object",paraId:48,tocIndex:8},{value:"true",paraId:48,tocIndex:8},{value:"The id or the instance of the item.",paraId:48,tocIndex:8},{value:"animate",paraId:48,tocIndex:8},{value:"boolean",paraId:48,tocIndex:8},{value:"false",paraId:48,tocIndex:8},{value:"Whether move the graph with animation. If it is not assigned, animates following the graph's ",paraId:48,tocIndex:8},{value:"animate",paraId:48,tocIndex:8},{value:".",paraId:48,tocIndex:8},{value:"animateCfg",paraId:48,tocIndex:8},{value:"Object",paraId:48,tocIndex:8},{value:"false",paraId:48,tocIndex:8},{value:"The animation's configuraiton. Its configurations can be found in ",paraId:48,tocIndex:8},{value:"Basic Animation Docs",paraId:49,tocIndex:8},{value:". If it is not assigned, animates following the graph's ",paraId:48,tocIndex:8},{value:"animateCfg",paraId:48,tocIndex:8},{value:".",paraId:48,tocIndex:8},{value:"Usage",paraId:50,tocIndex:8},{value:"graph.focusItem(item);\n\n// focus with animation\ngraph.focusItem(item, true);\n\n// focus with animation and animation's configuration\ngraph.focusItem(item, true, {\n  easing: 'easeCubic',\n  duration: 400,\n});\n",paraId:51,tocIndex:8}]},17932:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Add text water marker for the canvas.",paraId:0,tocIndex:0},{value:"Parameters",paraId:1,tocIndex:0},{value:"Name",paraId:2,tocIndex:0},{value:"Type",paraId:2,tocIndex:0},{value:"Required",paraId:2,tocIndex:0},{value:"Description",paraId:2,tocIndex:0},{value:"texts",paraId:2,tocIndex:0},{value:"String[] / string / undefined",paraId:2,tocIndex:0},{value:"true",paraId:2,tocIndex:0},{value:"The text array for the water marker, the each item in the array with take one line",paraId:2,tocIndex:0},{value:"config",paraId:2,tocIndex:0},{value:"Object",paraId:2,tocIndex:0},{value:"false",paraId:2,tocIndex:0},{value:"The configurations for the text water marker, the properties are listed below",paraId:2,tocIndex:0},{value:"config",paraId:3,tocIndex:0},{value:" is the configurations for the text water marker with:",paraId:3,tocIndex:0},{value:"Name",paraId:4,tocIndex:0},{value:"Type",paraId:4,tocIndex:0},{value:"Required",paraId:4,tocIndex:0},{value:"Description",paraId:4,tocIndex:0},{value:"width",paraId:4,tocIndex:0},{value:"Number",paraId:4,tocIndex:0},{value:"false",paraId:4,tocIndex:0},{value:"The width of a single marker, which controls the horizontal space between two single markers, ",paraId:4,tocIndex:0},{value:"150",paraId:4,tocIndex:0},{value:" by default",paraId:4,tocIndex:0},{value:"height",paraId:4,tocIndex:0},{value:"Number",paraId:4,tocIndex:0},{value:"false",paraId:4,tocIndex:0},{value:"The height of a single marker, which controls the vertical space between two single markers, ",paraId:4,tocIndex:0},{value:"100",paraId:4,tocIndex:0},{value:" by default",paraId:4,tocIndex:0},{value:"compatible",paraId:4,tocIndex:0},{value:"Boolean",paraId:4,tocIndex:0},{value:"false",paraId:4,tocIndex:0},{value:"Whether compatible with the browsers which does not support ",paraId:4,tocIndex:0},{value:"pointer-events",paraId:4,tocIndex:0},{value:", ",paraId:4,tocIndex:0},{value:"false",paraId:4,tocIndex:0},{value:" by default",paraId:4,tocIndex:0},{value:"text",paraId:4,tocIndex:0},{value:"Object",paraId:4,tocIndex:0},{value:"false",paraId:4,tocIndex:0},{value:"The style sttributes for the text shapes, the default value is: ",paraId:4,tocIndex:0},{value:"{ x: 0, y: 60, lineHeight: 20, rotate: 20, fontSize: 14, fontFamily: 'Microsoft YaHei', fill: 'rgba(0, 0, 0, 0.1)', baseline: 'Middle', }",paraId:4,tocIndex:0},{value:"Usage",paraId:5,tocIndex:0},{value:"graph.setTextWaterMarker(['AntV', 'G6']);\n",paraId:6,tocIndex:0},{value:"Add image water markers for the graph.",paraId:7,tocIndex:1},{value:"Parameters",paraId:8,tocIndex:1},{value:"Name",paraId:9,tocIndex:1},{value:"Type",paraId:9,tocIndex:1},{value:"Required",paraId:9,tocIndex:1},{value:"Description",paraId:9,tocIndex:1},{value:"imgURL",paraId:9,tocIndex:1},{value:"String / undefined",paraId:9,tocIndex:1},{value:"true",paraId:9,tocIndex:1},{value:"The url of the image for the water marker, the default value is ",paraId:9,tocIndex:1},{value:"'https://gw.alipayobjects.com/os/s/prod/antv/assets/image/logo-with-text-73b8a.svg'",paraId:9,tocIndex:1},{value:"config",paraId:9,tocIndex:1},{value:"Object",paraId:9,tocIndex:1},{value:"false",paraId:9,tocIndex:1},{value:"The configurations for the image watermarker, the properties are listed below",paraId:9,tocIndex:1},{value:"config",paraId:10,tocIndex:1},{value:" is the configurations for the image water marker with:",paraId:10,tocIndex:1},{value:"Name",paraId:11,tocIndex:1},{value:"Type",paraId:11,tocIndex:1},{value:"Required",paraId:11,tocIndex:1},{value:"Description",paraId:11,tocIndex:1},{value:"width",paraId:11,tocIndex:1},{value:"Number",paraId:11,tocIndex:1},{value:"false",paraId:11,tocIndex:1},{value:"The width of a single marker, which controls the horizontal space between two single markers, ",paraId:11,tocIndex:1},{value:"150",paraId:11,tocIndex:1},{value:" by default",paraId:11,tocIndex:1},{value:"height",paraId:11,tocIndex:1},{value:"Number",paraId:11,tocIndex:1},{value:"false",paraId:11,tocIndex:1},{value:"The height of a single marker, which controls the vertical space between two single markers, ",paraId:11,tocIndex:1},{value:"130",paraId:11,tocIndex:1},{value:" by default",paraId:11,tocIndex:1},{value:"compatible",paraId:11,tocIndex:1},{value:"Boolean",paraId:11,tocIndex:1},{value:"false",paraId:11,tocIndex:1},{value:"Whether compatible with the browsers which does not support ",paraId:11,tocIndex:1},{value:"pointer-events",paraId:11,tocIndex:1},{value:", ",paraId:11,tocIndex:1},{value:"false",paraId:11,tocIndex:1},{value:" by default",paraId:11,tocIndex:1},{value:"image",paraId:11,tocIndex:1},{value:"Object",paraId:11,tocIndex:1},{value:"false",paraId:11,tocIndex:1},{value:"The style sttributes for the image shapes, the default value is: ",paraId:11,tocIndex:1},{value:"{ x: 0, y: 0, width: 30, height: 20, rotate: 0 }",paraId:11,tocIndex:1},{value:"Usage",paraId:12,tocIndex:1},{value:"graph.setImageWaterMarker(\n  'https://gw.alipayobjects.com/os/s/prod/antv/assets/image/logo-with-text-73b8a.svg',\n  {\n    width: 300,\n    height: 200,\n    image: { rotate: Math.PI / 3 },\n  },\n);\n",paraId:13,tocIndex:1}]},88819:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Circular layout arranges the node on a circle. By tuning the configurations, user can adjust the node ordering method, division number, radial layout, and so on. G6 implements it according to the paper: ",paraId:0},{value:"A framework and algorithms for circular drawings of graphs",paraId:0},{value:".",paraId:0},{value:"\n ",paraId:1},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 1000,\n  height: 600,\n  layout: {\n    type: 'circular',\n    center: [200, 200], // The center of the graph by default\n    radius: null,\n    startRadius: 10,\n    endRadius: 100,\n    clockwise: false,\n    divisions: 5,\n    ordering: 'degree',\n    angleRatio: 1,\n  },\n});\n",paraId:2},{value:"Type",paraId:3,tocIndex:0},{value:": Array",paraId:3,tocIndex:0},{value:"Example",paraId:3,tocIndex:0},{value:": [ 0, 0 ]",paraId:3,tocIndex:0},{value:"Default",paraId:3,tocIndex:0},{value:": The center of the graph",paraId:3,tocIndex:0},{value:"Required",paraId:3,tocIndex:0},{value:": false",paraId:3,tocIndex:0},{value:"Description",paraId:3,tocIndex:0},{value:": The center of the layout",paraId:3,tocIndex:0},{value:"Type",paraId:4,tocIndex:1},{value:": Number",paraId:4,tocIndex:1},{value:"Default",paraId:4,tocIndex:1},{value:": null",paraId:4,tocIndex:1},{value:"Required",paraId:4,tocIndex:1},{value:": false",paraId:4,tocIndex:1},{value:"Description",paraId:4,tocIndex:1},{value:": The radius of the circle. If the ",paraId:4,tocIndex:1},{value:"raidus",paraId:4,tocIndex:1},{value:" exists, ",paraId:4,tocIndex:1},{value:"startRadius",paraId:4,tocIndex:1},{value:" and ",paraId:4,tocIndex:1},{value:"endRadius",paraId:4,tocIndex:1},{value:" do not take effect.",paraId:4,tocIndex:1},{value:"Type",paraId:5,tocIndex:2},{value:": Number",paraId:5,tocIndex:2},{value:"Default",paraId:5,tocIndex:2},{value:": null",paraId:5,tocIndex:2},{value:"Required",paraId:5,tocIndex:2},{value:": false",paraId:5,tocIndex:2},{value:"Description",paraId:5,tocIndex:2},{value:": The start radius of spiral layout",paraId:5,tocIndex:2},{value:"Type",paraId:6,tocIndex:3},{value:": Number",paraId:6,tocIndex:3},{value:"Default",paraId:6,tocIndex:3},{value:": null",paraId:6,tocIndex:3},{value:"Required",paraId:6,tocIndex:3},{value:": false",paraId:6,tocIndex:3},{value:"Description",paraId:6,tocIndex:3},{value:": The end radius of spiral layout",paraId:6,tocIndex:3},{value:"Type",paraId:7,tocIndex:4},{value:": Boolean",paraId:7,tocIndex:4},{value:"Default",paraId:7,tocIndex:4},{value:": true",paraId:7,tocIndex:4},{value:"Required",paraId:7,tocIndex:4},{value:": false",paraId:7,tocIndex:4},{value:"Description",paraId:7,tocIndex:4},{value:": Whether to layout clockwisely",paraId:7,tocIndex:4},{value:"Type",paraId:8,tocIndex:5},{value:": Number",paraId:8,tocIndex:5},{value:"Default",paraId:8,tocIndex:5},{value:": 1",paraId:8,tocIndex:5},{value:"Required",paraId:8,tocIndex:5},{value:": false",paraId:8,tocIndex:5},{value:"Description",paraId:8,tocIndex:5},{value:": The division number of the nodes on the circle. Takes effect when ",paraId:8,tocIndex:5},{value:"endRadius - startRadius !== 0",paraId:8,tocIndex:5},{value:"Type",paraId:9,tocIndex:6},{value:": String",paraId:9,tocIndex:6},{value:"Default",paraId:9,tocIndex:6},{value:": false",paraId:9,tocIndex:6},{value:"Options",paraId:9,tocIndex:6},{value:": null | 'topology' | 'degree'",paraId:9,tocIndex:6},{value:"Required",paraId:9,tocIndex:6},{value:": false",paraId:9,tocIndex:6},{value:"Description",paraId:9,tocIndex:6},{value:": The ordering method for nodes. ",paraId:9,tocIndex:6},{value:"null",paraId:9,tocIndex:6},{value:" by default, which means the nodes are arranged in data order. 'topology' means in topology order; 'degree' means in degree order.",paraId:9,tocIndex:6},{value:"Type",paraId:10,tocIndex:7},{value:": Number",paraId:10,tocIndex:7},{value:"Default",paraId:10,tocIndex:7},{value:": 1",paraId:10,tocIndex:7},{value:"Required",paraId:10,tocIndex:7},{value:": false",paraId:10,tocIndex:7},{value:"Description",paraId:10,tocIndex:7},{value:": How many 2*PIs Between the first node and the last node",paraId:10,tocIndex:7},{value:"Type",paraId:11,tocIndex:8},{value:": Boolean",paraId:11,tocIndex:8},{value:"Default",paraId:11,tocIndex:8},{value:": false",paraId:11,tocIndex:8},{value:"Required",paraId:11,tocIndex:8},{value:": false",paraId:11,tocIndex:8},{value:"Description",paraId:11,tocIndex:8},{value:": Whether to enable the web-worker in case layout calculation takes too long to block page interaction.\n",paraId:11,tocIndex:8},{value:"⚠️ Notice:",paraId:11,tocIndex:8},{value:" When ",paraId:11,tocIndex:8},{value:"workerEnabled: true",paraId:11,tocIndex:8},{value:", all the function type parameters are not supported.",paraId:11,tocIndex:8}]},47318:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"It is a new feature of V4.6.",paraId:0},{value:" ComboCombined supports configuring layout method for items inside a combo and layout method for the outer combo and nodes. By default, the inner layout is Concentric layout, and the outer layout is Gforce. When you assigning inner layout by yourself, please use the sync layout methods, such as Circular, Concentric, Grid, Dagre, MDS, Radial, or any custom sync layout. You can also assign custom layout method for the outer layout.",paraId:0},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 1000,\n  height: 600,\n  groupByTypes: false, // If you want to have a combo graph with reasonable visual levels of nodes, edges, and combo, set groupByTypes to false\n  layout: {\n    type: 'comboCombined',\n    center: [ 200, 200 ],     // The center of the graph by default\n    onLayoutEnd: () => {\n      console.log('combo force layout done');\n    }\n  }\n);\n",paraId:1},{value:"Type",paraId:2,tocIndex:0},{value:": Array",paraId:2,tocIndex:0},{value:"Example",paraId:2,tocIndex:0},{value:": [ 0, 0 ]",paraId:2,tocIndex:0},{value:"Default",paraId:2,tocIndex:0},{value:": The center of the graph",paraId:2,tocIndex:0},{value:"Required",paraId:2,tocIndex:0},{value:": false",paraId:2,tocIndex:0},{value:"Description",paraId:2,tocIndex:0},{value:": The center of the layout",paraId:2,tocIndex:0},{value:"Type",paraId:3,tocIndex:1},{value:": Number",paraId:3,tocIndex:1},{value:"Default",paraId:3,tocIndex:1},{value:": 10",paraId:3,tocIndex:1},{value:"Required",paraId:3,tocIndex:1},{value:": false",paraId:3,tocIndex:1},{value:"Description",paraId:3,tocIndex:1},{value:": The diameter of the node. It is used for preventing node overlappings. If ",paraId:3,tocIndex:1},{value:"nodeSize",paraId:3,tocIndex:1},{value:" is not assigned, the size property in node data will take effect. If the size in node data does not exist either, ",paraId:3,tocIndex:1},{value:"nodeSize",paraId:3,tocIndex:1},{value:" is assigned to 10 by default",paraId:3,tocIndex:1},{value:"Type",paraId:4,tocIndex:2},{value:": Number / Function ",paraId:4,tocIndex:2},{value:"Default",paraId:4,tocIndex:2},{value:": 0 ",paraId:4,tocIndex:2},{value:"Required",paraId:4,tocIndex:2},{value:": false ",paraId:4,tocIndex:2},{value:"Example",paraId:4,tocIndex:2},{value:": Example 1: 10 ",paraId:4,tocIndex:2},{value:"Example 2:",paraId:4,tocIndex:2},{value:"(d) => {\n  // d is a node\n  if (d.id === 'node1') {\n    return 100;\n  }\n  return 10;\n};\n",paraId:5,tocIndex:2},{value:"Description",paraId:6,tocIndex:2},{value:": Takes effect when ",paraId:6,tocIndex:2},{value:"preventNodeOverlap",paraId:6,tocIndex:2},{value:" or ",paraId:6,tocIndex:2},{value:"preventOverlap",paraId:6,tocIndex:2},{value:" is ",paraId:6,tocIndex:2},{value:"true",paraId:6,tocIndex:2},{value:". It is the minimum distance between nodes/combos to prevent node/combo overlappings. It can be a function to define different distances for different nodes (example 2)",paraId:6,tocIndex:2},{value:"Type",paraId:7,tocIndex:3},{value:": Number / Function ",paraId:7,tocIndex:3},{value:"Default",paraId:7,tocIndex:3},{value:": 10 ",paraId:7,tocIndex:3},{value:"Required",paraId:7,tocIndex:3},{value:": false ",paraId:7,tocIndex:3},{value:"Example",paraId:7,tocIndex:3},{value:": Example 1: 10 ",paraId:7,tocIndex:3},{value:"Example 2:",paraId:7,tocIndex:3},{value:"(d) => {\n  // d is a combo\n  if (d.id === 'combo1') {\n    return 100;\n  }\n  return 10;\n};\n",paraId:8,tocIndex:3},{value:"outerLayout: new G6.Layout['gForce']({\n  ... // the parameters for the gForce layout\n});\n",paraId:9,tocIndex:4},{value:"Type",paraId:10,tocIndex:4},{value:": Object",paraId:10,tocIndex:4},{value:"Default",paraId:10,tocIndex:4},{value:": GForce Instance",paraId:10,tocIndex:4},{value:"Required",paraId:10,tocIndex:4},{value:": false",paraId:10,tocIndex:4},{value:"Description",paraId:10,tocIndex:4},{value:": The outer layout instance. Refer to the corresponding layout docs. The default configuration of the ",paraId:10,tocIndex:4},{value:"outerLayout",paraId:10,tocIndex:4},{value:" is:",paraId:10,tocIndex:4},{value:"outerLayout: new G6.Layout['gForce']({\n  gravity: 1,\n  factor: 2,\n  linkDistance: (edge: any, source: any, target: any) => {\n    const nodeSize = ((source.size?.[0] || 30) + (target.size?.[0] || 30)) / 2;\n    return Math.min(nodeSize * 1.5, 700);\n  }\n});\n",paraId:11,tocIndex:4},{value:"innerLayout: new G6.Layout['grid']({\n  ... // the parameters for the grid layout\n});\n",paraId:12,tocIndex:5},{value:"Type",paraId:13,tocIndex:5},{value:":Object",paraId:13,tocIndex:5},{value:"Default",paraId:13,tocIndex:5},{value:":Concentric Instance",paraId:13,tocIndex:5},{value:"Required",paraId:13,tocIndex:5},{value:":false",paraId:13,tocIndex:5},{value:"Description",paraId:13,tocIndex:5},{value:": The layout method for the items inside a combo, should be a sync layout method. Refer to the corresponding layout docs. The default configuration of the ",paraId:13,tocIndex:5},{value:"outerLayout",paraId:13,tocIndex:5},{value:" is:",paraId:13,tocIndex:5},{value:"outerLayout: new G6.Layout['concentric']({\n  sortBy: 'id'\n});\n",paraId:14,tocIndex:5},{value:"Description",paraId:15,tocIndex:5},{value:": The padding value inside each combo. It is not about rendering, only used for force calculation",paraId:15,tocIndex:5},{value:"Type",paraId:16,tocIndex:6},{value:": Boolean",paraId:16,tocIndex:6},{value:"Default",paraId:16,tocIndex:6},{value:": false",paraId:16,tocIndex:6},{value:"Required",paraId:16,tocIndex:6},{value:": false",paraId:16,tocIndex:6},{value:"Description",paraId:16,tocIndex:6},{value:": Whether to enable the web-worker in case layout calculation takes too long to block page interaction.\n",paraId:16,tocIndex:6},{value:"⚠️ Notice:",paraId:16,tocIndex:6},{value:" When ",paraId:16,tocIndex:6},{value:"workerEnabled: true",paraId:16,tocIndex:6},{value:", all the function type parameters are not supported.",paraId:16,tocIndex:6}]},73183:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"It is a new feature of V3.5.",paraId:0},{value:" Combo Force is designed for the graph with combos based on classical force directed layout algorith. It modifies the forces between nodes according to their combo infomation to achieve a final result with clustering nodes inside each combo and no overlappings.",paraId:0},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 1000,\n  height: 600,\n  groupByTypes: false, // If you want to have a combo graph with reasonable visual levels of nodes, edges, and combo, set groupByTypes to false\n  layout: {\n    type: 'comboForce',\n    center: [ 200, 200 ],     // The center of the graph by default\n    linkDistance: 50,         // Edge length\n    nodeStrength: 30,\n    edgeStrength: 0.1,\n    onTick: () => {\n      console.log('ticking');\n    },\n    onLayoutEnd: () => {\n      console.log('combo force layout done');\n    }\n  }\n);\n",paraId:1},{value:"Type",paraId:2,tocIndex:0},{value:": Array",paraId:2,tocIndex:0},{value:"Example",paraId:2,tocIndex:0},{value:": [ 0, 0 ]",paraId:2,tocIndex:0},{value:"Default",paraId:2,tocIndex:0},{value:": The center of the graph",paraId:2,tocIndex:0},{value:"Required",paraId:2,tocIndex:0},{value:": false",paraId:2,tocIndex:0},{value:"Description",paraId:2,tocIndex:0},{value:": The center of the layout",paraId:2,tocIndex:0},{value:"Type",paraId:3,tocIndex:1},{value:": Number",paraId:3,tocIndex:1},{value:"Example",paraId:3,tocIndex:1},{value:": 100",paraId:3,tocIndex:1},{value:"Default",paraId:3,tocIndex:1},{value:": 100",paraId:3,tocIndex:1},{value:"Required",paraId:3,tocIndex:1},{value:": false",paraId:3,tocIndex:1},{value:"Description",paraId:3,tocIndex:1},{value:": The max number of the interations",paraId:3,tocIndex:1},{value:"Type",paraId:4,tocIndex:2},{value:": Number / Function",paraId:4,tocIndex:2},{value:"Default",paraId:4,tocIndex:2},{value:": 10",paraId:4,tocIndex:2},{value:"Required",paraId:4,tocIndex:2},{value:": false",paraId:4,tocIndex:2},{value:"Description",paraId:4,tocIndex:2},{value:": The edge length",paraId:4,tocIndex:2},{value:"Type",paraId:5,tocIndex:3},{value:": Number / Function",paraId:5,tocIndex:3},{value:"Default",paraId:5,tocIndex:3},{value:": 30",paraId:5,tocIndex:3},{value:"Required",paraId:5,tocIndex:3},{value:": false",paraId:5,tocIndex:3},{value:"Description",paraId:5,tocIndex:3},{value:": The strength of node force",paraId:5,tocIndex:3},{value:"Type",paraId:6,tocIndex:4},{value:": Number / Function",paraId:6,tocIndex:4},{value:"Default",paraId:6,tocIndex:4},{value:": 0.2",paraId:6,tocIndex:4},{value:"Required",paraId:6,tocIndex:4},{value:": false",paraId:6,tocIndex:4},{value:"Description",paraId:6,tocIndex:4},{value:": The strength of edge force",paraId:6,tocIndex:4},{value:"Type",paraId:7,tocIndex:5},{value:": Number",paraId:7,tocIndex:5},{value:"Default",paraId:7,tocIndex:5},{value:": false",paraId:7,tocIndex:5},{value:"Required",paraId:7,tocIndex:5},{value:": false",paraId:7,tocIndex:5},{value:"Description",paraId:7,tocIndex:5},{value:": Whether to prevent node overlappings and combo overlappings. If it is assign ",paraId:7,tocIndex:5},{value:"true",paraId:7,tocIndex:5},{value:", ",paraId:7,tocIndex:5},{value:"preventNodeOverlap",paraId:7,tocIndex:5},{value:" and ",paraId:7,tocIndex:5},{value:"preventComboOverlap",paraId:7,tocIndex:5},{value:" will be set to ",paraId:7,tocIndex:5},{value:"true",paraId:7,tocIndex:5},{value:". See the API of ",paraId:7,tocIndex:5},{value:"preventNodeOverlap",paraId:7,tocIndex:5},{value:" and ",paraId:7,tocIndex:5},{value:"preventComboOverlap",paraId:7,tocIndex:5},{value:" for more detail",paraId:7,tocIndex:5},{value:"Type",paraId:8,tocIndex:6},{value:": Number",paraId:8,tocIndex:6},{value:"Default",paraId:8,tocIndex:6},{value:": true",paraId:8,tocIndex:6},{value:"Required",paraId:8,tocIndex:6},{value:": false",paraId:8,tocIndex:6},{value:"Description",paraId:8,tocIndex:6},{value:": Whether to prevent node overlappings. To activate preventing node overlappings, ",paraId:8,tocIndex:6},{value:"nodeSize",paraId:8,tocIndex:6},{value:" is required, which is used for collide detection. The size in the node data will take effect if ",paraId:8,tocIndex:6},{value:"nodeSize",paraId:8,tocIndex:6},{value:" is not assigned",paraId:8,tocIndex:6},{value:"Type",paraId:9,tocIndex:7},{value:": Number",paraId:9,tocIndex:7},{value:"Default",paraId:9,tocIndex:7},{value:": true",paraId:9,tocIndex:7},{value:"Required",paraId:9,tocIndex:7},{value:": false",paraId:9,tocIndex:7},{value:"Description",paraId:9,tocIndex:7},{value:": Whether to prevent combo overlappings",paraId:9,tocIndex:7},{value:"Type",paraId:10,tocIndex:8},{value:": Number",paraId:10,tocIndex:8},{value:"Default",paraId:10,tocIndex:8},{value:": undefined",paraId:10,tocIndex:8},{value:"Required",paraId:10,tocIndex:8},{value:": false",paraId:10,tocIndex:8},{value:"Description",paraId:10,tocIndex:8},{value:": The unified strength of force for preventing node overlappings and combo overlappings. The range is [0, 1]. If it is not undefined, the ",paraId:10,tocIndex:8},{value:"nodeCollideStrength",paraId:10,tocIndex:8},{value:" and ",paraId:10,tocIndex:8},{value:"comboCollideStrength",paraId:10,tocIndex:8},{value:" will be set to the same value",paraId:10,tocIndex:8},{value:"Type",paraId:11,tocIndex:9},{value:": Number",paraId:11,tocIndex:9},{value:"Default",paraId:11,tocIndex:9},{value:": 0.5",paraId:11,tocIndex:9},{value:"Required",paraId:11,tocIndex:9},{value:": false",paraId:11,tocIndex:9},{value:"Description",paraId:11,tocIndex:9},{value:": The strength of force for preventing node overlappings. The range is [0, 1]",paraId:11,tocIndex:9},{value:"Type",paraId:12,tocIndex:10},{value:": Number",paraId:12,tocIndex:10},{value:"Default",paraId:12,tocIndex:10},{value:": 0.5",paraId:12,tocIndex:10},{value:"Required",paraId:12,tocIndex:10},{value:": false",paraId:12,tocIndex:10},{value:"Description",paraId:12,tocIndex:10},{value:": The strength of force for preventing combo overlappings. The range is [0, 1]",paraId:12,tocIndex:10},{value:"Type",paraId:13,tocIndex:11},{value:": Number",paraId:13,tocIndex:11},{value:"Default",paraId:13,tocIndex:11},{value:": 10",paraId:13,tocIndex:11},{value:"Required",paraId:13,tocIndex:11},{value:": false",paraId:13,tocIndex:11},{value:"Description",paraId:13,tocIndex:11},{value:": The diameter of the node. It is used for preventing node overlappings. If ",paraId:13,tocIndex:11},{value:"nodeSize",paraId:13,tocIndex:11},{value:" is not assigned, the size property in node data will take effect. If the size in node data does not exist either, ",paraId:13,tocIndex:11},{value:"nodeSize",paraId:13,tocIndex:11},{value:" is assigned to 10 by default",paraId:13,tocIndex:11},{value:"Type",paraId:14,tocIndex:12},{value:": Number / Function ",paraId:14,tocIndex:12},{value:"Default",paraId:14,tocIndex:12},{value:": 0 ",paraId:14,tocIndex:12},{value:"Required",paraId:14,tocIndex:12},{value:": false ",paraId:14,tocIndex:12},{value:"Example",paraId:14,tocIndex:12},{value:": Example 1: 10 ",paraId:14,tocIndex:12},{value:"Example 2:",paraId:14,tocIndex:12},{value:"(d) => {\n  // d is a node\n  if (d.id === 'node1') {\n    return 100;\n  }\n  return 10;\n};\n",paraId:15,tocIndex:12},{value:"Description",paraId:16,tocIndex:12},{value:": Takes effect when ",paraId:16,tocIndex:12},{value:"preventNodeOverlap",paraId:16,tocIndex:12},{value:" or ",paraId:16,tocIndex:12},{value:"preventOverlap",paraId:16,tocIndex:12},{value:" is ",paraId:16,tocIndex:12},{value:"true",paraId:16,tocIndex:12},{value:". It is the minimum distance between nodes to prevent node overlappings. It can be a function to define different distances for different nodes (example 2)",paraId:16,tocIndex:12},{value:"Type",paraId:17,tocIndex:13},{value:": Number / Function ",paraId:17,tocIndex:13},{value:"Default",paraId:17,tocIndex:13},{value:": 0 ",paraId:17,tocIndex:13},{value:"Required",paraId:17,tocIndex:13},{value:": false ",paraId:17,tocIndex:13},{value:"Example",paraId:17,tocIndex:13},{value:": Example 1: 10 ",paraId:17,tocIndex:13},{value:"Example 2:",paraId:17,tocIndex:13},{value:"(d) => {\n  // d is a combo\n  if (d.id === 'combo1') {\n    return 100;\n  }\n  return 10;\n};\n",paraId:18,tocIndex:13},{value:"Description",paraId:19,tocIndex:13},{value:": Takes effect when ",paraId:19,tocIndex:13},{value:"preventComboOverlap",paraId:19,tocIndex:13},{value:" or ",paraId:19,tocIndex:13},{value:"preventOverlap",paraId:19,tocIndex:13},{value:" is ",paraId:19,tocIndex:13},{value:"true",paraId:19,tocIndex:13},{value:". It is the minimum distance between combos to prevent combo overlappings. It can be a function to define different distances for different combos (example 2)",paraId:19,tocIndex:13},{value:"Type",paraId:20,tocIndex:14},{value:": Number / Function ",paraId:20,tocIndex:14},{value:"Default",paraId:20,tocIndex:14},{value:": 10 ",paraId:20,tocIndex:14},{value:"Required",paraId:20,tocIndex:14},{value:": false ",paraId:20,tocIndex:14},{value:"Example",paraId:20,tocIndex:14},{value:": Example 1: 10 ",paraId:20,tocIndex:14},{value:"Example 2:",paraId:20,tocIndex:14},{value:"(d) => {\n  // d is a combo\n  if (d.id === 'combo1') {\n    return 100;\n  }\n  return 10;\n};\n",paraId:21,tocIndex:14},{value:"Description",paraId:22,tocIndex:14},{value:": The padding value inside each combo. It is not about rendering, only used for force calculation",paraId:22,tocIndex:14},{value:"Type",paraId:23,tocIndex:15},{value:": Number",paraId:23,tocIndex:15},{value:"Default",paraId:23,tocIndex:15},{value:": 1",paraId:23,tocIndex:15},{value:"Required",paraId:23,tocIndex:15},{value:": false",paraId:23,tocIndex:15},{value:"Description",paraId:23,tocIndex:15},{value:": The current alpha of convergence",paraId:23,tocIndex:15},{value:"Type",paraId:24,tocIndex:16},{value:": Number",paraId:24,tocIndex:16},{value:"Default",paraId:24,tocIndex:16},{value:": 0.028",paraId:24,tocIndex:16},{value:"Required",paraId:24,tocIndex:16},{value:": false",paraId:24,tocIndex:16},{value:"Description",paraId:24,tocIndex:16},{value:": The decay ratio of alpha for convergence. The range is [0, 1]. 0.028 corresponds to 300 iterations",paraId:24,tocIndex:16},{value:"Type",paraId:25,tocIndex:17},{value:": Number",paraId:25,tocIndex:17},{value:"Default",paraId:25,tocIndex:17},{value:": 0.001",paraId:25,tocIndex:17},{value:"Required",paraId:25,tocIndex:17},{value:": false",paraId:25,tocIndex:17},{value:"Description",paraId:25,tocIndex:17},{value:": The threshold to stop the iteration",paraId:25,tocIndex:17},{value:"Type",paraId:26,tocIndex:18},{value:": Function",paraId:26,tocIndex:18},{value:"Default",paraId:26,tocIndex:18},{value:": {}",paraId:26,tocIndex:18},{value:"Required",paraId:26,tocIndex:18},{value:": false",paraId:26,tocIndex:18},{value:"Description",paraId:26,tocIndex:18},{value:": The callback function of each iteration",paraId:26,tocIndex:18},{value:"Type",paraId:27,tocIndex:19},{value:": Function",paraId:27,tocIndex:19},{value:"Default",paraId:27,tocIndex:19},{value:": {}",paraId:27,tocIndex:19},{value:"Required",paraId:27,tocIndex:19},{value:": false",paraId:27,tocIndex:19},{value:"Description",paraId:27,tocIndex:19},{value:": The callback function after layout",paraId:27,tocIndex:19},{value:"Type",paraId:28,tocIndex:20},{value:": Number",paraId:28,tocIndex:20},{value:"Default",paraId:28,tocIndex:20},{value:": 10",paraId:28,tocIndex:20},{value:"Required",paraId:28,tocIndex:20},{value:": false",paraId:28,tocIndex:20},{value:"Description",paraId:28,tocIndex:20},{value:": The gravity, which will affect the compactness of the layout",paraId:28,tocIndex:20},{value:"Type",paraId:29,tocIndex:21},{value:": Number",paraId:29,tocIndex:21},{value:"Default",paraId:29,tocIndex:21},{value:": 30",paraId:29,tocIndex:21},{value:"Required",paraId:29,tocIndex:21},{value:": false",paraId:29,tocIndex:21},{value:"Description",paraId:29,tocIndex:21},{value:": The gravity of each combo, which will affect the compactness of each combo",paraId:29,tocIndex:21},{value:"Type",paraId:30,tocIndex:22},{value:": Number",paraId:30,tocIndex:22},{value:"Default",paraId:30,tocIndex:22},{value:": 1",paraId:30,tocIndex:22},{value:"Required",paraId:30,tocIndex:22},{value:": false",paraId:30,tocIndex:22},{value:"Description",paraId:30,tocIndex:22},{value:": When the distance between two nodes is larger than ",paraId:30,tocIndex:22},{value:"optimizeRangeFactor * width",paraId:30,tocIndex:22},{value:", the forces between them will not be calculated any more. A proper value for ",paraId:30,tocIndex:22},{value:"optimizeRangeFactor",paraId:30,tocIndex:22},{value:" will lead to less calculation to optimize the performance of the layout",paraId:30,tocIndex:22},{value:"Type",paraId:31,tocIndex:23},{value:": Number",paraId:31,tocIndex:23},{value:"Default",paraId:31,tocIndex:23},{value:": 0.5",paraId:31,tocIndex:23},{value:"Required",paraId:31,tocIndex:23},{value:": false",paraId:31,tocIndex:23},{value:"Description",paraId:31,tocIndex:23},{value:": The scale for adjusting the strength of attractive force between nodes with different depths. The range is [0, 1]. Lager the depth difference, smaller the attractive force strength",paraId:31,tocIndex:23},{value:"Type",paraId:32,tocIndex:24},{value:": Number",paraId:32,tocIndex:24},{value:"Default",paraId:32,tocIndex:24},{value:": 2",paraId:32,tocIndex:24},{value:"Required",paraId:32,tocIndex:24},{value:": false",paraId:32,tocIndex:24},{value:"Description",paraId:32,tocIndex:24},{value:": The scale for adjusting the strength of repulsive force between nodes with different depths. The range is [1, Infinity]. Lager the depth difference, larger the attractive force strength",paraId:32,tocIndex:24},{value:"Type",paraId:33,tocIndex:25},{value:": Number",paraId:33,tocIndex:25},{value:"Default",paraId:33,tocIndex:25},{value:": 0.6",paraId:33,tocIndex:25},{value:"Required",paraId:33,tocIndex:25},{value:": false",paraId:33,tocIndex:25},{value:"Description",paraId:33,tocIndex:25},{value:": The decay speed of the moving velocity of nodes",paraId:33,tocIndex:25},{value:"Type",paraId:34,tocIndex:26},{value:": Boolean",paraId:34,tocIndex:26},{value:"Default",paraId:34,tocIndex:26},{value:": false",paraId:34,tocIndex:26},{value:"Required",paraId:34,tocIndex:26},{value:": false",paraId:34,tocIndex:26},{value:"Description",paraId:34,tocIndex:26},{value:": Whether to enable the web-worker in case layout calculation takes too long to block page interaction.\n",paraId:34,tocIndex:26},{value:"⚠️ Notice:",paraId:34,tocIndex:26},{value:" When ",paraId:34,tocIndex:26},{value:"workerEnabled: true",paraId:34,tocIndex:26},{value:", all the function type parameters are not supported.",paraId:34,tocIndex:26}]},63899:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Concentric arranges the nodes on several concentric circles. By tuning the parameters, users could order the nodes according to some property of node data, degree by default. Larger the value, more center the node will be placed.",paraId:0},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 1000,\n  height: 600,\n  layout: {\n    type: 'concentric',\n    center: [200, 200], // The center of the graph by default\n    linkDistance: 50, // The edge length\n    preventOverlap: true, // nodeSize or size in data is required for preventOverlap: true\n    nodeSize: 30,\n    sweep: 10,\n    equidistant: false,\n    startAngle: 0,\n    clockwise: false,\n    maxLevelDiff: 10,\n    sortBy: 'degree',\n    workerEnabled: true, // Whether to activate web-worker\n  },\n});\n",paraId:1},{value:"Type",paraId:2,tocIndex:0},{value:": Array",paraId:2,tocIndex:0},{value:"Example",paraId:2,tocIndex:0},{value:": [ 0, 0 ]",paraId:2,tocIndex:0},{value:"Default",paraId:2,tocIndex:0},{value:": The center of the graph",paraId:2,tocIndex:0},{value:"Required",paraId:2,tocIndex:0},{value:": false",paraId:2,tocIndex:0},{value:"Description",paraId:2,tocIndex:0},{value:": The center of the layout",paraId:2,tocIndex:0},{value:"Type",paraId:3,tocIndex:1},{value:": Boolean",paraId:3,tocIndex:1},{value:"Default",paraId:3,tocIndex:1},{value:": false",paraId:3,tocIndex:1},{value:"Required",paraId:3,tocIndex:1},{value:": false",paraId:3,tocIndex:1},{value:"Description",paraId:3,tocIndex:1},{value:": Whether to prevent node overlappings. To activate preventing node overlappings, ",paraId:3,tocIndex:1},{value:"nodeSize",paraId:3,tocIndex:1},{value:" is required, which is used for collide detection. The size in the node data will take effect if ",paraId:3,tocIndex:1},{value:"nodeSize",paraId:3,tocIndex:1},{value:" is not assigned. If the size in node data does not exist either, ",paraId:3,tocIndex:1},{value:"nodeSize",paraId:3,tocIndex:1},{value:" is assigned to 30 by default",paraId:3,tocIndex:1},{value:"Type",paraId:4,tocIndex:2},{value:": Number",paraId:4,tocIndex:2},{value:"Default",paraId:4,tocIndex:2},{value:": 30",paraId:4,tocIndex:2},{value:"Required",paraId:4,tocIndex:2},{value:": false",paraId:4,tocIndex:2},{value:"Description",paraId:4,tocIndex:2},{value:": The diameter of the node. It is used for preventing node overlappings",paraId:4,tocIndex:2},{value:"Type",paraId:5,tocIndex:3},{value:": Number",paraId:5,tocIndex:3},{value:"Default",paraId:5,tocIndex:3},{value:": 10",paraId:5,tocIndex:3},{value:"Required",paraId:5,tocIndex:3},{value:": false",paraId:5,tocIndex:3},{value:"Description",paraId:5,tocIndex:3},{value:": The minimum separation between adjacent circles",paraId:5,tocIndex:3},{value:"Type",paraId:6,tocIndex:4},{value:": Number",paraId:6,tocIndex:4},{value:"Default",paraId:6,tocIndex:4},{value:": undefined",paraId:6,tocIndex:4},{value:"Required",paraId:6,tocIndex:4},{value:": false",paraId:6,tocIndex:4},{value:"Description",paraId:6,tocIndex:4},{value:": How many radians should be between the first and last node (defaults to full circle). If it is undefined, 2 _ Math.PI _ (1 - 1 / |level.nodes|) will be used, where level.nodes is nodes set of each level, |level.nodes| is the number of nodes of the level",paraId:6,tocIndex:4},{value:"Type",paraId:7,tocIndex:5},{value:": Boolean",paraId:7,tocIndex:5},{value:"Default",paraId:7,tocIndex:5},{value:": false",paraId:7,tocIndex:5},{value:"Required",paraId:7,tocIndex:5},{value:": false",paraId:7,tocIndex:5},{value:"Description",paraId:7,tocIndex:5},{value:": Whether levels have an equal radial distance between them, may cause bounding box overflow",paraId:7,tocIndex:5},{value:"Type",paraId:8,tocIndex:6},{value:": Number",paraId:8,tocIndex:6},{value:"Default",paraId:8,tocIndex:6},{value:": 3 / 2 * Math.PI",paraId:8,tocIndex:6},{value:"Required",paraId:8,tocIndex:6},{value:": false",paraId:8,tocIndex:6},{value:"Description",paraId:8,tocIndex:6},{value:": Where nodes start in radians",paraId:8,tocIndex:6},{value:"Type",paraId:9,tocIndex:7},{value:": Boolean",paraId:9,tocIndex:7},{value:"Default",paraId:9,tocIndex:7},{value:": false",paraId:9,tocIndex:7},{value:"Required",paraId:9,tocIndex:7},{value:": false",paraId:9,tocIndex:7},{value:"Description",paraId:9,tocIndex:7},{value:": Place the nodes in clockwise or not",paraId:9,tocIndex:7},{value:"Type",paraId:10,tocIndex:8},{value:": Number",paraId:10,tocIndex:8},{value:"**默认值:**undefined",paraId:10,tocIndex:8},{value:"Required",paraId:10,tocIndex:8},{value:": false",paraId:10,tocIndex:8},{value:"Description",paraId:10,tocIndex:8},{value:": The sum of concentric values in each level. If it is undefined, maxValue / 4 will take place, where maxValue is the max value of ordering properties. For example, if ",paraId:10,tocIndex:8},{value:"sortBy",paraId:10,tocIndex:8},{value:" is ",paraId:10,tocIndex:8},{value:"'degree'",paraId:10,tocIndex:8},{value:", maxValue is the max degree value of all the nodes",paraId:10,tocIndex:8},{value:"Type",paraId:11,tocIndex:9},{value:": String",paraId:11,tocIndex:9},{value:"Default",paraId:11,tocIndex:9},{value:": undefined",paraId:11,tocIndex:9},{value:"Required",paraId:11,tocIndex:9},{value:": false",paraId:11,tocIndex:9},{value:"Description",paraId:11,tocIndex:9},{value:": Order the nodes according to this parameter. It is the property's name of node. The node with higher value will be placed to the center. If it is undefined, the algorithm will order the nodes by their degree",paraId:11,tocIndex:9},{value:"Type",paraId:12,tocIndex:10},{value:": Boolean",paraId:12,tocIndex:10},{value:"Default",paraId:12,tocIndex:10},{value:": false",paraId:12,tocIndex:10},{value:"Required",paraId:12,tocIndex:10},{value:": false",paraId:12,tocIndex:10},{value:"Description",paraId:12,tocIndex:10},{value:": Whether to enable the web-worker in case layout calculation takes too long to block page interaction.\n",paraId:12,tocIndex:10},{value:"⚠️ Notice:",paraId:12,tocIndex:10},{value:" When ",paraId:12,tocIndex:10},{value:"workerEnabled: true",paraId:12,tocIndex:10},{value:", all the function type parameters are not supported.",paraId:12,tocIndex:10}]},49319:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Dagre is an hierarchical layout.",paraId:0},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 1000,\n  height: 600,\n  layout: {\n    type: 'dagre',\n    rankdir: 'LR', // The center of the graph by default\n    align: 'DL',\n    nodesep: 20,\n    ranksep: 50,\n    controlPoints: true,\n  },\n});\n",paraId:1},{value:"Supported by G6 v4.5.1",paraId:2,tocIndex:0},{value:"Type",paraId:3,tocIndex:0},{value:": Array",paraId:3,tocIndex:0},{value:"Default",paraId:3,tocIndex:0},{value:": undefined",paraId:3,tocIndex:0},{value:"Required",paraId:3,tocIndex:0},{value:": false",paraId:3,tocIndex:0},{value:"Description",paraId:3,tocIndex:0},{value:": The position for the left-top of the layout.",paraId:3,tocIndex:0},{value:"Type",paraId:4,tocIndex:1},{value:": String",paraId:4,tocIndex:1},{value:"Options",paraId:4,tocIndex:1},{value:": 'TB' | 'BT' | 'LR' | 'RL'",paraId:4,tocIndex:1},{value:"Default",paraId:4,tocIndex:1},{value:": 'TB'",paraId:4,tocIndex:1},{value:"Required",paraId:4,tocIndex:1},{value:": false",paraId:4,tocIndex:1},{value:"Description",paraId:4,tocIndex:1},{value:": The layout direction. T:top; B:bottom; L:left; R:right.",paraId:4,tocIndex:1},{value:"'TB':Layout the graph from the top to the bottom;",paraId:5,tocIndex:1},{value:"'BT':Layout the graph from the bottom to the top;",paraId:5,tocIndex:1},{value:"'LR':Layout the graph from the top left the right;",paraId:5,tocIndex:1},{value:"'RL':Layout the graph from the top right the left.",paraId:5,tocIndex:1},{value:"Type",paraId:6,tocIndex:2},{value:": String",paraId:6,tocIndex:2},{value:"Options",paraId:6,tocIndex:2},{value:": 'UL' | 'UR' | 'DL' | 'DR' | undefined",paraId:6,tocIndex:2},{value:"Default",paraId:6,tocIndex:2},{value:": 'UL'",paraId:6,tocIndex:2},{value:"Required",paraId:6,tocIndex:2},{value:": false",paraId:6,tocIndex:2},{value:"Description",paraId:6,tocIndex:2},{value:": The alignment of the nodes. U: upper; D: down; L: left; R: right",paraId:6,tocIndex:2},{value:"'UL': aligns the nodes to the upper left;",paraId:7,tocIndex:2},{value:"'UR': aligns the nodes to the upper right;",paraId:7,tocIndex:2},{value:"'DL': aligns the nodes to the down left;",paraId:7,tocIndex:2},{value:"'DR': aligns the nodes to the upper right;",paraId:7,tocIndex:2},{value:"undefined: default value, align to the center.",paraId:7,tocIndex:2},{value:"Type",paraId:8,tocIndex:3},{value:": Number",paraId:8,tocIndex:3},{value:"Default",paraId:8,tocIndex:3},{value:": 50",paraId:8,tocIndex:3},{value:"Required",paraId:8,tocIndex:3},{value:": false",paraId:8,tocIndex:3},{value:"Description",paraId:8,tocIndex:3},{value:": The separation between nodes with unit px. When ",paraId:8,tocIndex:3},{value:"rankdir",paraId:8,tocIndex:3},{value:" is ",paraId:8,tocIndex:3},{value:"'TB'",paraId:8,tocIndex:3},{value:" or ",paraId:8,tocIndex:3},{value:"'BT'",paraId:8,tocIndex:3},{value:", ",paraId:8,tocIndex:3},{value:"nodesep",paraId:8,tocIndex:3},{value:" represents the horizontal separations between nodes; When ",paraId:8,tocIndex:3},{value:"rankdir",paraId:8,tocIndex:3},{value:" is ",paraId:8,tocIndex:3},{value:"'LR'",paraId:8,tocIndex:3},{value:" or ",paraId:8,tocIndex:3},{value:"'RL'",paraId:8,tocIndex:3},{value:", ",paraId:8,tocIndex:3},{value:"nodesep",paraId:8,tocIndex:3},{value:" represents the vertical separations between nodes",paraId:8,tocIndex:3},{value:"Type",paraId:9,tocIndex:4},{value:": Number",paraId:9,tocIndex:4},{value:"Default",paraId:9,tocIndex:4},{value:": 50",paraId:9,tocIndex:4},{value:"Required",paraId:9,tocIndex:4},{value:": false",paraId:9,tocIndex:4},{value:"Description",paraId:9,tocIndex:4},{value:": The separations between adjacent levels with unit px. When ",paraId:9,tocIndex:4},{value:"rankdir",paraId:9,tocIndex:4},{value:" is ",paraId:9,tocIndex:4},{value:"'TB'",paraId:9,tocIndex:4},{value:" or ",paraId:9,tocIndex:4},{value:"'BT'",paraId:9,tocIndex:4},{value:", ",paraId:9,tocIndex:4},{value:"ranksep",paraId:9,tocIndex:4},{value:" represents the vertical separations between adjacent levels; when ",paraId:9,tocIndex:4},{value:"rankdir",paraId:9,tocIndex:4},{value:" is ",paraId:9,tocIndex:4},{value:"'LR'",paraId:9,tocIndex:4},{value:" or ",paraId:9,tocIndex:4},{value:"'RL'",paraId:9,tocIndex:4},{value:", ",paraId:9,tocIndex:4},{value:"rankdir",paraId:9,tocIndex:4},{value:" represents the horizontal separations between adjacent levels",paraId:9,tocIndex:4},{value:"Type",paraId:10,tocIndex:5},{value:": Function",paraId:10,tocIndex:5},{value:"Default",paraId:10,tocIndex:5},{value:": undefined",paraId:10,tocIndex:5},{value:"Example",paraId:10,tocIndex:5},{value:":",paraId:10,tocIndex:5},{value:"(d) => {\n  // d is a node\n  if (d.id === 'testId') return 100;\n  return 10;\n};\n",paraId:11,tocIndex:5},{value:"Required",paraId:12,tocIndex:5},{value:": false",paraId:12,tocIndex:5},{value:"Description",paraId:12,tocIndex:5},{value:": The function for node separation with unit px. You can adjust the separations between different node pairs by using this function instead of ",paraId:12,tocIndex:5},{value:"nodesep",paraId:12,tocIndex:5},{value:". When ",paraId:12,tocIndex:5},{value:"rankdir",paraId:12,tocIndex:5},{value:" is ",paraId:12,tocIndex:5},{value:"'LR'",paraId:12,tocIndex:5},{value:" or ",paraId:12,tocIndex:5},{value:"'RL'",paraId:12,tocIndex:5},{value:", ",paraId:12,tocIndex:5},{value:"nodesep",paraId:12,tocIndex:5},{value:" represents the vertical separations between nodes. The priority of `` is higher than ",paraId:12,tocIndex:5},{value:"nodesep",paraId:12,tocIndex:5},{value:", which means if ",paraId:12,tocIndex:5},{value:"nodesepFunc",paraId:12,tocIndex:5},{value:" is assigned, the ",paraId:12,tocIndex:5},{value:"nodesep",paraId:12,tocIndex:5},{value:" will not take effect",paraId:12,tocIndex:5},{value:"Type",paraId:13,tocIndex:6},{value:": Function",paraId:13,tocIndex:6},{value:"Default",paraId:13,tocIndex:6},{value:": undefined",paraId:13,tocIndex:6},{value:"Example",paraId:13,tocIndex:6},{value:":",paraId:13,tocIndex:6},{value:"(d) => {\n  // d is a node\n  if (d.id === 'testId') return 100;\n  return 10;\n};\n",paraId:14,tocIndex:6},{value:"Required",paraId:15,tocIndex:6},{value:": false",paraId:15,tocIndex:6},{value:"Description",paraId:15,tocIndex:6},{value:": The function for level separation with unit px. You can adjust the separations between different adjacent levels by using this function instead of ",paraId:15,tocIndex:6},{value:"ranksep",paraId:15,tocIndex:6},{value:". When ",paraId:15,tocIndex:6},{value:"rankdir",paraId:15,tocIndex:6},{value:" is ",paraId:15,tocIndex:6},{value:"'TB'",paraId:15,tocIndex:6},{value:" or ",paraId:15,tocIndex:6},{value:"'BT'",paraId:15,tocIndex:6},{value:", ",paraId:15,tocIndex:6},{value:"ranksep",paraId:15,tocIndex:6},{value:" represents the vertical separations between adjacent levels; when ",paraId:15,tocIndex:6},{value:"rankdir",paraId:15,tocIndex:6},{value:" is ",paraId:15,tocIndex:6},{value:"'LR'",paraId:15,tocIndex:6},{value:" or ",paraId:15,tocIndex:6},{value:"'RL'",paraId:15,tocIndex:6},{value:", ",paraId:15,tocIndex:6},{value:"rankdir",paraId:15,tocIndex:6},{value:" represents the horizontal separations between adjacent levels. The priority of ",paraId:15,tocIndex:6},{value:"ranksepFunc",paraId:15,tocIndex:6},{value:" is higher than ",paraId:15,tocIndex:6},{value:"ranksep",paraId:15,tocIndex:6},{value:", which means if ",paraId:15,tocIndex:6},{value:"ranksepFunc",paraId:15,tocIndex:6},{value:" is assigned, the ",paraId:15,tocIndex:6},{value:"ranksep",paraId:15,tocIndex:6},{value:" will not take effect",paraId:15,tocIndex:6},{value:"Type",paraId:16,tocIndex:7},{value:": Boolean",paraId:16,tocIndex:7},{value:"Default",paraId:16,tocIndex:7},{value:": false",paraId:16,tocIndex:7},{value:"Required",paraId:16,tocIndex:7},{value:": false",paraId:16,tocIndex:7},{value:"Description",paraId:16,tocIndex:7},{value:": Whether to keep the control points of layout",paraId:16,tocIndex:7},{value:"Type",paraId:17,tocIndex:8},{value:": Boolean",paraId:17,tocIndex:8},{value:"Default",paraId:17,tocIndex:8},{value:": false",paraId:17,tocIndex:8},{value:"Required",paraId:17,tocIndex:8},{value:": false",paraId:17,tocIndex:8},{value:"Description",paraId:17,tocIndex:8},{value:": Whether to enable the web-worker in case layout calculation takes too long to block page interaction.\n",paraId:17,tocIndex:8},{value:"⚠️ Notice:",paraId:17,tocIndex:8},{value:" When ",paraId:17,tocIndex:8},{value:"workerEnabled: true",paraId:17,tocIndex:8},{value:", all the function type parameters are not supported.",paraId:17,tocIndex:8},{value:"Type",paraId:18,tocIndex:9},{value:": Boolean",paraId:18,tocIndex:9},{value:"Default",paraId:18,tocIndex:9},{value:": false",paraId:18,tocIndex:9},{value:"Required",paraId:18,tocIndex:9},{value:": false",paraId:18,tocIndex:9},{value:"Description",paraId:18,tocIndex:9},{value:": Whether to sort the nodes in a level according to the ",paraId:18,tocIndex:9},{value:"comboId",paraId:18,tocIndex:9},{value:" in their data. Enable ",paraId:18,tocIndex:9},{value:"sortByCombo",paraId:18,tocIndex:9},{value:" to avoid combo overlappings",paraId:18,tocIndex:9},{value:"Supported by G6 v4.5.0",paraId:19,tocIndex:10},{value:"Type",paraId:20,tocIndex:10},{value:": string[]",paraId:20,tocIndex:10},{value:"Default",paraId:20,tocIndex:10},{value:" undefined",paraId:20,tocIndex:10},{value:"Required",paraId:20,tocIndex:10},{value:": false",paraId:20,tocIndex:10},{value:"Description",paraId:20,tocIndex:10},{value:": The refered order array for the nodes in the same layer, stores the id values of each node. If it is not specified, the order of the nodes will be decided by the dagre algorithm.",paraId:20,tocIndex:10},{value:"Supported by G6 v4.5.0",paraId:21,tocIndex:11},{value:"Type",paraId:22,tocIndex:11},{value:":",paraId:22,tocIndex:11},{value:"{\n  nodes: {\n    x: number, // position\n    y: number, // position\n    layer?: number, // specify the layer for the node, 0-indexed\n    _order?: number // if the preset comes from last dagre layout, the _order will be generated to state the order of the nodes in one layer\n  }[]\n}\n",paraId:23,tocIndex:11},{value:"Default",paraId:24,tocIndex:11},{value:" undefined",paraId:24,tocIndex:11},{value:"Required",paraId:24,tocIndex:11},{value:": false",paraId:24,tocIndex:11},{value:"Description",paraId:24,tocIndex:11},{value:": The refered node positions and other infomations for layout computing. It is usually used to keep the consistancy for data changing, where you could specify it with the result data from last layout.",paraId:24,tocIndex:11},{value:"Supported by G6 v4.5.0",paraId:25,tocIndex:12},{value:"Configurate ",paraId:26,tocIndex:12},{value:"layer",paraId:26,tocIndex:12},{value:" (0-indexed) in the node data to specify the layout layer for it. Notice that the ",paraId:26,tocIndex:12},{value:"layer",paraId:26,tocIndex:12},{value:" SHOULD NOT violate DAG's properties (e.g. DO NOT assign a layer value for a target node greater or equal to cresponding source node.). The layout will be failed otherwise.",paraId:26,tocIndex:12}]},78290:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Force is the classical force-dicrected layout algorithm, which corresponds to force-directed layout in d3.js.",paraId:0},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 1000,\n  height: 600,\n  layout: {\n    type: 'force',\n    center: [200, 200], // The center of the graph by default\n    linkDistance: 50, // Edge length\n    nodeStrength: 30,\n    edgeStrength: 0.1,\n    collideStrength: 0.8,\n    nodeSize: 30,\n    alpha: 0.3,\n    alphaDecay: 0.028,\n    alphaMin: 0.01,\n    forceSimulation: null,\n    onTick: () => {\n      console.log('ticking');\n    },\n    onLayoutEnd: () => {\n      console.log('force layout done');\n    },\n  },\n});\n",paraId:1},{value:"If you want to fix the positions for some nodes during calculation, assign ",paraId:2},{value:"fx",paraId:2},{value:" and ",paraId:2},{value:"fy",paraId:2},{value:" for the nodes as fixing positions. ",paraId:2},{value:"Demo for fixing the dragged node with force layout",paraId:3},{value:".",paraId:2},{value:"Type",paraId:4,tocIndex:0},{value:": Array",paraId:4,tocIndex:0},{value:"Example",paraId:4,tocIndex:0},{value:": [ 0, 0 ]",paraId:4,tocIndex:0},{value:"Default",paraId:4,tocIndex:0},{value:": The center of the graph",paraId:4,tocIndex:0},{value:"Required",paraId:4,tocIndex:0},{value:": false",paraId:4,tocIndex:0},{value:"Description",paraId:4,tocIndex:0},{value:": The center of the layout",paraId:4,tocIndex:0},{value:"Type",paraId:5,tocIndex:1},{value:": Number / Function",paraId:5,tocIndex:1},{value:"Default",paraId:5,tocIndex:1},{value:": 50",paraId:5,tocIndex:1},{value:"Required",paraId:5,tocIndex:1},{value:": false",paraId:5,tocIndex:1},{value:"Description",paraId:5,tocIndex:1},{value:": The edge length",paraId:5,tocIndex:1},{value:"Type",paraId:6,tocIndex:2},{value:": Number / Function",paraId:6,tocIndex:2},{value:"Default",paraId:6,tocIndex:2},{value:": null",paraId:6,tocIndex:2},{value:"Required",paraId:6,tocIndex:2},{value:": false",paraId:6,tocIndex:2},{value:"Description",paraId:6,tocIndex:2},{value:": The strength of node force. Positive value means attractive force, negative value means repulsive force",paraId:6,tocIndex:2},{value:"Type",paraId:7,tocIndex:3},{value:": Number / Function",paraId:7,tocIndex:3},{value:"Default",paraId:7,tocIndex:3},{value:": null",paraId:7,tocIndex:3},{value:"Required",paraId:7,tocIndex:3},{value:": false",paraId:7,tocIndex:3},{value:"Description",paraId:7,tocIndex:3},{value:": The strength of edge force, ranges from 0 to 1. Calculated according to the degree of nodes by default",paraId:7,tocIndex:3},{value:"Type",paraId:8,tocIndex:4},{value:": Number",paraId:8,tocIndex:4},{value:"Default",paraId:8,tocIndex:4},{value:": false",paraId:8,tocIndex:4},{value:"Required",paraId:8,tocIndex:4},{value:": false",paraId:8,tocIndex:4},{value:"Description",paraId:8,tocIndex:4},{value:": Whether to prevent node overlappings. To activate preventing node overlappings, ",paraId:8,tocIndex:4},{value:"nodeSize",paraId:8,tocIndex:4},{value:" is required, which is used for collide detection. The size in the node data will take effect if ",paraId:8,tocIndex:4},{value:"nodeSize",paraId:8,tocIndex:4},{value:" is not assigned",paraId:8,tocIndex:4},{value:"Type",paraId:9,tocIndex:5},{value:": Number",paraId:9,tocIndex:5},{value:"Default",paraId:9,tocIndex:5},{value:": 1",paraId:9,tocIndex:5},{value:"Required",paraId:9,tocIndex:5},{value:": false",paraId:9,tocIndex:5},{value:"Description",paraId:9,tocIndex:5},{value:": The strength of force for preventing node overlappings. The range is [0, 1]",paraId:9,tocIndex:5},{value:"Type",paraId:10,tocIndex:6},{value:": Number",paraId:10,tocIndex:6},{value:"Default",paraId:10,tocIndex:6},{value:": 10",paraId:10,tocIndex:6},{value:"Required",paraId:10,tocIndex:6},{value:": false",paraId:10,tocIndex:6},{value:"Description",paraId:10,tocIndex:6},{value:": The diameter of the node. It is used for preventing node overlappings. If ",paraId:10,tocIndex:6},{value:"nodeSize",paraId:10,tocIndex:6},{value:" is not assigned, the size property in node data will take effect. If the size in node data does not exist either, ",paraId:10,tocIndex:6},{value:"nodeSize",paraId:10,tocIndex:6},{value:" is assigned to 10 by default",paraId:10,tocIndex:6},{value:"Type",paraId:11,tocIndex:7},{value:": Number / Function ",paraId:11,tocIndex:7},{value:"Default",paraId:11,tocIndex:7},{value:": 0 ",paraId:11,tocIndex:7},{value:"Required",paraId:11,tocIndex:7},{value:": false ",paraId:11,tocIndex:7},{value:"The minimum space between two nodes when ",paraId:11,tocIndex:7},{value:"preventOverlap",paraId:11,tocIndex:7},{value:" is true ",paraId:11,tocIndex:7},{value:"Example",paraId:11,tocIndex:7},{value:": Example 1: 10 ",paraId:11,tocIndex:7},{value:"Example 2:",paraId:11,tocIndex:7},{value:"(d) => {\n  // d is a node\n  if (d.id === 'node1') {\n    return 100;\n  }\n  return 10;\n};\n",paraId:12,tocIndex:7},{value:"Description",paraId:13,tocIndex:7},{value:": Takes effect when ",paraId:13,tocIndex:7},{value:"preventOverlap",paraId:13,tocIndex:7},{value:" is ",paraId:13,tocIndex:7},{value:"true",paraId:13,tocIndex:7},{value:". It is the minimum distance between nodes to prevent node overlappings. It can be a function to define different distances for different nodes (example 2)",paraId:13,tocIndex:7},{value:"Type",paraId:14,tocIndex:8},{value:": Number",paraId:14,tocIndex:8},{value:"Default",paraId:14,tocIndex:8},{value:": 0.3",paraId:14,tocIndex:8},{value:"Required",paraId:14,tocIndex:8},{value:": false",paraId:14,tocIndex:8},{value:"Description",paraId:14,tocIndex:8},{value:": The current alpha of convergence",paraId:14,tocIndex:8},{value:"Type",paraId:15,tocIndex:9},{value:": Number",paraId:15,tocIndex:9},{value:"Default",paraId:15,tocIndex:9},{value:": 0.028",paraId:15,tocIndex:9},{value:"Required",paraId:15,tocIndex:9},{value:": false",paraId:15,tocIndex:9},{value:"Description",paraId:15,tocIndex:9},{value:": The decay ratio of alpha for convergence. The range is [0, 1]. 0.028 corresponds to 300 iterations",paraId:15,tocIndex:9},{value:"Type",paraId:16,tocIndex:10},{value:": Number",paraId:16,tocIndex:10},{value:"Default",paraId:16,tocIndex:10},{value:": 0.001",paraId:16,tocIndex:10},{value:"Required",paraId:16,tocIndex:10},{value:": false",paraId:16,tocIndex:10},{value:"Description",paraId:16,tocIndex:10},{value:": The threshold to stop the iteration",paraId:16,tocIndex:10},{value:"Type",paraId:17,tocIndex:11},{value:": Boolean",paraId:17,tocIndex:11},{value:"Default",paraId:17,tocIndex:11},{value:": false",paraId:17,tocIndex:11},{value:"Required",paraId:17,tocIndex:11},{value:": false",paraId:17,tocIndex:11},{value:"Description",paraId:17,tocIndex:11},{value:": Whether run the force layout with clustering",paraId:17,tocIndex:11},{value:"Type",paraId:18,tocIndex:12},{value:": Number",paraId:18,tocIndex:12},{value:"Default",paraId:18,tocIndex:12},{value:": -1",paraId:18,tocIndex:12},{value:"Required",paraId:18,tocIndex:12},{value:": false",paraId:18,tocIndex:12},{value:"Description",paraId:18,tocIndex:12},{value:": The force between nodes. It will be repulsive force while it is negative",paraId:18,tocIndex:12},{value:"Type",paraId:19,tocIndex:13},{value:": Number",paraId:19,tocIndex:13},{value:"Default",paraId:19,tocIndex:13},{value:": 0.1",paraId:19,tocIndex:13},{value:"Required",paraId:19,tocIndex:13},{value:": false",paraId:19,tocIndex:13},{value:"Description",paraId:19,tocIndex:13},{value:": The force along the edge",paraId:19,tocIndex:13},{value:"Type",paraId:20,tocIndex:14},{value:": Number",paraId:20,tocIndex:14},{value:"Default",paraId:20,tocIndex:14},{value:": 100",paraId:20,tocIndex:14},{value:"Required",paraId:20,tocIndex:14},{value:": false",paraId:20,tocIndex:14},{value:"Description",paraId:20,tocIndex:14},{value:": The edge length between the clusters",paraId:20,tocIndex:14},{value:"Type",paraId:21,tocIndex:15},{value:": Number",paraId:21,tocIndex:15},{value:"Default",paraId:21,tocIndex:15},{value:": 10",paraId:21,tocIndex:15},{value:"Required",paraId:21,tocIndex:15},{value:": false",paraId:21,tocIndex:15},{value:"Description",paraId:21,tocIndex:15},{value:": The node size(diameter) for clustering",paraId:21,tocIndex:15},{value:"Type",paraId:22,tocIndex:16},{value:": Number",paraId:22,tocIndex:16},{value:"Default",paraId:22,tocIndex:16},{value:": 0.8",paraId:22,tocIndex:16},{value:"Required",paraId:22,tocIndex:16},{value:": false",paraId:22,tocIndex:16},{value:"Description",paraId:22,tocIndex:16},{value:": The force for the clustering foci",paraId:22,tocIndex:16},{value:"Type",paraId:23,tocIndex:17},{value:": Object",paraId:23,tocIndex:17},{value:"Default",paraId:23,tocIndex:17},{value:": null",paraId:23,tocIndex:17},{value:"Required",paraId:23,tocIndex:17},{value:": false",paraId:23,tocIndex:17},{value:"Description",paraId:23,tocIndex:17},{value:": Customed force simulation. If it is not assigned, the force simulation of d3.js will take effect",paraId:23,tocIndex:17},{value:"Type",paraId:24,tocIndex:18},{value:": Function",paraId:24,tocIndex:18},{value:"Default",paraId:24,tocIndex:18},{value:": {}",paraId:24,tocIndex:18},{value:"Required",paraId:24,tocIndex:18},{value:": false",paraId:24,tocIndex:18},{value:"Description",paraId:24,tocIndex:18},{value:": The callback function of each iteration",paraId:24,tocIndex:18},{value:"Type",paraId:25,tocIndex:19},{value:": Function",paraId:25,tocIndex:19},{value:"Default",paraId:25,tocIndex:19},{value:": {}",paraId:25,tocIndex:19},{value:"Required",paraId:25,tocIndex:19},{value:": false",paraId:25,tocIndex:19},{value:"Description",paraId:25,tocIndex:19},{value:": The callback function after layout",paraId:25,tocIndex:19},{value:"Type",paraId:26,tocIndex:20},{value:": Boolean",paraId:26,tocIndex:20},{value:"Default",paraId:26,tocIndex:20},{value:": false",paraId:26,tocIndex:20},{value:"Required",paraId:26,tocIndex:20},{value:": false",paraId:26,tocIndex:20},{value:"Description",paraId:26,tocIndex:20},{value:": Whether to enable the web-worker in case layout calculation takes too long to block page interaction.\n",paraId:26,tocIndex:20},{value:"⚠️ Notice:",paraId:26,tocIndex:20},{value:" When ",paraId:26,tocIndex:20},{value:"workerEnabled: true",paraId:26,tocIndex:20},{value:", all the function type parameters are not supported.",paraId:26,tocIndex:20}]},64337:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Force2 implements the force-directed layout algorithm by G6 4.7.0. It comes from graphin-force, supports assign different masses and center gravities for different nodes freedomly. Comparing to graphin-force, the performance is improved greatly.",paraId:0},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 1000,\n  height: 600,\n  layout: {\n    type: 'force2',\n    center: [200, 200], // The center of the graph by default\n    linkDistance: 1,\n    nodeStrength: 1000,\n    edgeStrength: 200,\n    nodeSize: 30,\n    onTick: () => {\n      console.log('ticking');\n    },\n    onLayoutEnd: () => {\n      console.log('force layout done');\n    },\n    workerEnabled: true, // Whether to activate web-worker\n    ... // more options are shown below\n  },\n});\n",paraId:1},{value:"If you want to fix the positions for some nodes during calculation, assign ",paraId:2},{value:"fx",paraId:2},{value:" and ",paraId:2},{value:"fy",paraId:2},{value:" for the nodes as fixing positions. ",paraId:2},{value:"Demo for fixing node",paraId:3},{value:".",paraId:2},{value:"Type",paraId:4,tocIndex:0},{value:": Array",paraId:4,tocIndex:0},{value:"Example",paraId:4,tocIndex:0},{value:": [ 0, 0 ]",paraId:4,tocIndex:0},{value:"Default",paraId:4,tocIndex:0},{value:": The center of the graph",paraId:4,tocIndex:0},{value:"Required",paraId:4,tocIndex:0},{value:": false",paraId:4,tocIndex:0},{value:"Description",paraId:4,tocIndex:0},{value:": The center of the layout",paraId:4,tocIndex:0},{value:"Type",paraId:5,tocIndex:1},{value:":  Boolean",paraId:5,tocIndex:1},{value:"示例",paraId:5,tocIndex:1},{value:"：false",paraId:5,tocIndex:1},{value:"Default",paraId:5,tocIndex:1},{value:": ：false",paraId:5,tocIndex:1},{value:"Default",paraId:5,tocIndex:1},{value:": false",paraId:5,tocIndex:1},{value:"Description",paraId:5,tocIndex:1},{value:": Whether refresh the node positions on the canvas each iteration. If it is ",paraId:5,tocIndex:1},{value:"true",paraId:5,tocIndex:1},{value:", the nodes on the canvas will looks like animating with forces",paraId:5,tocIndex:1},{value:"Supported from v4.7.0",paraId:6,tocIndex:2},{value:"Type",paraId:7,tocIndex:2},{value:":",paraId:7,tocIndex:2},{value:"{\n  type: string; // preset layout name, could be any static layout like random, concentric, grid, circular, radial, and dagre\n  [key: string]: unkown; // corresponding configurations for the preset layout type\n}\n",paraId:8,tocIndex:2},{value:"Default",paraId:9,tocIndex:2},{value:": undefined",paraId:9,tocIndex:2},{value:"Required",paraId:9,tocIndex:2},{value:": false",paraId:9,tocIndex:2},{value:"Description",paraId:9,tocIndex:2},{value:": Preset layout calculates intialize positions for nodes, and the force layout will start from the inited result. The quality of the force layout's result depends on the initial positions of nodes. Configuring a proper preset for a force layout will speed up the convergence of force layout, and enhance the quality in the same time. By default, the positions of nodes will be inited as grid",paraId:9,tocIndex:2},{value:"Type",paraId:10,tocIndex:3},{value:": Number / Function",paraId:10,tocIndex:3},{value:"Default",paraId:10,tocIndex:3},{value:": 1",paraId:10,tocIndex:3},{value:"Required",paraId:10,tocIndex:3},{value:": false",paraId:10,tocIndex:3},{value:"Description",paraId:10,tocIndex:3},{value:": The edge length",paraId:10,tocIndex:3},{value:"Type",paraId:11,tocIndex:4},{value:": Number / Function",paraId:11,tocIndex:4},{value:"Default",paraId:11,tocIndex:4},{value:": 1000",paraId:11,tocIndex:4},{value:"Required",paraId:11,tocIndex:4},{value:": false",paraId:11,tocIndex:4},{value:"Description",paraId:11,tocIndex:4},{value:": The strength of node force. Positive value means repulsive force, negative value means attractive force (it is different from 'force')",paraId:11,tocIndex:4},{value:"Type",paraId:12,tocIndex:5},{value:": Number / Function",paraId:12,tocIndex:5},{value:"Default",paraId:12,tocIndex:5},{value:": 200",paraId:12,tocIndex:5},{value:"Required",paraId:12,tocIndex:5},{value:": false",paraId:12,tocIndex:5},{value:"Description",paraId:12,tocIndex:5},{value:": The strength of edge force. Calculated according to the degree of nodes by default",paraId:12,tocIndex:5},{value:"Type",paraId:13,tocIndex:6},{value:": Number",paraId:13,tocIndex:6},{value:"Default",paraId:13,tocIndex:6},{value:": false",paraId:13,tocIndex:6},{value:"Required",paraId:13,tocIndex:6},{value:": false",paraId:13,tocIndex:6},{value:"Description",paraId:13,tocIndex:6},{value:": Whether to prevent node overlappings. To activate preventing node overlappings, ",paraId:13,tocIndex:6},{value:"nodeSize",paraId:13,tocIndex:6},{value:" is required, which is used for collide detection. The size in the node data will take effect if ",paraId:13,tocIndex:6},{value:"nodeSize",paraId:13,tocIndex:6},{value:" is not assigned",paraId:13,tocIndex:6},{value:"Type",paraId:14,tocIndex:7},{value:": Number",paraId:14,tocIndex:7},{value:"Default",paraId:14,tocIndex:7},{value:": 10",paraId:14,tocIndex:7},{value:"Required",paraId:14,tocIndex:7},{value:": false",paraId:14,tocIndex:7},{value:"Description",paraId:14,tocIndex:7},{value:": The diameter of the node. It is used for preventing node overlappings. If ",paraId:14,tocIndex:7},{value:"nodeSize",paraId:14,tocIndex:7},{value:" is not assigned, the size property in node data will take effect. If the size in node data does not exist either, ",paraId:14,tocIndex:7},{value:"nodeSize",paraId:14,tocIndex:7},{value:" is assigned to 10 by default",paraId:14,tocIndex:7},{value:"Type",paraId:15,tocIndex:8},{value:": Number / Function ",paraId:15,tocIndex:8},{value:"Default",paraId:15,tocIndex:8},{value:": 0 ",paraId:15,tocIndex:8},{value:"Required",paraId:15,tocIndex:8},{value:": false ",paraId:15,tocIndex:8},{value:"Example",paraId:15,tocIndex:8},{value:": Example 1: 10 ",paraId:15,tocIndex:8},{value:"Example 2:",paraId:15,tocIndex:8},{value:"(d) => {\n  // d is a node\n  if (d.id === 'node1') {\n    return 100;\n  }\n  return 10;\n};\n",paraId:16,tocIndex:8},{value:"Description",paraId:17,tocIndex:8},{value:": Takes effect when ",paraId:17,tocIndex:8},{value:"preventOverlap",paraId:17,tocIndex:8},{value:" is ",paraId:17,tocIndex:8},{value:"true",paraId:17,tocIndex:8},{value:". It is the minimum distance between nodes to prevent node overlappings. It can be a function to define different distances for different nodes (example 2)",paraId:17,tocIndex:8},{value:"Type",paraId:18,tocIndex:9},{value:": Number",paraId:18,tocIndex:9},{value:"Default",paraId:18,tocIndex:9},{value:": 0.5",paraId:18,tocIndex:9},{value:"Required",paraId:18,tocIndex:9},{value:": false",paraId:18,tocIndex:9},{value:"Description",paraId:18,tocIndex:9},{value:": When the average/minimum/maximum (according to ",paraId:18,tocIndex:9},{value:"distanceThresholdMode",paraId:18,tocIndex:9},{value:") movement of nodes in one iteration is smaller than ",paraId:18,tocIndex:9},{value:"minMovement",paraId:18,tocIndex:9},{value:", terminate the layout",paraId:18,tocIndex:9},{value:"Type",paraId:19,tocIndex:10},{value:": 'mean' | 'max' ｜ 'min'",paraId:19,tocIndex:10},{value:"Default",paraId:19,tocIndex:10},{value:": 'mean'",paraId:19,tocIndex:10},{value:"Default",paraId:19,tocIndex:10},{value:": false",paraId:19,tocIndex:10},{value:"Description",paraId:19,tocIndex:10},{value:": The condition to judge with ",paraId:19,tocIndex:10},{value:"minMovement",paraId:19,tocIndex:10},{value:", ",paraId:19,tocIndex:10},{value:"'mean'",paraId:19,tocIndex:10},{value:" means the layout stops while the nodes' average movement is smaller than ",paraId:19,tocIndex:10},{value:"minMovement",paraId:19,tocIndex:10},{value:", ",paraId:19,tocIndex:10},{value:"'max'",paraId:19,tocIndex:10},{value:" / ",paraId:19,tocIndex:10},{value:"'min'",paraId:19,tocIndex:10},{value:" means the layout stops while the nodes' maximum/minimum movement is smaller than ",paraId:19,tocIndex:10},{value:"minMovement",paraId:19,tocIndex:10},{value:". ",paraId:19,tocIndex:10},{value:"'mean'",paraId:19,tocIndex:10},{value:" by default",paraId:19,tocIndex:10},{value:"Type",paraId:20,tocIndex:11},{value:": Number",paraId:20,tocIndex:11},{value:"Default",paraId:20,tocIndex:11},{value:": 1000",paraId:20,tocIndex:11},{value:"Required",paraId:20,tocIndex:11},{value:": false",paraId:20,tocIndex:11},{value:"Description",paraId:20,tocIndex:11},{value:": The max number of iterations. If the average movement do not reach ",paraId:20,tocIndex:11},{value:"minMovement",paraId:20,tocIndex:11},{value:" but the iteration number is over ",paraId:20,tocIndex:11},{value:"maxIteration",paraId:20,tocIndex:11},{value:", terminate the layout",paraId:20,tocIndex:11},{value:"Type",paraId:21,tocIndex:12},{value:": Number",paraId:21,tocIndex:12},{value:"Default",paraId:21,tocIndex:12},{value:": 0.9",paraId:21,tocIndex:12},{value:"Required",paraId:21,tocIndex:12},{value:": false",paraId:21,tocIndex:12},{value:"Description",paraId:21,tocIndex:12},{value:": Range [0, 1], affect the speed of decreasing node moving speed. Large the number, slower the decreasing",paraId:21,tocIndex:12},{value:"Type",paraId:22,tocIndex:13},{value:": Number",paraId:22,tocIndex:13},{value:"Default",paraId:22,tocIndex:13},{value:": 0.02",paraId:22,tocIndex:13},{value:"Default",paraId:22,tocIndex:13},{value:": false",paraId:22,tocIndex:13},{value:"Description",paraId:22,tocIndex:13},{value:": Controls the speed of the nodes' movement in each iteration",paraId:22,tocIndex:13},{value:"Type",paraId:23,tocIndex:14},{value:": Number",paraId:23,tocIndex:14},{value:"Default",paraId:23,tocIndex:14},{value:": 1000",paraId:23,tocIndex:14},{value:"Required",paraId:23,tocIndex:14},{value:": false",paraId:23,tocIndex:14},{value:"Description",paraId:23,tocIndex:14},{value:": The max speed in each iteration",paraId:23,tocIndex:14},{value:"Type",paraId:24,tocIndex:15},{value:": Number",paraId:24,tocIndex:15},{value:"Default",paraId:24,tocIndex:15},{value:": 1",paraId:24,tocIndex:15},{value:"Default",paraId:24,tocIndex:15},{value:": false",paraId:24,tocIndex:15},{value:"Description",paraId:24,tocIndex:15},{value:": Coefficient for the repulsive force. Larger the number, larger the repulsive force",paraId:24,tocIndex:15},{value:"Type",paraId:25,tocIndex:16},{value:": Number",paraId:25,tocIndex:16},{value:"Default",paraId:25,tocIndex:16},{value:": 0.005",paraId:25,tocIndex:16},{value:"Required",paraId:25,tocIndex:16},{value:": false",paraId:25,tocIndex:16},{value:"Description",paraId:25,tocIndex:16},{value:": A parameter for repulsive force between nodes. Large the number, larger the repulsion",paraId:25,tocIndex:16},{value:"Type",paraId:26,tocIndex:17},{value:": Function",paraId:26,tocIndex:17},{value:"Default",paraId:26,tocIndex:17},{value:": undefined",paraId:26,tocIndex:17},{value:"Required",paraId:26,tocIndex:17},{value:": false",paraId:26,tocIndex:17},{value:"Description",paraId:26,tocIndex:17},{value:": It is a callback returns the mass of each node. If it is not assigned, the degree of each node will take effect. The usage is similar to ",paraId:26,tocIndex:17},{value:"nodeSpacing",paraId:26,tocIndex:17},{value:"Type",paraId:27,tocIndex:18},{value:": Function",paraId:27,tocIndex:18},{value:"Default",paraId:27,tocIndex:18},{value:": undefined",paraId:27,tocIndex:18},{value:"Required",paraId:27,tocIndex:18},{value:": false",paraId:27,tocIndex:18},{value:"Description",paraId:27,tocIndex:18},{value:": It is a callback returns gravity center and the gravity strength for each node",paraId:27,tocIndex:18},{value:"Example",paraId:27,tocIndex:18},{value:"(d, degree) => {\n  // d is a node, degree is the degree of the node\n  if (d.clusterId === 'c1') return [100, 100, 10]; // x, y, strength\n  if (degree === 0) return [250, 250, 15];\n  return [180, 180, 5]; // x, y, strength\n};\n",paraId:28,tocIndex:18},{value:"Type",paraId:29,tocIndex:19},{value:": Number",paraId:29,tocIndex:19},{value:"Default",paraId:29,tocIndex:19},{value:": 10",paraId:29,tocIndex:19},{value:"Required",paraId:29,tocIndex:19},{value:": false",paraId:29,tocIndex:19},{value:"Description",paraId:29,tocIndex:19},{value:": The gravity strength to the ",paraId:29,tocIndex:19},{value:"center",paraId:29,tocIndex:19},{value:" for all the nodes. Larger the number, more compact the nodes",paraId:29,tocIndex:19},{value:"Type",paraId:30,tocIndex:20},{value:": CentripetalOptions (refers to below)",paraId:30,tocIndex:20},{value:"Default",paraId:30,tocIndex:20},{value:": refers to below",paraId:30,tocIndex:20},{value:"Default",paraId:30,tocIndex:20},{value:": false",paraId:30,tocIndex:20},{value:"Description",paraId:30,tocIndex:20},{value:": Configurations for the center forces, including the center coordinates and the force strengths for leaf nodes, discrete nodes, and other nodes",paraId:30,tocIndex:20},{value:"Type ",paraId:31,tocIndex:20},{value:"CentripetalOptions",paraId:31,tocIndex:20},{value:":",paraId:31,tocIndex:20},{value:"Parameter",paraId:32,tocIndex:20},{value:"Type",paraId:32,tocIndex:20},{value:"Example",paraId:32,tocIndex:20},{value:"Default",paraId:32,tocIndex:20},{value:"Description",paraId:32,tocIndex:20},{value:"single",paraId:32,tocIndex:20},{value:"number / Function",paraId:32,tocIndex:20},{value:"2",paraId:32,tocIndex:20},{value:"2,",paraId:32,tocIndex:20},{value:"the center force strength for discrete nodes (with 0 degree)",paraId:32,tocIndex:20},{value:"leaf",paraId:32,tocIndex:20},{value:"number / Function",paraId:32,tocIndex:20},{value:"2",paraId:32,tocIndex:20},{value:"2",paraId:32,tocIndex:20},{value:"the center force strength for leaf nodes (with 1 degree)",paraId:32,tocIndex:20},{value:"others",paraId:32,tocIndex:20},{value:"number / Function",paraId:32,tocIndex:20},{value:"1",paraId:32,tocIndex:20},{value:"1",paraId:32,tocIndex:20},{value:"the center force strength for other nodes beside leaf and discrete nodes",paraId:32,tocIndex:20},{value:"center",paraId:32,tocIndex:20},{value:"Function",paraId:32,tocIndex:20},{value:"(node, nodes, edges) => ({ x: 10, y: 10 })",paraId:32,tocIndex:20},{value:"center of the graph",paraId:32,tocIndex:20},{value:"the center force's coordinate. You can return different values for different nodes",paraId:32,tocIndex:20},{value:"Example for ",paraId:33,tocIndex:20},{value:"centripetalOptions",paraId:33,tocIndex:20},{value:":",paraId:33,tocIndex:20},{value:"centripetalOptions: {\n  // single, leaf, and others support function configuration, the parameters are the current node data, all the nodes' data, all the edges' data\n  single: (node, nodes, edges) => node.field1 || 1,\n  leaf: (node, nodes, edges) => node.field2 || 1,\n  others: (node, nodes, edges) => node.field3|| 1,\n  // the parameters are current node data, all the nodes' data, all the edges' data, width of the graph, height of the graph\n  center: (node, nodes, edges, width, height) => {\n    if (node.field4) return { x: width / 2, y: height / 2 };\n    if (node.field5) return { x: node.field6, y: node.field7 };\n    // ...\n  }\n}\n",paraId:34,tocIndex:20},{value:"Type",paraId:35,tocIndex:21},{value:": Boolean",paraId:35,tocIndex:21},{value:"Default",paraId:35,tocIndex:21},{value:": false",paraId:35,tocIndex:21},{value:"Default",paraId:35,tocIndex:21},{value:": false",paraId:35,tocIndex:21},{value:"Description",paraId:35,tocIndex:21},{value:": Whether to cluster the leaf nodes. If it is ",paraId:35,tocIndex:21},{value:"true",paraId:35,tocIndex:21},{value:", the value of  ",paraId:35,tocIndex:21},{value:"centripetalOptions.single",paraId:35,tocIndex:21},{value:" will be set to 100; The returned value of ",paraId:35,tocIndex:21},{value:"getClusterNodeStrength",paraId:35,tocIndex:21},{value:" will be used for ",paraId:35,tocIndex:21},{value:"centripetalOptions.leaf",paraId:35,tocIndex:21},{value:"; ",paraId:35,tocIndex:21},{value:"getClusterNodeStrength.center",paraId:35,tocIndex:21},{value:" will take the average center for all the leaf nodes in current iteration",paraId:35,tocIndex:21},{value:"Type",paraId:36,tocIndex:22},{value:": Boolean",paraId:36,tocIndex:22},{value:"Default",paraId:36,tocIndex:22},{value:": false",paraId:36,tocIndex:22},{value:"Default",paraId:36,tocIndex:22},{value:": false",paraId:36,tocIndex:22},{value:"Description",paraId:36,tocIndex:22},{value:": Whehter cluster all the nodes according to ",paraId:36,tocIndex:22},{value:"nodeClusterBy",paraId:36,tocIndex:22},{value:". If it is ",paraId:36,tocIndex:22},{value:"true",paraId:36,tocIndex:22},{value:", the returned value of ",paraId:36,tocIndex:22},{value:"getClusterNodeStrength",paraId:36,tocIndex:22},{value:" will be used for ",paraId:36,tocIndex:22},{value:"centripetalOptions.single",paraId:36,tocIndex:22},{value:", ",paraId:36,tocIndex:22},{value:"centripetalOptions.leaf",paraId:36,tocIndex:22},{value:", and ",paraId:36,tocIndex:22},{value:"centripetalOptions.others",paraId:36,tocIndex:22},{value:"; ",paraId:36,tocIndex:22},{value:"centripetalOptions.center",paraId:36,tocIndex:22},{value:" will take the average center of all the nodes in the same cluster",paraId:36,tocIndex:22},{value:"Type",paraId:37,tocIndex:23},{value:": String",paraId:37,tocIndex:23},{value:"Default",paraId:37,tocIndex:23},{value:": undefined",paraId:37,tocIndex:23},{value:"Default",paraId:37,tocIndex:23},{value:": false",paraId:37,tocIndex:23},{value:"Description",paraId:37,tocIndex:23},{value:": The field name in the node data to cluster the nodes. Takes effect when ",paraId:37,tocIndex:23},{value:"clustering",paraId:37,tocIndex:23},{value:" is ",paraId:37,tocIndex:23},{value:"true",paraId:37,tocIndex:23},{value:", and the ",paraId:37,tocIndex:23},{value:"centripetalOptions",paraId:37,tocIndex:23},{value:" will be generated automatically. You could configure the strengths for different nodes with ",paraId:37,tocIndex:23},{value:"clusterNodeStrength",paraId:37,tocIndex:23},{value:"Type",paraId:38,tocIndex:24},{value:": Number | Function",paraId:38,tocIndex:24},{value:"Default",paraId:38,tocIndex:24},{value:": 20",paraId:38,tocIndex:24},{value:"Default",paraId:38,tocIndex:24},{value:": false",paraId:38,tocIndex:24},{value:"Description",paraId:38,tocIndex:24},{value:": The clustering center force strengths for different nodes, takes effect with ",paraId:38,tocIndex:24},{value:"clustering",paraId:38,tocIndex:24},{value:" and ",paraId:38,tocIndex:24},{value:"nodeClusterBy",paraId:38,tocIndex:24},{value:"Type",paraId:39,tocIndex:25},{value:": ",paraId:39,tocIndex:25},{value:"(params:{ energy: number, nodes: NodeData[], edges: EdgeData[], iterations: number }) => void",paraId:39,tocIndex:25},{value:"Default",paraId:39,tocIndex:25},{value:": undefined",paraId:39,tocIndex:25},{value:"Default",paraId:39,tocIndex:25},{value:": false",paraId:39,tocIndex:25},{value:"Description",paraId:39,tocIndex:25},{value:": The callback function for each iteration, the parameters including the energy of the layout, all the nodes' data, all the edges' data, and the current iteration number. Note that the calculation for energy will take extra cost. If the ",paraId:39,tocIndex:25},{value:"monitor",paraId:39,tocIndex:25},{value:" is not configured, the calculation will be ignore.",paraId:39,tocIndex:25},{value:"Type",paraId:40,tocIndex:26},{value:": Function",paraId:40,tocIndex:26},{value:"Default",paraId:40,tocIndex:26},{value:": {}",paraId:40,tocIndex:26},{value:"默认",paraId:40,tocIndex:26},{value:": false",paraId:40,tocIndex:26},{value:"Description",paraId:40,tocIndex:26},{value:": The callback function of each iteration",paraId:40,tocIndex:26},{value:"Type",paraId:41,tocIndex:27},{value:": Function",paraId:41,tocIndex:27},{value:"Default",paraId:41,tocIndex:27},{value:": {}",paraId:41,tocIndex:27},{value:"Required",paraId:41,tocIndex:27},{value:": false",paraId:41,tocIndex:27},{value:"Description",paraId:41,tocIndex:27},{value:": The callback function after layout",paraId:41,tocIndex:27},{value:"Type",paraId:42,tocIndex:28},{value:": Boolean",paraId:42,tocIndex:28},{value:"Default",paraId:42,tocIndex:28},{value:": false",paraId:42,tocIndex:28},{value:"Required",paraId:42,tocIndex:28},{value:": false",paraId:42,tocIndex:28},{value:"Description",paraId:42,tocIndex:28},{value:": Whether to enable the web-worker in case layout calculation takes too long to block page interaction.\n",paraId:42,tocIndex:28},{value:"⚠️ Notice:",paraId:42,tocIndex:28},{value:" When ",paraId:42,tocIndex:28},{value:"workerEnabled: true",paraId:42,tocIndex:28},{value:", all the function type parameters are not supported.",paraId:42,tocIndex:28}]},77807:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"It is a new feature of V3.2.2.",paraId:0},{value:" FA2 is a kind of force directed layout, which performs better on the convergence and compactness.",paraId:0},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 1000,\n  height: 600,\n  layout: {\n    type: 'forceAtlas2',\n    width: 300,\n    height: 300,\n  },\n});\n",paraId:1},{value:"Type",paraId:2,tocIndex:0},{value:": Array",paraId:2,tocIndex:0},{value:"Example",paraId:2,tocIndex:0},{value:": [ 0, 0 ]",paraId:2,tocIndex:0},{value:"Default",paraId:2,tocIndex:0},{value:": The center of the graph",paraId:2,tocIndex:0},{value:"Required",paraId:2,tocIndex:0},{value:": false",paraId:2,tocIndex:0},{value:"Description",paraId:2,tocIndex:0},{value:": The center of the layout",paraId:2,tocIndex:0},{value:"Type",paraId:3,tocIndex:1},{value:": Number",paraId:3,tocIndex:1},{value:"Default",paraId:3,tocIndex:1},{value:": The width of the graph",paraId:3,tocIndex:1},{value:"Required",paraId:3,tocIndex:1},{value:": false",paraId:3,tocIndex:1},{value:"Description",paraId:3,tocIndex:1},{value:": The width of the layout",paraId:3,tocIndex:1},{value:"Type",paraId:4,tocIndex:2},{value:": Number",paraId:4,tocIndex:2},{value:"Default",paraId:4,tocIndex:2},{value:": The height of the graph",paraId:4,tocIndex:2},{value:"Required",paraId:4,tocIndex:2},{value:": false",paraId:4,tocIndex:2},{value:"Description",paraId:4,tocIndex:2},{value:": The height of the layout",paraId:4,tocIndex:2},{value:"Type",paraId:5,tocIndex:3},{value:": Boolean",paraId:5,tocIndex:3},{value:"Default",paraId:5,tocIndex:3},{value:": false",paraId:5,tocIndex:3},{value:"Required",paraId:5,tocIndex:3},{value:": false",paraId:5,tocIndex:3},{value:"Description",paraId:5,tocIndex:3},{value:": Whether to enable the web-worker in case layout calculation takes too long to block page interaction.\n",paraId:5,tocIndex:3},{value:"⚠️ Notice:",paraId:5,tocIndex:3},{value:" When ",paraId:5,tocIndex:3},{value:"workerEnabled: true",paraId:5,tocIndex:3},{value:", all the function type parameters are not supported.",paraId:5,tocIndex:3},{value:"Supported from v4.7.0",paraId:6,tocIndex:4},{value:"Type",paraId:7,tocIndex:4},{value:":",paraId:7,tocIndex:4},{value:"{\n  type: string; // preset layout name, could be any static layout like random, concentric, grid, circular, radial, and dagre\n  [key: string]: unkown; // corresponding configurations for the preset layout type\n}\n",paraId:8,tocIndex:4},{value:"Default",paraId:9,tocIndex:4},{value:": undefined",paraId:9,tocIndex:4},{value:"Required",paraId:9,tocIndex:4},{value:": false",paraId:9,tocIndex:4},{value:"Description",paraId:9,tocIndex:4},{value:": Preset layout calculates intialize positions for nodes, and the force layout will start from the inited result. The quality of the force layout's result depends on the initial positions of nodes. Configuring a proper preset for a force layout will speed up the convergence of force layout, and enhance the quality in the same time. By default, the positions of nodes will be inited as grid",paraId:9,tocIndex:4},{value:"Type",paraId:10,tocIndex:5},{value:": Number",paraId:10,tocIndex:5},{value:"Default",paraId:10,tocIndex:5},{value:": 5",paraId:10,tocIndex:5},{value:"Required",paraId:10,tocIndex:5},{value:": false",paraId:10,tocIndex:5},{value:"Description",paraId:10,tocIndex:5},{value:": Repulsive parameter, smaller the kr, more compact the graph",paraId:10,tocIndex:5},{value:"Type",paraId:11,tocIndex:6},{value:": Number",paraId:11,tocIndex:6},{value:"Default",paraId:11,tocIndex:6},{value:": 5",paraId:11,tocIndex:6},{value:"Required",paraId:11,tocIndex:6},{value:": false",paraId:11,tocIndex:6},{value:"Description",paraId:11,tocIndex:6},{value:": The parameter for the gravity. Larger kg, the graph will be more compact to the center",paraId:11,tocIndex:6},{value:"Type",paraId:12,tocIndex:7},{value:": Number",paraId:12,tocIndex:7},{value:"Default",paraId:12,tocIndex:7},{value:": 0.1",paraId:12,tocIndex:7},{value:"Required",paraId:12,tocIndex:7},{value:": false",paraId:12,tocIndex:7},{value:"Description",paraId:12,tocIndex:7},{value:": The moving speed of the nodes during iterations",paraId:12,tocIndex:7},{value:"Type",paraId:13,tocIndex:8},{value:": Number",paraId:13,tocIndex:8},{value:"Default",paraId:13,tocIndex:8},{value:": 0.1",paraId:13,tocIndex:8},{value:"Required",paraId:13,tocIndex:8},{value:": false",paraId:13,tocIndex:8},{value:"Description",paraId:13,tocIndex:8},{value:": The threshold of the swinging",paraId:13,tocIndex:8},{value:"Type",paraId:14,tocIndex:9},{value:": 'normal' | 'linlog'",paraId:14,tocIndex:9},{value:"Default",paraId:14,tocIndex:9},{value:": 'normal'",paraId:14,tocIndex:9},{value:"Required",paraId:14,tocIndex:9},{value:": false",paraId:14,tocIndex:9},{value:"Description",paraId:14,tocIndex:9},{value:": Under 'linlog' mode, the cluster will be more compact",paraId:14,tocIndex:9},{value:"Type",paraId:15,tocIndex:10},{value:": boolean",paraId:15,tocIndex:10},{value:"Default",paraId:15,tocIndex:10},{value:": false",paraId:15,tocIndex:10},{value:"Required",paraId:15,tocIndex:10},{value:": false",paraId:15,tocIndex:10},{value:"Description",paraId:15,tocIndex:10},{value:": Whether prevent node overlappings",paraId:15,tocIndex:10},{value:"Type",paraId:16,tocIndex:11},{value:": boolean",paraId:16,tocIndex:11},{value:"Default",paraId:16,tocIndex:11},{value:": false",paraId:16,tocIndex:11},{value:"Required",paraId:16,tocIndex:11},{value:": false",paraId:16,tocIndex:11},{value:"Description",paraId:16,tocIndex:11},{value:": Wheather to enable hub mode. If it is true, the nodes with larger in-degree will be placed on the center in higher priority",paraId:16,tocIndex:11},{value:"Type",paraId:17,tocIndex:12},{value:": boolean",paraId:17,tocIndex:12},{value:"Default",paraId:17,tocIndex:12},{value:": undefined",paraId:17,tocIndex:12},{value:"Required",paraId:17,tocIndex:12},{value:": false",paraId:17,tocIndex:12},{value:"Description",paraId:17,tocIndex:12},{value:": Whether to enable the barnes hut speedup, which is the quad-tree optimization. Due to the computation for quad-tree re-build in each iteration, we sugguest to enable it in large graph. It is undefined by deafult, when the number of nodes is larger than 250, it will be activated automatically. If it is set to be false, it will not be activated anyway",paraId:17,tocIndex:12},{value:"Type",paraId:18,tocIndex:13},{value:": boolean",paraId:18,tocIndex:13},{value:"Default",paraId:18,tocIndex:13},{value:": undefined",paraId:18,tocIndex:13},{value:"Required",paraId:18,tocIndex:13},{value:": false",paraId:18,tocIndex:13},{value:"Description",paraId:18,tocIndex:13},{value:": Whether to enable auto pruning. It is undefined by default, which means when the number of nodes is larger than 100, it will be activated automatically. If it is set to be false, it will not be activated anyway",paraId:18,tocIndex:13},{value:"Type",paraId:19,tocIndex:14},{value:": number",paraId:19,tocIndex:14},{value:"Default",paraId:19,tocIndex:14},{value:": 0",paraId:19,tocIndex:14},{value:"Required",paraId:19,tocIndex:14},{value:": false",paraId:19,tocIndex:14},{value:"Description",paraId:19,tocIndex:14},{value:": The max iteration number. When it is set to be 0, the iteration number will be automatically adjusted according to the convergence",paraId:19,tocIndex:14},{value:"Type",paraId:20,tocIndex:15},{value:": function",paraId:20,tocIndex:15},{value:"Default",paraId:20,tocIndex:15},{value:": undefined",paraId:20,tocIndex:15},{value:"Required",paraId:20,tocIndex:15},{value:": false",paraId:20,tocIndex:15},{value:"Description",paraId:20,tocIndex:15},{value:": The width function of the nodes, the parameter is the data model of a node",paraId:20,tocIndex:15},{value:"Type",paraId:21,tocIndex:16},{value:": function",paraId:21,tocIndex:16},{value:"Default",paraId:21,tocIndex:16},{value:": undefined",paraId:21,tocIndex:16},{value:"Required",paraId:21,tocIndex:16},{value:": false",paraId:21,tocIndex:16},{value:"Description",paraId:21,tocIndex:16},{value:": The height function of the nodes, the parameter is the data model of a node",paraId:21,tocIndex:16},{value:"Type",paraId:22,tocIndex:17},{value:": function",paraId:22,tocIndex:17},{value:"Default",paraId:22,tocIndex:17},{value:": undefined",paraId:22,tocIndex:17},{value:"Required",paraId:22,tocIndex:17},{value:": false",paraId:22,tocIndex:17},{value:"Description",paraId:22,tocIndex:17},{value:": The callback function of layout",paraId:22,tocIndex:17},{value:"Type",paraId:23,tocIndex:18},{value:": function",paraId:23,tocIndex:18},{value:"Default",paraId:23,tocIndex:18},{value:": undefined",paraId:23,tocIndex:18},{value:"Required",paraId:23,tocIndex:18},{value:": false",paraId:23,tocIndex:18},{value:"Description",paraId:23,tocIndex:18},{value:": The callback function for each iteration",paraId:23,tocIndex:18}]},76919:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Fruchterman is a kind of force-directed layout. G6 implements it according to the paper ",paraId:0},{value:"Graph Drawing by Force-directed Placement",paraId:0},{value:".",paraId:0},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 1000,\n  height: 600,\n  layout: {\n    type: 'fruchterman',\n    center: [200, 200], // The center of the graph by default\n    gravity: 20,\n    speed: 2,\n    clustering: true,\n    clusterGravity: 30,\n    maxIteration: 2000,\n    workerEnabled: true, // Whether to activate web-worker\n    gpuEnabled: true, // Whether to enable the GPU parallel computing, supported by G6 4.0\n  },\n});\n",paraId:1},{value:"If you want to fix the positions for some nodes during calculation, assign ",paraId:2},{value:"fx",paraId:2},{value:" and ",paraId:2},{value:"fy",paraId:2},{value:" for the nodes as fixing positions. ",paraId:2},{value:"Demo for fixing node",paraId:3},{value:".",paraId:2},{value:"Type",paraId:4,tocIndex:0},{value:": Array",paraId:4,tocIndex:0},{value:"Example",paraId:4,tocIndex:0},{value:": [ 0, 0 ]",paraId:4,tocIndex:0},{value:"Default",paraId:4,tocIndex:0},{value:": The center of the graph",paraId:4,tocIndex:0},{value:"Required",paraId:4,tocIndex:0},{value:": false",paraId:4,tocIndex:0},{value:"Description",paraId:4,tocIndex:0},{value:": The center of the layout",paraId:4,tocIndex:0},{value:"Supported from v4.7.0",paraId:5,tocIndex:1},{value:"Type",paraId:6,tocIndex:1},{value:":",paraId:6,tocIndex:1},{value:"{\n  type: string; // preset layout name, could be any static layout like random, concentric, grid, circular, radial, and dagre\n  [key: string]: unkown; // corresponding configurations for the preset layout type\n}\n",paraId:7,tocIndex:1},{value:"Default",paraId:8,tocIndex:1},{value:": undefined",paraId:8,tocIndex:1},{value:"Required",paraId:8,tocIndex:1},{value:": false",paraId:8,tocIndex:1},{value:"Description",paraId:8,tocIndex:1},{value:": Preset layout calculates intialize positions for nodes, and the force layout will start from the inited result. The quality of the force layout's result depends on the initial positions of nodes. Configuring a proper preset for a force layout will speed up the convergence of force layout, and enhance the quality in the same time. By default, the positions of nodes will be inited as grid",paraId:8,tocIndex:1},{value:"Type",paraId:9,tocIndex:2},{value:": Number",paraId:9,tocIndex:2},{value:"Default",paraId:9,tocIndex:2},{value:": 1000",paraId:9,tocIndex:2},{value:"Required",paraId:9,tocIndex:2},{value:": false",paraId:9,tocIndex:2},{value:"Description",paraId:9,tocIndex:2},{value:": The maximum iteration number",paraId:9,tocIndex:2},{value:"Type",paraId:10,tocIndex:3},{value:": Number",paraId:10,tocIndex:3},{value:"Default",paraId:10,tocIndex:3},{value:": 10",paraId:10,tocIndex:3},{value:"Required",paraId:10,tocIndex:3},{value:": false",paraId:10,tocIndex:3},{value:"Description",paraId:10,tocIndex:3},{value:": The gravity, which will affect the compactness of the layout",paraId:10,tocIndex:3},{value:"Type",paraId:11,tocIndex:4},{value:": Number",paraId:11,tocIndex:4},{value:"Default",paraId:11,tocIndex:4},{value:": 1",paraId:11,tocIndex:4},{value:"Required",paraId:11,tocIndex:4},{value:": false",paraId:11,tocIndex:4},{value:"Description",paraId:11,tocIndex:4},{value:": The moving speed of each iteraction. Large value of the speed might lead to violent swing",paraId:11,tocIndex:4},{value:"Type",paraId:12,tocIndex:5},{value:": Boolean",paraId:12,tocIndex:5},{value:"Default",paraId:12,tocIndex:5},{value:": false",paraId:12,tocIndex:5},{value:"Required",paraId:12,tocIndex:5},{value:": false",paraId:12,tocIndex:5},{value:"Description",paraId:12,tocIndex:5},{value:": Whether to layout by cluster",paraId:12,tocIndex:5},{value:"Type",paraId:13,tocIndex:6},{value:": Number",paraId:13,tocIndex:6},{value:"Default",paraId:13,tocIndex:6},{value:": 10",paraId:13,tocIndex:6},{value:"Required",paraId:13,tocIndex:6},{value:": false",paraId:13,tocIndex:6},{value:"Description",paraId:13,tocIndex:6},{value:": The gravity of each cluster, which will affect the compactness of each cluster. Takes effect only when ",paraId:13,tocIndex:6},{value:"clustering",paraId:13,tocIndex:6},{value:" is ",paraId:13,tocIndex:6},{value:"true",paraId:13,tocIndex:6},{value:"Type",paraId:14,tocIndex:7},{value:": Boolean",paraId:14,tocIndex:7},{value:"Default",paraId:14,tocIndex:7},{value:": false",paraId:14,tocIndex:7},{value:"Required",paraId:14,tocIndex:7},{value:": false",paraId:14,tocIndex:7},{value:"Description",paraId:14,tocIndex:7},{value:": Whether to enable the web-worker in case layout calculation takes too long to block page interaction.\n",paraId:14,tocIndex:7},{value:"⚠️ Notice:",paraId:14,tocIndex:7},{value:" When ",paraId:14,tocIndex:7},{value:"workerEnabled: true",paraId:14,tocIndex:7},{value:", all the function type parameters are not supported.",paraId:14,tocIndex:7},{value:"Type",paraId:15,tocIndex:8},{value:": Boolean",paraId:15,tocIndex:8},{value:"Default",paraId:15,tocIndex:8},{value:": false",paraId:15,tocIndex:8},{value:"Required",paraId:15,tocIndex:8},{value:": false",paraId:15,tocIndex:8},{value:"Description",paraId:15,tocIndex:8},{value:": Whether to enable the GPU parallel computing, supported by G6 4.0. If the machine or browser does not support GPU computing, it will be degraded to CPU computing automatically. The performance improvement: ",paraId:15,tocIndex:8}]},14922:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"GForce implements the classical force-directed layout algorithm by G6 4.0. It supports assign different masses and center gravities for different nodes freedomly. More importantly, it supports GPU parallel acceleration.",paraId:0},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 1000,\n  height: 600,\n  layout: {\n    type: 'gForce',\n    center: [200, 200], // The center of the graph by default\n    linkDistance: 1,\n    nodeStrength: 1000,\n    edgeStrength: 200,\n    nodeSize: 30,\n    onTick: () => {\n      console.log('ticking');\n    },\n    onLayoutEnd: () => {\n      console.log('force layout done');\n    },\n    workerEnabled: true, // Whether to activate web-worker\n    gpuEnabled: true     // Whether to enable the GPU parallel computing, supported by G6 4.0\n    ... // more options are shown below\n  },\n});\n",paraId:1},{value:"If you want to fix the positions for some nodes during calculation, assign ",paraId:2},{value:"fx",paraId:2},{value:" and ",paraId:2},{value:"fy",paraId:2},{value:" for the nodes as fixing positions. ",paraId:2},{value:"Demo for fixing node",paraId:3},{value:".",paraId:2},{value:"Type",paraId:4,tocIndex:0},{value:": Array",paraId:4,tocIndex:0},{value:"Example",paraId:4,tocIndex:0},{value:": [ 0, 0 ]",paraId:4,tocIndex:0},{value:"Default",paraId:4,tocIndex:0},{value:": The center of the graph",paraId:4,tocIndex:0},{value:"Required",paraId:4,tocIndex:0},{value:": false",paraId:4,tocIndex:0},{value:"Description",paraId:4,tocIndex:0},{value:": The center of the layout",paraId:4,tocIndex:0},{value:"Supported from v4.7.0",paraId:5,tocIndex:1},{value:"Type",paraId:6,tocIndex:1},{value:":",paraId:6,tocIndex:1},{value:"{\n  type: string; // preset layout name, could be any static layout like random, concentric, grid, circular, radial, and dagre\n  [key: string]: unkown; // corresponding configurations for the preset layout type\n}\n",paraId:7,tocIndex:1},{value:"Default",paraId:8,tocIndex:1},{value:": undefined",paraId:8,tocIndex:1},{value:"Required",paraId:8,tocIndex:1},{value:": false",paraId:8,tocIndex:1},{value:"Description",paraId:8,tocIndex:1},{value:": Preset layout calculates intialize positions for nodes, and the force layout will start from the inited result. The quality of the force layout's result depends on the initial positions of nodes. Configuring a proper preset for a force layout will speed up the convergence of force layout, and enhance the quality in the same time. By default, the positions of nodes will be inited as grid",paraId:8,tocIndex:1},{value:"Type",paraId:9,tocIndex:2},{value:": Number / Function",paraId:9,tocIndex:2},{value:"Default",paraId:9,tocIndex:2},{value:": 1",paraId:9,tocIndex:2},{value:"Required",paraId:9,tocIndex:2},{value:": false",paraId:9,tocIndex:2},{value:"Description",paraId:9,tocIndex:2},{value:": The edge length",paraId:9,tocIndex:2},{value:"Type",paraId:10,tocIndex:3},{value:": Number / Function",paraId:10,tocIndex:3},{value:"Default",paraId:10,tocIndex:3},{value:": 1000",paraId:10,tocIndex:3},{value:"Required",paraId:10,tocIndex:3},{value:": false",paraId:10,tocIndex:3},{value:"Description",paraId:10,tocIndex:3},{value:": The strength of node force. Positive value means repulsive force, negative value means attractive force (it is different from 'force')",paraId:10,tocIndex:3},{value:"Type",paraId:11,tocIndex:4},{value:": Number / Function",paraId:11,tocIndex:4},{value:"Default",paraId:11,tocIndex:4},{value:": 200",paraId:11,tocIndex:4},{value:"Required",paraId:11,tocIndex:4},{value:": false",paraId:11,tocIndex:4},{value:"Description",paraId:11,tocIndex:4},{value:": The strength of edge force. Calculated according to the degree of nodes by default",paraId:11,tocIndex:4},{value:"Type",paraId:12,tocIndex:5},{value:": Number",paraId:12,tocIndex:5},{value:"Default",paraId:12,tocIndex:5},{value:": false",paraId:12,tocIndex:5},{value:"Required",paraId:12,tocIndex:5},{value:": false",paraId:12,tocIndex:5},{value:"Description",paraId:12,tocIndex:5},{value:": Whether to prevent node overlappings. To activate preventing node overlappings, ",paraId:12,tocIndex:5},{value:"nodeSize",paraId:12,tocIndex:5},{value:" is required, which is used for collide detection. The size in the node data will take effect if ",paraId:12,tocIndex:5},{value:"nodeSize",paraId:12,tocIndex:5},{value:" is not assigned",paraId:12,tocIndex:5},{value:"Type",paraId:13,tocIndex:6},{value:": Number",paraId:13,tocIndex:6},{value:"Default",paraId:13,tocIndex:6},{value:": 10",paraId:13,tocIndex:6},{value:"Required",paraId:13,tocIndex:6},{value:": false",paraId:13,tocIndex:6},{value:"Description",paraId:13,tocIndex:6},{value:": The diameter of the node. It is used for preventing node overlappings. If ",paraId:13,tocIndex:6},{value:"nodeSize",paraId:13,tocIndex:6},{value:" is not assigned, the size property in node data will take effect. If the size in node data does not exist either, ",paraId:13,tocIndex:6},{value:"nodeSize",paraId:13,tocIndex:6},{value:" is assigned to 10 by default",paraId:13,tocIndex:6},{value:"Type",paraId:14,tocIndex:7},{value:": Number / Function ",paraId:14,tocIndex:7},{value:"Default",paraId:14,tocIndex:7},{value:": 0 ",paraId:14,tocIndex:7},{value:"Required",paraId:14,tocIndex:7},{value:": false ",paraId:14,tocIndex:7},{value:"Example",paraId:14,tocIndex:7},{value:": Example 1: 10 ",paraId:14,tocIndex:7},{value:"Example 2:",paraId:14,tocIndex:7},{value:"(d) => {\n  // d is a node\n  if (d.id === 'node1') {\n    return 100;\n  }\n  return 10;\n};\n",paraId:15,tocIndex:7},{value:"Description",paraId:16,tocIndex:7},{value:": Takes effect when ",paraId:16,tocIndex:7},{value:"preventOverlap",paraId:16,tocIndex:7},{value:" is ",paraId:16,tocIndex:7},{value:"true",paraId:16,tocIndex:7},{value:". It is the minimum distance between nodes to prevent node overlappings. It can be a function to define different distances for different nodes (example 2)",paraId:16,tocIndex:7},{value:"Type",paraId:17,tocIndex:8},{value:": Number",paraId:17,tocIndex:8},{value:"Default",paraId:17,tocIndex:8},{value:": 0.5",paraId:17,tocIndex:8},{value:"Required",paraId:17,tocIndex:8},{value:": false",paraId:17,tocIndex:8},{value:"Description",paraId:17,tocIndex:8},{value:": When the average movement of nodes in one iteration is smaller than ",paraId:17,tocIndex:8},{value:"minMovement",paraId:17,tocIndex:8},{value:", terminate the layout",paraId:17,tocIndex:8},{value:"Type",paraId:18,tocIndex:9},{value:": Number",paraId:18,tocIndex:9},{value:"Default",paraId:18,tocIndex:9},{value:": 1000",paraId:18,tocIndex:9},{value:"Required",paraId:18,tocIndex:9},{value:": false",paraId:18,tocIndex:9},{value:"Description",paraId:18,tocIndex:9},{value:": The max number of iterations. If the average movement do not reach ",paraId:18,tocIndex:9},{value:"minMovement",paraId:18,tocIndex:9},{value:" but the iteration number is over ",paraId:18,tocIndex:9},{value:"maxIteration",paraId:18,tocIndex:9},{value:", terminate the layout",paraId:18,tocIndex:9},{value:"Type",paraId:19,tocIndex:10},{value:": Number",paraId:19,tocIndex:10},{value:"Default",paraId:19,tocIndex:10},{value:": 0.9",paraId:19,tocIndex:10},{value:"Required",paraId:19,tocIndex:10},{value:": false",paraId:19,tocIndex:10},{value:"Description",paraId:19,tocIndex:10},{value:": Range [0, 1], affect the speed of decreasing node moving speed. Large the number, slower the decreasing",paraId:19,tocIndex:10},{value:"Type",paraId:20,tocIndex:11},{value:": Number",paraId:20,tocIndex:11},{value:"Default",paraId:20,tocIndex:11},{value:": 1000",paraId:20,tocIndex:11},{value:"Required",paraId:20,tocIndex:11},{value:": false",paraId:20,tocIndex:11},{value:"Description",paraId:20,tocIndex:11},{value:": The max speed in each iteration",paraId:20,tocIndex:11},{value:"Type",paraId:21,tocIndex:12},{value:": Number",paraId:21,tocIndex:12},{value:"Default",paraId:21,tocIndex:12},{value:": 0.005",paraId:21,tocIndex:12},{value:"Required",paraId:21,tocIndex:12},{value:": false",paraId:21,tocIndex:12},{value:"Description",paraId:21,tocIndex:12},{value:": A parameter for repulsive force between nodes. Large the number, larger the repulsion",paraId:21,tocIndex:12},{value:"Type",paraId:22,tocIndex:13},{value:": Function",paraId:22,tocIndex:13},{value:"Default",paraId:22,tocIndex:13},{value:": undefined",paraId:22,tocIndex:13},{value:"Required",paraId:22,tocIndex:13},{value:": false",paraId:22,tocIndex:13},{value:"Description",paraId:22,tocIndex:13},{value:": It is a callback returns the mass of each node. If it is not assigned, the degree of each node will take effect. The usage is similar to ",paraId:22,tocIndex:13},{value:"nodeSpacing",paraId:22,tocIndex:13},{value:"Type",paraId:23,tocIndex:14},{value:": Function",paraId:23,tocIndex:14},{value:"Default",paraId:23,tocIndex:14},{value:": undefined",paraId:23,tocIndex:14},{value:"Required",paraId:23,tocIndex:14},{value:": false",paraId:23,tocIndex:14},{value:"Description",paraId:23,tocIndex:14},{value:": It is a callback returns gravity center and the gravity strength for each node",paraId:23,tocIndex:14},{value:"Example",paraId:23,tocIndex:14},{value:"(d, degree) => {\n  // d is a node, degree is the degree of the node\n  if (d.clusterId === 'c1') return [100, 100, 10]; // x, y, strength\n  if (degree === 0) return [250, 250, 15];\n  return [180, 180, 5]; // x, y, strength\n};\n",paraId:24,tocIndex:14},{value:"Type",paraId:25,tocIndex:15},{value:": Number",paraId:25,tocIndex:15},{value:"Default",paraId:25,tocIndex:15},{value:": 10",paraId:25,tocIndex:15},{value:"Required",paraId:25,tocIndex:15},{value:": false",paraId:25,tocIndex:15},{value:"Description",paraId:25,tocIndex:15},{value:": The gravity strength to the ",paraId:25,tocIndex:15},{value:"center",paraId:25,tocIndex:15},{value:" for all the nodes. Larger the number, more compact the nodes",paraId:25,tocIndex:15},{value:"Type",paraId:26,tocIndex:16},{value:": Function",paraId:26,tocIndex:16},{value:"Default",paraId:26,tocIndex:16},{value:": {}",paraId:26,tocIndex:16},{value:"Required",paraId:26,tocIndex:16},{value:": false",paraId:26,tocIndex:16},{value:"Description",paraId:26,tocIndex:16},{value:": The callback function of each iteration",paraId:26,tocIndex:16},{value:"Type",paraId:27,tocIndex:17},{value:": Function",paraId:27,tocIndex:17},{value:"Default",paraId:27,tocIndex:17},{value:": {}",paraId:27,tocIndex:17},{value:"Required",paraId:27,tocIndex:17},{value:": false",paraId:27,tocIndex:17},{value:"Description",paraId:27,tocIndex:17},{value:": The callback function after layout",paraId:27,tocIndex:17},{value:"Type",paraId:28,tocIndex:18},{value:": Boolean",paraId:28,tocIndex:18},{value:"Default",paraId:28,tocIndex:18},{value:": false",paraId:28,tocIndex:18},{value:"Required",paraId:28,tocIndex:18},{value:": false",paraId:28,tocIndex:18},{value:"Description",paraId:28,tocIndex:18},{value:": Whether to enable the web-worker in case layout calculation takes too long to block page interaction.\n",paraId:28,tocIndex:18},{value:"⚠️ Notice:",paraId:28,tocIndex:18},{value:" When ",paraId:28,tocIndex:18},{value:"workerEnabled: true",paraId:28,tocIndex:18},{value:", all the function type parameters are not supported.",paraId:28,tocIndex:18},{value:"Type",paraId:29,tocIndex:19},{value:": Boolean",paraId:29,tocIndex:19},{value:"Default",paraId:29,tocIndex:19},{value:": false",paraId:29,tocIndex:19},{value:"Required",paraId:29,tocIndex:19},{value:": false",paraId:29,tocIndex:19},{value:"Description",paraId:29,tocIndex:19},{value:": Whether to enable the GPU parallel computing, supported by G6 4.0. If the machine or browser does not support GPU computing, it will be degraded to CPU computing automatically. The performance improvement: ",paraId:29,tocIndex:19}]},11862:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Grid orders the nodes according to the configurations and arranged them onto grid.",paraId:0},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 1000,\n  height: 600,\n  layout: {\n    type: 'grid',\n    begin: [0, 0],\n    preventOverlap: true, // nodeSize or size in data is required for preventOverlap: true\n    preventOverlapPdding: 20,\n    nodeSize: 30,\n    condense: false,\n    rows: 5,\n    cols: 5,\n    sortBy: 'degree',\n  },\n});\n",paraId:1},{value:"Type",paraId:2,tocIndex:0},{value:": Array",paraId:2,tocIndex:0},{value:"Example",paraId:2,tocIndex:0},{value:": [ 0, 0 ]",paraId:2,tocIndex:0},{value:"Default",paraId:2,tocIndex:0},{value:": [ 0, 0 ]",paraId:2,tocIndex:0},{value:"Required",paraId:2,tocIndex:0},{value:": false",paraId:2,tocIndex:0},{value:"Description",paraId:2,tocIndex:0},{value:": The place where the grid begin (left top)",paraId:2,tocIndex:0},{value:"Type",paraId:3,tocIndex:1},{value:": Boolean",paraId:3,tocIndex:1},{value:"Default",paraId:3,tocIndex:1},{value:": false",paraId:3,tocIndex:1},{value:"Required",paraId:3,tocIndex:1},{value:": false",paraId:3,tocIndex:1},{value:"Description",paraId:3,tocIndex:1},{value:": Whether to prevent node overlappings. To activate preventing node overlappings, ",paraId:3,tocIndex:1},{value:"nodeSize",paraId:3,tocIndex:1},{value:" is required, which is used for collide detection. The size in the node data will take effect if ",paraId:3,tocIndex:1},{value:"nodeSize",paraId:3,tocIndex:1},{value:" is not assigned. If the size in node data does not exist either, ",paraId:3,tocIndex:1},{value:"nodeSize",paraId:3,tocIndex:1},{value:" is assigned to 30 by default",paraId:3,tocIndex:1},{value:"Type",paraId:4,tocIndex:2},{value:": Number",paraId:4,tocIndex:2},{value:"Default",paraId:4,tocIndex:2},{value:": 30",paraId:4,tocIndex:2},{value:"Required",paraId:4,tocIndex:2},{value:": false",paraId:4,tocIndex:2},{value:"Description",paraId:4,tocIndex:2},{value:": The diameter of the node. It is used for preventing node overlappings",paraId:4,tocIndex:2},{value:"Type",paraId:5,tocIndex:3},{value:": Number",paraId:5,tocIndex:3},{value:"Default",paraId:5,tocIndex:3},{value:": 10",paraId:5,tocIndex:3},{value:"Required",paraId:5,tocIndex:3},{value:": false",paraId:5,tocIndex:3},{value:"Description",paraId:5,tocIndex:3},{value:": The minimum padding between nodes to prevent node overlappings. Takes effect when ",paraId:5,tocIndex:3},{value:"preventOverlap",paraId:5,tocIndex:3},{value:" is ",paraId:5,tocIndex:3},{value:"true",paraId:5,tocIndex:3},{value:"Type",paraId:6,tocIndex:4},{value:": Boolean",paraId:6,tocIndex:4},{value:"Default",paraId:6,tocIndex:4},{value:": false",paraId:6,tocIndex:4},{value:"Required",paraId:6,tocIndex:4},{value:": false",paraId:6,tocIndex:4},{value:"Description",paraId:6,tocIndex:4},{value:": Wheter to utilize the minimum space of the canvas. ",paraId:6,tocIndex:4},{value:"false",paraId:6,tocIndex:4},{value:" means utilizing the full space, ",paraId:6,tocIndex:4},{value:"true",paraId:6,tocIndex:4},{value:" means utilizing the minimum space.",paraId:6,tocIndex:4},{value:"Type",paraId:7,tocIndex:5},{value:": Number",paraId:7,tocIndex:5},{value:"Default",paraId:7,tocIndex:5},{value:": undefined",paraId:7,tocIndex:5},{value:"Required",paraId:7,tocIndex:5},{value:": false",paraId:7,tocIndex:5},{value:"Description",paraId:7,tocIndex:5},{value:": The row number of the grid. If ",paraId:7,tocIndex:5},{value:"rows",paraId:7,tocIndex:5},{value:" is undefined, the algorithm will calculate it according to the space and node numbers automatically",paraId:7,tocIndex:5},{value:"Type",paraId:8,tocIndex:6},{value:": Number",paraId:8,tocIndex:6},{value:"Default",paraId:8,tocIndex:6},{value:": undefined",paraId:8,tocIndex:6},{value:"Required",paraId:8,tocIndex:6},{value:": false",paraId:8,tocIndex:6},{value:"Description",paraId:8,tocIndex:6},{value:": The column number of the grid. If ",paraId:8,tocIndex:6},{value:"cols",paraId:8,tocIndex:6},{value:" is undefined, the algorithm will calculate it according to the space and node numbers automatically",paraId:8,tocIndex:6},{value:"Type",paraId:9,tocIndex:7},{value:": String",paraId:9,tocIndex:7},{value:"Default",paraId:9,tocIndex:7},{value:": undefined",paraId:9,tocIndex:7},{value:"Required",paraId:9,tocIndex:7},{value:": false",paraId:9,tocIndex:7},{value:"Description",paraId:9,tocIndex:7},{value:": The ordering method for nodes. Smaller the index in the ordered array, more center the node will be placed. If ",paraId:9,tocIndex:7},{value:"sortBy",paraId:9,tocIndex:7},{value:" is undefined, the algorithm order the nodes according to their degrees",paraId:9,tocIndex:7},{value:"Type",paraId:10,tocIndex:8},{value:": Boolean",paraId:10,tocIndex:8},{value:"Default",paraId:10,tocIndex:8},{value:": false",paraId:10,tocIndex:8},{value:"Required",paraId:10,tocIndex:8},{value:": false",paraId:10,tocIndex:8},{value:"Description",paraId:10,tocIndex:8},{value:": Whether to enable the web-worker in case layout calculation takes too long to block page interaction.\n",paraId:10,tocIndex:8},{value:"⚠️ Notice:",paraId:10,tocIndex:8},{value:" When ",paraId:10,tocIndex:8},{value:"workerEnabled: true",paraId:10,tocIndex:8},{value:", all the function type parameters are not supported.",paraId:10,tocIndex:8}]},29906:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"G6 provides several built-in layout algorithms as listed below. They can be ",paraId:0,tocIndex:0},{value:"configured to ",paraId:1,tocIndex:0},{value:"layout",paraId:1,tocIndex:0},{value:" when instantiate the Graph",paraId:1,tocIndex:0},{value:", or be ",paraId:0,tocIndex:0},{value:"instantiated independently",paraId:2,tocIndex:0},{value:". If the built-in layouts cannot meet your requirement, you can also ",paraId:0,tocIndex:0},{value:"custom a layout",paraId:3,tocIndex:0},{value:".",paraId:0,tocIndex:0},{value:"Notice that the layouts for Graph cannot be used on TreeGraph.",paraId:4,tocIndex:0},{value:"Random Layout",paraId:5,tocIndex:0},{value:": Randomizes the node postions;",paraId:6,tocIndex:0},{value:"GForce Layout",paraId:7,tocIndex:0},{value:": Classical force-directed layout supports GPU parallel computing, supported by G6 4.0;",paraId:6,tocIndex:0},{value:"Force Layout",paraId:8,tocIndex:0},{value:": Classical force-directed layout;",paraId:6,tocIndex:0},{value:"Force Atlas 2 Layout",paraId:9,tocIndex:0},{value:": FA2 is a kind of force directed layout, which performs better on the convergence and compactness;",paraId:6,tocIndex:0},{value:"Fruchterman Layout",paraId:10,tocIndex:0},{value:": A kind of force-directed layout;",paraId:6,tocIndex:0},{value:"Circular Layout",paraId:11,tocIndex:0},{value:": Arranges the nodes on a circle;",paraId:6,tocIndex:0},{value:"Radial Layout",paraId:12,tocIndex:0},{value:": Arranges the nodes around a focus node radially;",paraId:6,tocIndex:0},{value:"MDS Layout",paraId:13,tocIndex:0},{value:": Multidemensional Scaling;",paraId:6,tocIndex:0},{value:"Dagre Layout",paraId:14,tocIndex:0},{value:": Arranges the nodes hierarchically;",paraId:6,tocIndex:0},{value:"Concentric Layout",paraId:15,tocIndex:0},{value:": Arranges the nodes on concentric circles;",paraId:6,tocIndex:0},{value:"Grid Layout",paraId:16,tocIndex:0},{value:": Arranges the nodes on grid.",paraId:6,tocIndex:0},{value:"Combo Force Layout",paraId:17,tocIndex:0},{value:"：",paraId:6,tocIndex:0},{value:"New feature of V3.5",paraId:6,tocIndex:0},{value:" Designed for graph with combos.",paraId:6,tocIndex:0},{value:"Combo Combined Layout",paraId:18,tocIndex:0},{value:"：",paraId:6,tocIndex:0},{value:"New feature of V4.6",paraId:6,tocIndex:0},{value:" Designed for graph with combos. Support configuring the layout for items inside a combo and the layout for the outer combos and nodes.",paraId:6,tocIndex:0},{value:"Configure the ",paraId:19,tocIndex:1},{value:"layout",paraId:19,tocIndex:1},{value:" when instantiating a Graph:",paraId:19,tocIndex:1},{value:"const graph = new G6.Graph({\n  ...                      // Other configurations\n  layout: {                // Object, configuration for layout. random by default\n    type: 'force',\n    preventOverlap: true,\n    nodeSize: 30,\n    // workerEnabled: true, // Whether enable webworker\n    // gpuEnabled: true // Whether enable GPU version. supported by G6 4.0, and only support gForce and fruchterman layout. If the machine or browser does not support GPU computing, it will be degraded to CPU computing automatically. \n    ...                    // Other layout configurations\n  }\n});\n",paraId:20,tocIndex:1},{value:"The configurations of each layout algorithms are different. Please refer to corresponding API of each layout in this directory. ",paraId:21,tocIndex:1},{value:"When ",paraId:21,tocIndex:1},{value:"layout",paraId:21,tocIndex:1},{value:" is not assigned on graph:",paraId:21,tocIndex:1},{value:"If there are ",paraId:22,tocIndex:1},{value:"x",paraId:22,tocIndex:1},{value:" and ",paraId:22,tocIndex:1},{value:"y",paraId:22,tocIndex:1},{value:" in node data, the graph will render with these information;",paraId:22,tocIndex:1},{value:"If there is no positions information in node data, the graph will arrange nodes with Random Layout by default.",paraId:22,tocIndex:1},{value:"If the worker is enabled, notice that worker will visit the latest online version of @antv/layout. If your application cannot reach the online resource, download and save the ",paraId:23,tocIndex:1},{value:"layout script",paraId:23,tocIndex:1},{value:", and put it on an address which is visitable for your application. And then config ",paraId:23,tocIndex:1},{value:"workerScriptURL",paraId:23,tocIndex:1},{value:" with the address in ",paraId:23,tocIndex:1},{value:"layout",paraId:23,tocIndex:1},{value:".",paraId:23,tocIndex:1},{value:"The functions in this section should be concerned in these two situation:",paraId:24,tocIndex:2},{value:"When you want to applay a layout algorithm to your data but not for Graph, you can instantiate the layout independently by calling ",paraId:25,tocIndex:2},{value:"const layout = new G6.Layout['layoutName']",paraId:25,tocIndex:2},{value:".",paraId:25,tocIndex:2},{value:"When you want to custom a new type of layout by ",paraId:25,tocIndex:2},{value:"G6.registerLayout",paraId:25,tocIndex:2},{value:", some functions you should override.",paraId:25,tocIndex:2},{value:"Initialize the layout.",paraId:26,tocIndex:4},{value:"Paramter",paraId:27,tocIndex:4},{value:"Name",paraId:28,tocIndex:4},{value:"Type",paraId:28,tocIndex:4},{value:"Required",paraId:28,tocIndex:4},{value:"Description",paraId:28,tocIndex:4},{value:"data",paraId:28,tocIndex:4},{value:"Object",paraId:28,tocIndex:4},{value:"true",paraId:28,tocIndex:4},{value:"The data for the layout",paraId:28,tocIndex:4},{value:"Get the default configurations of the layout.",paraId:29,tocIndex:5},{value:"Return",paraId:30,tocIndex:5},{value:"Name",paraId:31,tocIndex:5},{value:"Type",paraId:31,tocIndex:5},{value:"Required",paraId:31,tocIndex:5},{value:"Description",paraId:31,tocIndex:5},{value:"cfg",paraId:31,tocIndex:5},{value:"Object",paraId:31,tocIndex:5},{value:"true",paraId:31,tocIndex:5},{value:"The default configurations",paraId:31,tocIndex:5},{value:"Execute the layout.",paraId:32,tocIndex:7},{value:"Execute layout according to the data.",paraId:33,tocIndex:8},{value:"Paramter",paraId:34,tocIndex:8},{value:"Name",paraId:35,tocIndex:8},{value:"Type",paraId:35,tocIndex:8},{value:"Required",paraId:35,tocIndex:8},{value:"Description",paraId:35,tocIndex:8},{value:"data",paraId:35,tocIndex:8},{value:"Object",paraId:35,tocIndex:8},{value:"true",paraId:35,tocIndex:8},{value:"The data to be arranged",paraId:35,tocIndex:8},{value:"Update the configurations for layout.",paraId:36,tocIndex:10},{value:"Paramter",paraId:37,tocIndex:10},{value:"Name",paraId:38,tocIndex:10},{value:"Type",paraId:38,tocIndex:10},{value:"Required",paraId:38,tocIndex:10},{value:"Description",paraId:38,tocIndex:10},{value:"cfg",paraId:38,tocIndex:10},{value:"Object",paraId:38,tocIndex:10},{value:"true",paraId:38,tocIndex:10},{value:"New configurations",paraId:38,tocIndex:10},{value:"Destroy the layout.",paraId:39,tocIndex:12},{value:"In an application of graph visualization, how to choose a suitable layout so that the data queried every time can be clearly displayed is a big challenge. Although we can allow user to switch the layout and their configuration like Gephi, but it is obviousely inefficient. And the users might not able to choose a perfect layout. In order to completely solve the problem, G6 provides intelligent layout prediction capabilities. The prediction engine will recommend the most suitable layout based on the data.",paraId:40,tocIndex:14},{value:"Intelligent layout refers to modeling in combination with neural networks and training output prediction models through a large amount of labeled data (label layout classification). In business scenarios, the real graph data is predicted through the model, so as to recommend the most suitable data layout classification method.",paraId:41,tocIndex:15},{value:"@antv/vis-predict-engine is positioned as a prediction engine for visualization, which is mainly used for classification prediction of graph layout in the short term. Generally speaking, the prediction engine will support layout configuration parameter prediction, node category prediction, chart category prediction, etc.",paraId:42,tocIndex:16},{value:"The overall process of G6 map layout prediction is shown in the following figure:",paraId:43,tocIndex:16},{value:"The AntV team encapsulated the ability of graph layout prediction into the NPM package @antv/vis-predict-engine, and used the predict method to predict the layout of the provided data. The basic usage is as follows:",paraId:44,tocIndex:17},{value:"import G6 from '@antv/g6'\nimport { GraphLayoutPredict } from '@antv/vis-predict-engine'\nconst data = {\n    nodes: [],\n  edges: []\n}\n// predictLayout indicates the predicted layout type, such as 'force' or 'radial'\n// 'confidence' is the confidence of the prediction\nconst { predictLayout, confidence } = await GraphLayoutPredict.predict(data);\nconst graph = new G6.Graph({\n    ... // other configurations\n    layout: {\n    type: predictLayout\n  }\n})\n",paraId:45,tocIndex:17},{value:'As shown in the figure below, in a medical and health map, the layout effect of "force" obtained by the intelligent layout prediction engine is the best, and the comparison experiment also meets expectations.',paraId:46,tocIndex:18},{value:"AI Layout Prediction DEMO",paraId:47}]},46735:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"MDS (Multidimensional scaling) is used for project high dimensional data onto low dimensional space.",paraId:0},{value:" ",paraId:0},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 1000,\n  height: 600,\n  layout: {\n    type: 'mds',\n    workerEnabled: true, // Whether to activate web-worker\n  },\n});\n",paraId:1},{value:"Type",paraId:2,tocIndex:0},{value:": Array",paraId:2,tocIndex:0},{value:"Example",paraId:2,tocIndex:0},{value:": [ 0, 0 ]",paraId:2,tocIndex:0},{value:"Default",paraId:2,tocIndex:0},{value:": The center of the graph",paraId:2,tocIndex:0},{value:"Required",paraId:2,tocIndex:0},{value:": false",paraId:2,tocIndex:0},{value:"Description",paraId:2,tocIndex:0},{value:": The center of the layout",paraId:2,tocIndex:0},{value:"Type",paraId:3,tocIndex:1},{value:": Number",paraId:3,tocIndex:1},{value:"Default",paraId:3,tocIndex:1},{value:": 50",paraId:3,tocIndex:1},{value:"Required",paraId:3,tocIndex:1},{value:": false",paraId:3,tocIndex:1},{value:"Description",paraId:3,tocIndex:1},{value:": The edge length",paraId:3,tocIndex:1},{value:"Type",paraId:4,tocIndex:2},{value:": Boolean",paraId:4,tocIndex:2},{value:"Default",paraId:4,tocIndex:2},{value:": false",paraId:4,tocIndex:2},{value:"Required",paraId:4,tocIndex:2},{value:": false",paraId:4,tocIndex:2},{value:"Description",paraId:4,tocIndex:2},{value:": Whether to enable the web-worker in case layout calculation takes too long to block page interaction.\n",paraId:4,tocIndex:2},{value:"⚠️ Notice:",paraId:4,tocIndex:2},{value:" When ",paraId:4,tocIndex:2},{value:"workerEnabled: true",paraId:4,tocIndex:2},{value:", all the function type parameters are not supported.",paraId:4,tocIndex:2}]},10976:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Radial layout arranges the nodes to concentrics centered at a focus node according to their shortest path length to the focus node. G6 implements it according to the paper: ",paraId:0},{value:"More Flexible Radial Layout",paraId:0},{value:".",paraId:0},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 1000,\n  height: 600,\n  layout: {\n    type: 'radial',\n    center: [200, 200], // The center of the graph by default\n    linkDistance: 50, // The edge length\n    maxIteration: 1000,\n    focusNode: 'node11',\n    unitRadius: 100,\n    preventOverlap: true, // nodeSize or size in data is required for preventOverlap: true\n    nodeSize: 30,\n    strictRadial: false,\n    workerEnabled: true, // Whether to activate web-worker\n  },\n});\n",paraId:1},{value:"Type",paraId:2,tocIndex:0},{value:": Array",paraId:2,tocIndex:0},{value:"Example",paraId:2,tocIndex:0},{value:": [ 0, 0 ]",paraId:2,tocIndex:0},{value:"Default",paraId:2,tocIndex:0},{value:": The center of the graph",paraId:2,tocIndex:0},{value:"Required",paraId:2,tocIndex:0},{value:": false",paraId:2,tocIndex:0},{value:"Description",paraId:2,tocIndex:0},{value:": The center of the layout.",paraId:2,tocIndex:0},{value:"Type",paraId:3,tocIndex:1},{value:": Number",paraId:3,tocIndex:1},{value:"Default",paraId:3,tocIndex:1},{value:": 50",paraId:3,tocIndex:1},{value:"Required",paraId:3,tocIndex:1},{value:": false",paraId:3,tocIndex:1},{value:"Description",paraId:3,tocIndex:1},{value:": The edge length.",paraId:3,tocIndex:1},{value:"Type",paraId:4,tocIndex:2},{value:": Number",paraId:4,tocIndex:2},{value:"Default",paraId:4,tocIndex:2},{value:": 1000",paraId:4,tocIndex:2},{value:"Required",paraId:4,tocIndex:2},{value:": false",paraId:4,tocIndex:2},{value:"Description",paraId:4,tocIndex:2},{value:": The max iteration number.",paraId:4,tocIndex:2},{value:"Type",paraId:5,tocIndex:3},{value:": String | Object",paraId:5,tocIndex:3},{value:"Default",paraId:5,tocIndex:3},{value:": null",paraId:5,tocIndex:3},{value:"Required",paraId:5,tocIndex:3},{value:": false",paraId:5,tocIndex:3},{value:"Description",paraId:5,tocIndex:3},{value:": The focus node of the radial layout. The first node of the data is the default value. It can be the id of a node or the node item.",paraId:5,tocIndex:3},{value:"Type",paraId:6,tocIndex:4},{value:": Number",paraId:6,tocIndex:4},{value:"Default",paraId:6,tocIndex:4},{value:": 100",paraId:6,tocIndex:4},{value:"Required",paraId:6,tocIndex:4},{value:": false",paraId:6,tocIndex:4},{value:"Description",paraId:6,tocIndex:4},{value:": The separation between adjacent circles. If ",paraId:6,tocIndex:4},{value:"unitRadius",paraId:6,tocIndex:4},{value:" is not assigned, the layout will fill the canvas automatically.",paraId:6,tocIndex:4},{value:"Type",paraId:7,tocIndex:5},{value:": Boolean",paraId:7,tocIndex:5},{value:"Default",paraId:7,tocIndex:5},{value:": false",paraId:7,tocIndex:5},{value:"Required",paraId:7,tocIndex:5},{value:": false",paraId:7,tocIndex:5},{value:"Description",paraId:7,tocIndex:5},{value:": Whether to prevent node overlappings. To activate preventing node overlappings, ",paraId:7,tocIndex:5},{value:"nodeSize",paraId:7,tocIndex:5},{value:" is required, which is used for collide detection. The size in the node data will take effect if ",paraId:7,tocIndex:5},{value:"nodeSize",paraId:7,tocIndex:5},{value:" is not assigned.",paraId:7,tocIndex:5},{value:"Type",paraId:8,tocIndex:6},{value:": Number",paraId:8,tocIndex:6},{value:"Default",paraId:8,tocIndex:6},{value:": 10",paraId:8,tocIndex:6},{value:"Required",paraId:8,tocIndex:6},{value:": false",paraId:8,tocIndex:6},{value:"Description",paraId:8,tocIndex:6},{value:": The diameter of the node. It is used for preventing node overlappings",paraId:8,tocIndex:6},{value:"Type",paraId:9,tocIndex:7},{value:": Number / Function ",paraId:9,tocIndex:7},{value:"Default",paraId:9,tocIndex:7},{value:": 0 ",paraId:9,tocIndex:7},{value:"Required",paraId:9,tocIndex:7},{value:": false ",paraId:9,tocIndex:7},{value:"Example",paraId:9,tocIndex:7},{value:": Example 1: 10 ",paraId:9,tocIndex:7},{value:"Example 2:",paraId:9,tocIndex:7},{value:"(d) => {\n  // d is a node\n  if (d.id === 'node1') {\n    return 100;\n  }\n  return 10;\n};\n",paraId:10,tocIndex:7},{value:"Description",paraId:11,tocIndex:7},{value:": Takes effect when ",paraId:11,tocIndex:7},{value:"preventOverlap",paraId:11,tocIndex:7},{value:" is ",paraId:11,tocIndex:7},{value:"true",paraId:11,tocIndex:7},{value:". It is the minimum distance between nodes to prevent node overlappings. It can be a function to define different distances for different nodes (example 2)",paraId:11,tocIndex:7},{value:"Type",paraId:12,tocIndex:8},{value:": Number",paraId:12,tocIndex:8},{value:"Default",paraId:12,tocIndex:8},{value:": 200",paraId:12,tocIndex:8},{value:"Required",paraId:12,tocIndex:8},{value:": false",paraId:12,tocIndex:8},{value:"Description",paraId:12,tocIndex:8},{value:": The maximum iteration number of preventing node overlappings",paraId:12,tocIndex:8},{value:"Type",paraId:13,tocIndex:9},{value:": Boolean",paraId:13,tocIndex:9},{value:"Default",paraId:13,tocIndex:9},{value:": true",paraId:13,tocIndex:9},{value:"Required",paraId:13,tocIndex:9},{value:": false",paraId:13,tocIndex:9},{value:"Description",paraId:13,tocIndex:9},{value:": Whether to layout the graph as strict radial, which means the nodes will be arranged on each circle strictly. Takes effect only when ",paraId:13,tocIndex:9},{value:"preventOverlap",paraId:13,tocIndex:9},{value:" is ",paraId:13,tocIndex:9},{value:"true",paraId:13,tocIndex:9},{value:"When ",paraId:14,tocIndex:9},{value:"preventOverlap",paraId:14,tocIndex:9},{value:" is ",paraId:14,tocIndex:9},{value:"true",paraId:14,tocIndex:9},{value:", and ",paraId:14,tocIndex:9},{value:"strictRadial",paraId:14,tocIndex:9},{value:" is ",paraId:14,tocIndex:9},{value:"false",paraId:14,tocIndex:9},{value:", the overlapped nodes are arranged along their circles strictly. But for the situation that there are too many nodes on a circle to be arranged, the overlappings might not be eliminated completely",paraId:14,tocIndex:9},{value:"When ",paraId:14,tocIndex:9},{value:"preventOverlap",paraId:14,tocIndex:9},{value:" is ",paraId:14,tocIndex:9},{value:"true",paraId:14,tocIndex:9},{value:", and ",paraId:14,tocIndex:9},{value:"strictRadial",paraId:14,tocIndex:9},{value:" is ",paraId:14,tocIndex:9},{value:"true",paraId:14,tocIndex:9},{value:" , the overlapped nodes can be arranged around their circle with small offsets.",paraId:14,tocIndex:9},{value:"（Left）preventOverlap = false.（Center）preventOverlap = false, strictRadial = true. (Right)preventOverlap = false, strictRadial = false.",paraId:15,tocIndex:9},{value:"Type",paraId:16,tocIndex:10},{value:": String",paraId:16,tocIndex:10},{value:"Default",paraId:16,tocIndex:10},{value:": undefined",paraId:16,tocIndex:10},{value:"Required",paraId:16,tocIndex:10},{value:": false",paraId:16,tocIndex:10},{value:"Description",paraId:16,tocIndex:10},{value:": Sort the nodes of the same level. ",paraId:16,tocIndex:10},{value:"undefined",paraId:16,tocIndex:10},{value:" by default, which means place the nodes with connections as close as possible; ",paraId:16,tocIndex:10},{value:"'data'",paraId:16,tocIndex:10},{value:" means place the node according to the ordering in data, the closer the nodes in data ordering, the closer the nodes will be placed. ",paraId:16,tocIndex:10},{value:"sortBy",paraId:16,tocIndex:10},{value:" also can be assigned to any name of property in nodes data, such as ",paraId:16,tocIndex:10},{value:"'cluster'",paraId:16,tocIndex:10},{value:", ",paraId:16,tocIndex:10},{value:"'name'",paraId:16,tocIndex:10},{value:" and so on (make sure the property exists in the data)",paraId:16,tocIndex:10},{value:"Type",paraId:17,tocIndex:11},{value:": Number",paraId:17,tocIndex:11},{value:"Default",paraId:17,tocIndex:11},{value:": 10",paraId:17,tocIndex:11},{value:"Required",paraId:17,tocIndex:11},{value:": false",paraId:17,tocIndex:11},{value:"Description",paraId:17,tocIndex:11},{value:": The strength to sort the nodes in the same circle. Larger number means place the nodes with smaller distance of ",paraId:17,tocIndex:11},{value:"sortBy",paraId:17,tocIndex:11},{value:" more closely. Takes effect only when ",paraId:17,tocIndex:11},{value:"sortBy",paraId:17,tocIndex:11},{value:" is not ",paraId:17,tocIndex:11},{value:"undefined",paraId:17,tocIndex:11},{value:"Type",paraId:18,tocIndex:12},{value:": Boolean",paraId:18,tocIndex:12},{value:"Default",paraId:18,tocIndex:12},{value:": false",paraId:18,tocIndex:12},{value:"Required",paraId:18,tocIndex:12},{value:": false",paraId:18,tocIndex:12},{value:"Description",paraId:18,tocIndex:12},{value:": Whether to enable the web-worker in case layout calculation takes too long to block page interaction.\n",paraId:18,tocIndex:12},{value:"⚠️ Notice:",paraId:18,tocIndex:12},{value:" When ",paraId:18,tocIndex:12},{value:"workerEnabled: true",paraId:18,tocIndex:12},{value:", all the function type parameters are not supported.",paraId:18,tocIndex:12}]},68927:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Random is the default layout in G6. It will take effect when ",paraId:0},{value:"layout",paraId:0},{value:" is not assigned to the Graph instance and there is no position information in node data.",paraId:0},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 1000,\n  height: 600,\n  layout: {\n    type: 'random',\n    width: 300,\n    height: 300,\n  },\n});\n",paraId:1},{value:"Type",paraId:2,tocIndex:0},{value:": Array",paraId:2,tocIndex:0},{value:"Example",paraId:2,tocIndex:0},{value:": [ 0, 0 ]",paraId:2,tocIndex:0},{value:"Default",paraId:2,tocIndex:0},{value:": The center of the graph",paraId:2,tocIndex:0},{value:"Required",paraId:2,tocIndex:0},{value:": false",paraId:2,tocIndex:0},{value:"Description",paraId:2,tocIndex:0},{value:": The center of the layout",paraId:2,tocIndex:0},{value:"Type",paraId:3,tocIndex:1},{value:": Number",paraId:3,tocIndex:1},{value:"Default",paraId:3,tocIndex:1},{value:": The width of the graph",paraId:3,tocIndex:1},{value:"Required",paraId:3,tocIndex:1},{value:": false",paraId:3,tocIndex:1},{value:"Description",paraId:3,tocIndex:1},{value:": The width of the layout",paraId:3,tocIndex:1},{value:"Type",paraId:4,tocIndex:2},{value:": Number",paraId:4,tocIndex:2},{value:"Default",paraId:4,tocIndex:2},{value:": The height of the graph",paraId:4,tocIndex:2},{value:"Required",paraId:4,tocIndex:2},{value:": false",paraId:4,tocIndex:2},{value:"Description",paraId:4,tocIndex:2},{value:": The height of the layout",paraId:4,tocIndex:2},{value:"Type",paraId:5,tocIndex:3},{value:": Boolean",paraId:5,tocIndex:3},{value:"Default",paraId:5,tocIndex:3},{value:": false",paraId:5,tocIndex:3},{value:"Required",paraId:5,tocIndex:3},{value:": false",paraId:5,tocIndex:3},{value:"Description",paraId:5,tocIndex:3},{value:": Whether to enable the web-worker in case layout calculation takes too long to block page interaction.\n",paraId:5,tocIndex:3},{value:"⚠️ Notice:",paraId:5,tocIndex:3},{value:" When ",paraId:5,tocIndex:3},{value:"workerEnabled: true",paraId:5,tocIndex:3},{value:", all the function type parameters are not supported.",paraId:5,tocIndex:3}]},12672:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"This document shows the functions that should be implemented or rewrited when custom nodes by ",paraId:0},{value:"G6.registerNode",paraId:0},{value:" or custom edges by ",paraId:0},{value:"G6.registerEdge",paraId:0},{value:".",paraId:0},{value:"When the built-in nodes cannot satisfy your requirments, custom a type of node by ",paraId:1,tocIndex:0},{value:"G6.registerNode(nodeName, options, extendedNodeName)",paraId:1,tocIndex:0},{value:".",paraId:1,tocIndex:0},{value:"Name",paraId:2,tocIndex:1},{value:"Type",paraId:2,tocIndex:1},{value:"Required",paraId:2,tocIndex:1},{value:"Description",paraId:2,tocIndex:1},{value:"nodeName",paraId:2,tocIndex:1},{value:"String",paraId:2,tocIndex:1},{value:"true",paraId:2,tocIndex:1},{value:"The unique name of the custom node.",paraId:2,tocIndex:1},{value:"options",paraId:2,tocIndex:1},{value:"Object",paraId:2,tocIndex:1},{value:"true",paraId:2,tocIndex:1},{value:"The configurations of custom node, include functions of complete life cycles. Please refer to ",paraId:2,tocIndex:1},{value:"Shape Doc",paraId:3,tocIndex:1},{value:" and ",paraId:2,tocIndex:1},{value:"Custom Item API",paraId:4,tocIndex:1},{value:".",paraId:2,tocIndex:1},{value:"extendedNodeName",paraId:2,tocIndex:1},{value:"String",paraId:2,tocIndex:1},{value:"false",paraId:2,tocIndex:1},{value:"Specifies the inherited node type of the custom node. Declare this property if you want to extend a built-in node. ",paraId:2,tocIndex:1},{value:"Built-in Nodes",paraId:5,tocIndex:1},{value:" document.",paraId:2,tocIndex:1},{value:"G6.registerNode(\n  'nodeName',\n  {\n    /**\n     * Draw this type of node with label\n     * @param  {Object} cfg The configurations of this type of node\n     * @param  {G.Group} group Graphics group, the container of the shapes of the node\n     * @return {G.Shape} The keyShape of the type of node. The keyShape can be obtained by node.get('keyShape')\n     */\n    draw(cfg, group) {},\n    /**\n     * Operations to be executed after drawing. No operation by default\n     * @param  {Object} cfg The configurations of this type of node\n     * @param  {G.Group} group Graphics group, the container of the shapes of the node\n     */\n    afterDraw(cfg, group) {},\n    /**\n     * Update the node with label\n     * @override\n     * @param  {Object} cfg The configurations of this type of node\n     * @param  {Node} node The node\n     */\n    update(cfg, node) {},\n    /**\n     * Operations to be executed after updating.\n     * @override\n     * @param  {Object} cfg The configurations of this type of node\n     * @param  {Node} node The node\n     */\n    afterUpdate(cfg, node) {},\n    /**\n     * After graph.setItemState(item, state, value) is called, this function will do some responses.\n     * @param  {String} name The name of state\n     * @param  {Object} value The value of the state\n     * @param  {Node} node The node\n     */\n    setState(name, value, node) {},\n    /**\n     * Get the anchor points\n     * @param  {Object} cfg The configurations of this type of node\n     * @return {Array|null} The array of anchor points. There is no anchor points if it is null.\n     */\n    getAnchorPoints(cfg) {},\n  },\n  'extendedNodeName',\n);\n",paraId:6,tocIndex:2},{value:"When the built-in edges cannot satisfy your requirments, custom a type of edge by ",paraId:7,tocIndex:3},{value:"G6.registerEdge(edgeName, options, extendedEdgeName)",paraId:7,tocIndex:3},{value:".",paraId:7,tocIndex:3},{value:"Name",paraId:8,tocIndex:4},{value:"Type",paraId:8,tocIndex:4},{value:"Required",paraId:8,tocIndex:4},{value:"Description",paraId:8,tocIndex:4},{value:"edgeName",paraId:8,tocIndex:4},{value:"String",paraId:8,tocIndex:4},{value:"true",paraId:8,tocIndex:4},{value:"The unique name of the custom edge.",paraId:8,tocIndex:4},{value:"options",paraId:8,tocIndex:4},{value:"Object",paraId:8,tocIndex:4},{value:"true",paraId:8,tocIndex:4},{value:"The configurations of custom edge, include functions of complete life cycles. Please refer to ",paraId:8,tocIndex:4},{value:"Shape Doc",paraId:9,tocIndex:4},{value:" and ",paraId:8,tocIndex:4},{value:"Custom Item API",paraId:10,tocIndex:4},{value:".",paraId:8,tocIndex:4},{value:"extendedEdgeName",paraId:8,tocIndex:4},{value:"String",paraId:8,tocIndex:4},{value:"false",paraId:8,tocIndex:4},{value:"Specifies the inherited node type of the custom node. Declare this property if you want to extend the a built-in edge. ",paraId:8,tocIndex:4},{value:"Built-in Edges",paraId:11,tocIndex:4},{value:" document.",paraId:8,tocIndex:4},{value:"G6.registerEdge(\n  'edgeName',\n  {\n    /**\n     * Draw this type of edge with label\n     * @param  {Object} cfg The configurations of this type of edge\n     * @param  {G.Group} group Graphics group, the container of the shapes of the edge\n     * @return {G.Shape} The keyShape of the type of edge. The keyShape can be obtained by edge.get('keyShape')\n     */\n    draw(cfg, group) {},\n    /**\n     * Operations to be executed after drawing. No operation by default\n     * @param  {Object} cfg The configurations of this type of edge\n     * @param  {G.Group} group Graphics group, the container of the shapes of the edge\n     */\n    afterDraw(cfg, group) {},\n    /**\n     * Update the edge with label\n     * @override\n     * @param  {Object} cfg The configurations of this type of edge\n     * @param  {Edge} edge The edge\n     */\n    update(cfg, edge) {},\n    /**\n     * Operations to be executed after updating.\n     * @override\n     * @param  {Object} cfg The configurations of this type of edge\n     * @param  {Edge} edge The edge\n     */\n    afterUpdate(cfg, edge) {},\n    /**\n     * After [`graph.setItemState(item, state, value)`] is called, this function will do some responses.\n     * @param  {String} name The name of state\n     * @param  {Object} value The value of the state\n     * @param  {Edge} edge The edge\n     */\n    setState(name, value, edge) {},\n  },\n  'extendedEdgeName',\n);\n",paraId:12,tocIndex:5},{value:"When the built-in combos cannot satisfy your requirments, custom a type of combo by ",paraId:13,tocIndex:6},{value:"G6.registerCombo(comboName, options, extendedComboName)",paraId:13,tocIndex:6},{value:".",paraId:13,tocIndex:6},{value:"Name",paraId:14,tocIndex:7},{value:"Type",paraId:14,tocIndex:7},{value:"Required",paraId:14,tocIndex:7},{value:"Description",paraId:14,tocIndex:7},{value:"comboName",paraId:14,tocIndex:7},{value:"String",paraId:14,tocIndex:7},{value:"true",paraId:14,tocIndex:7},{value:"The unique name of the custom combo.",paraId:14,tocIndex:7},{value:"options",paraId:14,tocIndex:7},{value:"Object",paraId:14,tocIndex:7},{value:"true",paraId:14,tocIndex:7},{value:"The configurations of custom combo, include functions of complete life cycles. Please refer to ",paraId:14,tocIndex:7},{value:"Shape Doc",paraId:15,tocIndex:7},{value:" and ",paraId:14,tocIndex:7},{value:"Custom Item API",paraId:16,tocIndex:7},{value:".",paraId:14,tocIndex:7},{value:"extendedComboName",paraId:14,tocIndex:7},{value:"String",paraId:14,tocIndex:7},{value:"false",paraId:14,tocIndex:7},{value:"Specifies the inherited combo type of the custom combo. Declare this property if you want to extend a built-in combo. ",paraId:14,tocIndex:7},{value:"Built-in Combos",paraId:17,tocIndex:7},{value:" document.",paraId:14,tocIndex:7},{value:"G6.registerCombo(\n  'comboName',\n  {\n    /**\n     * Draw this type of combo with label\n     * @param  {Object} cfg The configurations of this type of combo\n     * @param  {G.Group} group Graphics group, the container of the shapes in the combo\n     * @return {G.Shape} The keyShape of the type of combo. The keyShape can be obtained by combo.get('keyShape')\n     */\n    draw(cfg, group) {},\n    /**\n     * Operations to be executed after drawing. No operation by default\n     * @param  {Object} cfg The configurations of this type of combo\n     * @param  {G.Group} group Graphics group, the container of the shapes in the combo\n     */\n    afterDraw(cfg, group) {},\n    /**\n     * Update the combo with label\n     * @override\n     * @param  {Object} cfg The configurations of this type of combo\n     * @param  {Combo} combo The combo\n     */\n    update(cfg, combo) {},\n    /**\n     * Operations to be executed after updating.\n     * @override\n     * @param  {Object} cfg The configurations of this type of combo\n     * @param  {Combo} combo The combo\n     */\n    afterUpdate(cfg, combo) {},\n    /**\n     * After graph.setItemState(item, state, value) is called, this function will do some responses.\n     * @param  {String} name The name of state\n     * @param  {Object} value The value of the state\n     * @param  {Combo} combo The combo\n     */\n    setState(name, value, combo) {},\n    /**\n     * Get the anchor points\n     * @param  {Object} cfg The configurations of this type of combo\n     * @return {Array|null} The array of anchor points. There is no anchor points if it is null.\n     */\n    getAnchorPoints(cfg) {},\n  },\n  'extendedComboName',\n);\n",paraId:18,tocIndex:8},{value:"The following code is an example of customizing a type of edge:",paraId:19,tocIndex:9},{value:"import G6 from '@antv/g6';\nG6.registerEdge(\n  'edgeName',\n  {\n    labelPosition: 'center',\n    labelAutoRotate: true,\n    draw(cfg, group) {\n      // The other functions such as drawShape anddrawLabel can be called in draw(cfg, group)\n      this.drawShape();\n      const labelStyle = this.getLabelStyle(cfg);\n      // ...\n    },\n    drawShape(cfg, group) {\n      //\n    },\n    getLabelStyle(cfg) {\n      // Return the label's style\n      return {};\n    },\n    update(cfg, item) {\n      // Update the item according\n    },\n  },\n  'line',\n);\n",paraId:20,tocIndex:9},{value:"The relative positions of label to the item. ",paraId:21,tocIndex:11},{value:"'center'",paraId:21,tocIndex:11},{value:" by default.",paraId:21,tocIndex:11},{value:"When registering a type of node by ",paraId:22,tocIndex:11},{value:"registerNode",paraId:22,tocIndex:11},{value:", options of ",paraId:22,tocIndex:11},{value:"labelPosition",paraId:22,tocIndex:11},{value:" includes: ",paraId:22,tocIndex:11},{value:"'top'",paraId:22,tocIndex:11},{value:", ",paraId:22,tocIndex:11},{value:"'bottom'",paraId:22,tocIndex:11},{value:", ",paraId:22,tocIndex:11},{value:"'left'",paraId:22,tocIndex:11},{value:", ",paraId:22,tocIndex:11},{value:"'right'",paraId:22,tocIndex:11},{value:" and ",paraId:22,tocIndex:11},{value:"'center'",paraId:22,tocIndex:11},{value:";",paraId:22,tocIndex:11},{value:"When registering a type of edge by ",paraId:22,tocIndex:11},{value:"registerEdge",paraId:22,tocIndex:11},{value:", options of ",paraId:22,tocIndex:11},{value:"labelPosition",paraId:22,tocIndex:11},{value:" includes: ",paraId:22,tocIndex:11},{value:"'start'",paraId:22,tocIndex:11},{value:", ",paraId:22,tocIndex:11},{value:"'end'",paraId:22,tocIndex:11},{value:" and ",paraId:22,tocIndex:11},{value:"'center'",paraId:22,tocIndex:11},{value:".",paraId:22,tocIndex:11},{value:"Takes effect only when ",paraId:23,tocIndex:12},{value:"registerEdge",paraId:23,tocIndex:12},{value:".",paraId:23,tocIndex:12},{value:"Whether to rotate the label according to the edge. ",paraId:24,tocIndex:12},{value:"false",paraId:24,tocIndex:12},{value:" by default.",paraId:24,tocIndex:12},{value:"Tips: this is an unique property for edge.",paraId:25,tocIndex:12},{value:"The parameters for the four functions about draw are the same. Please refer to ",paraId:26,tocIndex:13},{value:"draw()",paraId:26,tocIndex:13},{value:".",paraId:26,tocIndex:13},{value:"Draw the node or edge, including the label on the it. Return ",paraId:27,tocIndex:14},{value:"keyShape",paraId:27,tocIndex:14},{value:" of it.",paraId:27,tocIndex:14},{value:"Parameters",paraId:28,tocIndex:14},{value:"Name",paraId:29,tocIndex:14},{value:"Type",paraId:29,tocIndex:14},{value:"Required",paraId:29,tocIndex:14},{value:"Description",paraId:29,tocIndex:14},{value:"cfg",paraId:29,tocIndex:14},{value:"Object",paraId:29,tocIndex:14},{value:"true",paraId:29,tocIndex:14},{value:"The configurations of the node or edge.",paraId:29,tocIndex:14},{value:"group",paraId:29,tocIndex:14},{value:"G.Group",paraId:29,tocIndex:14},{value:"true",paraId:29,tocIndex:14},{value:"The contianer of the node or edge.",paraId:29,tocIndex:14},{value:"This function will be called after the node or edge being drawed. It is appropriate for extending graphics or animations for built-in node or edge.",paraId:30,tocIndex:15},{value:"This ",paraId:31,tocIndex:15},{value:"demo",paraId:32,tocIndex:15},{value:" shows how to add animations in afterDraw. The API about shape's animate can be refered to the ",paraId:31,tocIndex:15},{value:"Animate API of G",paraId:31,tocIndex:15},{value:" which is the rendering engine of G6.",paraId:31,tocIndex:15},{value:"Update the node or edge, including the label on it.",paraId:33,tocIndex:17},{value:"Parameters",paraId:34,tocIndex:17},{value:"Name",paraId:35,tocIndex:17},{value:"Type",paraId:35,tocIndex:17},{value:"Required",paraId:35,tocIndex:17},{value:"Description",paraId:35,tocIndex:17},{value:"cfg",paraId:35,tocIndex:17},{value:"Object",paraId:35,tocIndex:17},{value:"true",paraId:35,tocIndex:17},{value:"The configurations for the node or edge.",paraId:35,tocIndex:17},{value:"item",paraId:35,tocIndex:17},{value:"G6.Item",paraId:35,tocIndex:17},{value:"true",paraId:35,tocIndex:17},{value:"The item instance of the node or edge.",paraId:35,tocIndex:17},{value:"This function will be called after the node or edge being updated.",paraId:36,tocIndex:18},{value:"This ",paraId:37,tocIndex:18},{value:"demo",paraId:38,tocIndex:18},{value:" shows how to add animations. The API about shape's animate can be refered to the ",paraId:37,tocIndex:18},{value:"Animate API of G",paraId:37,tocIndex:18},{value:" which is the rendering engine of G6.",paraId:37,tocIndex:18},{value:"Whether to allow the node or edge to be updated.",paraId:39,tocIndex:19},{value:"Paramters",paraId:40,tocIndex:19},{value:"Name",paraId:41,tocIndex:19},{value:"Type",paraId:41,tocIndex:19},{value:"Required",paraId:41,tocIndex:19},{value:"Description",paraId:41,tocIndex:19},{value:"type",paraId:41,tocIndex:19},{value:"String",paraId:41,tocIndex:19},{value:"true",paraId:41,tocIndex:19},{value:"The type of the item. Options:",paraId:41,tocIndex:19},{value:"'node'",paraId:41,tocIndex:19},{value:", ",paraId:41,tocIndex:19},{value:"'edge'",paraId:41,tocIndex:19},{value:"Return",paraId:42,tocIndex:19},{value:"The type of return value: Boolean;",paraId:43,tocIndex:19},{value:"Allow the node or edge to be updated if it returns ",paraId:43,tocIndex:19},{value:"true",paraId:43,tocIndex:19},{value:".",paraId:43,tocIndex:19},{value:"After ",paraId:44,tocIndex:20},{value:"graph.setItemState(item, state, value)",paraId:45,tocIndex:20},{value:" is called, this function will do some responses.",paraId:44,tocIndex:20},{value:"Paramters",paraId:46,tocIndex:20},{value:"Name",paraId:47,tocIndex:20},{value:"Type",paraId:47,tocIndex:20},{value:"Required",paraId:47,tocIndex:20},{value:"Description",paraId:47,tocIndex:20},{value:"name",paraId:47,tocIndex:20},{value:"String",paraId:47,tocIndex:20},{value:"true",paraId:47,tocIndex:20},{value:"The name of the state.",paraId:47,tocIndex:20},{value:"value",paraId:47,tocIndex:20},{value:"Boolean",paraId:47,tocIndex:20},{value:"true",paraId:47,tocIndex:20},{value:"The value of the state.",paraId:47,tocIndex:20},{value:"item",paraId:47,tocIndex:20},{value:"G6.Item",paraId:47,tocIndex:20},{value:"true",paraId:47,tocIndex:20},{value:"The instance of the node or edge.",paraId:47,tocIndex:20}]},26980:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"When the built-in Layouts cannot satisfy your requirments, custom a type of Layout by ",paraId:0,tocIndex:0},{value:"G6.registerLayout(layoutName, layout)",paraId:0,tocIndex:0},{value:".",paraId:0,tocIndex:0},{value:"Name",paraId:1,tocIndex:1},{value:"Type",paraId:1,tocIndex:1},{value:"Required",paraId:1,tocIndex:1},{value:"Description",paraId:1,tocIndex:1},{value:"layoutName",paraId:1,tocIndex:1},{value:"String",paraId:1,tocIndex:1},{value:"true",paraId:1,tocIndex:1},{value:"The name of the custom layout.",paraId:1,tocIndex:1},{value:"layout",paraId:1,tocIndex:1},{value:"Object",paraId:1,tocIndex:1},{value:"true",paraId:1,tocIndex:1},{value:"The configurations of the custom layout. For more information, please refer to ",paraId:1,tocIndex:1},{value:"Layout API",paraId:2,tocIndex:1},{value:".",paraId:1,tocIndex:1},{value:"G6.registerLayout('layoutName', {\n  /**\n   * The default configurations will be mixed by configurations from user\n   */\n  getDefaultCfg() {\n    return {};\n  },\n  /**\n   * Initialize\n   * @param {Object} data The data\n   */\n  init(data) {\n    const self = this;\n    self.nodes = data.nodes;\n    self.edges = data.edges;\n  },\n  /**\n   * Execute the layout\n   */\n  execute() {\n    // TODO\n  },\n  /**\n   * Layout with the data\n   * @param {Object} data The data\n   */\n  layout(data) {\n    const self = this;\n    self.init(data);\n    self.execute();\n  },\n  /**\n   * Update the configurations of the layout, but it does not execute the layout\n   * @param {Object} cfg The new configurations\n   */\n  updateCfg(cfg) {\n    const self = this;\n    Util.mix(self, cfg);\n  },\n  /**\n   * Destroy the layout\n   */\n  destroy() {\n    const self = this;\n    self.positions = null;\n    self.nodes = null;\n    self.edges = null;\n    self.destroyed = true;\n  },\n});\n",paraId:3,tocIndex:2},{value:"Initialize the layout.",paraId:4,tocIndex:4},{value:"Paramter",paraId:5,tocIndex:4},{value:"Name",paraId:6,tocIndex:4},{value:"Type",paraId:6,tocIndex:4},{value:"Required",paraId:6,tocIndex:4},{value:"Description",paraId:6,tocIndex:4},{value:"data",paraId:6,tocIndex:4},{value:"Object",paraId:6,tocIndex:4},{value:"true",paraId:6,tocIndex:4},{value:"The data for the layout",paraId:6,tocIndex:4},{value:"Get the default configurations of the layout.",paraId:7,tocIndex:5},{value:"Return",paraId:8,tocIndex:5},{value:"Name",paraId:9,tocIndex:5},{value:"Type",paraId:9,tocIndex:5},{value:"Required",paraId:9,tocIndex:5},{value:"Description",paraId:9,tocIndex:5},{value:"cfg",paraId:9,tocIndex:5},{value:"Object",paraId:9,tocIndex:5},{value:"true",paraId:9,tocIndex:5},{value:"The default configurations",paraId:9,tocIndex:5},{value:"Execute the layout.",paraId:10,tocIndex:7},{value:"Execute layout according to the data.",paraId:11,tocIndex:8},{value:"Paramter",paraId:12,tocIndex:8},{value:"Name",paraId:13,tocIndex:8},{value:"Type",paraId:13,tocIndex:8},{value:"Required",paraId:13,tocIndex:8},{value:"Description",paraId:13,tocIndex:8},{value:"data",paraId:13,tocIndex:8},{value:"Object",paraId:13,tocIndex:8},{value:"true",paraId:13,tocIndex:8},{value:"The data to be arranged",paraId:13,tocIndex:8},{value:"Update the configurations for layout.",paraId:14,tocIndex:10},{value:"Paramter",paraId:15,tocIndex:10},{value:"Name",paraId:16,tocIndex:10},{value:"Type",paraId:16,tocIndex:10},{value:"Required",paraId:16,tocIndex:10},{value:"Description",paraId:16,tocIndex:10},{value:"cfg",paraId:16,tocIndex:10},{value:"Object",paraId:16,tocIndex:10},{value:"true",paraId:16,tocIndex:10},{value:"New configurations",paraId:16,tocIndex:10},{value:"Destroy the layout.",paraId:17,tocIndex:12}]},10686:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Get or set the shape's attributes.",paraId:0,tocIndex:0},{value:"Get the shape's attribute named ",paraId:1,tocIndex:1},{value:"name",paraId:1,tocIndex:1},{value:".",paraId:1,tocIndex:1},{value:"const width = shape.attr('width');\n",paraId:2,tocIndex:1},{value:"Update the shape's attribute named ",paraId:3,tocIndex:2},{value:"name",paraId:3,tocIndex:2},{value:" with ",paraId:3,tocIndex:2},{value:"value",paraId:3,tocIndex:2},{value:".",paraId:3,tocIndex:2},{value:"Update the shape's multiple attributes.",paraId:4,tocIndex:3},{value:"rect.attr({\n  fill: '#999',\n  stroke: '#666',\n});\n",paraId:5,tocIndex:3},{value:"Sets and returns the clip object.",paraId:6,tocIndex:4},{value:"clipCfg",paraId:7,tocIndex:4},{value:"Name",paraId:8,tocIndex:4},{value:"Description",paraId:8,tocIndex:4},{value:"Type",paraId:8,tocIndex:4},{value:"Remark",paraId:8,tocIndex:4},{value:"type",paraId:8,tocIndex:4},{value:"The type of shape of clipping",paraId:8,tocIndex:4},{value:"String",paraId:8,tocIndex:4},{value:"Options: ",paraId:8,tocIndex:4},{value:"'circle'",paraId:8,tocIndex:4},{value:", ",paraId:8,tocIndex:4},{value:"'rect'",paraId:8,tocIndex:4},{value:", ",paraId:8,tocIndex:4},{value:"'ellipse'",paraId:8,tocIndex:4},{value:"x",paraId:8,tocIndex:4},{value:"The x coordinate of the clipping shape",paraId:8,tocIndex:4},{value:"Number",paraId:8,tocIndex:4},{value:"0 by default. Only takes effect when the ",paraId:8,tocIndex:4},{value:"type",paraId:8,tocIndex:4},{value:" is ",paraId:8,tocIndex:4},{value:"'circle'",paraId:8,tocIndex:4},{value:", ",paraId:8,tocIndex:4},{value:"'rect'",paraId:8,tocIndex:4},{value:", or ",paraId:8,tocIndex:4},{value:"'ellipse'",paraId:8,tocIndex:4},{value:"y",paraId:8,tocIndex:4},{value:"The y coordinate of the clipping shape",paraId:8,tocIndex:4},{value:"Number",paraId:8,tocIndex:4},{value:"0 by default. Only takes effect when the ",paraId:8,tocIndex:4},{value:"type",paraId:8,tocIndex:4},{value:" is ",paraId:8,tocIndex:4},{value:"'circle'",paraId:8,tocIndex:4},{value:", ",paraId:8,tocIndex:4},{value:"'rect'",paraId:8,tocIndex:4},{value:", or `'ellipse'",paraId:8,tocIndex:4},{value:"show",paraId:8,tocIndex:4},{value:"Whether to clip the image",paraId:8,tocIndex:4},{value:"Boolean",paraId:8,tocIndex:4},{value:"Do not clip by default.",paraId:8,tocIndex:4},{value:"r",paraId:8,tocIndex:4},{value:"The radius of circle clipping",paraId:8,tocIndex:4},{value:"Number",paraId:8,tocIndex:4},{value:"Takes effect when the ",paraId:8,tocIndex:4},{value:"type",paraId:8,tocIndex:4},{value:" is ",paraId:8,tocIndex:4},{value:"'circle'",paraId:8,tocIndex:4},{value:"width",paraId:8,tocIndex:4},{value:"The width of the clipping",paraId:8,tocIndex:4},{value:"Number",paraId:8,tocIndex:4},{value:"Takes effect when the ",paraId:8,tocIndex:4},{value:"type",paraId:8,tocIndex:4},{value:" is ",paraId:8,tocIndex:4},{value:"'rect'",paraId:8,tocIndex:4},{value:"height",paraId:8,tocIndex:4},{value:"The height of the clipping",paraId:8,tocIndex:4},{value:"Number",paraId:8,tocIndex:4},{value:"Takes effect when the ",paraId:8,tocIndex:4},{value:"type",paraId:8,tocIndex:4},{value:" is ",paraId:8,tocIndex:4},{value:"'rect'",paraId:8,tocIndex:4},{value:"rx",paraId:8,tocIndex:4},{value:"The major radius of the ellipse clipping",paraId:8,tocIndex:4},{value:"Number",paraId:8,tocIndex:4},{value:"Takes effect when the ",paraId:8,tocIndex:4},{value:"type",paraId:8,tocIndex:4},{value:" is ",paraId:8,tocIndex:4},{value:"'ellipse'",paraId:8,tocIndex:4},{value:"ry",paraId:8,tocIndex:4},{value:"The minor radius of the ellipse clipping",paraId:8,tocIndex:4},{value:"Number",paraId:8,tocIndex:4},{value:"Takes effect when the ",paraId:8,tocIndex:4},{value:"type",paraId:8,tocIndex:4},{value:" is ",paraId:8,tocIndex:4},{value:"'ellipse'",paraId:8,tocIndex:4},{value:"shape.setClip({\n  type: 'circle', // circle, rect, ellipse, Polygon, path clip\n  attrs: {\n    r: 10,\n    x: 0,\n    y: 0,\n  },\n",paraId:9,tocIndex:4},{value:"Get the clip object.",paraId:10,tocIndex:5}]},83213:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Shape is the basic element on an item (node/edge). The ",paraId:0},{value:"style",paraId:0},{value:" of a node or an edge corresponds to the shape properties of its keyShape (key shape). The ",paraId:0},{value:"style",paraId:0},{value:" in ",paraId:0},{value:"labelCfg",paraId:0},{value:" of a label on a node or an edge corresponds to the properties of text shape.",paraId:0},{value:"group.addShape('rect', {\n  attrs: {\n    fill: 'red',\n    shadowOffsetX: 10,\n    shadowOffsetY: 10,\n    shadowColor: 'blue',\n    shadowBlur: 10,\n    opacity: 0.8,\n  },\n  // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n  name: 'rect-shape',\n});\n",paraId:1},{value:"G6 has these shapes:",paraId:2},{value:"circle",paraId:3},{value:";",paraId:4},{value:"rect",paraId:5},{value:";",paraId:4},{value:"ellipse",paraId:6},{value:";",paraId:4},{value:"polygon",paraId:7},{value:";",paraId:4},{value:"image",paraId:8},{value:";",paraId:4},{value:"marker",paraId:9},{value:";",paraId:4},{value:"path",paraId:10},{value:";",paraId:4},{value:"text",paraId:11},{value:";",paraId:4},{value:"dom(svg)",paraId:12},{value:": DOM (available only when the ",paraId:4},{value:"renderer",paraId:4},{value:" of Graph instance is ",paraId:4},{value:"'svg'",paraId:4},{value:").",paraId:4},{value:" ",paraId:13,tocIndex:1},{value:"String",paraId:13,tocIndex:1},{value:" ",paraId:13,tocIndex:1},{value:"required",paraId:13,tocIndex:1},{value:" ",paraId:13,tocIndex:1},{value:"Must be assigned in G6 3.3 and later versions. It can be any string you want but must be unique in a custom node/edge/combo type. Otherwise, the style updating might be wrong.",paraId:14,tocIndex:1},{value:" ",paraId:15,tocIndex:2},{value:"String",paraId:15,tocIndex:2},{value:" ",paraId:15,tocIndex:2},{value:"optional",paraId:15,tocIndex:2},{value:" ",paraId:15,tocIndex:2},{value:"The color(RGB or Hex) or ",paraId:16,tocIndex:2},{value:"gradient",paraId:17,tocIndex:2},{value:" color for filling. The corresponding property in canvas is ",paraId:16,tocIndex:2},{value:"fillStyle",paraId:16,tocIndex:2},{value:". Examples: ",paraId:16,tocIndex:2},{value:"rgb(18, 150, 231)",paraId:16,tocIndex:2},{value:",",paraId:16,tocIndex:2},{value:"#c193af",paraId:16,tocIndex:2},{value:",",paraId:16,tocIndex:2},{value:"l(0) 0:#ffffff 0.5:#7ec2f3 1:#1890ff",paraId:16,tocIndex:2},{value:", ",paraId:16,tocIndex:2},{value:"r(0.5, 0.5, 0.1) 0:#ffffff 1:#1890ff",paraId:16,tocIndex:2},{value:".",paraId:16,tocIndex:2},{value:" ",paraId:18,tocIndex:3},{value:"String",paraId:18,tocIndex:3},{value:" ",paraId:18,tocIndex:3},{value:"optional",paraId:18,tocIndex:3},{value:" ",paraId:18,tocIndex:3},{value:"The color(RGB or Hex) or ",paraId:19,tocIndex:3},{value:"gradient",paraId:20,tocIndex:3},{value:" color for stroke. The corresponding property in canvas is ",paraId:19,tocIndex:3},{value:"strokeStyle",paraId:19,tocIndex:3},{value:". Examples: ",paraId:19,tocIndex:3},{value:"rgb(18, 150, 231)",paraId:19,tocIndex:3},{value:",",paraId:19,tocIndex:3},{value:"#c193af",paraId:19,tocIndex:3},{value:",",paraId:19,tocIndex:3},{value:"l(0) 0:#ffffff 0.5:#7ec2f3 1:#1890ff",paraId:19,tocIndex:3},{value:", ",paraId:19,tocIndex:3},{value:"r(0.5, 0.5, 0.1) 0:#ffffff 1:#1890ff",paraId:19,tocIndex:3},{value:".",paraId:19,tocIndex:3},{value:" ",paraId:21,tocIndex:4},{value:"Number",paraId:21,tocIndex:4},{value:" ",paraId:21,tocIndex:4},{value:"optional",paraId:21,tocIndex:4},{value:" ",paraId:21,tocIndex:4},{value:"The width of the stroke.",paraId:22,tocIndex:4},{value:" ",paraId:23,tocIndex:5},{value:"Number | Number[]",paraId:23,tocIndex:5},{value:" ",paraId:23,tocIndex:5},{value:"optional",paraId:23,tocIndex:5},{value:" ",paraId:23,tocIndex:5},{value:"The lineDash of the stroke. If its type is ",paraId:24,tocIndex:5},{value:"Number[]",paraId:24,tocIndex:5},{value:", the elements in the array are the lengths of the lineDash.",paraId:24,tocIndex:5},{value:" ",paraId:25,tocIndex:6},{value:"String",paraId:25,tocIndex:6},{value:" ",paraId:25,tocIndex:6},{value:"optional",paraId:25,tocIndex:6},{value:" ",paraId:25,tocIndex:6},{value:"The color of the shadow.",paraId:26,tocIndex:6},{value:" ",paraId:27,tocIndex:7},{value:"Number",paraId:27,tocIndex:7},{value:" ",paraId:27,tocIndex:7},{value:"optional",paraId:27,tocIndex:7},{value:" ",paraId:27,tocIndex:7},{value:"The blur level for shadow. Larger the value, more blur.",paraId:28,tocIndex:7},{value:" ",paraId:29,tocIndex:8},{value:"Number",paraId:29,tocIndex:8},{value:" ",paraId:29,tocIndex:8},{value:"optional",paraId:29,tocIndex:8},{value:" ",paraId:29,tocIndex:8},{value:"The horizontal offset of the shadow.",paraId:30,tocIndex:8},{value:" ",paraId:31,tocIndex:9},{value:"Number",paraId:31,tocIndex:9},{value:" ",paraId:31,tocIndex:9},{value:"optional",paraId:31,tocIndex:9},{value:" ",paraId:31,tocIndex:9},{value:"The vertical offset of the shadow.",paraId:32,tocIndex:9},{value:" ",paraId:33,tocIndex:10},{value:"Number",paraId:33,tocIndex:10},{value:" ",paraId:33,tocIndex:10},{value:"optional",paraId:33,tocIndex:10},{value:" ",paraId:33,tocIndex:10},{value:"The opacity (alpha value) of the shape. The corresponding property in canvas is ",paraId:34,tocIndex:10},{value:"globalAlpha",paraId:34,tocIndex:10},{value:".",paraId:34,tocIndex:10},{value:" ",paraId:35,tocIndex:11},{value:"Number",paraId:35,tocIndex:11},{value:" ",paraId:35,tocIndex:11},{value:"optional",paraId:35,tocIndex:11},{value:" ",paraId:35,tocIndex:11},{value:"The filling opacity (alpha value) of the shape. The priority is higher than ",paraId:36,tocIndex:11},{value:"opacity",paraId:36,tocIndex:11},{value:". Range [0, 1].",paraId:36,tocIndex:11},{value:" ",paraId:37,tocIndex:12},{value:"Number",paraId:37,tocIndex:12},{value:" ",paraId:37,tocIndex:12},{value:"optional",paraId:37,tocIndex:12},{value:" ",paraId:37,tocIndex:12},{value:"The stroke opacity (alpha value) of the shape. The priority is higher than ",paraId:38,tocIndex:12},{value:"opacity",paraId:38,tocIndex:12},{value:". Range [0, 1].",paraId:38,tocIndex:12},{value:" ",paraId:39,tocIndex:13},{value:"String",paraId:39,tocIndex:13},{value:" ",paraId:39,tocIndex:13},{value:"optional",paraId:39,tocIndex:13},{value:" ",paraId:39,tocIndex:13},{value:"The type of the mouse when hovering the node. The options are the same as ",paraId:40,tocIndex:13},{value:"cursor in CSS",paraId:40,tocIndex:13},{value:".",paraId:40,tocIndex:13},{value:"group.addShape('circle', {\n  attrs: {\n    x: 100,\n    y: 100,\n    r: 50,\n    fill: 'blue',\n  },\n  // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n  name: 'circle-shape',\n});\n",paraId:41,tocIndex:14},{value:" ",paraId:42,tocIndex:15},{value:"Number",paraId:42,tocIndex:15},{value:" ",paraId:42,tocIndex:15},{value:"optional",paraId:42,tocIndex:15},{value:" ",paraId:42,tocIndex:15},{value:"The x of the center of the circle.",paraId:43,tocIndex:15},{value:" ",paraId:44,tocIndex:16},{value:"Number",paraId:44,tocIndex:16},{value:" ",paraId:44,tocIndex:16},{value:"optional",paraId:44,tocIndex:16},{value:" ",paraId:44,tocIndex:16},{value:"The y of the center of the circle.",paraId:45,tocIndex:16},{value:" ",paraId:46,tocIndex:17},{value:"Number",paraId:46,tocIndex:17},{value:" ",paraId:46,tocIndex:17},{value:"optional",paraId:46,tocIndex:17},{value:" ",paraId:46,tocIndex:17},{value:"The radius of the circle.",paraId:47,tocIndex:17},{value:"group.addShape('ellipse', {\n  attrs: {\n    x: 100,\n    y: 100,\n    rx: 50,\n    ry: 50,\n    fill: 'blue',\n  },\n  // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n  name: 'ellipse-shape',\n});\n",paraId:48,tocIndex:18},{value:" ",paraId:49,tocIndex:19},{value:"Number",paraId:49,tocIndex:19},{value:" ",paraId:49,tocIndex:19},{value:"optional",paraId:49,tocIndex:19},{value:" ",paraId:49,tocIndex:19},{value:"The x of the center of the ellipse.",paraId:50,tocIndex:19},{value:" ",paraId:51,tocIndex:20},{value:"Number",paraId:51,tocIndex:20},{value:" ",paraId:51,tocIndex:20},{value:"optional",paraId:51,tocIndex:20},{value:" ",paraId:51,tocIndex:20},{value:"The y of the center of the ellipse.",paraId:52,tocIndex:20},{value:" ",paraId:53,tocIndex:21},{value:"Number",paraId:53,tocIndex:21},{value:" ",paraId:53,tocIndex:21},{value:"optional",paraId:53,tocIndex:21},{value:" ",paraId:53,tocIndex:21},{value:"The horizontal raidus of the ellipse.",paraId:54,tocIndex:21},{value:" ",paraId:55,tocIndex:22},{value:"Number",paraId:55,tocIndex:22},{value:" ",paraId:55,tocIndex:22},{value:"optional",paraId:55,tocIndex:22},{value:" ",paraId:55,tocIndex:22},{value:"The vertical raidus of the ellipse.",paraId:56,tocIndex:22},{value:"group.addShape('image', {\n  attrs: {\n    x: 0,\n    y: 0,\n    img: 'https://g.alicdn.com/cm-design/arms-trace/1.0.155/styles/armsTrace/images/TAIR.png',\n  },\n  // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n  name: 'image-shape',\n});\n",paraId:57,tocIndex:23},{value:" ",paraId:58,tocIndex:24},{value:"Number",paraId:58,tocIndex:24},{value:" ",paraId:58,tocIndex:24},{value:"optional",paraId:58,tocIndex:24},{value:" ",paraId:58,tocIndex:24},{value:"The x of the left top of the image.",paraId:59,tocIndex:24},{value:" ",paraId:60,tocIndex:25},{value:"Number",paraId:60,tocIndex:25},{value:" ",paraId:60,tocIndex:25},{value:"optional",paraId:60,tocIndex:25},{value:" ",paraId:60,tocIndex:25},{value:"The y of the left top of the image.",paraId:61,tocIndex:25},{value:" ",paraId:62,tocIndex:26},{value:"Number",paraId:62,tocIndex:26},{value:" ",paraId:62,tocIndex:26},{value:"optional",paraId:62,tocIndex:26},{value:" ",paraId:62,tocIndex:26},{value:"The width of the image.",paraId:63,tocIndex:26},{value:" ",paraId:64,tocIndex:27},{value:"Number",paraId:64,tocIndex:27},{value:" ",paraId:64,tocIndex:27},{value:"optional",paraId:64,tocIndex:27},{value:" ",paraId:64,tocIndex:27},{value:"The height of the image.",paraId:65,tocIndex:27},{value:" ",paraId:66,tocIndex:28},{value:"String",paraId:66,tocIndex:28},{value:" ",paraId:66,tocIndex:28},{value:"optional",paraId:66,tocIndex:28},{value:" ",paraId:66,tocIndex:28},{value:"The source of the image.G6 supports multiple image formats: ",paraId:67,tocIndex:28},{value:"- url",paraId:67,tocIndex:28},{value:"- ImageData",paraId:67,tocIndex:28},{value:"- Image",paraId:67,tocIndex:28},{value:"- canvas",paraId:67,tocIndex:28},{value:".",paraId:67,tocIndex:28},{value:"// use the built-in symbol\ngroup.addShape('marker', {\n  attrs: {\n    x: 10,\n    y: 10,\n    r: 10,\n    symbol: 'triangle-down',\n  },\n  // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n  name: 'marker-shape',\n});\n\n// custom the symbol with path\ngroup.addShape('marker', {\n  attrs: {\n    x: 10,\n    y: 10,\n    r: 10,\n    symbol: function (x, y, r) {\n      return [['M', x, y], ['L', x + r, y + r], ['L', x + r * 2, y], ['Z']];\n    },\n  },\n  // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n  name: 'marker-shape',\n});\n",paraId:68,tocIndex:29},{value:" ",paraId:69,tocIndex:30},{value:"Number",paraId:69,tocIndex:30},{value:" ",paraId:69,tocIndex:30},{value:"optional",paraId:69,tocIndex:30},{value:" ",paraId:69,tocIndex:30},{value:"The x of the center of the marker.",paraId:70,tocIndex:30},{value:" ",paraId:71,tocIndex:31},{value:"Number",paraId:71,tocIndex:31},{value:" ",paraId:71,tocIndex:31},{value:"optional",paraId:71,tocIndex:31},{value:" ",paraId:71,tocIndex:31},{value:"The y of the center of the marker.",paraId:72,tocIndex:31},{value:" ",paraId:73,tocIndex:32},{value:"Number",paraId:73,tocIndex:32},{value:" ",paraId:73,tocIndex:32},{value:"optional",paraId:73,tocIndex:32},{value:" ",paraId:73,tocIndex:32},{value:"The radius of the marker.",paraId:74,tocIndex:32},{value:" ",paraId:75,tocIndex:33},{value:"String | Function",paraId:75,tocIndex:33},{value:" ",paraId:75,tocIndex:33},{value:"optional",paraId:75,tocIndex:33},{value:" ",paraId:75,tocIndex:33},{value:"The shape name.There are several built-in shapes: ",paraId:76,tocIndex:33},{value:"'circle'",paraId:76,tocIndex:33},{value:", ",paraId:76,tocIndex:33},{value:"'square'",paraId:76,tocIndex:33},{value:", ",paraId:76,tocIndex:33},{value:"'diamond'",paraId:76,tocIndex:33},{value:", ",paraId:76,tocIndex:33},{value:"'triangle'",paraId:76,tocIndex:33},{value:", ",paraId:76,tocIndex:33},{value:"'triangle-down'",paraId:76,tocIndex:33},{value:", you can use them with the String names. And user could customize a shape as marker.",paraId:76,tocIndex:33},{value:"group.addShape('polygon', {\n  attrs: {\n    points: [\n      [30, 30],\n      [40, 20],\n      [30, 50],\n      [60, 100],\n    ],\n    fill: 'red',\n  },\n  // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n  name: 'polygon-shape',\n});\n",paraId:77,tocIndex:34},{value:" ",paraId:78,tocIndex:35},{value:"Array",paraId:78,tocIndex:35},{value:" ",paraId:78,tocIndex:35},{value:"optional",paraId:78,tocIndex:35},{value:" ",paraId:78,tocIndex:35},{value:"The coordinates of the points on the polygon.",paraId:79,tocIndex:35},{value:"group.addShape('rect', {\n  attrs: {\n    x: 150,\n    y: 150,\n    width: 150,\n    height: 150,\n    stroke: 'black',\n    radius: [2, 4],\n  },\n  // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n  name: 'rect-shape',\n});\n",paraId:80,tocIndex:36},{value:" ",paraId:81,tocIndex:37},{value:"Number",paraId:81,tocIndex:37},{value:" ",paraId:81,tocIndex:37},{value:"optional",paraId:81,tocIndex:37},{value:" ",paraId:81,tocIndex:37},{value:"The x of left top of the rect.",paraId:82,tocIndex:37},{value:" ",paraId:83,tocIndex:38},{value:"Number",paraId:83,tocIndex:38},{value:" ",paraId:83,tocIndex:38},{value:"optional",paraId:83,tocIndex:38},{value:" ",paraId:83,tocIndex:38},{value:"The y of left top of the rect.",paraId:84,tocIndex:38},{value:" ",paraId:85,tocIndex:39},{value:"Number",paraId:85,tocIndex:39},{value:" ",paraId:85,tocIndex:39},{value:"optional",paraId:85,tocIndex:39},{value:" ",paraId:85,tocIndex:39},{value:"The width of the rect.",paraId:86,tocIndex:39},{value:" ",paraId:87,tocIndex:40},{value:"Number",paraId:87,tocIndex:40},{value:" ",paraId:87,tocIndex:40},{value:"optional",paraId:87,tocIndex:40},{value:" ",paraId:87,tocIndex:40},{value:"The height of the rect.",paraId:88,tocIndex:40},{value:" ",paraId:89,tocIndex:41},{value:"Number | Number[]",paraId:89,tocIndex:41},{value:" ",paraId:89,tocIndex:41},{value:"optional",paraId:89,tocIndex:41},{value:" ",paraId:89,tocIndex:41},{value:"The border radius. It can be an integer or an array, representing the border radii of lefttop, righttop, rightbottom, leftbotton respectively. ",paraId:90,tocIndex:41},{value:"- ",paraId:90,tocIndex:41},{value:"radius = 1",paraId:90,tocIndex:41},{value:" or ",paraId:90,tocIndex:41},{value:"radius = [ 1 ]",paraId:90,tocIndex:41},{value:" is equal to ",paraId:90,tocIndex:41},{value:"radius = [ 1, 1, 1, 1 ]",paraId:90,tocIndex:41},{value:"- ",paraId:90,tocIndex:41},{value:"radius = [ 1, 2 ]",paraId:90,tocIndex:41},{value:" is equal to ",paraId:90,tocIndex:41},{value:"radius = [ 1, 2, 1, 2 ]",paraId:90,tocIndex:41},{value:"- ",paraId:90,tocIndex:41},{value:"radius: [ 1, 2, 3 ]",paraId:90,tocIndex:41},{value:" is equal to ",paraId:90,tocIndex:41},{value:"radius: [ 1, 2, 3, 2 ]",paraId:90,tocIndex:41},{value:"⚠️Attention:",paraId:91,tocIndex:42},{value:" When the edge is too thin to be hitted by mouse, set ",paraId:91,tocIndex:42},{value:"lineAppendWidth",paraId:91,tocIndex:42},{value:" to enlarge the hitting area.",paraId:91,tocIndex:42},{value:"group.addShape('path', {\n  attrs: {\n    startArrow: {\n      // The custom arrow is a path points at (0, 0), and its tail points to the positive direction of x-axis\n      path: 'M 0,0 L 20,10 L 20,-10 Z',\n      // the offset of the arrow, nagtive value means the arrow is moved alone the positive direction of x-axis\n      // d: -10\n    },\n    endArrow: {\n      // The custom arrow is a path points at (0, 0), and its tail points to the positive direction of x-axis\n      path: 'M 0,0 L 20,10 L 20,-10 Z',\n      // the offset of the arrow, nagtive value means the arrow is moved alone the positive direction of x-axis\n      // d: -10\n    },\n    path: [\n      ['M', 100, 100],\n      ['L', 200, 200],\n    ],\n    stroke: '#000',\n    lineWidth: 8,\n    lineAppendWidth: 5,\n  },\n  // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n  name: 'path-shape',\n});\n",paraId:92,tocIndex:42},{value:" ",paraId:93,tocIndex:43},{value:"String | Array",paraId:93,tocIndex:43},{value:" ",paraId:93,tocIndex:43},{value:"optional",paraId:93,tocIndex:43},{value:" ",paraId:93,tocIndex:43},{value:"The path. Refer to ",paraId:94,tocIndex:43},{value:"SVG path",paraId:94,tocIndex:43},{value:".",paraId:94,tocIndex:43},{value:" ",paraId:95,tocIndex:44},{value:"Boolean | Object",paraId:95,tocIndex:44},{value:" ",paraId:95,tocIndex:44},{value:"optional",paraId:95,tocIndex:44},{value:" ",paraId:95,tocIndex:44},{value:"The arrow on the start of the path. When ",paraId:96,tocIndex:44},{value:"startArrow",paraId:96,tocIndex:44},{value:" is ",paraId:96,tocIndex:44},{value:"true",paraId:96,tocIndex:44},{value:", show a default arrow on the start of the path. User can custom an arrow by path.",paraId:96,tocIndex:44},{value:" ",paraId:97,tocIndex:45},{value:"Boolean | Object",paraId:97,tocIndex:45},{value:" ",paraId:97,tocIndex:45},{value:"optional",paraId:97,tocIndex:45},{value:" ",paraId:97,tocIndex:45},{value:"The arrow on the end of the path. When ",paraId:98,tocIndex:45},{value:"endArrow",paraId:98,tocIndex:45},{value:" is ",paraId:98,tocIndex:45},{value:"true",paraId:98,tocIndex:45},{value:", show a default arrow on the end of the path. User can custom an arrow by path.",paraId:98,tocIndex:45},{value:" ",paraId:99,tocIndex:46},{value:"Number",paraId:99,tocIndex:46},{value:" ",paraId:99,tocIndex:46},{value:"optional",paraId:99,tocIndex:46},{value:" ",paraId:99,tocIndex:46},{value:"The hitting area of the path. Enlarge the hitting area by enlarging its value.",paraId:100,tocIndex:46},{value:" ",paraId:101,tocIndex:47},{value:"String",paraId:101,tocIndex:47},{value:" ",paraId:101,tocIndex:47},{value:"optional",paraId:101,tocIndex:47},{value:" ",paraId:101,tocIndex:47},{value:"default:",paraId:101,tocIndex:47},{value:" ",paraId:101,tocIndex:47},{value:"'miter'",paraId:101,tocIndex:47},{value:"The style of two ends of the path. Options: ",paraId:102,tocIndex:47},{value:" - ",paraId:102,tocIndex:47},{value:"'bevel'",paraId:102,tocIndex:47},{value:" ",paraId:102,tocIndex:47},{value:" - ",paraId:102,tocIndex:47},{value:"'round'",paraId:102,tocIndex:47},{value:" ",paraId:102,tocIndex:47},{value:" - ",paraId:102,tocIndex:47},{value:"'miter'",paraId:102,tocIndex:47},{value:"(default)",paraId:102,tocIndex:47},{value:" ",paraId:103,tocIndex:48},{value:"String",paraId:103,tocIndex:48},{value:" ",paraId:103,tocIndex:48},{value:"optional",paraId:103,tocIndex:48},{value:" ",paraId:103,tocIndex:48},{value:"default:",paraId:103,tocIndex:48},{value:" ",paraId:103,tocIndex:48},{value:"'miter'",paraId:103,tocIndex:48},{value:"The style of the intersection of two path. Options: ",paraId:104,tocIndex:48},{value:" - ",paraId:104,tocIndex:48},{value:"'bevel'",paraId:104,tocIndex:48},{value:" ",paraId:104,tocIndex:48},{value:" - ",paraId:104,tocIndex:48},{value:"'round'",paraId:104,tocIndex:48},{value:" ",paraId:104,tocIndex:48},{value:" - ",paraId:104,tocIndex:48},{value:"'miter'",paraId:104,tocIndex:48},{value:"(default)",paraId:104,tocIndex:48},{value:" ",paraId:105,tocIndex:49},{value:"Number",paraId:105,tocIndex:49},{value:" ",paraId:105,tocIndex:49},{value:"optional",paraId:105,tocIndex:49},{value:" ",paraId:105,tocIndex:49},{value:"The line width of the current path.",paraId:106,tocIndex:49},{value:" ",paraId:107,tocIndex:50},{value:"Number",paraId:107,tocIndex:50},{value:" ",paraId:107,tocIndex:50},{value:"optional",paraId:107,tocIndex:50},{value:" ",paraId:107,tocIndex:50},{value:"The maximum miter length.",paraId:108,tocIndex:50},{value:" ",paraId:109,tocIndex:51},{value:"Number | Number[]",paraId:109,tocIndex:51},{value:" ",paraId:109,tocIndex:51},{value:"optional",paraId:109,tocIndex:51},{value:" ",paraId:109,tocIndex:51},{value:"The style of the dash line. It is an array that describes the length of gaps and line segments. If the number of the elements in the array is odd, the elements will be dulplicated. Such as [5, 15, 25] will be regarded as [5, 15, 25, 5, 15, 25].",paraId:110,tocIndex:51},{value:"group.addShape('text', {\n  attrs: {\n    text: 'test text',\n    fill: 'red',\n    fontWeight: 400,\n    shadowOffsetX: 10,\n    shadowOffsetY: 10,\n    shadowColor: 'blue',\n    shadowBlur: 10,\n  },\n  // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n  name: 'text-shape',\n});\n",paraId:111,tocIndex:52},{value:" ",paraId:112,tocIndex:53},{value:"String",paraId:112,tocIndex:53},{value:" ",paraId:112,tocIndex:53},{value:"optional",paraId:112,tocIndex:53},{value:" ",paraId:112,tocIndex:53},{value:"The text content of the text shape.",paraId:113,tocIndex:53},{value:" ",paraId:114,tocIndex:54},{value:"String",paraId:114,tocIndex:54},{value:" ",paraId:114,tocIndex:54},{value:"optional",paraId:114,tocIndex:54},{value:" ",paraId:114,tocIndex:54},{value:"The align way of the text. Options: ",paraId:115,tocIndex:54},{value:"'center'",paraId:115,tocIndex:54},{value:" / ",paraId:115,tocIndex:54},{value:"'end'",paraId:115,tocIndex:54},{value:" / ",paraId:115,tocIndex:54},{value:"'left'",paraId:115,tocIndex:54},{value:" / ",paraId:115,tocIndex:54},{value:"'right'",paraId:115,tocIndex:54},{value:" / ",paraId:115,tocIndex:54},{value:"'start'",paraId:115,tocIndex:54},{value:". ",paraId:115,tocIndex:54},{value:"'start'",paraId:115,tocIndex:54},{value:" by default.",paraId:115,tocIndex:54},{value:" ",paraId:116,tocIndex:55},{value:"String",paraId:116,tocIndex:55},{value:" ",paraId:116,tocIndex:55},{value:"optional",paraId:116,tocIndex:55},{value:" ",paraId:116,tocIndex:55},{value:"The base line of the text. Options: ",paraId:117,tocIndex:55},{value:"'top'",paraId:117,tocIndex:55},{value:" / ",paraId:117,tocIndex:55},{value:"'middle'",paraId:117,tocIndex:55},{value:" / ",paraId:117,tocIndex:55},{value:"'bottom'",paraId:117,tocIndex:55},{value:". ",paraId:117,tocIndex:55},{value:"'bottom'",paraId:117,tocIndex:55},{value:" by default.",paraId:117,tocIndex:55},{value:" ",paraId:118,tocIndex:56},{value:"String",paraId:118,tocIndex:56},{value:" ",paraId:118,tocIndex:56},{value:"optional",paraId:118,tocIndex:56},{value:" ",paraId:118,tocIndex:56},{value:"The font style of the text. The corresponding property in CSS is ",paraId:119,tocIndex:56},{value:"font-style",paraId:119,tocIndex:56},{value:".",paraId:119,tocIndex:56},{value:" ",paraId:120,tocIndex:57},{value:"String",paraId:120,tocIndex:57},{value:" ",paraId:120,tocIndex:57},{value:"optional",paraId:120,tocIndex:57},{value:" ",paraId:120,tocIndex:57},{value:"The font variant of the text. The corresponding property in CSS is ",paraId:121,tocIndex:57},{value:"font-variant",paraId:121,tocIndex:57},{value:".",paraId:121,tocIndex:57},{value:" ",paraId:122,tocIndex:58},{value:"Number",paraId:122,tocIndex:58},{value:" ",paraId:122,tocIndex:58},{value:"optional",paraId:122,tocIndex:58},{value:" ",paraId:122,tocIndex:58},{value:"The font weight of the text. The corresponding property in CSS is ",paraId:123,tocIndex:58},{value:"font-weight",paraId:123,tocIndex:58},{value:".",paraId:123,tocIndex:58},{value:" ",paraId:124,tocIndex:59},{value:"Number",paraId:124,tocIndex:59},{value:" ",paraId:124,tocIndex:59},{value:"optional",paraId:124,tocIndex:59},{value:" ",paraId:124,tocIndex:59},{value:"The font size of the text. The corresponding property in CSS is ",paraId:125,tocIndex:59},{value:"font-size",paraId:125,tocIndex:59},{value:".",paraId:125,tocIndex:59},{value:" ",paraId:126,tocIndex:60},{value:"String",paraId:126,tocIndex:60},{value:" ",paraId:126,tocIndex:60},{value:"optional",paraId:126,tocIndex:60},{value:" ",paraId:126,tocIndex:60},{value:"The font family of the text. The corresponding property in CSS is ",paraId:127,tocIndex:60},{value:"font-family",paraId:127,tocIndex:60},{value:".",paraId:127,tocIndex:60},{value:" ",paraId:128,tocIndex:61},{value:"Number",paraId:128,tocIndex:61},{value:" ",paraId:128,tocIndex:61},{value:"optional",paraId:128,tocIndex:61},{value:" ",paraId:128,tocIndex:61},{value:"Line height of the text. The corresponding property in CSS is ",paraId:129,tocIndex:61},{value:"line-height",paraId:129,tocIndex:61},{value:".",paraId:129,tocIndex:61},{value:"This shape is available only when the ",paraId:130,tocIndex:62},{value:"renderer",paraId:130,tocIndex:62},{value:" is assgined to ",paraId:130,tocIndex:62},{value:"'svg'",paraId:130,tocIndex:62},{value:" for graph instance.",paraId:130,tocIndex:62},{value:"⚠️ Attention:",paraId:131,tocIndex:62},{value:"Only support native HTML DOM, but not react or other components;",paraId:132,tocIndex:62},{value:"If you custom a Node type or an Edge type with dom shape, please use the original DOM events instead of events of G6.",paraId:132,tocIndex:62},{value:"In Safari, if you assign ",paraId:132,tocIndex:62},{value:"position:relative",paraId:132,tocIndex:62},{value:" for the a dom node, the rendered position might be unexpected. It is related to the ",paraId:132,tocIndex:62},{value:"foreignObject bug of Safari",paraId:132,tocIndex:62},{value:". ",paraId:132,tocIndex:62},{value:"Issus",paraId:132,tocIndex:62},{value:".",paraId:132,tocIndex:62},{value:'group.addShape(\'dom\', {\n  attrs: {\n    width: cfg.size[0],\n    height: cfg.size[1],\n    // DOM\'s html\n    html: `\n    <div style="background-color: #fff; border: 2px solid #5B8FF9; border-radius: 5px; width: ${\n      cfg.size[0] - 5\n    }px; height: ${cfg.size[1] - 5}px; display: flex;">\n      <div style="height: 100%; width: 33%; background-color: #CDDDFD">\n        <img alt="img" style="line-height: 100%; padding-top: 6px; padding-left: 8px;" src="https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*Q_FQT6nwEC8AAAAAAAAAAABkARQnAQ" width="20" height="20" />  \n      </div>\n      <span style="margin:auto; padding:auto; color: #5B8FF9">${cfg.label}</span>\n    </div>\n      `,\n  },\n  // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n  name: \'dom-shape\',\n  draggable: true,\n});\n',paraId:133,tocIndex:62},{value:" ",paraId:134,tocIndex:63},{value:"String",paraId:134,tocIndex:63},{value:" ",paraId:134,tocIndex:63},{value:"optional",paraId:134,tocIndex:63},{value:" ",paraId:134,tocIndex:63},{value:"The HTML value for DOM shape.",paraId:135,tocIndex:63}]},26293:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"CompactBox is the default layout for TreeGraph. It will consider the bounding box of each node when layout. It comes from classical ",paraId:0},{value:"Reingold–Tilford tidy layout algorithm",paraId:0},{value:".",paraId:0},{value:"Type",paraId:1,tocIndex:0},{value:": String",paraId:1,tocIndex:0},{value:"Options",paraId:1,tocIndex:0},{value:": 'LR' | 'RL' | 'TB' | 'BT' | 'H' | 'V'",paraId:1,tocIndex:0},{value:"Default",paraId:1,tocIndex:0},{value:": 'LR'",paraId:1,tocIndex:0},{value:"Required",paraId:1,tocIndex:0},{value:": false",paraId:1,tocIndex:0},{value:"Description",paraId:1,tocIndex:0},{value:": The direction of layout.",paraId:1,tocIndex:0},{value:"TB —— Root is on the top, layout from the top to the bottom",paraId:2,tocIndex:0},{value:"BT —— Root is on the bottom, layout from the bottom to the top",paraId:3,tocIndex:0},{value:"LR —— Root is on the left, layout from the left to the right",paraId:4,tocIndex:0},{value:"RL —— Root is on the right, layout from the right to the left",paraId:5,tocIndex:0},{value:"H —— Root is on the middle, layout in horizontal symmetry.",paraId:6,tocIndex:0},{value:"V —— Root is on the middle, layout in vertical symmetry.",paraId:7,tocIndex:0},{value:"Type",paraId:8,tocIndex:1},{value:": Function",paraId:8,tocIndex:1},{value:"Example",paraId:8,tocIndex:1},{value:":",paraId:8,tocIndex:1},{value:"(d) => {\n  // d is a node\n  if (d.id === 'test-child-id') return 'right';\n  return 'left';\n};\n",paraId:9,tocIndex:1},{value:"Default",paraId:10,tocIndex:1},{value:": 'right'",paraId:10,tocIndex:1},{value:"Required",paraId:10,tocIndex:1},{value:": false",paraId:10,tocIndex:1},{value:"Description",paraId:10,tocIndex:1},{value:": The callback function of node position(left or right of root node). Only affects the nodes which are connected to the root node directly. And the descendant nodes will be placed according to it",paraId:10,tocIndex:1},{value:"Type",paraId:11,tocIndex:2},{value:": Function",paraId:11,tocIndex:2},{value:"Example",paraId:11,tocIndex:2},{value:":",paraId:11,tocIndex:2},{value:"(d) => {\n  // d is a node\n  return d.id + '_node';\n};\n",paraId:12,tocIndex:2},{value:"Required",paraId:13,tocIndex:2},{value:": false",paraId:13,tocIndex:2},{value:"Description",paraId:13,tocIndex:2},{value:": Sets the id for each node",paraId:13,tocIndex:2},{value:"Type",paraId:14,tocIndex:3},{value:": Number | Function",paraId:14,tocIndex:3},{value:"Example",paraId:14,tocIndex:3},{value:":",paraId:14,tocIndex:3},{value:"(d) => {\n  // d is a node\n  if (d.id === 'testId') return 50;\n  return 100;\n};\n",paraId:15,tocIndex:3},{value:"Required",paraId:16,tocIndex:3},{value:": false",paraId:16,tocIndex:3},{value:"Description",paraId:16,tocIndex:3},{value:": The width of each node",paraId:16,tocIndex:3},{value:"Type",paraId:17,tocIndex:4},{value:": Number | Function",paraId:17,tocIndex:4},{value:"Example",paraId:17,tocIndex:4},{value:":",paraId:17,tocIndex:4},{value:"(d) => {\n  // d is a node\n  if (d.id === 'testId') return 50;\n  return 100;\n};\n",paraId:18,tocIndex:4},{value:"Required",paraId:19,tocIndex:4},{value:": false",paraId:19,tocIndex:4},{value:"Description",paraId:19,tocIndex:4},{value:": The height of each node",paraId:19,tocIndex:4},{value:"Type",paraId:20,tocIndex:5},{value:": Number | Function",paraId:20,tocIndex:5},{value:"Example",paraId:20,tocIndex:5},{value:":",paraId:20,tocIndex:5},{value:"(d) => {\n  // d is a node\n  if (d.id === 'testId') return 50;\n  return 100;\n};\n",paraId:21,tocIndex:5},{value:"Default",paraId:22,tocIndex:5},{value:": 18",paraId:22,tocIndex:5},{value:"Required",paraId:22,tocIndex:5},{value:": false",paraId:22,tocIndex:5},{value:"Description",paraId:22,tocIndex:5},{value:": The horizontal separation of nodes",paraId:22,tocIndex:5},{value:"Type",paraId:23,tocIndex:6},{value:": Number | Function",paraId:23,tocIndex:6},{value:"Example",paraId:23,tocIndex:6},{value:":",paraId:23,tocIndex:6},{value:"(d) => {\n  // d is a node\n  if (d.id === 'testId') return 50;\n  return 100;\n};\n",paraId:24,tocIndex:6},{value:"Default",paraId:25,tocIndex:6},{value:": 18",paraId:25,tocIndex:6},{value:"Required",paraId:25,tocIndex:6},{value:": false",paraId:25,tocIndex:6},{value:"Description",paraId:25,tocIndex:6},{value:": The vertical separation of nodes",paraId:25,tocIndex:6},{value:"Type",paraId:26,tocIndex:7},{value:": Boolean",paraId:26,tocIndex:7},{value:"Default",paraId:26,tocIndex:7},{value:": false",paraId:26,tocIndex:7},{value:"Required",paraId:26,tocIndex:7},{value:": false",paraId:26,tocIndex:7},{value:"Description",paraId:26,tocIndex:7},{value:": If layout the graph in radial style. If ",paraId:26,tocIndex:7},{value:"radial",paraId:26,tocIndex:7},{value:" is ",paraId:26,tocIndex:7},{value:"true",paraId:26,tocIndex:7},{value:", we recommend to set ",paraId:26,tocIndex:7},{value:"direction",paraId:26,tocIndex:7},{value:" to ",paraId:26,tocIndex:7},{value:"'LR'",paraId:26,tocIndex:7},{value:" or ",paraId:26,tocIndex:7},{value:"'RL'",paraId:26,tocIndex:7},{value:":",paraId:26,tocIndex:7}]},14944:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Dendrogram",paraId:0},{value:" arranges all the leaves on the same level. It is appropriate for hierarchical clustering. It does not consider the node size, which will be regarded as 1px.",paraId:0},{value:"Type",paraId:1,tocIndex:0},{value:": String",paraId:1,tocIndex:0},{value:"Options",paraId:1,tocIndex:0},{value:": 'LR' | 'RL' | 'TB' | 'BT' | 'H' | 'V'",paraId:1,tocIndex:0},{value:"Default",paraId:1,tocIndex:0},{value:": 'LR'",paraId:1,tocIndex:0},{value:"Required",paraId:1,tocIndex:0},{value:": false",paraId:1,tocIndex:0},{value:"Description",paraId:1,tocIndex:0},{value:": The direction of layout.",paraId:1,tocIndex:0},{value:"TB —— Root is on the top, layout from the top to the bottom",paraId:2,tocIndex:0},{value:"BT —— Root is on the bottom, layout from the bottom to the top",paraId:3,tocIndex:0},{value:"LR —— Root is on the left, layout from the left to the right",paraId:4,tocIndex:0},{value:"RL —— Root is on the right, layout from the right to the left",paraId:5,tocIndex:0},{value:"H —— Root is on the middle, layout in horizontal symmetry.",paraId:6,tocIndex:0},{value:"V —— Root is on the middle, layout in vertical symmetry.",paraId:7,tocIndex:0},{value:"Type",paraId:8,tocIndex:1},{value:": Number",paraId:8,tocIndex:1},{value:"Default",paraId:8,tocIndex:1},{value:": 0",paraId:8,tocIndex:1},{value:"Required",paraId:8,tocIndex:1},{value:": false",paraId:8,tocIndex:1},{value:"Description",paraId:8,tocIndex:1},{value:": Node separation",paraId:8,tocIndex:1},{value:"Type",paraId:9,tocIndex:2},{value:": Number",paraId:9,tocIndex:2},{value:"Default",paraId:9,tocIndex:2},{value:": 0",paraId:9,tocIndex:2},{value:"Required",paraId:9,tocIndex:2},{value:": false",paraId:9,tocIndex:2},{value:"Description",paraId:9,tocIndex:2},{value:": Level separation",paraId:9,tocIndex:2},{value:"Type",paraId:10,tocIndex:3},{value:": Boolean",paraId:10,tocIndex:3},{value:"Default",paraId:10,tocIndex:3},{value:": false",paraId:10,tocIndex:3},{value:"Required",paraId:10,tocIndex:3},{value:": false",paraId:10,tocIndex:3},{value:"Description",paraId:10,tocIndex:3},{value:": Wheter layout the graph in radial style. If ",paraId:10,tocIndex:3},{value:"radial",paraId:10,tocIndex:3},{value:" is ",paraId:10,tocIndex:3},{value:"true",paraId:10,tocIndex:3},{value:", we recommend to set ",paraId:10,tocIndex:3},{value:"direction",paraId:10,tocIndex:3},{value:" to ",paraId:10,tocIndex:3},{value:"'LR'",paraId:10,tocIndex:3},{value:" or ",paraId:10,tocIndex:3},{value:"'RL'",paraId:10,tocIndex:3},{value:":",paraId:10,tocIndex:3}]},83256:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Similar to ",paraId:0,tocIndex:0},{value:"Graph Layout",paraId:1,tocIndex:0},{value:", G6 provides several built-in TreeGraph layouts, which can be ",paraId:0,tocIndex:0},{value:"configured to Graph",paraId:2,tocIndex:0},{value:" by ",paraId:0,tocIndex:0},{value:"layout",paraId:0,tocIndex:0},{value:". The differences between TreeGraph and Graph:",paraId:0,tocIndex:0},{value:"When instantiating a TreeGraph, the ",paraId:3,tocIndex:0},{value:"layout",paraId:3,tocIndex:0},{value:" is required, but it is not required for Graph;",paraId:3,tocIndex:0},{value:"TreeGaph layouts does not support being instantiated and used independently;",paraId:3,tocIndex:0},{value:"You can not custom a new type of TreeGraph Layout by ",paraId:3,tocIndex:0},{value:"G6.registerLayout",paraId:3,tocIndex:0},{value:".",paraId:3,tocIndex:0},{value:"Notice that the layouts for TreeGraph cannot be used on Graph.",paraId:4,tocIndex:0},{value:"There are four built-in layouts for TreeGraph:",paraId:5,tocIndex:0},{value:"CompactBox",paraId:6,tocIndex:0},{value:"Dendrogram",paraId:7,tocIndex:0},{value:"Indented",paraId:8,tocIndex:0},{value:"Mindmap",paraId:9,tocIndex:0},{value:"const graph = new G6.TreeGraph({\n  // ...                      // Other configurations\n  layout: {                // Object，required for TreeGraph\n    type: 'dendrogram',\n    ...                    // Other configurations for the layout\n  }\n});\n",paraId:10,tocIndex:1},{value:"Name",paraId:11,tocIndex:2},{value:"Type",paraId:11,tocIndex:2},{value:"Required",paraId:11,tocIndex:2},{value:"Description",paraId:11,tocIndex:2},{value:"type",paraId:11,tocIndex:2},{value:"String",paraId:11,tocIndex:2},{value:"dendrogram",paraId:11,tocIndex:2},{value:"The type of layout. Options: ",paraId:11,tocIndex:2},{value:"'dendrogram'",paraId:11,tocIndex:2},{value:", ",paraId:11,tocIndex:2},{value:"'compactBox'",paraId:11,tocIndex:2},{value:", ",paraId:11,tocIndex:2},{value:"'mindmap'",paraId:11,tocIndex:2},{value:", and ",paraId:11,tocIndex:2},{value:"'indented'",paraId:11,tocIndex:2},{value:".",paraId:11,tocIndex:2},{value:"excludeInvisibles",paraId:11,tocIndex:2},{value:"Boolean",paraId:11,tocIndex:2},{value:"false",paraId:11,tocIndex:2},{value:"Supported by v4.8.8.",paraId:11,tocIndex:2},{value:" Whether to exclude the hidden nodes. Assign it to true to exclude.",paraId:11,tocIndex:2},{value:"direction",paraId:11,tocIndex:2},{value:"String",paraId:11,tocIndex:2},{value:"LR",paraId:11,tocIndex:2},{value:"The direction of layout. Options: ",paraId:11,tocIndex:2},{value:"'LR'",paraId:11,tocIndex:2},{value:" , ",paraId:11,tocIndex:2},{value:"'RL'",paraId:11,tocIndex:2},{value:" , ",paraId:11,tocIndex:2},{value:"'TB'",paraId:11,tocIndex:2},{value:" , ",paraId:11,tocIndex:2},{value:"'BT'",paraId:11,tocIndex:2},{value:" , ",paraId:11,tocIndex:2},{value:"'H'",paraId:11,tocIndex:2},{value:" , and ",paraId:11,tocIndex:2},{value:"'V'",paraId:11,tocIndex:2},{value:".",paraId:11,tocIndex:2},{value:"L: Left; R: right; T: top; B: bottom; H: horizontal; V: vertical.",paraId:11,tocIndex:2},{value:"getChildren",paraId:11,tocIndex:2},{value:"Function",paraId:11,tocIndex:2},{value:"Return all the children nodes of the current node.",paraId:11,tocIndex:2},{value:"⚠️Attention:",paraId:12,tocIndex:2},{value:" When",paraId:12,tocIndex:2},{value:"type='indented'",paraId:12,tocIndex:2},{value:", ",paraId:12,tocIndex:2},{value:"direction",paraId:12,tocIndex:2},{value:" can only be ",paraId:12,tocIndex:2},{value:"'LR'",paraId:12,tocIndex:2},{value:", ",paraId:12,tocIndex:2},{value:"'RL'",paraId:12,tocIndex:2},{value:", and ",paraId:12,tocIndex:2},{value:"'H'",paraId:12,tocIndex:2},{value:".",paraId:12,tocIndex:2}]},98314:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Indented layout represents the hierarchy by indent between them. Each node will take a row/column. It is appropriate for file directory.",paraId:0},{value:"Type",paraId:1,tocIndex:0},{value:": String",paraId:1,tocIndex:0},{value:"Options",paraId:1,tocIndex:0},{value:": 'LR' | 'RL' | 'H'",paraId:1,tocIndex:0},{value:"Default",paraId:1,tocIndex:0},{value:": 'LR'",paraId:1,tocIndex:0},{value:"Required",paraId:1,tocIndex:0},{value:": false",paraId:1,tocIndex:0},{value:"Description",paraId:1,tocIndex:0},{value:": The direction of layout:",paraId:1,tocIndex:0},{value:"LR —— Root is on the left, layout from the left to the right(left image below)",paraId:2,tocIndex:0},{value:"RL —— Root is on the right, layout from the right to the left(center image below)",paraId:2,tocIndex:0},{value:"H —— Root is on the middle, layout in horizontal symmetry(right image below)",paraId:2,tocIndex:0},{value:"(Left)LR. (Center)RL. (Right)H.",paraId:3,tocIndex:0},{value:"Type",paraId:4,tocIndex:1},{value:": Number | Function",paraId:4,tocIndex:1},{value:"Default",paraId:4,tocIndex:1},{value:": 20",paraId:4,tocIndex:1},{value:"Example",paraId:4,tocIndex:1},{value:"：",paraId:4,tocIndex:1},{value:"(d) => {\n  // d is a node\n  if (d.parent?.id === 'testId') return d.parent.x + 50;\n  return 100;\n};\n",paraId:5,tocIndex:1},{value:"Required",paraId:6,tocIndex:1},{value:": false",paraId:6,tocIndex:1},{value:"Description",paraId:6,tocIndex:1},{value:": When the type is Number, the colunm separation is a fixed value; When the type is Function, the distance between the node and the root node is the returned value of the function.",paraId:6,tocIndex:1},{value:"Type",paraId:7,tocIndex:2},{value:": Number | Function",paraId:7,tocIndex:2},{value:"Example",paraId:7,tocIndex:2},{value:":",paraId:7,tocIndex:2},{value:"(d) => {\n  // d is a node\n  if (d.id === 'testId') return 50;\n  return 100;\n};\n",paraId:8,tocIndex:2},{value:"Required",paraId:9,tocIndex:2},{value:": false",paraId:9,tocIndex:2},{value:"Description",paraId:9,tocIndex:2},{value:": The width of each node. Takes effect only when ",paraId:9,tocIndex:2},{value:"direction",paraId:9,tocIndex:2},{value:" is ",paraId:9,tocIndex:2},{value:"'H'",paraId:9,tocIndex:2},{value:"Type",paraId:10,tocIndex:3},{value:": Number | Function",paraId:10,tocIndex:3},{value:"Example",paraId:10,tocIndex:3},{value:":",paraId:10,tocIndex:3},{value:"(d) => {\n  // d is a node\n  if (d.id === 'testId') return 50;\n  return 100;\n};\n",paraId:11,tocIndex:3},{value:"Required",paraId:12,tocIndex:3},{value:": false",paraId:12,tocIndex:3},{value:"Description",paraId:12,tocIndex:3},{value:": The height of each node",paraId:12,tocIndex:3},{value:"Type",paraId:13,tocIndex:4},{value:": Function",paraId:13,tocIndex:4},{value:"Example",paraId:13,tocIndex:4},{value:":",paraId:13,tocIndex:4},{value:"(d) => {\n  // d is a node\n  if (d.id === 'testId') return 'left';\n  return 'right';\n};\n",paraId:14,tocIndex:4},{value:"Required",paraId:15,tocIndex:4},{value:": false",paraId:15,tocIndex:4},{value:"Description",paraId:15,tocIndex:4},{value:": The callback function of node position(left or right of root node). Only affects the nodes which are connected to the root node directly. And the descendant nodes will be placed according to it.",paraId:15,tocIndex:4},{value:"Type",paraId:16,tocIndex:5},{value:": Boolean",paraId:16,tocIndex:5},{value:"Required",paraId:17,tocIndex:5},{value:": false",paraId:17,tocIndex:5},{value:"Explanation",paraId:18,tocIndex:5},{value:": Whether place the first child node at the next line. ",paraId:18,tocIndex:5},{value:"true",paraId:18,tocIndex:5},{value:" by default",paraId:18,tocIndex:5}]},96465:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Mindmap arranged the nodes with same depth on the same level. Different from compactBox, it does not consider the size of nodes while doing layout.",paraId:0},{value:"Type",paraId:1,tocIndex:0},{value:": String",paraId:1,tocIndex:0},{value:"Options",paraId:1,tocIndex:0},{value:": 'H' | 'V'",paraId:1,tocIndex:0},{value:"Default",paraId:1,tocIndex:0},{value:": 'H'",paraId:1,tocIndex:0},{value:"Required",paraId:1,tocIndex:0},{value:": false",paraId:1,tocIndex:0},{value:"Description",paraId:1,tocIndex:0},{value:": The direction of layout.",paraId:1,tocIndex:0},{value:"H —— Root is on the middle, layout in horizontal symmetry.",paraId:2,tocIndex:0},{value:"V —— Root is on the middle, layout in vertical symmetry.",paraId:3,tocIndex:0},{value:"Type",paraId:4,tocIndex:1},{value:": Number | Function",paraId:4,tocIndex:1},{value:"Example",paraId:4,tocIndex:1},{value:":",paraId:4,tocIndex:1},{value:"(d) => {\n  // d is a node\n  if (d.id === 'testId') return 50;\n  return 100;\n};\n",paraId:5,tocIndex:1},{value:"Required",paraId:6,tocIndex:1},{value:": false",paraId:6,tocIndex:1},{value:"Description",paraId:6,tocIndex:1},{value:": The width of each node",paraId:6,tocIndex:1},{value:"Type",paraId:7,tocIndex:2},{value:": Number | Function",paraId:7,tocIndex:2},{value:"Example",paraId:7,tocIndex:2},{value:":",paraId:7,tocIndex:2},{value:"(d) => {\n  // d is a node\n  if (d.id === 'testId') return 50;\n  return 100;\n};\n",paraId:8,tocIndex:2},{value:"Required",paraId:9,tocIndex:2},{value:": false",paraId:9,tocIndex:2},{value:"Description",paraId:9,tocIndex:2},{value:": The height of each node",paraId:9,tocIndex:2},{value:"Type",paraId:10,tocIndex:3},{value:": Number | Function",paraId:10,tocIndex:3},{value:"Example",paraId:10,tocIndex:3},{value:":",paraId:10,tocIndex:3},{value:"(d) => {\n  // d is a node\n  if (d.id === 'testId') return 50;\n  return 100;\n};\n",paraId:11,tocIndex:3},{value:"Default",paraId:12,tocIndex:3},{value:": 18",paraId:12,tocIndex:3},{value:"Required",paraId:12,tocIndex:3},{value:": false",paraId:12,tocIndex:3},{value:"Description",paraId:12,tocIndex:3},{value:": The horizontal separation of nodes",paraId:12,tocIndex:3},{value:"Type",paraId:13,tocIndex:4},{value:": Number | Function",paraId:13,tocIndex:4},{value:"Example",paraId:13,tocIndex:4},{value:":",paraId:13,tocIndex:4},{value:"(d) => {\n  // d is a node\n  if (d.id === 'testId') return 50;\n  return 100;\n};\n",paraId:14,tocIndex:4},{value:"Default",paraId:15,tocIndex:4},{value:": 18",paraId:15,tocIndex:4},{value:"Required",paraId:15,tocIndex:4},{value:": false",paraId:15,tocIndex:4},{value:"Description",paraId:15,tocIndex:4},{value:": The vertical separation of nodes",paraId:15,tocIndex:4},{value:"Type",paraId:16,tocIndex:5},{value:": Function",paraId:16,tocIndex:5},{value:"Example",paraId:16,tocIndex:5},{value:":",paraId:16,tocIndex:5},{value:"(d) => {\n  // d is a node\n  if (d.id === 'test-child-id') return 'right';\n  return 'left';\n};\n",paraId:17,tocIndex:5},{value:"Default",paraId:18,tocIndex:5},{value:": 'right'",paraId:18,tocIndex:5},{value:"Required",paraId:18,tocIndex:5},{value:": false",paraId:18,tocIndex:5},{value:"Description",paraId:18,tocIndex:5},{value:": The callback function of node position(left or right of root node). Only affects the nodes which are connected to the root node directly. And the descendant nodes will be placed according to it",paraId:18,tocIndex:5}]},1164:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Add sub tree to the parent node.",paraId:0,tocIndex:1},{value:"⚠️ Attention:",paraId:1,tocIndex:1},{value:" G6 will use the ",paraId:1,tocIndex:1},{value:"data",paraId:1,tocIndex:1},{value:" object as the model of the newly added item, and the ",paraId:1,tocIndex:1},{value:"data",paraId:1,tocIndex:1},{value:" might be modified. If you do not want it to be modified, use the deep cloned ",paraId:1,tocIndex:1},{value:"data",paraId:1,tocIndex:1},{value:" instead.",paraId:1,tocIndex:1},{value:"Parameters",paraId:2,tocIndex:1},{value:"| Name   | Type   | Required | Description          |\n| ------ | ------ | -------- | -------------------- | ---------------------------------- |\n| data   | Object | true     | The data of subtree. |\n| parent | Node   | String   | true                 | The id or instance of parent node. |",paraId:3,tocIndex:1},{value:"Usage",paraId:4,tocIndex:1},{value:"const data = {\n  id: 'sub1',\n  children: [\n    {\n      id: 'subTree1',\n      children: [...]\n    },\n    {\n      id: 'subTree2',\n      children: [...]\n    }\n  ]\n};\n\ntreeGraph.addChild(data, 'root')\n",paraId:5,tocIndex:1},{value:"Incrementally update or add one child data of a parent node. If you want to update all the children of the parent, try ",paraId:6,tocIndex:2},{value:"updateChildren",paraId:7,tocIndex:2},{value:" instead. The following image illustrate the differences between ",paraId:6,tocIndex:2},{value:"updateChild",paraId:6,tocIndex:2},{value:" and ",paraId:6,tocIndex:2},{value:"updateChildren",paraId:6,tocIndex:2},{value:": ",paraId:6,tocIndex:2},{value:" ",paraId:6,tocIndex:2},{value:" ",paraId:6,tocIndex:2},{value:"Parameters",paraId:8,tocIndex:2},{value:"Name",paraId:9,tocIndex:2},{value:"Type",paraId:9,tocIndex:2},{value:"Required",paraId:9,tocIndex:2},{value:"Description",paraId:9,tocIndex:2},{value:"data",paraId:9,tocIndex:2},{value:"TreeData",paraId:9,tocIndex:2},{value:"true",paraId:9,tocIndex:2},{value:"The data of subtreee.",paraId:9,tocIndex:2},{value:"parent",paraId:9,tocIndex:2},{value:"String",paraId:9,tocIndex:2},{value:"false",paraId:9,tocIndex:2},{value:"The id of the parent node.",paraId:9,tocIndex:2},{value:"⚠️Attention:",paraId:10,tocIndex:2},{value:" When the ",paraId:10,tocIndex:2},{value:"parent",paraId:10,tocIndex:2},{value:" is null, this operation will update the graph fully.",paraId:10,tocIndex:2},{value:"Usage",paraId:11,tocIndex:2},{value:"const data = {\n  id: 'sub1',\n  children: [\n    {\n      id: 'subTree1',\n      children: [...]\n    },\n    {\n      id: 'subTree2',\n      children: [...]\n    }\n  ]\n};\n\ntreeGraph.updateChild(data, 'root')\n",paraId:12,tocIndex:2},{value:"Update all the children of the parent. If you want to update or add one child of the parent, try ",paraId:13,tocIndex:3},{value:"updateChild",paraId:14,tocIndex:3},{value:" instead. The following image illustrate the differences between ",paraId:13,tocIndex:3},{value:"updateChild",paraId:13,tocIndex:3},{value:" and ",paraId:13,tocIndex:3},{value:"updateChildren",paraId:13,tocIndex:3},{value:": ",paraId:13,tocIndex:3},{value:"Parameters",paraId:15,tocIndex:3},{value:"Name",paraId:16,tocIndex:3},{value:"Type",paraId:16,tocIndex:3},{value:"Required",paraId:16,tocIndex:3},{value:"Description",paraId:16,tocIndex:3},{value:"data",paraId:16,tocIndex:3},{value:"TreeData[]",paraId:16,tocIndex:3},{value:"true",paraId:16,tocIndex:3},{value:"The data of subtreee.",paraId:16,tocIndex:3},{value:"parent",paraId:16,tocIndex:3},{value:"String",paraId:16,tocIndex:3},{value:"true",paraId:16,tocIndex:3},{value:"The id of the parent node.",paraId:16,tocIndex:3},{value:"Usage",paraId:17,tocIndex:3},{value:"const data = [\n  {\n    id: 'subTree1',\n    children: [...]\n  },\n  {\n    id: 'subTree2',\n    children: [...]\n  }\n];\n\ntreeGraph.updateChildren(data, 'root')\n",paraId:18,tocIndex:3},{value:"Remove the subtree started from a child node with the id.",paraId:19,tocIndex:4},{value:"Parameters",paraId:20,tocIndex:4},{value:"Name",paraId:21,tocIndex:4},{value:"Type",paraId:21,tocIndex:4},{value:"Required",paraId:21,tocIndex:4},{value:"Description",paraId:21,tocIndex:4},{value:"id",paraId:21,tocIndex:4},{value:"String",paraId:21,tocIndex:4},{value:"true",paraId:21,tocIndex:4},{value:"The id of the subtree to be removed.",paraId:21,tocIndex:4},{value:"Usage",paraId:22,tocIndex:4},{value:"treeGraph.removeChild('sub');\n",paraId:23,tocIndex:4},{value:"Change the layout.",paraId:24,tocIndex:6},{value:"Parameters",paraId:25,tocIndex:6},{value:"Name",paraId:26,tocIndex:6},{value:"Type",paraId:26,tocIndex:6},{value:"Required",paraId:26,tocIndex:6},{value:"Description",paraId:26,tocIndex:6},{value:"layout",paraId:26,tocIndex:6},{value:"Object",paraId:26,tocIndex:6},{value:"false",paraId:26,tocIndex:6},{value:"The new layout configurations. If the ",paraId:26,tocIndex:6},{value:"layout",paraId:26,tocIndex:6},{value:" is null, the layout will not be changed.",paraId:26,tocIndex:6},{value:"Usage",paraId:27,tocIndex:6},{value:"const layout = {\n  type: 'mindmap',\n  direction: 'H',\n  getSubTreeSep: () => 20,\n  getVGap: () => 25,\n  getHeight: () => 30,\n  getWidth: () => 30,\n};\ntreeGraph.changeLayout(layout);\n",paraId:28,tocIndex:6},{value:"Refresh the layout. Usually, it is called after changing data. The ",paraId:29,tocIndex:7},{value:"refreshLayout",paraId:29,tocIndex:7},{value:" is discarded by v4.x, call ",paraId:29,tocIndex:7},{value:"layout",paraId:29,tocIndex:7},{value:" instead.",paraId:29,tocIndex:7},{value:"Parameters",paraId:30,tocIndex:7},{value:"Name",paraId:31,tocIndex:7},{value:"Type",paraId:31,tocIndex:7},{value:"Required",paraId:31,tocIndex:7},{value:"Description",paraId:31,tocIndex:7},{value:"fitView",paraId:31,tocIndex:7},{value:"Boolean",paraId:31,tocIndex:7},{value:"false",paraId:31,tocIndex:7},{value:"Whether to fit view after refreshing layout.",paraId:31,tocIndex:7},{value:"Usage",paraId:32,tocIndex:7},{value:"treeGraph.layout(true);\n",paraId:33,tocIndex:7},{value:"Find data model according to the id.",paraId:34,tocIndex:9},{value:"Parameters",paraId:35,tocIndex:9},{value:"Name",paraId:36,tocIndex:9},{value:"Type",paraId:36,tocIndex:9},{value:"Required",paraId:36,tocIndex:9},{value:"Description",paraId:36,tocIndex:9},{value:"id",paraId:36,tocIndex:9},{value:"String",paraId:36,tocIndex:9},{value:"true",paraId:36,tocIndex:9},{value:"The id of the item.",paraId:36,tocIndex:9},{value:"target",paraId:36,tocIndex:9},{value:"Object",paraId:36,tocIndex:9},{value:"false",paraId:36,tocIndex:9},{value:"Search from the target. If the target is null, this operation will search from the root node.",paraId:36,tocIndex:9},{value:"Return",paraId:37,tocIndex:9},{value:"The type of return value: Object;",paraId:38,tocIndex:9},{value:"The return value is the data model of the found node.",paraId:38,tocIndex:9},{value:"Usage",paraId:39,tocIndex:9},{value:"const target = {\n\tid: 'sub1',\n  children: [...]\n}\n\n// Search the node with id 'sub1.1' from target\nconst subData = treeGraph.findDataById('sub1.1', target)\n\n// Search the node with id 'sub1.1' from root node\nconst subData = treeGraph.findDataById('sub1.1')\n",paraId:40,tocIndex:9}]},53302:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"🛠The English Version is in Prograss🛠",paraId:0},{value:"在分析网络安全数据时，设备、事件、位置、IP、签名等之间的连接是发现异常、威胁和漏洞的关键。理解这些联系的最好方法就是把它们形象化。今天，在许多大型组织、金融机构和安全咨询服务中都有网络或 IT 的安全要求。这些组织需要保护自己免受如 zero-day 漏洞，DDoS 或网络钓鱼攻击之类漏洞的侵害。他们从服务器、路由器或应用程序日志和网络状态中收集数据，来检测可疑活动。图可视化可以一目了然地展示这些数据并检测可疑模式。通过对连接状态的可视化探索，可以更快速定位漏洞或攻击。 ",paraId:1,tocIndex:0},{value:" 详细案例请参考",paraId:1,tocIndex:0},{value:"《图可视化解决方案：云安全》",paraId:1,tocIndex:0},{value:"。",paraId:1,tocIndex:0},{value:"知识图谱（Knowledge Graph）是一种用图模型来描述知识和建模世界万物之间的关联关系的技术方法。知识图谱将信息中的知识或者数据加以关联，实现人类知识的描述及推理计算，并最终实现像人类一样对事物进行理解与解释，推动了从弱人工智能到强人工智能的发展。知识图谱由节点和边组成。节点可以是实体（如一个人、一个支付设备、一个企业等），也或是抽象的概念-本体类型（如人工智能、事物等）。边可以是本体类型之间的关系，也可以实体与实体之间的关系，如投资关系、支付关系等。图可视化可以更加清晰直观地描述这种结构化的关系，利于看清，是知识图谱领域的做图表示、图分析推理等重要基石。 ",paraId:2,tocIndex:1},{value:" 详细案例请参考",paraId:2,tocIndex:1},{value:"《图可视化解决方案：知识图谱》",paraId:2,tocIndex:1},{value:"。",paraId:2,tocIndex:1},{value:"随着互联网发展和数字化的进程，企业数据在规模上几何增长，越来越多的企业面临信用、合规、声誉、第三方等诸多风险，企业风险控制的需求甚至也扩大到了政府、专业机构等各类细分领域。如何结合各个细分领域、业务场景，利用数据可视化技术，帮助企业更清晰发现和识别风险，从而将数据变成实际可用的风控产品和服务，这是当下企业风控需要解决的一个问题。 ",paraId:3,tocIndex:2},{value:" 详细案例请参考",paraId:3,tocIndex:2},{value:"《图可视化解决方案：企业风控》",paraId:3,tocIndex:2},{value:"。",paraId:3,tocIndex:2},{value:"图数据库领域是最近几年大数据领域热度颇高的领域，从 DB Engines 的排名来看，自 2013 年开始，图数据库的发展就一骑绝尘。与传统关系型数据库不同，图数据技术主要关注数据间关系查询能力，是表示和查询关联关系的最佳方式。借助于图数据库技术:",paraId:4,tocIndex:3},{value:"可以快速从百亿级电商网络中匹配出刷单团伙；",paraId:5,tocIndex:3},{value:"可以快速构建出人与人的社交关系，分析特定用户的人际关系、关注度、转发量等；",paraId:5,tocIndex:3},{value:"把 IP、域名、主机等一些列实体构建成图，可以快速发现诸如木马网络的不安全因素，辅以图分析能力能够很容易对不安全因素进行追根溯源。 ",paraId:5,tocIndex:3},{value:" 详细案例请参考",paraId:5,tocIndex:3},{value:"《图可视化解决方案：图数据库》",paraId:5,tocIndex:3},{value:"。",paraId:5,tocIndex:3}]},72557:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"🛠The English Version is in Prograss🛠",paraId:0},{value:"介绍一个图分析产品会有的常用组件，以及各组件的作用及用法。白皮书中组件相关内容点和边的基础样式是是所有图可视化的基石，要组成一个完成的图分析产品，还需要有各类组件来承担不同的功能。从体验设计的角度来看，常见的组件可分为如下几种类型：",paraId:1},{value:"基础组件：图例、工具栏、右键菜单、视图控制栏、系统日志等",paraId:2},{value:"条件输入：查询、筛选、搜索、画布设置等",paraId:2},{value:"信息输出：详情面板、气泡、Tooltip、画板信息等",paraId:2},{value:"高级功能：时间轴、快照画廊、分析报表等",paraId:2},{value:"在某些特殊场景下，也需要结合业务实际情况基于基础组件去升级优化，乃至基于产品独有的能力去设计全新的组件。在优化一个基础组件或设计全新的组件时，需要结合实际的功能需求，从使用场景、构成元素、常见类型、交互说明等几个角度完整的思考清楚。以 AntV 最新设计的两个组件为例：",paraId:3},{value:"时间轴 TimeBar",paraId:4},{value:"视图控制栏 View ToolBar",paraId:5},{value:"引用自白皮书内容-组件。交互组件，是指用户操作节点，操作边，操作画布，所需要的配套组件。比如 Hover 节点展示出提示框（Tooltip）；点击图例（Legend）对节点筛选；右键节点，弹出菜单（ContextMenu）；对画布进行 放大，缩小，全屏等一套操作工具栏（Toolbar），以及动态改变时间范围，影响画布展示（Timebar）",paraId:6,tocIndex:1},{value:"Legend 图例是一种常见的图分析配套组件，通常将节点 和 边 分类后进行染色，交互分析。其中点击图例，有两种逻辑，一种为 高亮逻辑，即高亮选中的图例所对应的节点，一种是过滤逻辑，即将未选中的节点从画布中过滤。",paraId:7,tocIndex:1},{value:"@antv/graphin-components 提供了 Legend 组件，如下图所示：",paraId:8,tocIndex:1},{value:"Tooltip 提示框是一种快速浏览信息的交互组件，常用于图的节点上，通过鼠标 Hover 产生一个提示框，鼠标移出节点则取消提示框，一般在快速查询信息的时候非常有帮助。",paraId:9,tocIndex:2},{value:"@antv/g6 提供了 tooltip 组件，如下图所示：",paraId:10,tocIndex:2},{value:"ContextMenu 是右键菜单，通常是对节点进行进一步操作的组件。例如：通过右键菜单实现节点的复制，删除，反选等等。同时，我们也可以对选择的节点发起新画布分析，或者进行打标，发起关系扩散，数据请求之类的高级自定义行为。图分析产品中的 右键菜单往往是和 浏览器网页 的右键菜单 交互与展示形式保持一致，但是也有特殊的形状类型，比如右键仪表盘菜单。",paraId:11,tocIndex:3},{value:"@antv/graphin-components 提供了 ContextMenu 组件，如下图所示： ",paraId:12,tocIndex:3},{value:" ",paraId:12,tocIndex:3},{value:"Toolbar 是提供 常见分析操作 的工具栏。内置了撤销重做（操作历史），鱼眼放大镜，画布缩放，全屏，节点聚焦，画布快照下载等等功能。",paraId:13,tocIndex:4},{value:"@antv/graphin-components 提供了 Toolbar 组件，如下图所示：",paraId:14,tocIndex:4},{value:"时间轴是一种针对时间序列的分析组件，根据时间日期的改变，画布的图也相应动态改变，一个功能完备的时间轴，可以配合播放、快进、后退等控制按钮组使用，为用户带来意想不到的分析效果",paraId:15,tocIndex:5},{value:"@antv/g6 提供了 Timebar 组件，如下图所示：",paraId:16,tocIndex:5},{value:"用户查询图数据的组件，一般由特定的 DSL 语言编辑器组成，例如 SQL、Gremlin、Cypher 等，在某些场景下，通过这个查询面板，可以让用户自主加载数据。",paraId:17,tocIndex:7},{value:"筛选面板是对图元素：节点与边的筛选，从而达到减少视觉干扰的效果。",paraId:18,tocIndex:8},{value:"在关系分析过程中，搜索面板可以辅助用户快速定位其需要关心节点、关联关系。减少用户读图时间。",paraId:19,tocIndex:9},{value:"在关系分析中，节点、边的属性信息量较大，很难把所有信息都在画布中呈现。除了关键属性信息，其他属性信息可以通过属性面板的交互方式呈现给用户",paraId:20,tocIndex:10},{value:"后分析组件：顾名思义是 画布分析后的分析组件。通常来讲，我们的图分析默认都是在画布区域分析，当一个图已经分析完毕，我们需要对分析结果进行增强，或者保存分享给其他人进行二次分析，这部分能力往往也是图分析产品所应该具备的系统能力。我们梳理出来 3 个后分析组件：注解组件，快照画廊，分析报表。",paraId:21,tocIndex:11},{value:"能够对画布的分析结果进行标注：可以使用圈选，拉索 对分析结果的图片进行区域内容选择，使用文本标注，标注内容可以按照时间轴存储。",paraId:22,tocIndex:12},{value:"技术上，社区有开源的 d3-annotation，可以轻松实现注解功能。下图是一个分组备注案例",paraId:23,tocIndex:12},{value:"快照画廊：是由一系列分析结果快照保存组成的事件长廊，我们形象称之为快照画廊：与传统单一的快照功能相比，快照画廊能够将片断的分析快照保存在系统上，以供分析师能够回看和二次分析。相比 Toolbar 工具栏里的“撤销回退”功能，快照画廊更佳可视化，与分析系统集成度更佳。",paraId:24,tocIndex:13},{value:"技术上，@antv/g6 提供 save image 功能，配合 gallery 功能特性。",paraId:25,tocIndex:13},{value:"一个中心明确，内容清晰的分析报表能够节省决策者读懂报表内容的时间。图分析报表除了能使用静态图片加内容注解方式的方式呈现给决策者之外，可以使用 IFrame 的方式内嵌的三方报表系统中，是分析结果具有一定的可交互性，从而帮助决策者更好的理解报表内容。",paraId:26,tocIndex:14},{value:"系统组件是指可视化分析系统中需要的一些组件，比如分析过程产生的日志（SystemLog），原始数据表格的展示（TableMode），以及画布的实时状态信息（CanvasInfo）和画布的用户设置项（CanvasSetting）",paraId:27,tocIndex:15},{value:"关系分析的分析过程是一个反复与后端系统进行交互的过程，一个设计完善、内容清晰的系统日志组件能够帮助用户迅速定位问题。",paraId:28,tocIndex:16},{value:"表格模式虽然不能直观展示图中关联关系，但是对于罗列点、边属性信息有较大优势，可以作为分析能力的一个补充。",paraId:29,tocIndex:17},{value:"画布设置，可以设置画布元素的颜色，大小，类型，从而达到最佳的展示效果。",paraId:30,tocIndex:18},{value:"统计画布的实时信息，比如统计当前画布的节点数量，边数量，在一些持续性布局中，比如力导，还可以提供布局时间与进度。在一些大图场景下，还需要监控浏览器的内存，网络等系统监控信息。",paraId:31,tocIndex:19}]},63410:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"🛠The English Version is in Prograss🛠",paraId:0},{value:"时间轴组件基于普通缩略轴演变而来，它是有效展示动态时序数据、分析图数据的组件。该组件可以让用户快速、直观地观察事件序列以及它们之间的联系。用户可以播放时间来发现异常和探寻模式，推动调查并揭示数据中隐藏的故事。",paraId:1,tocIndex:0},{value:"如果需要观察一定时间内图数据的演变情况，分析变化趋势时，建议开启时间轴组件。例：在金融风控领域，保险公司和金融机构的反欺诈人员通过图可视化分析三个月内的案件情况，时间轴组件可以帮助快速分析可疑人脉、财务转账关系，定位嫌疑人。",paraId:2,tocIndex:1},{value:"该时间轴包括但不限于折线图、面积图、柱状图中的一种或多种组合用来表示某种数据属性趋势的时间轴组件，",paraId:3,tocIndex:3},{value:"查看演示 Demo",paraId:3,tocIndex:3},{value:"。",paraId:3,tocIndex:3},{value:"相对于趋势图时间轴而言，去掉了表示数据趋势的图表，使用更为简洁的线条来表示时间范围，",paraId:4,tocIndex:4},{value:"查看演示 Demo",paraId:4,tocIndex:4},{value:"。",paraId:4,tocIndex:4},{value:"指表示时间刻度的时间轴组件，",paraId:5,tocIndex:5},{value:"查看演示 Demo",paraId:5,tocIndex:5},{value:"。",paraId:5,tocIndex:5},{value:"时间轴组件主体分为三部分，2、3 部分需同时出现或隐藏。",paraId:6,tocIndex:6},{value:"缩略轴：可配置成趋势图时间轴、简版时间轴、时间刻度时间轴；",paraId:7,tocIndex:6},{value:"播放器：播放时间动画，可配置是否显示；",paraId:7,tocIndex:6},{value:"时间配置：可配置播放速度、是否只看单一时间点；",paraId:7,tocIndex:6},{value:"时间轴作为辅助组件，建议放在图形区下方。",paraId:8,tocIndex:7},{value:"支持拖拽、点击、平移改变时间范围。",paraId:9,tocIndex:9},{value:"简版时间轴、时间刻度时间轴交互操作同上。鼠标滚轮滚动时，左右平移已选定区间，暂不支持触控版操作。",paraId:10,tocIndex:9},{value:"轴上数值文本内置自动躲避规则。",paraId:11,tocIndex:9},{value:"播放器主要包括三部分，其中播放、暂停按钮动作及状态相互切换。",paraId:12,tocIndex:10},{value:"\n播放方式，分两种：\n- 累计时间段数据：开始时间不变，结束时间持续增加，适合查看从一个时间点开始，持续观察累计变化趋势；\n- 区间时间段数据：开始到结束时间的区间段固定不变，播放时该时间段水平移动，适合查看固定时间段内的数据变化趋势；\n",paraId:13},{value:"时间配置主要包括两部分，单一时间开关、播放速度设置。",paraId:14,tocIndex:11},{value:"单一时间开关，默认不开启。 ",paraId:15,tocIndex:11},{value:" ",paraId:15,tocIndex:11},{value:" ",paraId:15,tocIndex:11},{value:"播放速度设置，默认配速为最慢速 1，最大速为 5。支持滚轮（触控板）滑动切换配速，每次增减值为 1。 ",paraId:15,tocIndex:11},{value:" ",paraId:15,tocIndex:11}]},94180:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"🛠The English Version is in Prograss🛠",paraId:0},{value:"\n视图控制栏是用户与数据进行交互的载体，当用户操作视图工具栏时，可对视图可视区间缩放、平移、对数据进行检索、过滤等。\n",paraId:1},{value:"以下两种情况，建议设计时开启视图控制栏。",paraId:2,tocIndex:1},{value:"数据绘制区域超过屏幕可视区域，为方便用户能以全局视角观察数据，建议开启视图控制栏。例：地图上的视图控制栏；",paraId:3,tocIndex:1},{value:"用户需要频繁与视图上的数据进行交互，比如放大、缩小视图空间，快速定位检索数据点等。例：公安通过关系网核查犯罪嫌疑人；",paraId:3,tocIndex:1},{value:"以下每组元素都为选配项",paraId:4,tocIndex:2},{value:"搜索；",paraId:5,tocIndex:2},{value:"画布控制按钮组：+、—、百分比、Mini Map 迷你视图（可选配）；",paraId:5,tocIndex:2},{value:"自定义组：可定制视图工具栏按钮，比如全屏、定位当前位置等操作。",paraId:5,tocIndex:2},{value:"z-index 层级：层级高于画布，但低于视图中的 Tooltip 提示信息组件；",paraId:6,tocIndex:4},{value:"水平边距：距两边边距均为 8 的倍数；",paraId:6,tocIndex:4},{value:"位置：视布局需要，八个方向均可配置。",paraId:6,tocIndex:4},{value:"键盘操作：输入后，enter 执行搜索操作，按键盘 esc 可退出搜索框，搜索恢复 normal 态。",paraId:7,tocIndex:6},{value:"点击“+”，0 以上默认增幅 25%，100% 以上默认增幅 50%，建议最大值 200%；",paraId:8,tocIndex:7},{value:"点击”—“，100%~200% 之间，默认降幅 50%，100% 以下默认降幅 25%，建议早小值 25%；",paraId:8,tocIndex:7},{value:"百分比字体：Roboto Condensed；",paraId:8,tocIndex:7},{value:"键盘操作：按 esc 可退出已激活的下拉框。",paraId:8,tocIndex:7},{value:"键盘操作：按 esc 可退出已显示的 Minimap。",paraId:9,tocIndex:8},{value:"建议视图控制栏按钮按照格式塔原理分组显示。",paraId:10,tocIndex:10},{value:"画布初始位置，建议符合从左至右，从上至下的阅读习惯，而不是一刀切显示视图的正中间。比如：",paraId:11,tocIndex:11},{value:"思维导图建议贴左，垂直居中；",paraId:12,tocIndex:11},{value:"关系图将起始节点居中显示；",paraId:12,tocIndex:11},{value:"DAG 流程图建议贴上，水平居中；",paraId:12,tocIndex:11},{value:"建议视图增快捷操作，提升使用效率",paraId:13,tocIndex:12},{value:"放大 +：Ctrl/⌘ + +",paraId:14,tocIndex:12},{value:"缩小 -：Ctrl/⌘ + —",paraId:14,tocIndex:12},{value:"100% 1:1 等比例显示：Ctrl/⌘ + 0",paraId:14,tocIndex:12},{value:"适应画布显示：Ctrl/⌘ + 1",paraId:14,tocIndex:12},{value:"建议补充移动端样式及交互；",paraId:15,tocIndex:13},{value:"补充 Dark Mode 模式。",paraId:15,tocIndex:13}]},29353:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"🛠The English Version is in Prograss🛠",paraId:0},{value:"在图可视化分析的实际场景中，往往会发现静态演示不足以满足我们的业务需求，这种情况在海量数据的情况下尤为显著。若将巨量的数据完整地排布到可视化空间中，会发现信息密度远远超过了人的可读范围（图 1.1）。在只需传达给观者大致感知与情绪冲击的场景，这样的方式是适用的，但要解决更具体的问题或获取更深度的洞察时，就变得举步维艰。",paraId:1,tocIndex:0},{value:"图 1.1 《人际关系星形图》（ Personal Friendster ） - Jeffrey Heer 2004 ",paraId:2,tocIndex:0},{value:" Personal Friendster 是 Vizster 在线社交网络可视化项目的一部分，加利福利亚大学伯克利分校的 Jeffrey 教授采集了自己在社交网络 Friendster 中的三度人际关系数据，通过力导向布局可视化了以自己为中心的 47471 人与 432430 段关系，该图颠覆了人的认知：仅仅三度关系，就能构建出如此庞大的社交网络。这是该项目希望达成的目标，但要在如此庞大的节点与边中去探索具体的人与关系，作为静态图无疑是不可能的。",paraId:2,tocIndex:0},{value:"为了使图能传达具体的信息，而不仅只是模糊的感知，需要将可视化空间中的图元数量限制在人肉眼可识别能力的范围内。并在下一步提供恰当的交互，来使用户渐进式地发现更丰富与多维的信息（图 1.2）。",paraId:3,tocIndex:0},{value:"图 1.2 GraphStudio - Alibaba Inc. ",paraId:4,tocIndex:0},{value:" 通过条件筛选、搜索、双击展开关系等等交互方式探索数据，令用户能够依照自己的分析目标去发现各个颗粒度的数据与关系",paraId:4,tocIndex:0},{value:'交互使被动的"看客"成为主动的"用户"，更好地参与了对数据的理解和分析。可视分析系统的目的往往不仅是向用户传递定制好的知识，而是还能提供一个工具或平台来帮助用户探索数据，得到结论。',paraId:5,tocIndex:0},{value:"目前在阿里和蚂蚁体系内，G6 广泛应用于金融风控、云安全、知识图谱、企业风控、图数据库等业务，其广泛的应用场景，也决定了其不仅要保证专业性与扩展性，也要保证普适性，无论是新手、中级用户、亦或是专家，都能高效且容易地使用产品。我们提供的交互规范中，通过简单的单击、双击、移动等操作就可以很轻松地对可视化内容进行探索，也支持高级操作，如快捷键等隐性操作，可以让专家用户的工作更加高效，以及可以进行更深维度的探索。",paraId:6,tocIndex:1},{value:"不同的业务场景具有不同的交互，但又有相通的交互部分。G6 依照目前的经验沉淀，将通用的部分作为全局交互以供自由配置，具备业务特性的部分则作为扩展模板以供参照使用。",paraId:7,tocIndex:1},{value:"通用交互，剥离了业务属性，是一套适应大部分关系图交互探索的基础工具箱，并将范围圈定在了基础键鼠操作内，令普通电脑用户也能迅速地利用其对数据进行探索",paraId:8,tocIndex:1},{value:"扩展交互，不一定适应所有的应用场景与业务属性，但承载了 G6 强大的扩展性与能力，其范围不受限制，既可以是普通的交互行为触发，也能被其他事件触发，亦或由实时的业务数据触发等，用户能通过这些交互对数据进行更深度更定制化的探索。",paraId:8,tocIndex:1},{value:"操作对象可以分为画布、节点、Combo、边和其他四部分，所有的交互根据不同的操作对象进行分类。",paraId:8,tocIndex:1},{value:"通用交互",paraId:9,tocIndex:3},{value:"触发",paraId:9,tocIndex:3},{value:"演示",paraId:9,tocIndex:3},{value:"缩放画布",paraId:9,tocIndex:3},{value:"🖱 鼠标：滚轮向上/向下 ",paraId:9,tocIndex:3},{value:" ⌨️ 键盘：「⌘(Ctrl)」+「+/-」 ",paraId:9,tocIndex:3},{value:" 💻 触控板：双指展开/合并",paraId:9,tocIndex:3},{value:"移动画布",paraId:9,tocIndex:3},{value:"🖱 鼠标：拖拽 ",paraId:9,tocIndex:3},{value:" 💻 触控板：双指移动 ",paraId:9,tocIndex:3},{value:" 🖱 键鼠：Space 键+拖拽（当与框选操作冲突时）",paraId:9,tocIndex:3},{value:"回到概览",paraId:9,tocIndex:3},{value:"⌨️ 键盘：「Ctrl/⌘」+「1」",paraId:9,tocIndex:3},{value:"扩展交互",paraId:10,tocIndex:4},{value:"触发",paraId:10,tocIndex:4},{value:"演示",paraId:10,tocIndex:4},{value:"鱼眼",paraId:10,tocIndex:4},{value:"🎚 专用控件",paraId:10,tocIndex:4},{value:"布局切换",paraId:10,tocIndex:4},{value:"🎚 专用控件",paraId:10,tocIndex:4},{value:"时序过滤",paraId:10,tocIndex:4},{value:"🎚 专用控件",paraId:10,tocIndex:4},{value:"边过滤",paraId:10,tocIndex:4},{value:"🎚 专用控件",paraId:10,tocIndex:4},{value:"缩略图",paraId:10,tocIndex:4},{value:"🎚 专用控件",paraId:10,tocIndex:4},{value:"通用交互",paraId:11,tocIndex:6},{value:"触发",paraId:11,tocIndex:6},{value:"演示",paraId:11,tocIndex:6},{value:"指向节点",paraId:11,tocIndex:6},{value:"🖱 鼠标：悬停",paraId:11,tocIndex:6},{value:"选中节点",paraId:11,tocIndex:6},{value:"🖱 鼠标：单击",paraId:11,tocIndex:6},{value:"探索节点",paraId:11,tocIndex:6},{value:"🖱 鼠标：双击 ",paraId:11,tocIndex:6},{value:" ⌨️ 键盘：Enter",paraId:11,tocIndex:6},{value:"取消选中",paraId:11,tocIndex:6},{value:"🖱 鼠标：单击空白区域 ",paraId:11,tocIndex:6},{value:" ⌨️ 键盘：Esc",paraId:11,tocIndex:6},{value:"扩展交互",paraId:12,tocIndex:7},{value:"触发",paraId:12,tocIndex:7},{value:"演示",paraId:12,tocIndex:7},{value:"多选节点",paraId:12,tocIndex:7},{value:"⌨️🖱 键鼠：Shift + 长按移动 ",paraId:12,tocIndex:7},{value:" ⌨️🖱 键鼠：Shift + 单击 ",paraId:12,tocIndex:7},{value:" 🖱 鼠标：长按移动（当与拖拽画布操作不冲突时） ",paraId:12,tocIndex:7},{value:" 🎚 控件：套索",paraId:12,tocIndex:7},{value:" ",paraId:12,tocIndex:7},{value:" ",paraId:12,tocIndex:7},{value:" ",paraId:12,tocIndex:7},{value:" ",paraId:12,tocIndex:7},{value:"移动节点",paraId:12,tocIndex:7},{value:"🖱 鼠标：拖拽",paraId:12,tocIndex:7},{value:"改变节点层级",paraId:12,tocIndex:7},{value:"🖱 鼠标：拖拽",paraId:12,tocIndex:7},{value:" ",paraId:12,tocIndex:7},{value:" ",paraId:12,tocIndex:7},{value:"高亮相邻节点",paraId:12,tocIndex:7},{value:"📃 事件：选中节点",paraId:12,tocIndex:7},{value:"高亮最短路径",paraId:12,tocIndex:7},{value:"🎚 专用控件",paraId:12,tocIndex:7},{value:"通用交互",paraId:13,tocIndex:9},{value:"触发",paraId:13,tocIndex:9},{value:"演示",paraId:13,tocIndex:9},{value:"指向边",paraId:13,tocIndex:9},{value:"🖱 鼠标：悬停",paraId:13,tocIndex:9},{value:"选中边",paraId:13,tocIndex:9},{value:"🖱 鼠标：单击",paraId:13,tocIndex:9},{value:"取消选中",paraId:13,tocIndex:9},{value:"🖱 鼠标：单击空白区域 ",paraId:13,tocIndex:9},{value:" 键盘：Esc",paraId:13,tocIndex:9},{value:"扩展交互",paraId:14,tocIndex:10},{value:"触发",paraId:14,tocIndex:10},{value:"演示",paraId:14,tocIndex:10},{value:"多选边",paraId:14,tocIndex:10},{value:"⌨️🖱 键鼠：Shift + 单击 ",paraId:14,tocIndex:10},{value:" ⌨️🖱 键鼠：Shift + 长按移动 ",paraId:14,tocIndex:10},{value:" 🖱 鼠标：长按移动（当与拖拽画布操作不冲突时）",paraId:14,tocIndex:10},{value:"通用交互",paraId:15,tocIndex:12},{value:"触发",paraId:15,tocIndex:12},{value:"演示",paraId:15,tocIndex:12},{value:"指向 Combo",paraId:15,tocIndex:12},{value:"🖱 鼠标：悬停",paraId:15,tocIndex:12},{value:"选中 Combo",paraId:15,tocIndex:12},{value:"🖱 鼠标：单击",paraId:15,tocIndex:12},{value:"展开/收起 Combo",paraId:15,tocIndex:12},{value:"🖱 鼠标：双击 ",paraId:15,tocIndex:12},{value:" 键盘：Enter ",paraId:15,tocIndex:12},{value:" 🎚 专用控件",paraId:15,tocIndex:12},{value:"取消选中 Combo",paraId:15,tocIndex:12},{value:"🖱 鼠标：单击空白区域 ",paraId:15,tocIndex:12},{value:" 键盘：Esc",paraId:15,tocIndex:12},{value:"扩展交互",paraId:16,tocIndex:13},{value:"触发",paraId:16,tocIndex:13},{value:"演示",paraId:16,tocIndex:13},{value:"多选 Combo",paraId:16,tocIndex:13},{value:"⌨️🖱 键鼠：Shift + 单击",paraId:16,tocIndex:13},{value:"移动 Combo",paraId:16,tocIndex:13},{value:"🖱 鼠标：拖拽",paraId:16,tocIndex:13},{value:"改变 Combo 层级",paraId:16,tocIndex:13},{value:"🖱 鼠标：拖拽",paraId:16,tocIndex:13},{value:"由于图可视化信息密度很大，设计者要在短时间内完成某个关系图的配置，或者阅读者需要在短时间内探索出数据关系的症结。这时操作效率就显得尤为重要，G6 现已内置如下常用快捷操作，如果不满足，你还可以定制自己的快捷键盘操作。",paraId:17,tocIndex:14},{value:"通用交互",paraId:18,tocIndex:14},{value:"触发",paraId:18,tocIndex:14},{value:"演示",paraId:18,tocIndex:14},{value:"撤销",paraId:18,tocIndex:14},{value:"⌨️ 键盘：「Ctrl/⌘」+「z」",paraId:18,tocIndex:14},{value:"重做",paraId:18,tocIndex:14},{value:"⌨️ 键盘：「Ctrl/⌘」+「Shift」+「z」",paraId:18,tocIndex:14},{value:"右键菜单",paraId:18,tocIndex:14},{value:"🖱 鼠标：右键单击",paraId:18,tocIndex:14},{value:" ",paraId:18,tocIndex:14},{value:" ",paraId:18,tocIndex:14},{value:"交互在数据可视化系统中解决的核心问题是",paraId:19,tocIndex:15},{value:"有限的可视化空间与数据过载之间的矛盾",paraId:19,tocIndex:15},{value:"，交互帮助拓展了可视化中信息表达的空间，并给用户提供在空间中探索数据的路径，这条路径如何修筑才能确保探索过程的通畅？通过对经典方法的发掘与在实际业务中的提炼，总结了两类交互模式以供参考：由表及里、以点及面。",paraId:19,tocIndex:15},{value:"Ben Shneiderman 于 1996 年提出可视化信息检索的箴言 ",paraId:20,tocIndex:16},{value:"Overview First, Zoom and Filter, Then Details-on-Demand",paraId:20,tocIndex:16},{value:"，它符合人类寻求信息的基本逻辑：先概览，然后局部，最后聚焦兴趣点进行探索，这是一个由表及里的过程。",paraId:20,tocIndex:16},{value:"得益于搜索等技术的成熟，可视分析系统已经能够快速定位到用户所关注的对象，特别是已经有明确的分析目标时，这类场景就不必要由整体顺着数据结构向下慢慢地探索，而更多的是基于所关注的对象去延伸与发现它周边的关系与详细信息。",paraId:21,tocIndex:17}]},92372:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"🛠The English Version is in Prograss🛠",paraId:0},{value:"图的构成元素包括节点（Node）、边（Edge）和组（Combo），这些基础元素是图的原子组成部分，设计者可根据特定业务场景变更节点、边、组的配色和组合形式，搭建更复杂的图可视分析应用。",paraId:1,tocIndex:0},{value:"节点是构成图的基本单位，一般表示某个实体。如社交网络数据中，一个人就是一个实体，用一个节点来表示。",paraId:2,tocIndex:2},{value:"根据业务场景需要，信息可视化呈现时：",paraId:3,tocIndex:3},{value:"节点可加标签、可不加标签；",paraId:4,tocIndex:3},{value:"节点可存在不同形状；",paraId:4,tocIndex:3},{value:"节点可加简短描述；",paraId:4,tocIndex:3},{value:"节点可展开下级信息。",paraId:4,tocIndex:3},{value:"点交互基础样式有以下 6 种：基础状态：Default-默认、Active-激活、Selected-选中、Disable-失效被动状态：Highlight-强化、Inactive-弱化（在交互场景中与 Default-默认 做出区分）",paraId:5,tocIndex:4},{value:"以力导向图布局和辐射布局为例",paraId:6,tocIndex:4},{value:"边（Edge）表示的是两个节点之间的关系。如社交网络数据中，我和你的关系，是朋友。",paraId:7,tocIndex:6},{value:"因图的类型众多，边的形态也相应有：",paraId:8,tocIndex:7},{value:"有向的（含箭头）、无向的（无箭头）；",paraId:9,tocIndex:7},{value:"加权的（含值）、无加权的（不含值）；",paraId:9,tocIndex:7},{value:"加标签、不加标签；",paraId:9,tocIndex:7},{value:"不同粗细代表节点流量。",paraId:9,tocIndex:7},{value:"边的交互基础样式跟节点同样有以下 6 种：Default、Active、Selected、Disable、Highlight、Inactive",paraId:10,tocIndex:8},{value:"在节点的交互样式引用图例中同样可看到边的运用效果",paraId:11,tocIndex:8},{value:"组合，又称为节点分组，用于管理一组相似的节点，如一组具有相同类型的节点，或位置上比较靠近的一组节点，可以将它们划分到同一个 Combo 中，可以有效降低视觉上的干扰。",paraId:12,tocIndex:10},{value:"G6 默认提供两种类型，使用带有不重叠约束的力导向图布局方法，可根据业务场景和布局需要选取合适的形状。",paraId:13,tocIndex:11},{value:"Circle 圆形",paraId:14,tocIndex:11},{value:"Rect 矩形",paraId:14,tocIndex:11},{value:"在 Combo 的具体运用中，会出现 Combo 未展开/已展开、一级 Combo 和二级 Combo 及更多级相结合的形式，上图仅为未展开、展开（共一级）、展开（共二级）形式",paraId:15,tocIndex:11},{value:"节点组合形式千变万化，按常见形态延伸相应的交互样式如下：",paraId:16,tocIndex:12},{value:"G6 在 AntV 的基础色彩体系的基础上，结合关系图表达的特点，精细化调整了颜色在数据维度上的衡量和线性感知。内置了一系列优美、和谐且满足无障碍设计原则的色板。包括：分类色板、邻近色板、发散色板、语义色板。默认情况下以蓝色为基础样式的案例色，也是 G6 的默认主色。",paraId:17,tocIndex:13},{value:"让颜色在图中能够达成在数据变化和人体感知上尽可能线性匹配，不同数值对应的颜色区分度要足够高，且在拥有分类色状态下依然感知均匀，一个连续数据集的所有数据点都具有同等的视觉重要性。",paraId:18,tocIndex:13},{value:"选择蓝色为基础样式的案例色，也是基础样式的默认色 /G6 的主色；灰色作为辅助色。",paraId:19,tocIndex:14},{value:"邻近色顺序色板，一般使用两个或以上个临近色调，通过明度和饱和度的逐步渐变，常用来区分有序数据优先级的高低、连续数据的大小或梯度变化。",paraId:20,tocIndex:16},{value:"根据数据语义特定管理约束，选择合理色调搭配，使连续变化的色调和明度，可产生更多色彩分级，表达更多的连续数值。",paraId:21,tocIndex:17},{value:"亮色色板选取单色顺序色板中的 1 号色作为起始色，相应临近色调 4 号色为中间色，以此类推，继中间色相应近色调 7 号色为结束色，借助色彩工具，在 CIELab 色彩空间下生成渐变色；",paraId:22,tocIndex:18},{value:"暗色色板同理，起始色为 2 号色，中间色为相应邻近色调 5 号色，结束色为中间色邻近色调的 8 号色；",paraId:22,tocIndex:18},{value:"保留未分段的色带，便于用户自由分段取数。",paraId:22,tocIndex:18},{value:"也称对比色渐变色板，一般是两种互补色（也可以是对比色）去展现数据从一个负向值到 0 点再到正向值的连续变化区间，显示相对立的两个值的大小关系。数据范围的两端同等强调中间值和极值，以表示断点(如零变化或平均值)周围与数据中特定有意义的中间值之间的差异。",paraId:23,tocIndex:20},{value:"关键断点应该采用中性颜色及与背景色对比度低，如浅灰色，端点应该采用和背景色对比度高的饱和颜色。一般来说是对称的，临界断点可以是平均值、中间值或零变化值。",paraId:24,tocIndex:21},{value:"选取分类色板中的对比色或互补色，其中 7 号色起始色和结束色，4 号色为过渡色，灰阶色的 1 号色作为中间色，在 CIELab 色彩空间下生成渐变色；",paraId:25,tocIndex:22},{value:"暗色色板同理，其中 8 号色起始色和结束色，5 号色为过渡色，灰阶色的 2 号色作为中间色；",paraId:25,tocIndex:22},{value:"保留未分段的色带，便于用户自由分段取数。",paraId:25,tocIndex:22},{value:"色彩在可视化中的使用，不仅是数据信息传递的可视化通道，同时也是更深一层的文化故事的载体，用于表达意义或情感。",paraId:26,tocIndex:24},{value:"重视用色习惯，遵循相关标准，色彩也不是都能寓意的，相当一部分图表色彩选择和感情因素无关，而是按照某种习惯来设定色彩，即所谓约定俗成，有的甚至形成来规范。",paraId:27,tocIndex:25},{value:"\n> 语义色板（部分）\n",paraId:28},{value:"更多色板介绍，详见 AntV 色板。",paraId:29,tocIndex:25},{value:"以圆形节点为例，根据点不同的信息展示形式，基础形状的大小有所不同，在图展示中需将图相关信息做最优展示。",paraId:30,tocIndex:27},{value:"\n> 圆形节点——文本置内型，节点直径大小建议为 60px，文本大小为 12px\n",paraId:28},{value:"\n> 圆形节点——文本非置内型，节点直径大小建议为 16px，文本大小为 12px\n",paraId:28},{value:"边的粗细：边在点默认大小场景下默认为 1px，通常根据视图大小变化等比例放大缩小。为保持信息有效可视，边最小为 1px，最大值为 12px。",paraId:31,tocIndex:28},{value:"Combo 的大小跟随内容，Node 与 Combo 之间的间隙最小为 Small = 8px。",paraId:32,tocIndex:29},{value:"数据集：又称为资料集、数据集合或资料集合，是一种由数据所组成的集合。连续数值：统计学概念,又称连续变量。指在一定区间内可以任意取值、数值是连续不断的、相邻两个数值可作无限分割(即可取无限个数值)的数据。断点：文中主要指数据集的中心值或参考值，例如零变化或平均值。端点：文中主要指数据集极端值，例如最大最小值。语义：文中主要指色彩心理学中色彩在客观上对人们对一种刺激和象征，它在主观上又是一种反应和行为。包含从知觉、感情而到记忆、思想、意志、象征等与色彩的因果关系。",paraId:33,tocIndex:30},{value:"当需要用颜色作为视觉通道时，数据性质可作为参考因素，选用色板的步骤大致如下图：",paraId:34,tocIndex:30}]},49335:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:'In the article "Science of Complexity", Warren Weaver divides the history of modern science into three stages: Simple Problems, Disorderly Complex Problems, and Orderly Complex Problems, according to the complexity of the problems. After the middle of the 20th century, the academic community began to face more orderly and complex problems of instability, nonlinearity, and diversity. The industry urgently needed an analysis and exploration tool based on a network model and a way of thinking. Later, with the graph-based topological structure of the ',paraId:0},{value:"Königsberg Seven Bridges Problem",paraId:0},{value:" being solved as a starting point, graph analysis is playing a role in more fields. In the Internet industry, with the development of big data and AI technology, more and more graph visual analysis has been used in many scenarios, such as community structure analysis, clustering, relationship prediction, graph learning, graph neural network, and network evolution, etc.",paraId:0},{value:"\n> 《Science of Complexity》 - Warren Weaver  1948\n",paraId:1},{value:'The demanding for design increases rapidly in various graph visual analysis products. What can designers do in this field? How to design a complex graph visual analysis product? What are the key points where we should pay attention on? The AntV design team summarized all these thinking as "G6 Graph Visual Design System", hoping to bring more thoughts and help more designers who are not familiar with this field.',paraId:2},{value:"In Alibaba and Ant Group, graph analysis is widely used in different scenarios such as cloud security, knowledge graph, enterprise risk control, graph database, etc. In abstract terms, there are two basic types:",paraId:3,tocIndex:1},{value:"Recording, clarifying, and revealing the fact: such as security monitoring and flow monitoring;",paraId:4,tocIndex:1},{value:"The expansion and abstraction of the fact (prediction of the future): such as various technologies based on artificial intelligence, the prediction and real-time prevention for graphs. ",paraId:4,tocIndex:1},{value:" ",paraId:4,tocIndex:1},{value:" ",paraId:4,tocIndex:1},{value:"Nowadays, there is no unified graph classificationin both the industry and the academia. Based on AntV's business, we have summarized several common types of graphs: common network, flow chart, DAG diagram, architecture diagram, ER diagram, tree graph. Each graph type has specific usage scenarios and key points for designing. We provide a detailed introduction from the basic introduction, characteristics, applicable business scenarios, and design guidelines for graphs. ",paraId:5,tocIndex:2},{value:" ",paraId:5,tocIndex:2},{value:" ",paraId:5,tocIndex:2},{value:" ",paraId:5,tocIndex:2},{value:"Intro and Guidelines for Different Graph Type >",paraId:5,tocIndex:2},{value:" ",paraId:5,tocIndex:2},{value:"With the design requirements of a graph, designers not only design the exterior of the graph, but also consider the following five layers for experience design. Starting from understanding business and product goals, we should know the user requirements, and then define the fuctional boundaries of the graph product cooperating with the product managers. And then, we build task processes, information frameworks and interface layout of the product based on scenarios. In the final stage, we polish the product interface, and most importantly the visual and micro-interaction design of the graph. ",paraId:6,tocIndex:3},{value:" Five layers: ",paraId:6,tocIndex:3},{value:" | Layers | Description | | ---- | ---- | | Surface | Visual perception layer: the visual design of the basic product interface, and the graph items such as nodes and edges | | Skeleton | Interface layout: such as canvas, components' layout and interaction logic | | Structure | Architecture of process and information: determine how to integrate multiple graph analysis modes in the product, the combination of various functional modules, and the construction of information framework | | Scope | Function/content requirement: define the boundary of graph analysis product | | Strategy | User requirmens, business goals, product goals |",paraId:6,tocIndex:3},{value:"From the perspective of graph analysis, the product usually goes through the following stages in order to transform the data source into valuable information to end users. ",paraId:7,tocIndex:4},{value:" ",paraId:7,tocIndex:4},{value:" ",paraId:7,tocIndex:4},{value:'Quoted from "Graph Analysis and Visualization" ',paraId:8,tocIndex:4},{value:'Corresponds to the scope layer in the "five layers"',paraId:9,tocIndex:5},{value:"Have explored the characteristics of the analysis scene, we divide the graph analysis mode of a product or an application into three types: with clear purpose, no clear purpose, and in special scenario. The interfaces for different analysis modes will not be the same, as well as the user's using process. For a full-featured graph analysis product, the three analysis modes may be available at the same time, resulting in an exponential increase in interface complexity.",paraId:10,tocIndex:5},{value:"This type of analysis mode has clear analysis or query conditions. The presentation of the condition may be a regular expression, a query statement, or a clear starting node and ending node, even directly viewing the defail info of an certain graph item. There are several common query modes: rule query, statement query, association analysis, filter/search on canvas, view details, etc. With clear purpose, it is usually necessary for end users to input clear conditional information by some input panels to expore and analyze the graph. ",paraId:11,tocIndex:6},{value:" ",paraId:11,tocIndex:6},{value:" ",paraId:11,tocIndex:6},{value:"So as to exploration without clear purpose, in order to explore the characteristics of the data and discover valuable infomation, some basic analysis interaction such as N-degree expansion, drill-down analysis, sub-graph exploration, and undo rollback based on the existing data will be helpful.",paraId:12,tocIndex:7},{value:"In the scenarios with built-in AI algorithm, algorithms or rule reasoning capabilities are necessary to quickly mine target nodes and relationships from massive data, such as: guarantee loop in financial scenes, shortest path, etc.",paraId:13,tocIndex:9},{value:"When there is itme-series or geographic infomation in the source data, the graph visualization is usually cmbined with timebar or a map.",paraId:14,tocIndex:10},{value:'Corresponds to the frame layer in the "five layers"',paraId:15,tocIndex:11},{value:"The styles of nodes and edges are the basic design for graph visualization. To form a complete graph analysis product, there are various components undertaking different functions. From the perspective of experience design, common components can be categorized as:",paraId:16,tocIndex:11},{value:"Basic components: legend, toolbar, right-click context menu, view control bar, system log, etc.;",paraId:17,tocIndex:11},{value:"Condition input: query panel, filte panelr, search bar, canvas settings, etc.;",paraId:17,tocIndex:11},{value:"Information output: details panel, tooltip, canvas info panel, etc.;",paraId:17,tocIndex:11},{value:"Advanced functions: timeline, snapshot gallery, analysis report, etc.",paraId:17,tocIndex:11},{value:"\n[The Buit-in Components of AntV >](https://g6.antv.antgroup.com/en/design/component/component-overview)\n",paraId:1},{value:"In some special scenarios, it is also necessary to upgrade and optimize basic components based on the actual business requirements, or even design new components based on the unique capabilities of the product. When optimizing a basic component or designing a brand-new component, it is necessary to combine the actual functional requirements and get a full picture of several perspectives such as usage scenarios, constituent elements, common types, and interactive instructions. Take the two newly designed components of AntV as examples:",paraId:18,tocIndex:11},{value:"TimeBar",paraId:19,tocIndex:11},{value:"View Control ToolBar",paraId:19,tocIndex:11},{value:"A complete interaction design usually consists of triggers, rules, and feedback. Usually, in a graph analysis product, the common triggers of the interaction behaviors are mouse, keyboard, and touchpad. The rules includes common ones such as expanding a node when double-clicking and highlighting the node when clicking. The feedback is the result presented by the system to end users according to different 'rules', it is indicated by the changes of the items' visual styles in most cases. The Guideline for Intereaction Design >",paraId:20,tocIndex:12},{value:'According to whether the interaction event is a global common behavior, the interaction in G6 is categorized as: "universal" and "extended":',paraId:21,tocIndex:13},{value:"Universal interaction: not related to any bussiness attributes, it is a set of basic toolboxes that adapt to most of the interactive exploration of graphs, and the scope is delineated within the basic keyboard and mouse operations, so that most computer users are able to quickly explore data with it;",paraId:22,tocIndex:13},{value:"Extended interaction: not necessarily suitable for all scenarios and business attributes. With the powerful scalability and capabilities of G6, the interactions are not limited to the universal ones. It can be triggered by ordinary triggers, other events, or real-time business data. Users of G6 are able to custom the exploration path for their own scenarios freely.",paraId:22,tocIndex:13},{value:'"Interaction" enables users to change from passive "watchers" to active "exploratory analysts" and better participate in the process of data understanding and analysis. The purpose of analysis products is not only to deliver knowledge to users, but to provide a tool to help users explore and analyze the large data, and finally get the desired conclusions. A complete graph analysis product consists of multiple basic interactions which might be combined together according purposes and usages. The objects to be interacted inlude canvas, node, edge, combo, and others. ',paraId:23,tocIndex:14},{value:" ",paraId:23,tocIndex:14},{value:" ",paraId:23,tocIndex:14},{value:'Corresponds to the performance layer in the "five layers" ',paraId:24,tocIndex:15},{value:" Aside from the product interface, the visual design of the graph is essentially a process of establishing mapping channels between visual attributes and data characteristics to form a specific semantic association. A good visual design can greatly improve the information transmission efficiency of the graph. The main items of a graph are nodes and edges. On a node or an edge, there might be text labels and other auxiliary shapes. Consider to the visual design of the graph, the elements should to be disassembled and designed separately, and different interaction events and data attributes should be considered globally. Data properties should be mapped to corresponding visual attributes. In the same time, and final effect of integated visual attributes is also important. Common visual attributes in design are: shape, color, size, direction, material, brightness, position, etc. The design for most basic attributes: shape and color, will be introduced in detail. ",paraId:24,tocIndex:15},{value:" ",paraId:24,tocIndex:15},{value:"The Visual Design Guidelines >",paraId:24,tocIndex:15},{value:" ",paraId:24,tocIndex:15},{value:"The nodes of the graph can be customized according to the actual requirements of the business scenario. In order to present specific information, the nodes can be customized into a special style, or combined with statistical charts (such as donut chart, line chart, etc.).",paraId:25,tocIndex:16},{value:"Regardless of nodes or edges, the visual feedbacks with different mouse events should be considered in the same time: ",paraId:26,tocIndex:16},{value:" ",paraId:26,tocIndex:16},{value:" ",paraId:26,tocIndex:16},{value:" ",paraId:26,tocIndex:16},{value:" ",paraId:26,tocIndex:16},{value:"Based on AntV's color system, and combined with the characteristics of the graph visualization, we fine-tuned the color measurement and linear perception in the data dimension, and built-in a series of beautiful, harmonious and barrier-free design principles for G6, including: classification palette, adjacent palette, divergent palette, and semantic palette. By default, blue is the case color of the basic style.#",paraId:27,tocIndex:17},{value:"Meanwhile, we also provide dark and light theme styles to meet different application scenarios: ",paraId:28,tocIndex:17},{value:" ",paraId:28,tocIndex:17},{value:" ",paraId:28,tocIndex:17},{value:'The visual design of a graph is not as simple as stacking multiple visual attributes. Generally, the dimensions for design inludes mouse events, data characteristics, and business semantics. In the most complicated case, all three dimensions above need to be considered comprehensively. For example, the node with "Type B" in the following table should meet the condition A, and the visual effect with various mouse events should be taken into consider meanwhile. It is true that not all businesses will encounter such complex situations. In specific business scenarios, the three elements "triggers + rules + feedback" of user scenarios and interactive events can be combined to comprehensively find the most appropriate visual expression.',paraId:29,tocIndex:18},{value:"Information Dimension",paraId:30,tocIndex:18},{value:"Explanation",paraId:30,tocIndex:18},{value:"Style Example",paraId:30,tocIndex:18},{value:"Mouse Event",paraId:30,tocIndex:18},{value:"Common mouse events: Default, Active, Selected, Disable, etc.",paraId:30,tocIndex:18},{value:"Data Characteristics",paraId:30,tocIndex:18},{value:"The inherent characteristics of graph data, such as the data type of nodes or edges",paraId:30,tocIndex:18},{value:"Business Semantics",paraId:30,tocIndex:18},{value:"Nodes that meet certain rules need special styles to emphasize highlighting",paraId:30,tocIndex:18},{value:'It is reasonable for a graph product project to start from the problem to be solved and lead to in-depth exploration gradually. Designing a complete graph analysis product is actually a process of continuously answering the problems encountered in the process of exploration. In other words, the first step in a good graph analysis scenario is to "ask the right questions."',paraId:31,tocIndex:20},{value:"Under different perspectives and layouts, unique patterns of the graph will be highlighted.",paraId:32,tocIndex:21},{value:'The amount of information that people can receive at a time is limited. Considering this limit, the graph visualization should express the detailed information with restraint, and express moderate content in the appropriate scene. It is recommended to follow the principle of "gradual presentation": overview first, zoom and filter, then details on demand. Common methods for details exploration are:',paraId:33,tocIndex:22},{value:"Pan and zoom: Similar to the zoom effect of the map software, present focus area at different scales, while the context might be out of the screen;",paraId:34,tocIndex:22},{value:"Global + details: A common tool is minimap. When the user focus on the details, the global context is in the minimap;",paraId:34,tocIndex:22},{value:"Focus + context: A typical focus+context tool is fisheye, which magnifies the interested area while the context area is deformed to provide more room. It makes sure the context and the relationships between focus and context are not lost.",paraId:34,tocIndex:22},{value:"In time-series graph data, event s or objects occur or disappear at certain time points. A helpful tool TimeBar can help the visualization effectively display time-series data. The TimeBar component has been provided in the G6. ",paraId:35,tocIndex:23},{value:" ",paraId:35,tocIndex:23},{value:" ",paraId:35,tocIndex:23},{value:"The interactions are very important in graph analysis products. Users usually perform a set of analysis actions on the canvas to obtain results. In order to ensure the important information is not missed and prevent wrong operations, the product should provide a reversible operation mechanism to allow the end users to go back or repeat the previous operation.",paraId:36,tocIndex:24},{value:'The ultimate goal of graph analysis products is to allow the end users to get the \'answers\' they want, and obtain valuable information. Based on that, user could perform the next actions. To achieve that, download/share analysis results, publish analysis rules for online service or precipitation as a template for exploratory analysis, or directly input the analysis results as a part into the complete production chain are neccesary as the end action. In short, a well-experienced graph analysis product must be able to establish a complete closed loop for experience from "questioning" to "action".',paraId:37,tocIndex:25},{value:"The Aesthetics of Graph Visualization - Chris Bennett, Jody Ryall, Leo Spalteholz and Amy Gooch1",paraId:38,tocIndex:26},{value:"Graph Analysis and Visualization - Richard Brath/David Jonker",paraId:38,tocIndex:26},{value:"Visual Complexity_Mapping Patterns of Information - Manuel Lima",paraId:38,tocIndex:26},{value:"Data Visualization - Wei Chen / Zeqian Shen",paraId:38,tocIndex:26}]},84087:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"🛠The English Version is in Prograss🛠",paraId:0},{value:"AntV 的设计原则是基于 Ant Design 设计体系衍生的，它在遵循 Ant Design 设计价值观的同时，对数据可视化领域的进一步解读，如色板、字体的指引。",paraId:1},{value:"G6 作为 AntV 图可视化技术栈，在设计上依然遵循 AntV 的四条核心原则：准确、清晰、有效、美，这四条原则按重要等级先后排序，相辅相成且呈递进关系。",paraId:2},{value:"可视表达时不歪曲，不误导，不遗漏，精准如实反应数据的特征信息。",paraId:3,tocIndex:0},{value:"例如：关系图的箭头指向必须清晰、明确，否则在大数据展示时容易辨识不清。在图形上，我们对三角形进行一定的裁剪，让其像指南针一样有明确的指向性，比较下面两图，左侧的箭头能清晰辨别指向性，而右侧的箭头在识别时会有些困惑。",paraId:4,tocIndex:0},{value:"清晰包括两个层面，结构清晰 与 内容清晰。",paraId:5,tocIndex:1},{value:"结构清晰：数据可视化呈现的是一幅作品，它是制作者分析思路的呈现，其布局决定阅读者的浏览顺序。清晰的平面布局能很好的帮助阅读者获取信息。下图展现的是同一组数据下不同布局的关系图，例如环状布局可用于突出数据结构中的环；辐射状布局是辐射状树布局的扩展，可突出关注点与其他节点的最短路径关系；格子布局可以让图看起来十分规整，利于探索。",paraId:6,tocIndex:1},{value:"内容清晰：",paraId:7,tocIndex:1},{value:"不让用户带着疑惑看图是我们始终不变的追求。例如在 G6 中经常会出现成千上万个节点，为了让用户能对所有节点感受的更直观，我们设计了鱼眼功能，同时查看图的全貌和局部，可以清晰地描绘出焦点所在节点与其邻居之间的直接关系。",paraId:8,tocIndex:1},{value:"信息传达有重点，克制不冗余，避免信息过载，用最适量的数据-油墨比（Data-ink Ratio）表达对用户最有用的信息。",paraId:9,tocIndex:2},{value:"美是一种克制，合理利用视觉元素进行映射，运用格式塔原理对数据进行分组，既能帮助用户更快的获取信息，也能在一定程度上建立一种秩序美、规律美。",paraId:10,tocIndex:3}]},20914:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"🛠The English Version is in Prograss🛠",paraId:0},{value:"流程图是表示算法、工作流或流程的一种框图表示，它以不同类型的框代表不同种类的步骤，每两个步骤之间则以箭头连接。这种表示方法便于说明解决已知问题的方法。",paraId:1,tocIndex:1},{value:"流程图背后可以概括了各节点类型、其内容及其他补充用的信息。在设计或者记录一些简单的步骤或程序都会用得上流程图。与其他图表一样，这种图表可以帮助可视化发生了什么事情，从而更易去理解中间的工序。虽然有很多𧗠生出来的版本，各目有各目的标示方式，它们大都都有以下 2 种的符号：",paraId:2,tocIndex:2},{value:"步骤：通常称作“活动”，常以长方形来表示；",paraId:3,tocIndex:2},{value:"决定：常以钻石形来表示。其他常用形状：",paraId:3,tocIndex:2},{value:"形状",paraId:4,tocIndex:2},{value:"名称",paraId:4,tocIndex:2},{value:"描述",paraId:4,tocIndex:2},{value:"起止符号",paraId:4,tocIndex:2},{value:"用来表示次要或程序的开始与完结。常以一个圆角长方形表示。通常里面会标上“开始”或“结束”或其他相关字眼，如“提交查询”或“接受产品”。",paraId:4,tocIndex:2},{value:"程序",paraId:4,tocIndex:2},{value:"以长方形来代表一系列程序去改变量值、形式、数据的位置。",paraId:4,tocIndex:2},{value:"决策判断",paraId:4,tocIndex:2},{value:"以一个菱形去显示一个条件进程，用来按情况去决定下一步走向。通常以“是/否”或“真/假”值去决定。",paraId:4,tocIndex:2},{value:"输入/输出",paraId:4,tocIndex:2},{value:"以平行四边形来据输入或输出的过程，即填入数据或显示工作结果的步骤。",paraId:4,tocIndex:2},{value:"已定义流程",paraId:4,tocIndex:2},{value:"用一个有 2 条左右垂直线长方型，来表示一个已在其他地方定义了的过程。",paraId:4,tocIndex:2},{value:"同页参考",paraId:4,tocIndex:2},{value:"用一个含有字母的小圆圈来连接目标流程画于同一页上。",paraId:4,tocIndex:2},{value:"换页参考",paraId:4,tocIndex:2},{value:"用一个倒画的屋型来表示目标流程画于另一页上。",paraId:4,tocIndex:2},{value:"流程图是流经一个系统的信息流、观点流或部件流的图形代表。在企业中，流程图主要用来说明某一过程。这种过程既可以是生产线上的工艺流程，也可以是完成一项任务必需的管理过程。典型场景：",paraId:5,tocIndex:3},{value:"组织结构图：组织结构图是把企业组织分成若干部分,并且标明各部分之间可能存在的各种关系。例如上下级领导关系(组织机构图)，物流关系，资金流关系和资料传递关系等；",paraId:6,tocIndex:3},{value:"BPMN：用于以业务流程模型详细说明各种业务流程；",paraId:6,tocIndex:3},{value:"UML：UML 立足于对事物的实体、性质、关系、结构、状态和动态变化过程的全程描述和反映；",paraId:6,tocIndex:3},{value:"EPC 事件过程线图：适合诸如 B2B、供应链流程管理、仓储物流管理等商业化业务流程。",paraId:6,tocIndex:3},{value:"流程图一般是用标准的符号绘制的，并非严格要求使用这些方框，圆圈，菱形或其它标准的符号来制作一个流程图，但是标准符号确实能更清晰地展示事件的类别。以下是大多数情况常用的一组标准符号",paraId:7,tocIndex:4},{value:"常用的流程图方向是从左到右或者从上到下：",paraId:7,tocIndex:4},{value:"上下流程图：上下流程图是最常见的一种流程图，它仅表示上一步与下一步的顺序关系；",paraId:7,tocIndex:4},{value:"矩阵流程图：矩阵流程图不仅表示下下关系，还可以看出某一过程的其他关系；",paraId:7,tocIndex:4},{value:"在标准流程图符号内简要说明符号代表的内容。必要时，你可以用注释符号更清晰地描述数据或计算步骤；",paraId:7,tocIndex:4},{value:"确保流程图有一个逻辑的起点和终点；",paraId:7,tocIndex:4},{value:"用简单的测试数据来测试流程图的有效性是非常有用的。",paraId:7,tocIndex:4},{value:"DAG 是 Directed Acyclic Graph 的缩写，即有向无环图，它是指图中一个点经过两种路线到达另一个点没有闭环。它原本是计算机领域一种常用数据结构，因为独特的拓扑结构所带来的优异特性，经常被用于处理动态规划、导航中寻求最短路径、数据压缩等多种算法场景",paraId:8,tocIndex:6},{value:"DAG 相比于目前的公链技术，其实是图和链的区别，对于链而言，无法只处理一个局部，因为链的入度和出度只有一个，不能把链上的节点拆成好几个节点去处理，但是对于图却可以，因为图可以有多个出度，那么可以同时处理多个出度连接的节点。所以，它的特点是：",paraId:9,tocIndex:7},{value:"DAG 图可以有编辑态（拖拉拽画成一个图），也可是只读态（供阅读者查阅读）；",paraId:10,tocIndex:7},{value:"交易速度块，DAG 实现的局部处理和并行结算可以使得交易速度大幅度提升；",paraId:10,tocIndex:7},{value:"拓展性强，因为各个节点无需等待同步其他的节点的数据就可计算使得记账节点很容易答复延展，因此 DAG 很适用于物联网类项目；",paraId:10,tocIndex:7},{value:"作恶难度更大，相比于链式结构，在 DAG 中恶意修改的难度会大很多，因为 DAG 拥有着很多的出度和入度，假如要修改某一个节点，那么对应的出入度都要进行修改。",paraId:10,tocIndex:7},{value:"DAG 图常用来描述业务流程，典型场景：",paraId:11,tocIndex:8},{value:"人工智能产品，可以通过 DAG 图可以将一个复杂的人工智能实验流程给图形化出来，大大降低理解成本；",paraId:12,tocIndex:8},{value:"系统架构：表达一个系统架构各个层各个实例之间的关系，有明确的分层；",paraId:12,tocIndex:8},{value:"交易系统：表达资金、交易等流转情况。",paraId:12,tocIndex:8},{value:"一定有明确的方向，从上到下，从左到右等，不存在节点指向方向逆反；",paraId:13,tocIndex:10},{value:"一个节点可能会拆分出多个节点，前后存在包含、关联等关系；",paraId:13,tocIndex:10},{value:"除业务特性外，图没有唯一的开始结束节点。",paraId:13,tocIndex:10},{value:"Data Lineage 数据血统，也叫做 Data Provenance 数据起源或 Data Pedigree 数据谱系。任何的数据，从产生、ETL 处理、加工、融合、流转，到最终消亡，数据之间自然会形成一种关系。好比人类社会中的人际关系，类似的一种关系来表达数据之间的这种关系，称之为数据的血缘关系。",paraId:14,tocIndex:12},{value:"归属性：特定的数据归属特定的组织（或个人），数据具有归属性；",paraId:15,tocIndex:13},{value:"多源性：同一个数据可以有多个来源, 一个数据可以是多个数据经过加工而生成的，而且这种加工过程可以是多个；",paraId:15,tocIndex:13},{value:"可追溯性: 数据的血缘关系，体现了数据的生命周期，体现了数据从产生到消亡的整个过程，具备可追溯性；",paraId:15,tocIndex:13},{value:"层次性: 数据的血缘关系是有层次的。对数据的分类、归纳、总结等对数据进行的描述信息又形成了新的数据，不同程度的描述信息形成了数据的层次。",paraId:15,tocIndex:13},{value:"追踪数据溯源：当数据发生异常，帮助追踪到异常发生的原因，平时也能帮助我们追踪数据的来源，追踪数据处理过程；",paraId:16,tocIndex:14},{value:"评估数据价值：要对数据价值进行评估，就需要有依据，数据血缘关系，可以从#数据受众、数据更新量级、数据更新# 频次等方面给数据价值的评估提供依据；",paraId:16,tocIndex:14},{value:"数据质量评估：数据的血缘关系图上，可以方便的看到数据清洗的标准清单，这个清单反映了对数据质量的要求。",paraId:16,tocIndex:14},{value:"数据节点有三种类型：主节点，数据流出节点，数据流入节点；",paraId:17,tocIndex:16},{value:"主节点只有一个，一般位于整个图形的中间，是可视化图形的核心节点。图形展示的血缘关系就是此节点的血缘关系，其他与此节点无关的血缘关系都不在图形上展示，以保证图形的简单、清晰；",paraId:17,tocIndex:16},{value:"数据流入节点可以有多个，是主节点的父节点，表示数据来源；",paraId:17,tocIndex:16},{value:"数据流出节点也可以有多个，是主节点的子节点，表示数据的去向；包括一种特殊的节点，即终端节点，终端节点是一种特殊的数据流出节点，表示数据不再往下进行流转，这种数据一般用来做可视化展示；",paraId:17,tocIndex:16},{value:"流转线表现的是数据的流转路径，从左到右流转。数据流转线路从数据流入节点出来往主节点汇聚，又从主节点流出往数据流出节点扩散；",paraId:17,tocIndex:16},{value:"数据流转线路表现了三个维度的信息，分别是方向、数据更新量级、数据更新频次；",paraId:17,tocIndex:16},{value:"方向的表现方式，没有做特别的设计，默认从上到下流转；",paraId:17,tocIndex:16},{value:"数据更新的量级通过线条的粗细来表现。线条越粗表示数据量级越大，线条越细则表示数据量级越小；",paraId:17,tocIndex:16},{value:"数据更新的频次用线条中线段的长度来表现。线段越短表示更新频次越高，线段越长表示更新频次越底，一根实线则表示只流转一次。",paraId:17,tocIndex:16},{value:"关系图，又称关联图，是用来分析事物之间“原因与结果”、“目的与手段”等复杂关系的一种图表，它能够帮助人们从事物之间的逻辑关系中，寻找出解决问题的办法。关系图由圆圈(或方框)和箭头组成，其中圆圈中是文字说明部分箭头由原因指向结果，由手段指向目的。",paraId:18,tocIndex:18},{value:"图是一个高度抽象的模型，数据中的各种关系都能用图表示。图中的点和边，可以非常灵活，不局限于现实意义的实体。最直接能想到的当然是某个人可以是点，某个产品可以是点，它们之间的联系是边；除了点与点之间的联系外，还分为空间聚集的聚类，反应出不同团队、不同聚类之间的关系。",paraId:19,tocIndex:19},{value:"图分析的四种广泛使用的类型包括路径分析，连通性分析，社区分析和集中性分析：",paraId:20,tocIndex:20},{value:"路径分析：这种类型的分析可用于确定图中两个节点之间的最短距离。例如路线优化，特别适用于物流，供应和分销链以及智慧城市的交通优化；",paraId:21,tocIndex:20},{value:"连通性分析：这种类型的图形分析可用于确定诸如公用电网之类的网络中的弱点。它还可以比较跨网络的连接；",paraId:21,tocIndex:20},{value:"社区分析：基于距离和密度的分析用于查找社交网络中互动的人群；",paraId:21,tocIndex:20},{value:"集中度分析：这种分析类型能够识别相关性，例如在社交网络中找到最有影响力的人，或找到访问量最高的网页。",paraId:21,tocIndex:20},{value:"把对象变成点，点的大小、颜色可以是它的两个参数，",paraId:22,tocIndex:22},{value:"两个点之间的关系可以用连线来表示。连线分为无向（只是连接的导向，一些简单的关系很容易体现）和有向（复杂网络，连接+方向）。",paraId:22,tocIndex:22},{value:"线本身的方向代表了连接的关系同时线的粗线也可以表示线的连接强度",paraId:22,tocIndex:22},{value:"实体关系图也称 ER 模型（是指以实体、关系、属性三个基本概念概括数据的基本结构，从而描述静态数据结构的概念模型），全称为实体联系模型或实体关系模型，是概念数据模型的高层描述所使用的数据模型或模式图。",paraId:23,tocIndex:24},{value:"ER 图分为实体、属性、关系三个核心部分。",paraId:24,tocIndex:25},{value:"实体：即数据模型中的数据对象，例如人、学生、音乐都可以作为一个数据对象；",paraId:25,tocIndex:25},{value:"属性：即数据对象所具有的属性，例如学生具有姓名、学号、年级等属性；",paraId:25,tocIndex:25},{value:"关系：用来表现数据对象与数据对象之间的联系，例如学生的实体和成绩表的实体之间有一定的联系，每个学生都有自己的成绩表，这就是一种关系。",paraId:25,tocIndex:25},{value:"ER 图中关联关系有三种：",paraId:26,tocIndex:25},{value:"1 对 1（1:1） ：1 对 1 关系是指对于实体集 A 与实体集 B，A 中的每一个实体至多与 B 中一个实体有关系；反之，在实体集 B 中的每个实体至多与实体集 A 中一个实体有关系；",paraId:27,tocIndex:25},{value:"1 对多（1:N） ：1 对多关系是指实体集 A 与实体集 B 中至少有 N(N>0)个实体有关系；并且实体集 B 中每一个实体至多与实体集 A 中一个实体有关系；",paraId:27,tocIndex:25},{value:"多对多（M:N） ：多对多关系是指实体集 A 中的每一个实体与实体集 B 中至少有 M(M>0)个实体有关系，并且实体集 B 中的每一个实体与实体集 A 中的至少 N（N>0）个实体有关系。",paraId:27,tocIndex:25},{value:"一般在逻辑和物理数据库设计中使用，包括信息工程和空间建模。也可以用在两个或更多实体相互如何关联；",paraId:28,tocIndex:26},{value:"常用于信息系统设计中：在概念结构设计阶段用来描述信息需求或要存储在数据库中的信息类型，作为用户与分析员之间有效的交流工具；",paraId:29,tocIndex:26},{value:"描述感兴趣区域的任何本体：对使用的术语和它们的联系的概述和分类，用实体、联系和属性这三个概念来理解现实问题。",paraId:29,tocIndex:26},{value:"首先确定这个模块有哪几个核心的对象以及具体有哪些特征；其次思考这些对象之间的关系，如何相互转变；最后把他们用 ER 图的方法表述出来；",paraId:30,tocIndex:28},{value:"方形表示实体，一般是名词；菱形表示联系，一般是动词；椭圆表示属性，一般是名词；线表示联系；",paraId:30,tocIndex:28},{value:"尽量精简实体以及优化属性。",paraId:30,tocIndex:28}]},42260:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"This doc is only for Angular 9 and above and the solution is only tested on Angular 9 and above.",paraId:0},{value:"There's no special settings or differences to use G6 in Angular if you just start a new Angular project from latest Angular CLI. Do it like you normal do when adding new dependency",paraId:1},{value:"However, if your application is upgraded from older angular version (for example, my project is from angular 6), you may run into trouble.",paraId:2},{value:"If you see ",paraId:3},{value:"cannot read property 'webpackChunkAlgorithm'",paraId:3},{value:" error like following picture shows\n",paraId:3},{value:"Please refer to ",paraId:4},{value:"https://github.com/antvis/G6/issues/2691",paraId:4},{value:" for solution",paraId:4},{value:"basically to make G6 work for angular:",paraId:5},{value:"Create a .browserslistrc file under your application directory, same level as package.json. ",paraId:6},{value:"please notice that browserslist won't working.",paraId:6},{value:"opt-out the IE support.",paraId:6}]},36426:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"具体参考：",paraId:0},{value:"#1260",paraId:0},{value:"You might meet the error while building your project with lastest version G6 & rollup:",paraId:1,tocIndex:0},{value:"error     Error: 'groupBy' is not exported by node_modules/_lodash@4.17.15@lodash/lodash.js\n    at error (/Users/gaoli/GitHub/GGEditor/node_modules/_rollup@1.31.1@rollup/dist/shared/node-entry.js:5400:30)\n    at Module.error (/Users/gaoli/GitHub/GGEditor/node_modules/_rollup@1.31.1@rollup/dist/shared/node-entry.js:9820:16)\n    at handleMissingExport (/Users/gaoli/GitHub/GGEditor/node_modules/_rollup@1.31.1@rollup/dist/shared/node-entry.js:9721:28)\n    at Module.traceVariable (/Users/gaoli/GitHub/GGEditor/node_modules/_rollup@1.31.1@rollup/dist/shared/node-entry.js:10159:24)\n    at ModuleScope.findVariable (/Users/gaoli/GitHub/GGEditor/node_modules/_rollup@1.31.1@rollup/dist/shared/node-entry.js:8766:39)\n    at FunctionScope.findVariable (/Users/gaoli/GitHub/GGEditor/node_modules/_rollup@1.31.1@rollup/dist/shared/node-entry.js:3065:38)\n    at ChildScope.findVariable (/Users/gaoli/GitHub/GGEditor/node_modules/_rollup@1.31.1@rollup/dist/shared/node-entry.js:3065:38)\n    at FunctionScope.findVariable (/Users/gaoli/GitHub/GGEditor/node_modules/_rollup@1.31.1@rollup/dist/shared/node-entry.js:3065:38)\n    at ChildScope.findVariable (/Users/gaoli/GitHub/GGEditor/node_modules/_rollup@1.31.1@rollup/dist/shared/node-entry.js:3065:38)\n    at BlockScope.findVariable (/Users/gaoli/GitHub/GGEditor/node_modules/_rollup@1.31.1@rollup/dist/shared/node-entry.js:3065:38)\n",paraId:2,tocIndex:0},{value:"remark：3.2.x version can build success。",paraId:3,tocIndex:0},{value:"add ",paraId:4,tocIndex:1},{value:"babel-plugin-lodash",paraId:4,tocIndex:1},{value:" plugin，this plugin will auto optimize lodash references",paraId:4,tocIndex:1},{value:"set ",paraId:4,tocIndex:1},{value:"@rollup/plugin-node-resolve",paraId:4,tocIndex:1},{value:" plugin browser property to true，fixed G's problem。",paraId:4,tocIndex:1}]},42353:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"You might meet the error while building your project with lastest version G6:",paraId:0,tocIndex:0},{value:"Refer to ",paraId:1,tocIndex:1},{value:"#issues 960",paraId:1,tocIndex:1},{value:".",paraId:1,tocIndex:1}]},31662:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Set the background of the label on node or edge",paraId:0},{value:"Update Item's Style",paraId:1},{value:"Update Label",paraId:2},{value:"Gradient Color for Objects in G6",paraId:3},{value:"Fill with Texture in G6",paraId:4},{value:"Render the Edge on the Top",paraId:5},{value:"Multiple Edges between Two Nodes",paraId:6},{value:"G6 in React",paraId:7},{value:"How to auto zoom Tooltip、ContextMenu when zoom canvas",paraId:8},{value:"I configured ",paraId:9,tocIndex:0},{value:"fitView: true",paraId:9,tocIndex:0},{value:" on the graph instance, but it is not taking effect",paraId:9,tocIndex:0},{value:"The reasons and solutions for it：",paraId:10,tocIndex:0},{value:"The value of ",paraId:11,tocIndex:0},{value:"minZoom",paraId:11,tocIndex:0},{value:" is too big. If you have a graph with large range, e.g. positions of nodes range from 0 to 10000, the zoom ratio to propertly fit to the view requires a very small value of ",paraId:11,tocIndex:0},{value:"minZoom",paraId:11,tocIndex:0},{value:". So the zoom failed. The default value of ",paraId:11,tocIndex:0},{value:"minZoom",paraId:11,tocIndex:0},{value:" is 0.02. To address it, you could assign a small value to ",paraId:11,tocIndex:0},{value:"minZoom",paraId:11,tocIndex:0},{value:", e.g. 0.0000001;",paraId:11,tocIndex:0},{value:"If you are using ",paraId:12,tocIndex:0},{value:"type: force",paraId:12,tocIndex:0},{value:" layout, or other force family layouts e,g, force2、forceAtlas2 etc. and assigned ",paraId:12,tocIndex:0},{value:"animate: true",paraId:12,tocIndex:0},{value:" for them. The animation looks like force simulation is the result of rendering the mid-result after each iteration during the layout calculation. If we do ",paraId:12,tocIndex:0},{value:"fitView",paraId:12,tocIndex:0},{value:" every single time the graph renders, the view might flashes a lot. So the ",paraId:12,tocIndex:0},{value:"fitView",paraId:12,tocIndex:0},{value:" will be called after the layout is totally done. And, when the force layout going to end, the displacements of the nodes might be micro. It looks like the animation is finished but the graph did not fit to view. It is also expected, since the ",paraId:12,tocIndex:0},{value:"fitView",paraId:12,tocIndex:0},{value:" will only be called after the force layout is totally finished.",paraId:12,tocIndex:0},{value:"P.S. force does not support silence layout right now. But we add a new force family layout named ",paraId:13,tocIndex:0},{value:"force2",paraId:13,tocIndex:0},{value:", which supports config it by ",paraId:13,tocIndex:0},{value:"animate",paraId:13,tocIndex:0},{value:". If it is assigned to ",paraId:13,tocIndex:0},{value:"false",paraId:13,tocIndex:0},{value:" and the graph instance is configured with ",paraId:13,tocIndex:0},{value:"fitView: true",paraId:13,tocIndex:0},{value:", the graph will not be rendered until the layout is done and fit to the view in the same time.",paraId:13,tocIndex:0},{value:"The ",paraId:14,tocIndex:0},{value:"width",paraId:14,tocIndex:0},{value:" or ",paraId:14,tocIndex:0},{value:"height",paraId:14,tocIndex:0},{value:" for the graph instance is not correct. Oversize comparing to the container, initial state at React, or some other reasons might lead to the problem. If you want to keep the graph fitting the the container, listen to the changes of ",paraId:14,tocIndex:0},{value:"width",paraId:14,tocIndex:0},{value:" and ",paraId:14,tocIndex:0},{value:"height",paraId:14,tocIndex:0},{value:" of the container, and call ",paraId:14,tocIndex:0},{value:"graph.changeSize",paraId:14,tocIndex:0},{value:" and ",paraId:14,tocIndex:0},{value:"graph.fitView",paraId:14,tocIndex:0},{value:". e.g. call ",paraId:14,tocIndex:0},{value:"graph.changeSize",paraId:14,tocIndex:0},{value:" after the user resize the browser:",paraId:14,tocIndex:0},{value:"if (typeof window !== 'undefined') {\n  window.onresize = () => {\n    if (!graph || graph.get('destroyed')) return;\n    if (!container || !container.scrollWidth || !container.scrollHeight) return;\n    graph.changeSize(container.scrollWidth, container.scrollHeight);\n  };\n}\n",paraId:15,tocIndex:0},{value:"G6 4.x depends on the rendering engine @antv/g@4.x, which supports the local refresh. Local refresh definitely brings the performance improvements, but the residual problem in the same time. e.e. the label of the node leaves the residuals while dragging the node. Recently, @antv/g is in the process of upgrading to v5.x, it might not consider to fix the issue at v4.x. So when we encounter the problem, we could try the following steps to alleviate the problem:",paraId:16,tocIndex:1},{value:"Check the attributes of the shapes in the node/edge/combo who leaves the residuals to avoid the invalid values, e.g. ",paraId:17,tocIndex:1},{value:"null",paraId:17,tocIndex:1},{value:", ",paraId:17,tocIndex:1},{value:"NaN",paraId:17,tocIndex:1},{value:", etc.;",paraId:17,tocIndex:1},{value:"Use the round number for the number type attributes if it is possible, e.g. ",paraId:18,tocIndex:1},{value:"r",paraId:18,tocIndex:1},{value:", ",paraId:18,tocIndex:1},{value:"width",paraId:18,tocIndex:1},{value:", ",paraId:18,tocIndex:1},{value:"height",paraId:18,tocIndex:1},{value:", ",paraId:18,tocIndex:1},{value:"fontSize",paraId:18,tocIndex:1},{value:", etc.;",paraId:18,tocIndex:1},{value:"Assign ",paraId:19,tocIndex:1},{value:"labelCfg.style.fontFamily",paraId:19,tocIndex:1},{value:" or ",paraId:19,tocIndex:1},{value:"fontFamily",paraId:19,tocIndex:1},{value:" in the text shape who leaves residuals with the font of the broswer;",paraId:19,tocIndex:1},{value:"Add white stroke to the text, e.g.:",paraId:20,tocIndex:1},{value:"// node/edge/combo config\nlabelCfg: {\n  style: {\n    stroke: '#fff',\n    lineWidth: 4\n  }\n}\n// for the text shape in custom node/edge/combo\ngroup.addShape('text', {\n  attrs: {\n    // ... other attributes,\n    stroke: '#fff',\n    lineWidth: 4,\n  }\n  // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n  name: 'text-shape'\n})\n",paraId:21,tocIndex:1},{value:"If the steps above did not solve your problem, disable local refresh by ",paraId:22,tocIndex:1},{value:"graph.get('canvas').set('localRefresh', false)",paraId:22,tocIndex:1},{value:", and this might slow down the rendering.",paraId:22,tocIndex:1},{value:"The performance problem in G6 has two aspect: rendering and calculation(e.g. layout). We are trying our best to improve the built-in code in G6 to make the proformance better. But sometimes, we suggest users to implement graph app with better way to alleviate the probmen. Refre to ",paraId:23,tocIndex:2},{value:"Performance Tips for G6 Apps",paraId:24,tocIndex:2},{value:" to see the tips for your app!",paraId:23,tocIndex:2}]},2864:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Performance problem is significant on graph visualization apps since graph usually has complex and large data. There are some tips to alleviate the issue for G6 apps. G6 has two performance bottleneck: rendering and computation. If you are not interested about the theory, jump to the ",paraId:0,tocIndex:0},{value:"Tips",paraId:1,tocIndex:0},{value:" chapter.",paraId:0,tocIndex:0},{value:"On the aspect of rendering, the performance is mainly affected by the total number of shapes on the canvas. e.g. there is a rect, a text, and an image shape on a node, and a path, a text shape on a edge. Then, a graph with 100 nodes and 50 edges will have 100 * 3 + 50 * 2 = 400 shapes in total. However, the number of shapes on a custom node usually reaches 10-20, which means the total number on the canvas will be large. So we suggest to reduce the shapes on custom items to improve the rendering performance.",paraId:2,tocIndex:1},{value:"Computation on a graph mainly includes layout calculation, polyline path finding calculation, etc.",paraId:3,tocIndex:2},{value:"We are trying to keep on improving the built-in codes in G6 to reach better performance. And on the aspect of apps based on G6, the implement ways are significant to the upper level performance. Impropriate implementations might lead to unexpected costs.",paraId:4,tocIndex:3},{value:"The ",paraId:5,tocIndex:4},{value:"width",paraId:5,tocIndex:4},{value:" and ",paraId:5,tocIndex:4},{value:"height",paraId:5,tocIndex:4},{value:" should be assigned according to the container DOM in the browser. According to the resolutions of most displays, the ",paraId:5,tocIndex:4},{value:"width",paraId:5,tocIndex:4},{value:" is usually smaller than 2500 and the ",paraId:5,tocIndex:4},{value:"height",paraId:5,tocIndex:4},{value:" is usually smaller than 2000. There was a issue about the performance, we find ",paraId:5,tocIndex:4},{value:"width",paraId:5,tocIndex:4},{value:" and ",paraId:5,tocIndex:4},{value:"height",paraId:5,tocIndex:4},{value:" in the reproducing demo are over 100,000, it leads to a very large ",paraId:5,tocIndex:4},{value:"<canvas />",paraId:5,tocIndex:4},{value:", which is totaly unnecessary, since most part of the canvas will overflow the viewport. Actually, it is common to have nodes with large ",paraId:5,tocIndex:4},{value:"x",paraId:5,tocIndex:4},{value:" and ",paraId:5,tocIndex:4},{value:"y",paraId:5,tocIndex:4},{value:", but we don't have to set the ",paraId:5,tocIndex:4},{value:"width",paraId:5,tocIndex:4},{value:" and ",paraId:5,tocIndex:4},{value:"height",paraId:5,tocIndex:4},{value:" to a large number, only use G6's ability to visualize and interact with the data, e.g. ",paraId:5,tocIndex:4},{value:"graph.fitView",paraId:5,tocIndex:4},{value:" to fit to the viewport, ",paraId:5,tocIndex:4},{value:"zoom-canvas",paraId:5,tocIndex:4},{value:" behavior to allow user zoom canvas, ",paraId:5,tocIndex:4},{value:"drag-canvas",paraId:5,tocIndex:4},{value:" behavior to allow user drag canvas.",paraId:5,tocIndex:4},{value:"Comparing to Canvas, some users might be more familiar with the DOM/SVG. And the shapes rendered by SVG could be inspected by the browser console. When you defined a shape by ",paraId:6,tocIndex:5},{value:"group.addShape('dom', {...})",paraId:6,tocIndex:5},{value:" in custom node, the graph instance must be configured with ",paraId:6,tocIndex:5},{value:"renderer: 'svg'",paraId:6,tocIndex:5},{value:". ",paraId:6,tocIndex:5},{value:"BUT, the performance of SVG is much worse than Canvas.",paraId:6,tocIndex:5},{value:" If you have medium size or large size data to visualize, we strongly suggest you to use Canvas instead of SVG. And Canvas is very flexible to defined all kinds of nodes, including those look like DOM card. For example, there are two card-like node which is defined and redered by canvas:",paraId:6,tocIndex:5},{value:"http://g6.antv.antgroup.com/en/examples/item/customNode/#card",paraId:7,tocIndex:5},{value:"http://g6.antv.antgroup.com/en/examples/item/customNode/#cardNode",paraId:7,tocIndex:5},{value:"For the inspectable ability of SVG, although the canvas does not support it, we could print the shapes and their attributes by the following ways to debug:",paraId:8,tocIndex:5},{value:"// For the whole graph\nconst graphGroup = graph.getGroup(); // graph's root graphics group\nconst graphGroups = graphGroup.get('children'); // there will be groups with id -node, -edge, -delegate in usual\n\n// For a node (similar to edge/combo)\nconst node = graph.findById('node1'); // find a node item on the graph\nconst nodeShapeGroup = node.getContainer(); // get the node's graphics group\nconst nodeShapes = nodeShapeGroup.get('children'); // get all the shapes in the node's graphics group\nconst keyShape = node.getKeyShape(); // get the key shape of the node, which is a child shape in nodeShapes\nconst labelShape = nodeShapeGroup.find(ele => ele.get('name') === 'label-shape'); // get the shape with name 'label-shape', which is also a child shape in nodeShapes. name is assigned when calling addShape\nconsole.log(nodeShapes[0].attr(), keyShape.attr(), labelShape.attr()); // get and print the shape's style attributes\n",paraId:9,tocIndex:5},{value:"Besides, we suggest to limit the number of shapes in custom node/edge/combo, refer to the section ",paraId:10,tocIndex:5},{value:"Cut down the Shapes on Custom Items",paraId:11,tocIndex:5},{value:".",paraId:10,tocIndex:5},{value:"The rendering performance depends on the number of shapes on the canvas to a great degree. Sometimes, although there are only 100 nodes, the complex shapes on custom node lead to large number of shapes on canvas. For example, there are 27 shapes in the following node, some of them are hidden by scrolled container:",paraId:12,tocIndex:6},{value:"We suggest:",paraId:13,tocIndex:6},{value:"Cut down the unnecessary shapes. e.g. if you want to add stroke, configure ",paraId:14,tocIndex:6},{value:"lineWidth",paraId:14,tocIndex:6},{value:" and ",paraId:14,tocIndex:6},{value:"stroke",paraId:14,tocIndex:6},{value:" for a shape instead of adding an extra background shape.",paraId:14,tocIndex:6},{value:"Hide the invisible shapes by ",paraId:14,tocIndex:6},{value:"visible: false",paraId:14,tocIndex:6},{value:" instead of ",paraId:14,tocIndex:6},{value:"opacity: 0",paraId:14,tocIndex:6},{value:". And control the visibility by ",paraId:14,tocIndex:6},{value:"shape.show()",paraId:14,tocIndex:6},{value:" or ",paraId:14,tocIndex:6},{value:"shape.hide()",paraId:14,tocIndex:6},{value:" in ",paraId:14,tocIndex:6},{value:"update",paraId:14,tocIndex:6},{value:" or ",paraId:14,tocIndex:6},{value:"draw",paraId:14,tocIndex:6},{value:" according to your requirement. e.g.",paraId:14,tocIndex:6},{value:"const circleShape = group.addShape('circle', {\n  attrs: {}, // if hide the shape by opacity: 0, the shape is rendered. so we suggest to use visible as below\n  name: 'custom-circle', // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n  visible: false, // hide the shape and it will not be rendered\n});\ncircleShape.show(); // show\ncircleShape.hide(); // hide\n",paraId:15,tocIndex:6},{value:"Adjust the visibility of shapes according to the detail/zoom level of the graph. On small graphs, it is feasible to show every detail information of a node data on the displaying node, since the users are interested in the detail in those cases. But on large graphs with a small zoom ratio, user will be more interested about the overview structure of the data, and the detail when they zoom-in the graph. So we suggest to adjust the visibility of shapes according to detail/zoom level to reduce the clutter of information, and improve the performance in the same time. Try to zoom-in and zoom-out the graph in this Demo ",paraId:16,tocIndex:6},{value:"Decision Tree",paraId:16,tocIndex:6},{value:", you will see the shapes being hidden and shown graciously (9 shapes in detail view, 2 shapes in overview).",paraId:16,tocIndex:6},{value:"For convenience, fresh men usually only implement ",paraId:17,tocIndex:7},{value:"draw",paraId:17,tocIndex:7},{value:" or ",paraId:17,tocIndex:7},{value:"drawShape",paraId:17,tocIndex:7},{value:" in custom node/edge/combo. We also encourage that in small graphs, which will reduce the cost for developing and learning. But it also brings extra performance cost. There might be several situations when customize a node:",paraId:17,tocIndex:7},{value:"Did not give the third parameter for ",paraId:18,tocIndex:7},{value:"G6.registerNode",paraId:18,tocIndex:7},{value:" as extended type name, and did not implement ",paraId:18,tocIndex:7},{value:"update",paraId:18,tocIndex:7},{value:" (or defining it with ",paraId:18,tocIndex:7},{value:"update: undefined",paraId:18,tocIndex:7},{value:"):",paraId:18,tocIndex:7},{value:"G6.registerNode('custom-node', {\n  draw: (cfg, group) => {},\n  update: undefined, // or do not implement update\n}); // no third parameter\n",paraId:19,tocIndex:7},{value:"The custom node will not extend any existing node type, and nor have its own ",paraId:20,tocIndex:7},{value:"update",paraId:20,tocIndex:7},{value:" function. The defined ",paraId:20,tocIndex:7},{value:"draw",paraId:20,tocIndex:7},{value:" will be called at first rendering and every updating, e.g. ",paraId:20,tocIndex:7},{value:"graph.updateItem",paraId:20,tocIndex:7},{value:", ",paraId:20,tocIndex:7},{value:"node.refresh",paraId:20,tocIndex:7},{value:", etc. It leads to graphics group clearing, shape destroying, and shapes re-initiating. That is the costs.",paraId:20,tocIndex:7},{value:"Gave the third parameter for ",paraId:21,tocIndex:7},{value:"G6.registerNode",paraId:21,tocIndex:7},{value:", but did not implement ",paraId:21,tocIndex:7},{value:"update",paraId:21,tocIndex:7},{value:":",paraId:21,tocIndex:7},{value:"G6.registerNode('custom-node', {\n  draw: (cfg, group) => {},\n}, 'circle'); // extend built-in circle type node\n",paraId:22,tocIndex:7},{value:"custom-node",paraId:23,tocIndex:7},{value:" will extend the built-in ",paraId:23,tocIndex:7},{value:"circle",paraId:23,tocIndex:7},{value:" type node, including its functions like ",paraId:23,tocIndex:7},{value:"update",paraId:23,tocIndex:7},{value:", ",paraId:23,tocIndex:7},{value:"setState",paraId:23,tocIndex:7},{value:", and so on. Sometimes, you may find the custom-node is not updated as expected, e.g. some strange shapes or styles occurs. It is due to the ",paraId:23,tocIndex:7},{value:"draw",paraId:23,tocIndex:7},{value:" of ",paraId:23,tocIndex:7},{value:"custom-node",paraId:23,tocIndex:7},{value:" and the ",paraId:23,tocIndex:7},{value:"draw",paraId:23,tocIndex:7},{value:" of extended ",paraId:23,tocIndex:7},{value:"circle",paraId:23,tocIndex:7},{value:" type are so different that ",paraId:23,tocIndex:7},{value:"circle",paraId:23,tocIndex:7},{value:"'s ",paraId:23,tocIndex:7},{value:"update",paraId:23,tocIndex:7},{value:" (which matches its own shapes defined in its ",paraId:23,tocIndex:7},{value:"draw",paraId:23,tocIndex:7},{value:") does not match ",paraId:23,tocIndex:7},{value:"custom-node",paraId:23,tocIndex:7},{value:"'s shapes. To address the problem, a simplest way is rewriting ",paraId:23,tocIndex:7},{value:"update",paraId:23,tocIndex:7},{value:" as ",paraId:23,tocIndex:7},{value:"undefined",paraId:23,tocIndex:7},{value:". But it also brings the extra cost like the first situation.",paraId:23,tocIndex:7},{value:"Gave the third parameter for ",paraId:24,tocIndex:7},{value:"G6.registerNode",paraId:24,tocIndex:7},{value:", and rewrote ",paraId:24,tocIndex:7},{value:"update: undefined",paraId:24,tocIndex:7},{value:":",paraId:24,tocIndex:7},{value:"G6.registerNode('custom-node', {\n  draw: (cfg, group) => {},\n  update: undefined, // rewrite update\n}, 'circle'); // extend built-in circle type node\n",paraId:25,tocIndex:7},{value:"As it is described in the second situation, since there is no ",paraId:26,tocIndex:7},{value:"update",paraId:26,tocIndex:7},{value:" for custom-node, the defined ",paraId:26,tocIndex:7},{value:"draw",paraId:26,tocIndex:7},{value:" will be called at first rendering and any updating, e.g. ",paraId:26,tocIndex:7},{value:"graph.updateItem",paraId:26,tocIndex:7},{value:", ",paraId:26,tocIndex:7},{value:"node.refresh",paraId:26,tocIndex:7},{value:", etc. It leads to group clearing, shape destroying, and shapes re-initiating. That is the costs.",paraId:26,tocIndex:7},{value:"Therefore, we should utilize the life hooks of node with reasonable codes for better performance:",paraId:27,tocIndex:7},{value:"G6.registerNode('custom-node', {\n  draw: (cfg, group) => {\n    group.addShape('circle', {\n      attrs: {...}, // styles,\n      name: 'xxx' // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n    })\n    // ...\n  },\n  update: (cfg, group, item) => { // different responses for different cfg changes\n    const someShape = group.find(ele => ele.get('name') === 'xxx'); // get the shapes should be updated by name\n    someShape.attr({ lineWidth: 2 }); // update the style\n    someShape.show(); // controls the visibility\n  },\n}, 'circle'); // extends built-in circle type node\n",paraId:28,tocIndex:7},{value:"It requires developers to have clear management for shapes. Similar to the hooks ",paraId:29,tocIndex:7},{value:"componentDidMount",paraId:29,tocIndex:7},{value:", ",paraId:29,tocIndex:7},{value:"componentDidUpdate",paraId:29,tocIndex:7},{value:" of React, components should have different responses for different props changes.",paraId:29,tocIndex:7},{value:"Different from other edge types, polyline calculates its path by A* path finding algorithm when its ",paraId:30,tocIndex:8},{value:"controlPoints",paraId:30,tocIndex:8},{value:" is not defined. A* is an algorithm with high complexity. The performance issue will be extremely significant when dragging nodes, since the algorithm will be re-calculated frequently during dragging. There are some tips to alleviate the problem:",paraId:30,tocIndex:8},{value:"Custom simple polyline instead using the built-in polyline. There is a demo ",paraId:31,tocIndex:8},{value:"Custom Polyline",paraId:31,tocIndex:8},{value:". In most cases, the bending positions are at the 1/3 and 2/3 of the line between source node and target node (the beginning position from source node is ",paraId:31,tocIndex:8},{value:"startPoint",paraId:31,tocIndex:8},{value:" and the ending position from the target node is ",paraId:31,tocIndex:8},{value:"endPoint",paraId:31,tocIndex:8},{value:" in the following example):",paraId:31,tocIndex:8},{value:"[\n  ['M', startPoint.x, startPoint.y],\n  ['L', endPoint.x / 3 + (2 / 3) * startPoint.x, startPoint.y],\n  ['L', endPoint.x / 3 + (2 / 3) * startPoint.x, endPoint.y],\n  ['L', endPoint.x, endPoint.y],\n]\n",paraId:32,tocIndex:8},{value:"If you are using ",paraId:33,tocIndex:8},{value:"dagre",paraId:33,tocIndex:8},{value:" layout, enable its ",paraId:33,tocIndex:8},{value:"controlPoints",paraId:33,tocIndex:8},{value:" to calculate the bending positions for polyline by ",paraId:33,tocIndex:8},{value:"dagre",paraId:33,tocIndex:8},{value:", which means the ",paraId:33,tocIndex:8},{value:"controlPoints",paraId:33,tocIndex:8},{value:" will be given by the layout and A* will not be called anymore:",paraId:33,tocIndex:8},{value:"const graph = new Graph({\n  // ... other configurations\n  layout: {\n    type: 'dagre',\n    controlPoints: true, // Calculate the bending positions as controlPoints for edges. But will not change your edge type. Assign edge type as polyline in defaultEdge or edge data to make it take effect.\n    // ... other configurations\n  },\n  defaultEdge: {\n    type: 'polyline'\n  }\n})\n",paraId:34,tocIndex:8},{value:"Local refresh happens on updating node/edge/combo's configurations, states, and so on, which means renderer only clears the dirty bounding box and redraws the updated shapes. Renderer will clear the whole canvas and redraw at global updates like panning canvas and zooming canvas. That is to say, global updates cost much more than local updates. For example, when user drags or zooms the canvas, the clearing and redrawing are frequently repeated. So the user may find it is not so smooth in large graph with such behaviors. G6 supports ",paraId:35,tocIndex:9},{value:"enableOptimize",paraId:35,tocIndex:9},{value:" option for built-in behaviors ",paraId:35,tocIndex:9},{value:"zoom-canvas",paraId:35,tocIndex:9},{value:" and ",paraId:35,tocIndex:9},{value:"drag-canvas",paraId:35,tocIndex:9},{value:", which is ",paraId:35,tocIndex:9},{value:"false",paraId:35,tocIndex:9},{value:" by default. Assign it with ",paraId:35,tocIndex:9},{value:"true",paraId:35,tocIndex:9},{value:", all the shapes besides keyShapes will be hidden during panning and zooming. (",paraId:35,tocIndex:9},{value:"keyShape",paraId:35,tocIndex:9},{value:" is the shape returned by ",paraId:35,tocIndex:9},{value:"draw",paraId:35,tocIndex:9},{value:" function of ",paraId:35,tocIndex:9},{value:"G6.registerNode",paraId:35,tocIndex:9},{value:", ",paraId:35,tocIndex:9},{value:"G6.registerEdge",paraId:35,tocIndex:9},{value:", and ",paraId:35,tocIndex:9},{value:"G6.registerCombo",paraId:35,tocIndex:9},{value:"). After panning and zooming, the hidden shapes will be shown again. It will enhance the performance of these global updates a lot.",paraId:35,tocIndex:9},{value:"Configure ",paraId:36,tocIndex:9},{value:"enableOptimize",paraId:36,tocIndex:9},{value:" to ",paraId:36,tocIndex:9},{value:"true",paraId:36,tocIndex:9},{value:":",paraId:36,tocIndex:9},{value:"const graph = new Graph({\n  // ...other configurations\n  modes: {\n    default: [{\n      type: 'drag-canvas',\n      enableOptimize: true,\n      // ... other configurations\n    }, {\n      type: 'zoom-canvas',\n      enableOptimize: true,\n      // ... other configurations\n    }]\n  }\n})\n",paraId:37,tocIndex:9},{value:"G6 provides lots of layout methods. Layouts of force family are chosen by most developers. G6 has several force family layouts, and their performances are different. We suggest developers to try ",paraId:38,tocIndex:10},{value:"force2",paraId:38,tocIndex:10},{value:" which is provided recently.",paraId:38,tocIndex:10},{value:"force2: new force layout in G6 with better performance, and more configurations for gravity, center forces, clustering forces. And the animation is also configurable (by ",paraId:39,tocIndex:10},{value:"animate",paraId:39,tocIndex:10},{value:");",paraId:39,tocIndex:10},{value:"force: d3's classic force layout, does not support silence calculation currently;",paraId:39,tocIndex:10},{value:"forceAtlas2: a force layout with different force model, whose result is more compact. Implements the paper ",paraId:39,tocIndex:10},{value:"ForceAtlas2, a Continuous Graph Layout Algorithm forHandy Network Visualization Designed for the GephiSoftware",paraId:39,tocIndex:10},{value:";",paraId:39,tocIndex:10},{value:"fruchterman: another force model, whose result looks like regular hexagon in a way. The performance of it is not so good. Implements the paper ",paraId:39,tocIndex:10},{value:"Fruchterman–Reingold Hexagon Empowered NodeDeployment in Wireless Sensor Network Application",paraId:39,tocIndex:10},{value:".",paraId:39,tocIndex:10},{value:"Besides ",paraId:40,tocIndex:10},{value:"force",paraId:40,tocIndex:10},{value:", other force family layouts have option ",paraId:40,tocIndex:10},{value:"animate",paraId:40,tocIndex:10},{value:" to enable the animation during layout calculation. Actually, the 'animation' means rendering the mid-result after each iteration of force calculation. Nodes look like particles pushes/pulled by real forces. And other layouts will be rendered one time after layout finished (or force layout with ",paraId:40,tocIndex:10},{value:"animate: false",paraId:40,tocIndex:10},{value:"). Configure ",paraId:40,tocIndex:10},{value:"animate: true",paraId:40,tocIndex:10},{value:" on graph instance enables the interpolation animation for those static layouts after calculation finished.",paraId:40,tocIndex:10},{value:"On small graphs, force layouts always output good result whatever ",paraId:41,tocIndex:10},{value:"animate",paraId:41,tocIndex:10},{value:" is ",paraId:41,tocIndex:10},{value:"true",paraId:41,tocIndex:10},{value:" or ",paraId:41,tocIndex:10},{value:"false",paraId:41,tocIndex:10},{value:". On large graphs, if ",paraId:41,tocIndex:10},{value:"animate",paraId:41,tocIndex:10},{value:" is disabled, the layout might cost some time for calculation and the user will not see the graph until the layout is done, which leads to bad user experience. Enabling ",paraId:41,tocIndex:10},{value:"animate",paraId:41,tocIndex:10},{value:" shows the graph at the beginning and user could wait with animation, which will be more acceptable by users. Sometimes, the nodes might swing nearing the end of calculation. Developers could stop the layout in the listeners of canvas clicking or node clicking.",paraId:41,tocIndex:10},{value:"Update several items, we suggest ",paraId:42,tocIndex:11},{value:"graph.updateItem",paraId:42,tocIndex:11},{value:" respectively;",paraId:42,tocIndex:11},{value:"Add several items, we suggest ",paraId:42,tocIndex:11},{value:"graph.addItem",paraId:42,tocIndex:11},{value:". And v4.6.6 supports ",paraId:42,tocIndex:11},{value:"graph.addItems",paraId:42,tocIndex:11},{value:" for batch adding;",paraId:42,tocIndex:11},{value:"Remove several items, we suggest ",paraId:42,tocIndex:11},{value:"graph.removeItem",paraId:42,tocIndex:11},{value:";",paraId:42,tocIndex:11},{value:"Most part of the data need to be changed, we suggest ",paraId:42,tocIndex:11},{value:"graph.changeData",paraId:42,tocIndex:11},{value:", which will diff the current data and new data, and merge the new one into old one according to the id;",paraId:42,tocIndex:11},{value:"Minimap is a plugin of G6, which has three types: ",paraId:43,tocIndex:12},{value:"'default'",paraId:43,tocIndex:12},{value:", ",paraId:43,tocIndex:12},{value:"'keyShape'",paraId:43,tocIndex:12},{value:", and ",paraId:43,tocIndex:12},{value:"'delegate'",paraId:43,tocIndex:12},{value:". With ",paraId:43,tocIndex:12},{value:"'default'",paraId:43,tocIndex:12},{value:" type, all the graphics shapes and groups will be completely cloned to the canvas ad Minimap. And the minimap canvas will be updated when the items on the main graph being updated. That is to say, twice cost occurs for a graph with a ",paraId:43,tocIndex:12},{value:"'default'",paraId:43,tocIndex:12},{value:" type minimap. With ",paraId:43,tocIndex:12},{value:"'keyShape'",paraId:43,tocIndex:12},{value:" type, minimap only shows the key shapes of the main graph. With ",paraId:43,tocIndex:12},{value:"'delegate'",paraId:43,tocIndex:12},{value:" type, minimap shows delegate shapes (configured by ",paraId:43,tocIndex:12},{value:"delegateStyle",paraId:43,tocIndex:12},{value:") to represent the items of the main graph. These simplification with ",paraId:43,tocIndex:12},{value:"'keyShape'",paraId:43,tocIndex:12},{value:" and ",paraId:43,tocIndex:12},{value:"'delegate'",paraId:43,tocIndex:12},{value:" types enhance the performance a lot. Therefore we suggest to use these two types instead of ",paraId:43,tocIndex:12},{value:"'default'",paraId:43,tocIndex:12},{value:" type on large graphs.",paraId:43,tocIndex:12},{value:"Besides, the size of minimap is much smaller than main graph in usual. When there is lots of items, the edges will be extremely thin and not easy to recognized by users on the small view anyway. Therefore, v4.7.16 supports ",paraId:44,tocIndex:12},{value:"hideEdge",paraId:44,tocIndex:12},{value:" option (",paraId:44,tocIndex:12},{value:"false",paraId:44,tocIndex:12},{value:" by default) for minimap. Assign it with ",paraId:44,tocIndex:12},{value:"true",paraId:44,tocIndex:12},{value:" to hide the edges on the minimap to further enhance the performance.",paraId:44,tocIndex:12},{value:"Animation costs a lot in usual. We suggest developers to use animation reasonably on local responses instead of globally, e.g. breath animation when hover a node, flow animation on selected edges. And developers should well manage the animations and stop them in time.",paraId:45,tocIndex:13}]},35911:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"In this section, we will introduce the usage of G6 in IE.",paraId:0},{value:"Import ",paraId:1,tocIndex:0},{value:"babel-polyfill",paraId:1,tocIndex:0},{value:" into your project:",paraId:1,tocIndex:0},{value:"Import ",paraId:2,tocIndex:0},{value:"babel-polyfill",paraId:2,tocIndex:0},{value:" in your main entrance file;",paraId:2,tocIndex:0},{value:"Add some code into ",paraId:2,tocIndex:0},{value:"bable-loader",paraId:2,tocIndex:0},{value:":",paraId:2,tocIndex:0},{value:"{\n    test: /\\.js$/,\n    loader: 'babel-loader',\n    include: [resolve('src'), resolve('node_modules/@antv/g6')]\n}\n",paraId:3,tocIndex:0},{value:"include",paraId:4,tocIndex:0},{value:" indicates the directories of the .js files should to be babel-loader; exclude represents the directories of .js files should not to be babel-loader。",paraId:4,tocIndex:0},{value:"The content of ",paraId:5,tocIndex:0},{value:"include",paraId:5,tocIndex:0},{value:" should be assigned according to your project.",paraId:5,tocIndex:0},{value:"Refer to ",paraId:6,tocIndex:0},{value:"The Link",paraId:6,tocIndex:0},{value:" for more detail.",paraId:6,tocIndex:0},{value:"In addition, there are some solutions for the projects with @vue/cli, umi, and create-react-app. ",paraId:7,tocIndex:0},{value:"First, ensure your project can be ran on IE without G6",paraId:7,tocIndex:0},{value:".",paraId:7,tocIndex:0},{value:"You may find the error: ",paraId:8,tocIndex:0},{value:"The ",paraId:9,tocIndex:1},{value:"G6 Vue Demo",paraId:9,tocIndex:1},{value:" is based on @vue/cli(V: 4.0.5). There will be some small differences to the 3.x version. Now, we are going to solve the compatibility issues of @vue/cli.",paraId:9,tocIndex:1},{value:"First, we find the document on ",paraId:9,tocIndex:1},{value:"Vue Official Website",paraId:9,tocIndex:1},{value:", which points out the problem of browser compatibility: ",paraId:9,tocIndex:1},{value:"New a vue.config.js file in the same directory of package.json, and add ",paraId:10,tocIndex:1},{value:"transpileDependencies",paraId:10,tocIndex:1},{value:": ",paraId:10,tocIndex:1},{value:"The value of ",paraId:11,tocIndex:1},{value:"transpileDependencies",paraId:11,tocIndex:1},{value:" is ",paraId:11,tocIndex:1},{value:"[]",paraId:11,tocIndex:1},{value:" by default, which means no Babel with all the node_modules files. Now, we add the files should be Bable into ",paraId:11,tocIndex:1},{value:"transpileDependencies",paraId:11,tocIndex:1},{value:" as below. Note that the dependencies to be added ",paraId:11,tocIndex:1},{value:"should not contain node_modules, and use the package name @antv/g6",paraId:11,tocIndex:1},{value:". The reason is that the @vue/cli will add the prefix node_modules automatically. The @antv/g6 must be same consistent to that in package.json. Use npm while installing the dependencies. If you are using yarn or cnpm, you should make sure that there are no modified package name in node_modules.",paraId:11,tocIndex:1},{value:"module.exports = {\n  transpileDependencies: ['@antv/g6'],\n};\n",paraId:12,tocIndex:1},{value:"Open the project with IE11 to see the result: ",paraId:13,tocIndex:1},{value:"The original error is solved, but new problem shows up. Open the project with Chrome, you can find the same error. The compatibility issue has been solved by adding ",paraId:14,tocIndex:1},{value:"transpileDependencies",paraId:14,tocIndex:1},{value:". We find a solution in the issues of Vue: add ",paraId:14,tocIndex:1},{value:'sourceType: "unambiguous"',paraId:14,tocIndex:1},{value:" to babel.config.js, which can be refered to the official website of Vue for the definition.",paraId:14,tocIndex:1},{value:"module.exports = {\n  sourceType: 'unambiguous',\n  presets: ['@vue/cli-plugin-babel/preset'],\n};\n",paraId:15,tocIndex:1},{value:"Compile it again: ",paraId:16,tocIndex:1},{value:"Now, the prolem is solved.",paraId:17,tocIndex:1},{value:"If you are using create-react-app(V: 3.0.0) to initiate your project, create-react-app has built in the solution for compatibility. You only need to configure the compatibility of the project by several methods. Please refer to ",paraId:18,tocIndex:2},{value:"HERE",paraId:18,tocIndex:2},{value:".",paraId:18,tocIndex:2},{value:" ",paraId:18,tocIndex:2},{value:"If you want to figure out the inner solving process, run ",paraId:19,tocIndex:2},{value:"npm run eject",paraId:19,tocIndex:2},{value:" or ",paraId:19,tocIndex:2},{value:"yarn run eject",paraId:19,tocIndex:2},{value:" to check the inner configurations of create-react-app. This operation is irreversible. ",paraId:19,tocIndex:2}]},77604:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"The built outcomes of esm and commonjs do not support layouts with Web-Worker.",paraId:0,tocIndex:0},{value:"G6 3.3.0 supports three build outcomes:",paraId:1,tocIndex:1},{value:"lib: commonjs;",paraId:2,tocIndex:1},{value:"es: esm;",paraId:2,tocIndex:1},{value:"dist: umd.",paraId:2,tocIndex:1},{value:"import G6 from '@antv/g6'",paraId:3,tocIndex:1},{value:" default use lib outcomes。",paraId:3,tocIndex:1},{value:"The built outcomes of esm and commonjs do not support layouts with Web-Worker.",paraId:4,tocIndex:1},{value:"if you want to support layouts with Web-Worker, please use the file of ",paraId:5,tocIndex:1},{value:"CDN",paraId:5,tocIndex:1},{value:".",paraId:5,tocIndex:1},{value:"You don't need export @antv/util again after importing @antv/util in G6. The methods in @antv/util can be used directly;",paraId:6,tocIndex:2},{value:"util/layout is removed:\n",paraId:6,tocIndex:2},{value:"The methods ",paraId:7,tocIndex:2},{value:"scaleMatrix",paraId:7,tocIndex:2},{value:", ",paraId:7,tocIndex:2},{value:"floydWarshall",paraId:7,tocIndex:2},{value:", and ",paraId:7,tocIndex:2},{value:"getAdjMatrix",paraId:7,tocIndex:2},{value:" in util/layout have been moved to util.math;",paraId:7,tocIndex:2},{value:"The method ",paraId:7,tocIndex:2},{value:"getEDistance",paraId:7,tocIndex:2},{value:" in util/layout was the same as the method ",paraId:7,tocIndex:2},{value:"distance",paraId:7,tocIndex:2},{value:" in util/math. Please use ",paraId:7,tocIndex:2},{value:"distance",paraId:7,tocIndex:2},{value:" in util/math;",paraId:7,tocIndex:2},{value:"Use the methods ",paraId:7,tocIndex:2},{value:"mix",paraId:7,tocIndex:2},{value:", ",paraId:7,tocIndex:2},{value:"augment",paraId:7,tocIndex:2},{value:", and ",paraId:7,tocIndex:2},{value:"isString",paraId:7,tocIndex:2},{value:" in @antv/util instead of these in util/layout;",paraId:7,tocIndex:2},{value:"groupData",paraId:6,tocIndex:2},{value:" is changed into ",paraId:6,tocIndex:2},{value:"group",paraId:6,tocIndex:2},{value:"；",paraId:6,tocIndex:2},{value:"The methods ",paraId:6,tocIndex:2},{value:"flatToTree",paraId:6,tocIndex:2},{value:" and ",paraId:6,tocIndex:2},{value:"addNodesToParentNode",paraId:6,tocIndex:2},{value:" are removed from util/group;",paraId:6,tocIndex:2},{value:"The dependency to @antv/util in base is removed.",paraId:6,tocIndex:2},{value:"You don't need to import other packages when you are using the built-in plugins of G6. Only use them by ",paraId:8,tocIndex:3},{value:"G6.PluginName",paraId:8,tocIndex:3},{value:" after import G6. e.g.",paraId:8,tocIndex:3},{value:'// <= G6 3.2\n// Import by CDN. you need import G6 and the plugins you need.\n<script src="https://gw.alipayobjects.com/os/antv/assets/lib/jquery-3.2.1.min.js"><\/script>\n<script src="https://gw.alipayobjects.com/os/antv/pkg/_antv.g6-3.1.0/build/minimap.js"><\/script>\n<script src="https://gw.alipayobjects.com/os/antv/pkg/_antv.g6-3.1.0/build/grid.js"><\/script>\n// Or import by NPM.  you need import G6 and the plugins you need.\nimport G6, { Minimap, Grid } from \'@antv/G6\'\n\nconst minimap = new Minimap({\n\t//... configurations\n})\nconst grid = new Grid({\n\t//... configurations\n})\n\n\n// G6 4.x\n// Import by CDN. Yuo only need to import G6.\n<script src="https://gw.alipayobjects.com/os/lib/antv/g6/4.3.11/dist/g6.min.js"><\/script>\n\n// address of G6 3.x\n// <script src="https://gw.alipayobjects.com/os/antv/pkg/_antv.g6-3.5.10/dist/g6.min.js"><\/script>\n\n// Or import by NPM. Yuo only need to import G6.\nimport G6 from \'@antv/G6\'\n\nconst minimap = new G6.Minimap({\n\t//... configurations\n})\n\nconst grid = new G6.Grid({\n\t//... configurations\n})\n\nconst graph = new G6.Graph({\n\t//... other configurations\n  plugins: [ minimap, grid ]\n});\n',paraId:9,tocIndex:3},{value:"In G6 3.3, The methods about layout in TreeGraph are unified as Graph:",paraId:10,tocIndex:4},{value:"changeLayout",paraId:11,tocIndex:4},{value:" is changed into ",paraId:11,tocIndex:4},{value:"updateLayout",paraId:11,tocIndex:4},{value:";",paraId:11,tocIndex:4},{value:"refreshLayout",paraId:11,tocIndex:4},{value:" is changed into ",paraId:11,tocIndex:4},{value:"layout",paraId:11,tocIndex:4},{value:".",paraId:11,tocIndex:4},{value:"In G6 3.2.x and its previous version, the usage of the shape animation is:",paraId:12,tocIndex:5},{value:"G6.registerEdge(\n  'loop-growth',\n  {\n    afterDraw(cfg, group) {\n      const shape = group.get('children')[0];\n      const length = shape.getTotalLength();\n      shape.animate(\n        {\n          onFrame(ratio) {\n            const startLen = ratio * length;\n            // Calculating the lineDash for the line\n            const cfg = {\n              lineDash: [startLen, length - startLen],\n            };\n            return cfg;\n          },\n          repeat: true,\n        },\n        2000,\n      );\n    },\n  },\n  'loop',\n);\n",paraId:13,tocIndex:5},{value:"In G6 3.3:",paraId:14,tocIndex:5},{value:"We suggest not to use the calling way in 3.2 with the overrode ",paraId:15,tocIndex:5},{value:"onFrame",paraId:15,tocIndex:5},{value:" function, which will be discarded soon;",paraId:15,tocIndex:5},{value:"Call ",paraId:15,tocIndex:5},{value:"animate",paraId:15,tocIndex:5},{value:" by two ways instead:\n",paraId:15,tocIndex:5},{value:"Way 1: ",paraId:16,tocIndex:5},{value:"animate(toAttrs, animateCfg)",paraId:16,tocIndex:5},{value:", where ",paraId:16,tocIndex:5},{value:"toAttrs",paraId:16,tocIndex:5},{value:" is the target attributes of this animation, and ",paraId:16,tocIndex:5},{value:"animateCfg",paraId:16,tocIndex:5},{value:" is the configuration of the animation. e.g.",paraId:16,tocIndex:5},{value:"G6.registerEdge(\n  'widen-line',\n  {\n    afterDraw(cfg, group) {\n      const shape = group.get('children')[0];\n      const length = shape.getTotalLength();\n      shape.animate(\n        {\n          lineWidth: 10,\n        },\n        {\n          repeat: false,\n          duration: 500,\n        },\n      );\n    },\n  },\n  'single-edge',\n);\n",paraId:17,tocIndex:5},{value:"Way 2: ",paraId:18,tocIndex:5},{value:"animate(onFrame, animateCfg)",paraId:18,tocIndex:5},{value:", where ",paraId:18,tocIndex:5},{value:"onFrame",paraId:18,tocIndex:5},{value:" is the callback function of each frame, and ",paraId:18,tocIndex:5},{value:"animateCfg",paraId:18,tocIndex:5},{value:" is the configurations of the animation. e.g.",paraId:18,tocIndex:5},{value:"G6.registerEdge(\n  'loop-growth',\n  {\n    afterDraw(cfg, group) {\n      const shape = group.get('children')[0];\n      const length = shape.getTotalLength();\n      shape.animate(\n        (ratio) => {\n          const startLen = ratio * length;\n          // Calculating the lineDash for the line\n          const cfg = {\n            lineDash: [startLen, length - startLen],\n          };\n          return cfg;\n        },\n        {\n          repeat: true,\n          duration: 2000,\n        },\n      );\n    },\n  },\n  'loop',\n);\n",paraId:19,tocIndex:5},{value:"In G6 3.2.x and its previous versions, you can assign the type for edges and nodes in data, or assign them globally when instantiating the Graph, e.g.",paraId:20,tocIndex:6},{value:"// Assign the type of edges/nodes in data\nconst data = {\n  nodes: [\n    {\n      id: 'node0',\n      type: 'circle', // the type of this node is circle\n    },\n    {\n      id: 'node1',\n      type: 'rect', // the type of this node is rect\n    },\n  ],\n  edges: [\n    {\n      id: 'edge0',\n      source: 'node0',\n      target: 'node1',\n      type: 'polyline', // the type of this edge is polyline\n    },\n  ],\n};\n// or assign them globally when instantiating the Graph\nconst graph = new Graph({\n  // ... other configurations for graph\n  defaultNode: {\n    type: 'circle',\n    // ... other configurations for default node\n  },\n});\n",paraId:21,tocIndex:6},{value:"In G6 3.3, please use ",paraId:22,tocIndex:6},{value:"type",paraId:22,tocIndex:6},{value:" instead of ",paraId:22,tocIndex:6},{value:"shape",paraId:22,tocIndex:6},{value:" (For now, the ",paraId:22,tocIndex:6},{value:"shape",paraId:22,tocIndex:6},{value:" is comatible. But it will be discarded in the future).",paraId:22,tocIndex:6},{value:"The fontSize of label in G6 3.3 and G6 3.2.x will result in different visual sizes. But if you are using the default fontSize(12), there will be no difference. This is due to the unreasonable matrix tranformation for label in previous version of G6's rendering engine, which is resolved in G6 3.3. Now, the visual size is more reasonable and accurate.",paraId:23,tocIndex:8},{value:"In G6 3.2 and previous versions, you can add a shape to a custom node or edge as following without assign ",paraId:24,tocIndex:9},{value:"name",paraId:24,tocIndex:9},{value:" and ",paraId:24,tocIndex:9},{value:"draggable",paraId:24,tocIndex:9},{value:":",paraId:24,tocIndex:9},{value:"G6.registerEdge('customNode', {\n  draw(cfg, group) {\n    const keyShape = group.addShape('rect', {\n      attrs: {\n        // ... The attributes of the graphic shape\n      },\n    });\n    const circle = group.addShape('circle', {\n      attrs: {\n        // ... The attributes of the graphic shape\n      },\n    });\n    return keyShape;\n  },\n});\n",paraId:25,tocIndex:9},{value:"In G6 3.3, we highly recommend you to assign ",paraId:26,tocIndex:9},{value:"draggable",paraId:26,tocIndex:9},{value:", and must assign ",paraId:26,tocIndex:9},{value:"name",paraId:26,tocIndex:9},{value:"  when adding a shape. ",paraId:26,tocIndex:9},{value:"And the value of ",paraId:26,tocIndex:9},{value:"name",paraId:26,tocIndex:9},{value:" should be unique in a custom node/edge/combo type.",paraId:26,tocIndex:9},{value:" If not, the shapes will not response some interactive events. Adding these two property as below:",paraId:26,tocIndex:9},{value:"G6.registerEdge('customNode', {\n  draw(cfg, group) {\n    const keyShape = group.addShape('rect', {\n      attrs: {\n        // ... The attributes of the graphic shape\n      },\n      draggable: true, // Allow this shape to be dragged\n      name: 'key-shape', // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n    });\n    const circle = group.addShape('circle', {\n      attrs: {\n        // ... The attributes of the graphic shape\n      },\n      draggable: true, // Allow this shape to be dragged\n      name: 'circle-shape', // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n    });\n    return keyShape;\n  },\n});\n",paraId:27,tocIndex:9},{value:"In G6 3.2 and previous versions, the radius of the marker was assigned by ",paraId:28,tocIndex:10},{value:"r",paraId:28,tocIndex:10},{value:" or ",paraId:28,tocIndex:10},{value:"radius",paraId:28,tocIndex:10},{value:".",paraId:28,tocIndex:10},{value:"In G6 3.3, the radius of marker can be assigned by ",paraId:29,tocIndex:10},{value:"r",paraId:29,tocIndex:10},{value:" only.",paraId:29,tocIndex:10},{value:"e.g.",paraId:30,tocIndex:10},{value:"// <= G6 3.2.x\nG6.registerEdge('customNode', {\n  draw(cfg, group) {\n    const marker = group.addShape('marker', {\n      attrs: {\n        // ... Other attributes\n        radius: cfg.size[0],\n      },\n      draggable: true,\n      name: 'marker-shape', // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n    });\n    return keyShape;\n  },\n});\n\n// <= G6 3.3\nG6.registerEdge('customNode', {\n  draw(cfg, group) {\n    const marker = group.addShape('marker', {\n      attrs: {\n        // ... Other attributes\n        r: cfg.size[0],\n      },\n      draggable: true,\n      name: 'marker-shape',// must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n    });\n    return keyShape;\n  },\n});\n",paraId:31,tocIndex:10},{value:"In G6 3.2.x and previous version, we support fan shape (usage is shown below). G6 3.3 does not support this shape any more.",paraId:32,tocIndex:11},{value:"// This is not supported in G6 3.3\ngroup.addShape('fan', {\n  attrs: {\n    x: 50,\n    y: 50,\n    re: 40,\n    rs: 30,\n    startAngle: (1 / 2) * Math.PI,\n    endAngle: Math.PI,\n    clockwise: false,\n    fill: '#b7eb8f',\n  },\n  name: 'fan-shape' // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n});\n",paraId:33,tocIndex:11},{value:"In G6 3.2 and previous versions, you need to assign the ",paraId:34,tocIndex:12},{value:"pixelRatio",paraId:34,tocIndex:12},{value:" when instantiating the Graph.",paraId:34,tocIndex:12},{value:"In G6 3.3, ",paraId:35,tocIndex:12},{value:"pixelRatio",paraId:35,tocIndex:12},{value:" will be calculated automatically.",paraId:35,tocIndex:12},{value:"In G6 3.2 and previous versions, The timing ",paraId:36,tocIndex:13},{value:"nodeselectchange",paraId:36,tocIndex:13},{value:" will be emitted when end-users make some change by ",paraId:36,tocIndex:13},{value:"brush-select",paraId:36,tocIndex:13},{value:" and ",paraId:36,tocIndex:13},{value:"click-select",paraId:36,tocIndex:13},{value:". There were two properties in the callback function of ",paraId:36,tocIndex:13},{value:"nodeselectchange",paraId:36,tocIndex:13},{value:" for ",paraId:36,tocIndex:13},{value:"brush-select",paraId:36,tocIndex:13},{value:":",paraId:36,tocIndex:13},{value:"targets",paraId:37,tocIndex:13},{value:": The selected nodes and edges currently as ",paraId:37,tocIndex:13},{value:"{nodes: [...], edges: [...]}",paraId:37,tocIndex:13},{value:"select",paraId:37,tocIndex:13},{value:": Whether the option is select or deselect currently. ",paraId:37,tocIndex:13},{value:"true",paraId:37,tocIndex:13},{value:" | ",paraId:37,tocIndex:13},{value:"false",paraId:37,tocIndex:13},{value:"There were two another properties in the callback function of ",paraId:38,tocIndex:13},{value:"nodeselectchange",paraId:38,tocIndex:13},{value:" for ",paraId:38,tocIndex:13},{value:"click-select",paraId:38,tocIndex:13},{value:":",paraId:38,tocIndex:13},{value:"target",paraId:39,tocIndex:13},{value:": The manipulated node currently. It might be selected or deselected",paraId:39,tocIndex:13},{value:"select",paraId:39,tocIndex:13},{value:": Whether the option is select or deselect currently. ",paraId:39,tocIndex:13},{value:"true",paraId:39,tocIndex:13},{value:" | ",paraId:39,tocIndex:13},{value:"false",paraId:39,tocIndex:13},{value:"G6 3.3 unifies the ",paraId:40,tocIndex:13},{value:"nodeselectchange",paraId:40,tocIndex:13},{value:" events in these two behaviors. The ",paraId:40,tocIndex:13},{value:"targets",paraId:40,tocIndex:13},{value:" is replaced by ",paraId:40,tocIndex:13},{value:"selectedItems",paraId:40,tocIndex:13},{value:", which means the selected nodes and edges currently, to avoid the confusion of the meanings of ",paraId:40,tocIndex:13},{value:"targets",paraId:40,tocIndex:13},{value:" and ",paraId:40,tocIndex:13},{value:"target",paraId:40,tocIndex:13},{value:".",paraId:40,tocIndex:13},{value:"Now, there two properties in the callback function of ",paraId:41,tocIndex:13},{value:"nodeselectchange",paraId:41,tocIndex:13},{value:" for ",paraId:41,tocIndex:13},{value:"brush-select",paraId:41,tocIndex:13},{value:":",paraId:41,tocIndex:13},{value:"selectedItems",paraId:42,tocIndex:13},{value:": The selected nodes and edges currently as ",paraId:42,tocIndex:13},{value:"{nodes: [...], edges: [...]}",paraId:42,tocIndex:13},{value:"select",paraId:42,tocIndex:13},{value:": Whether the option is select or deselect currently. ",paraId:42,tocIndex:13},{value:"true",paraId:42,tocIndex:13},{value:" | ",paraId:42,tocIndex:13},{value:"false",paraId:42,tocIndex:13},{value:"There three properties in the callback function of ",paraId:43,tocIndex:13},{value:"nodeselectchange",paraId:43,tocIndex:13},{value:" for ",paraId:43,tocIndex:13},{value:"click-select",paraId:43,tocIndex:13},{value:":",paraId:43,tocIndex:13},{value:"target",paraId:44,tocIndex:13},{value:": The manipulated node currently. It might be selected or deselected",paraId:44,tocIndex:13},{value:"selectedItems",paraId:44,tocIndex:13},{value:": The selected nodes and edges currently as ",paraId:44,tocIndex:13},{value:"{nodes: [...], edges: [...]}",paraId:44,tocIndex:13},{value:"select",paraId:44,tocIndex:13},{value:": Whether the option is select or deselect currently. ",paraId:44,tocIndex:13},{value:"true",paraId:44,tocIndex:13},{value:" | ",paraId:44,tocIndex:13},{value:"false",paraId:44,tocIndex:13},{value:"In G6 3.2 and previous versions, you can assign the renderer with options options ",paraId:45,tocIndex:14},{value:"'canvas'",paraId:45,tocIndex:14},{value:" and ",paraId:45,tocIndex:14},{value:"'svg'",paraId:45,tocIndex:14},{value:" for graph when instantiating the Graph.",paraId:45,tocIndex:14},{value:"In G6 3.3, to make a better version with canvas, we do not support SVG renderer temporary. But we will support it in the future.",paraId:46,tocIndex:14}]},71141:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"This solution comes from GitHub User @wooodchen",paraId:0},{value:"If you coming up with the error like following picture shows\n",paraId:1},{value:"Please refer to ",paraId:2},{value:"GitHub Issue #2961",paraId:2},{value:".",paraId:2},{value:"You should configure two plugins: ",paraId:3},{value:"rollup-plugin-node-rosolve",paraId:3},{value:" and ",paraId:3},{value:"rollup-plugin-commonjs",paraId:3},{value:". The warning will exist but the project will be available.",paraId:3},{value:"Configure ",paraId:4},{value:"plugin",paraId:4},{value:" in ",paraId:4},{value:"vite.config.js",paraId:4},{value:":",paraId:4},{value:"import resolve from 'rollup-plugin-node-resolve'\nimport commonjs from 'rollup-plugin-commonjs'\n// ...\nexport default defineConfig({\n  plugin: [\n    ...,\n    resolve(),\n    commonjs(),\n    ...\n  ]\n})\n",paraId:5},{value:"And ",paraId:6},{value:"#3284",paraId:6},{value:" propose another sulution for reference:",paraId:6},{value:"build: {\n  commonjsOptions: {\n    ignoreTryCatch: false,\n  },\n},\n",paraId:7}]},91753:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"The English version is in progress",paraId:0},{value:"When there are no combos but nodes and edges, the visual index (zIndex) of edges are lower than nodes by default. For a graph with combos, rules about visual index should be specified to achieve reasonable result. For convenience, z(X) indicates the visual index(zIndex) in the following.",paraId:1,tocIndex:0},{value:"Rule 1: For one unnested combo, z(Node) > z(Edge) > z(combo), as shown below",paraId:2,tocIndex:0},{value:"z(a) = z(b) > z(e0) > z(combo A)",paraId:3,tocIndex:0},{value:"Rule 1+: Suppose that combo A has sub combos and nodes, and there are edges between the nodes, z(sub combo) > z(Node) > z(Edge) > z(combo A it self), as shown below:",paraId:4,tocIndex:0},{value:"z(b1) = z(b2) > z(e2) > z(combo B) > z(a1) = z(a2) > z(e1) > z(combo A)",paraId:5,tocIndex:0},{value:"Rule 2: We now abtain all the visual indexes of combos and nodes by rule 1. If there is an edge E with end nodes a and b from different combos, and we already know z(a) and z(b), the z(E) will be equal to the visual index of the edges in the combo which contains the end node with larger z(x). That is:\n",paraId:6,tocIndex:0},{value:"When z(a) > z(b), z(E) is equal to the visual index of the edges in the combo which contains a;",paraId:7,tocIndex:0},{value:"When z(a) <= z(b), z(E) is equal to the visual index of the edges in the combo which contains b.",paraId:7,tocIndex:0},{value:"As shown in the figure below, The edges with red label matches Rule 2:",paraId:8,tocIndex:0},{value:"z(e4) = z(e2) z(e5) = z(e2) z(e6) = z(e1)=z(e3)",paraId:9,tocIndex:0},{value:"Rule 2+: The combo B of upper figure is collapsed as following figure. The related nodes and edges are hidden, and some vitual edges are added to represent the relationships between items inside and outside combo B.",paraId:10,tocIndex:0},{value:"G6 provides a force-directed based layout for combo named 'comboForce'. There are three situations to be considered:",paraId:11,tocIndex:1},{value:"Layout all the items;",paraId:12,tocIndex:1},{value:"Expand a combo interactively;",paraId:12,tocIndex:1},{value:"Collapse a combo interactively.",paraId:12,tocIndex:1},{value:"The principle of traditional force-directed layout: There are repulsive forces between all the node pairs as ",paraId:13,tocIndex:1},{value:"Fr = k/r2",paraId:13,tocIndex:1},{value:"; There are attractive forces between the node pairs which have connections(edges) as ",paraId:13,tocIndex:1},{value:"Fa = ks * r",paraId:13,tocIndex:1},{value:". Where ",paraId:13,tocIndex:1},{value:"r",paraId:13,tocIndex:1},{value:" is the distance between two nodes, ",paraId:13,tocIndex:1},{value:"k",paraId:13,tocIndex:1},{value:" and ",paraId:13,tocIndex:1},{value:"ks",paraId:13,tocIndex:1},{value:" are coefficient. To meet the requirement of combo layout, we add some additional strategies to make the nodes inside a combo more compact and avoid the combo overlappings.",paraId:13,tocIndex:1},{value:"「Inter Edge」means an edge with two end nodes from different combos. All the edges in the below figure are inter edges. The attractive forces on them should be reduce the avoid this two combos overlapped. So the coefficient is ",paraId:14,tocIndex:2},{value:"m = f(c) < 1",paraId:14,tocIndex:2},{value:". Higher difference of the combos' depths, ",paraId:14,tocIndex:2},{value:"m",paraId:14,tocIndex:2},{value:" should be smaller. E.g. the differences of ",paraId:14,tocIndex:2},{value:"e46",paraId:14,tocIndex:2},{value:", ",paraId:14,tocIndex:2},{value:"e23",paraId:14,tocIndex:2},{value:", ",paraId:14,tocIndex:2},{value:"e12",paraId:14,tocIndex:2},{value:", and ",paraId:14,tocIndex:2},{value:"e15",paraId:14,tocIndex:2},{value:" are 1, and ",paraId:14,tocIndex:2},{value:"e34",paraId:14,tocIndex:2},{value:"、",paraId:14,tocIndex:2},{value:"e13",paraId:14,tocIndex:2},{value:" are 2. So ",paraId:14,tocIndex:2},{value:"f(c)",paraId:14,tocIndex:2},{value:" is a function about difference of the depths bewteen two end nodes' combos, e.g. ",paraId:14,tocIndex:2},{value:"m = 1/c",paraId:14,tocIndex:2},{value:";",paraId:14,tocIndex:2},{value:"「Intra Edge」means an edge with two end nodes form the same combo,the coefficient is ",paraId:14,tocIndex:2},{value:"m = f(c) = 1",paraId:14,tocIndex:2},{value:".",paraId:14,tocIndex:2},{value:"For convenience, we say ",paraId:15,tocIndex:3},{value:"P(X)",paraId:15,tocIndex:3},{value:" is the hierarchy depth of combo X. As shown in the figure below, ",paraId:15,tocIndex:3},{value:"P(A) > P(B) > P(C) > P(D)",paraId:15,tocIndex:3},{value:";",paraId:15,tocIndex:3},{value:"Each combo has a gravity force G(X) for its succeeding nodes from their mean center. The mean center will be updated in each iteration;",paraId:15,tocIndex:3},{value:"Smaller ",paraId:15,tocIndex:3},{value:"P(X)",paraId:15,tocIndex:3},{value:", larger ",paraId:15,tocIndex:3},{value:"G(X)",paraId:15,tocIndex:3},{value:". e.g. ",paraId:15,tocIndex:3},{value:"G(X) = 1/P(X)",paraId:15,tocIndex:3},{value:";",paraId:15,tocIndex:3},{value:"Some nodes might be affected by multiple gravity forces. Such as the node #6 in the figure below, it is affected by the gravity forces ",paraId:15,tocIndex:3},{value:"G(C)",paraId:15,tocIndex:3},{value:" from combo C with red stroke, ",paraId:15,tocIndex:3},{value:"G(B)",paraId:15,tocIndex:3},{value:" from combo B with green stroke, and ",paraId:15,tocIndex:3},{value:"G(A)",paraId:15,tocIndex:3},{value:" from combo A with yellow stroke, where ",paraId:15,tocIndex:3},{value:"G(C) > G(B) > G(A)",paraId:15,tocIndex:3},{value:".",paraId:15,tocIndex:3},{value:"Detect the overlappings between nodes in each iteration, and:\n",paraId:16,tocIndex:4},{value:"If two node overlapped, magnify a coefficient ",paraId:17,tocIndex:4},{value:"R",paraId:17,tocIndex:4},{value:" to the repulsive force between them to take them apart.",paraId:17,tocIndex:4},{value:"Detect the overlappings between combos in each iteration (or each ",paraId:16,tocIndex:4},{value:"q",paraId:16,tocIndex:4},{value:" iteraction in reduce the computation):\n",paraId:16,tocIndex:4},{value:"First of all, compute the bounding box of the children (including nodes and sub combos);",paraId:18,tocIndex:4},{value:"Then traverse the combo tree from top to bottom to find the overlapped combo pairs with same depth in a parent combo;",paraId:18,tocIndex:4},{value:"Increase the gravity of the parent combo if two sub combos are overlapped.",paraId:18,tocIndex:4},{value:"The combos with same hierarchy depths are in the same color. The hierarchy depths on this graph is: A > B > C > D",paraId:19,tocIndex:4}]},45836:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"In G6, the container of the ",paraId:0},{value:"<Canvas></Canvas>",paraId:0},{value:" is assigned by ",paraId:0},{value:"container",paraId:0},{value:" when instantiating a Graph. But the coordinate system of DOM and the drawing coordinate system are not the same, which leads to some confusion in the cases:",paraId:0},{value:"Placing a DOM element (tooltip, menu, and so on) with ",paraId:1},{value:"position: absolute",paraId:1},{value:" upon the canvas on the position where\n",paraId:1},{value:"the mouse clicked;",paraId:2},{value:"the clicked node.",paraId:2},{value:"The problem is more obvious after the graph has been panned and zoomed. Now, we are going to learn the coordinate systems in G6 to help you solve the issue.",paraId:3},{value:"First of all, we know that there are three kinds of coordinate system in G6, we call them: clientX/clientY, canvasX/canvasY, and pointX/pointY.",paraId:4,tocIndex:0},{value:"It is related to the broswer, whose origin is at the left top of the broswer's content and it is not scrolled with the page. As shown below, the two pictures show the cases with different positions of y-scroll, but the origin of clientX/clientY is fixed. But the clientX/clientY coordinates of the left-top of the Container Dom in the two cases are different. Left one has (100, 1000), but right one has (100, 200).",paraId:5,tocIndex:1},{value:"It is the self coordinate system of the Container DOM. We suppose that the ",paraId:6,tocIndex:2},{value:"width",paraId:6,tocIndex:2},{value:" and ",paraId:6,tocIndex:2},{value:"height",paraId:6,tocIndex:2},{value:" of the graph were assigned to be 550 and 500:",paraId:6,tocIndex:2},{value:"const Graph = new G6.Graph({\n  container: 'container',\n  width: 550,\n  height: 500\n})\n",paraId:7,tocIndex:2},{value:"The size of the Container DOM is 550*500. The origin of the canvasX/canvasY system is at the left-top of the Container DOM, and the right-bottom point of the Container DOM is (550, 500).",paraId:8,tocIndex:2},{value:"The previous two coordinate systems are the DOM related systems, and the coordinate values are integer. Different from them, pointX/pointY is the real drawing coordinate systems for shapes on the canvas. For nodes, each node has (x, y) in pointX/pointY system as position information. Notice that when end users pan or zoom a graph, they are actually manipulating the pointX/pointY coordinate system.",paraId:9,tocIndex:3},{value:"To be more specific, we show an example in this section.",paraId:10,tocIndex:4},{value:"The three systems in the figures of this section are colored with grey, blue, and red, corresponds to clientX/clientY, canvasX/canvasY, and pointX/pointY respectively. And the labels and numbers for each system have the corresponding colors.",paraId:11,tocIndex:4},{value:"The figure below shows the case without transfromation, that is, the tranfromational matrix is a unit matrix. We can see from the figure that the canvasX/canvasY and pointX/pointY are overlapped, including the scale of the axes and the origin. The canvasX/canvasY and pointX/pointY coordinates of the root node's position, tagged by black point, of the graph are the same. And the origin of the clientX/clientY is at the left-top of the broswer's content, and the black point's clientX/clientY coordinate is equal to the canvasX/canvasY or pointX/pointY plus the left and top distance to the browser's border.",paraId:12,tocIndex:5},{value:"Figure 1: three coordinate systems when the graph has no transformation.",paraId:13,tocIndex:5},{value:"In fact, zooming the graph is zooming the pointX/pointY system (centered at the its origin by default). Now we zoom the graph with scale ",paraId:14,tocIndex:6},{value:"2",paraId:14,tocIndex:6},{value:", which means the transformational matrix of the graph is:",paraId:14,tocIndex:6},{value:"matrix =\n  2 0 0\n  0 2 0\n  0 0 1\n",paraId:15,tocIndex:6},{value:"It is easy to be imagine that part of the graph will be out of the Container DOM.",paraId:16,tocIndex:6},{value:"The graph is zoomed with scale ",paraId:17,tocIndex:6},{value:"2",paraId:17,tocIndex:6},{value:" means the pointX/pointY system is zoomed with scale ",paraId:17,tocIndex:6},{value:"2",paraId:17,tocIndex:6},{value:", the scale of the axes are zoomed two times to origin state. You can think of the coordinate axes as two retractable ropes. The ropes have a mark with '1' or '2' or '3' ... every one centimeter in the relaxed state. These marks are the coordinate values of the pointX/pointY system. To zoom the graph, we pull the ends of the ropes separately and double them in the positive direction, then the distance between adjacent marks becomes two centimeters.",paraId:17,tocIndex:6},{value:"In the same time, canvasX/canvasY and clientX/clientY coordinate systems stay unchanged. In the other word, (90, 0) in canvasX/canvasY is (45, 0) in the pointX/pointY, (0, 250) in canvasX/canvasY is (0, 125) in pointX/pointY. But the corresponding values in clientX/clientY is the values in canvasX/canvasY plus the left and top distances from the Container DOM to the borders of the browser.",paraId:18,tocIndex:6},{value:"Figure 2: Three coordinate systems when the graph is zoomed.",paraId:19,tocIndex:6},{value:"In figure 2, the canvasX/canvasY and clientX/clientY coordinate value of the black point in figure 1 stays unchanged with (90, 250) and (290, 350) respectively. Due to the changes of the scales of the pointX/pointY system, the value is changed to (45, 125). And the root node (marked with black point B) in figure 2 has same pointX/pointY value as figure 1, and its values in canvasX/canvasY and clientX/clientY are changed to (180, 500) and (380, 600) respectively.",paraId:20,tocIndex:6},{value:"Based on the zoomed graph of previous section, we now translate with vector (50, 50), which means the transfromational matrix becomes:",paraId:21,tocIndex:7},{value:"matrix =\n  2  0  0\n  0  2  0\n  50 50 1\n",paraId:22,tocIndex:7},{value:"It is easy to be imagine that the left top part of the COntainer DOM will be empty.",paraId:23,tocIndex:7},{value:"Similar the previous version, translating the graph is actrually translating the whole pointX/pointY system, that is moving the axes ropes along positive direction of x by 50 and positive direction of y by 50 respectively.",paraId:24,tocIndex:7},{value:"In the sametime, canvasX/canvasY and clientX/clientY system stay unchanged. E.g., (90, 0) of canvasX/canvasY corresponds to ((90-50)/2=20, 0) in pointX/pointY system; (0, 250) of canvasX/canvasY corresponds to (0, (250-50)/2=100) in pointX/pointY system. But the corresponding values in clientX/clientY is still the values in canvasX/canvasY plus the left and top distances from the Container DOM to the borders of the browser.",paraId:25,tocIndex:7},{value:"Figure 3: Three coordinate systems of zoomed and translated graph.",paraId:26,tocIndex:7},{value:"In figure 3, the canvasX/cnavasY and clientX/clientY coordinate value of the black point in figure 1 stays unchanged with (90, 250) and (290, 350) respectively. Due to the changes of the origin of the pointX.pointY system, the value is changed to (20, 100). And the root node (marked with black point B) in figure 3 has same pointX/pointY value as figure 1 and figure 2, and its canvasX/canvasY and clientX/clientY are chagned to (230, 550) and (430, 650) respectively.",paraId:27,tocIndex:7},{value:"Sometimes we need to translate the coordinates for different usages. In G6, the paremeter ",paraId:28,tocIndex:8},{value:"event",paraId:28,tocIndex:8},{value:" of different events contains three coordinate values for the three coordinate system, the correspondence of the variable names in ",paraId:28,tocIndex:8},{value:"event",paraId:28,tocIndex:8},{value:" and the systems is:",paraId:28,tocIndex:8},{value:"event.x, event.y => pointX/pointY;",paraId:29,tocIndex:8},{value:"event.canvasX, event.canvasY => canvasX/canvasY;",paraId:29,tocIndex:8},{value:"event.clientX, event.clientY => clientX/clientY.",paraId:29,tocIndex:8},{value:"Notice that the ",paraId:30,tocIndex:8},{value:"x",paraId:30,tocIndex:8},{value:" and ",paraId:30,tocIndex:8},{value:"y",paraId:30,tocIndex:8},{value:" are the velus of pointX/pointY system.",paraId:30,tocIndex:8},{value:"Translate coordinate values of pointX/pointY system to canvasX/canvasY system.",paraId:31,tocIndex:9},{value:"Translate coordinate values of canvasX/canvasY system to pointX/pointY system.",paraId:32,tocIndex:10},{value:"Translate coordinate values of pointX/pointY system to clientX/clientY system.",paraId:33,tocIndex:11},{value:"Translate coordinate values of clientX/clientY system to pointX/pointY system.",paraId:34,tocIndex:12},{value:"Easy to find out that these four APIs are all about pointX/pointY, and users are able to translate between clientX/clientY and canvasX/canvasY by combining the four APIs:",paraId:35,tocIndex:12},{value:"clientX/clientY to canvasX/canvasY:",paraId:36,tocIndex:12},{value:"const point = graph.getPointByClient(clientX, clientY)\nconst canvasXY = graph.getCanvasByPoint(point.x, point.y);\n",paraId:37,tocIndex:12},{value:"canvasX/canvasY to clientX/clientY:",paraId:38,tocIndex:12},{value:"const point = graph.getPointByCanvas(canvasX, canvasY)\nconst clientXY = graph.getClientByPoint(point.x, point.y);\n",paraId:39,tocIndex:12},{value:"At the beginning of this document, we metioned the following case:",paraId:40,tocIndex:13},{value:"Place a DOM with ",paraId:41,tocIndex:13},{value:"position: absolute",paraId:41,tocIndex:13},{value:" , e.g. tooltip, menu, and so on, at the position where",paraId:41,tocIndex:13},{value:"the point currently clicked by the mouse;",paraId:42,tocIndex:13},{value:"the currently clicked node's position.",paraId:42,tocIndex:13},{value:"Wrong offset will occur if user takes coordinate values of wrong coordinate systems. The problem will become worse if the graph is zoomed or translated.",paraId:43,tocIndex:13},{value:"Now, we are going to define a DOM for such case:",paraId:44,tocIndex:13},{value:'  const floatDOM = createDom(`\n  <div id="test-dom" style="position: absolute; background: #f00; height: 100px; width: 200px">\n    floating dom\n  </div>\n  `);\n',paraId:45,tocIndex:13},{value:"No matter which case, we recommend two ways to mount the DOM:",paraId:46,tocIndex:13},{value:"Way 1: Mount the DOM on body:",paraId:47,tocIndex:13},{value:"document.body.appendChild(floatDOM);\n",paraId:48,tocIndex:13},{value:"Way 3: Mount the DOM on Container DOM , which means the DOM has the same parent of the canvas:",paraId:49,tocIndex:13},{value:"const container = document.getElementById('container') // Suppose that the id of the COntainer DOM is 'container'\ncontainer.appendChild(floatDOM);\n",paraId:50,tocIndex:13},{value:"We know that a DOM with ",paraId:51,tocIndex:14},{value:"position: absolute",paraId:51,tocIndex:14},{value:" is positioned related to the parent DOM. Mounting the DOM on body means the parent DOM of the DOM is body. So we can use ",paraId:51,tocIndex:14},{value:"clientX/clientY",paraId:51,tocIndex:14},{value:" to assign its ",paraId:51,tocIndex:14},{value:"left/top",paraId:51,tocIndex:14},{value:":",paraId:51,tocIndex:14},{value:"Place the DOM on the position where the mouse currently clicked:",paraId:52,tocIndex:14},{value:"graph.on('canvas:click', event => {\n    floatDOM.style.left = event.clientX;\n  floatDOM.style.top = event.clientY;\n});\n",paraId:53,tocIndex:14},{value:"Place the DOM on the position where the currently clicked node on:",paraId:54,tocIndex:14},{value:"const node = graph.getNodes()[0];\nconst { x, y } = node.getModel(); // 获得该节点的位置，对应 pointX/pointY 坐标\nconst clientXY = graph.getClientByPoint(x, y);\nfloatDOM.style.left = clientXY.x;\nfloatDOM.style.top = clientXY.y;\n",paraId:55,tocIndex:14},{value:"If we mount the DOM on the Container DOM, the parent of the DOM is the Container DOM, we can use ",paraId:56,tocIndex:15},{value:"canvasX/canvasY",paraId:56,tocIndex:15},{value:" to assign its ",paraId:56,tocIndex:15},{value:"marginLeft/marginTop",paraId:56,tocIndex:15},{value:":",paraId:56,tocIndex:15},{value:"Place the DOM on the position where the mouse currently clicked:",paraId:57,tocIndex:15},{value:"graph.on('canvas:click', event => {\n    floatDOM.style.marginLeft = event.canvasX;\n  floatDOM.style.marginTop = event.canvasY;\n});\n",paraId:58,tocIndex:15},{value:"Place the DOM on the position where the currently clicked node on:",paraId:59,tocIndex:15},{value:"const node = graph.getNodes()[0];\nconst { x, y } = node.getModel(); // 获得该节点的位置，对应 pointX/pointY 坐标\nconst canvasXY = graph.getCanvasByPoint(x, y);\nfloatDOM.style.marginLeft = canvasXY.x;\nfloatDOM.style.marginTop = canvasXY.y;\n",paraId:60,tocIndex:15}]},3118:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"G6 is a pure JavaScript library that seamlessly integrates with any framework, allowing it to be used in various frontend frameworks such as React, Vue, Angular, and more. We have provided a demonstration example of using G6 in React for reference.",paraId:0,tocIndex:0},{value:"We look forward to developers in the community providing examples of using G6 in Vue and Angular, which would be greatly appreciated as a valuable resource for other developers to learn and reference. Thank you very much!",paraId:1,tocIndex:0},{value:"In this demo, we will implement a simple flow diagram as the figure below:",paraId:2,tocIndex:0},{value:"The demo includes these functions:",paraId:3,tocIndex:1},{value:"Register a custom node;",paraId:4,tocIndex:1},{value:"Register a custom edge;",paraId:4,tocIndex:1},{value:"Utilize node tooltip;",paraId:4,tocIndex:1},{value:"Utilize edge tooltip;",paraId:4,tocIndex:1},{value:"Utilize the context menu on node;",paraId:4,tocIndex:1},{value:"Render the custom React components of tooltip and ContextMenu.",paraId:4,tocIndex:1},{value:"In React, you can fetch the DOM element by ",paraId:5,tocIndex:1},{value:"ReactDOM.findDOMNode(ref.current)",paraId:5,tocIndex:1},{value:".",paraId:5,tocIndex:1},{value:"import React, { useEffect } from 'react';\nimport { Graph } from '@antv/g6';\n\nconst data = {\n  nodes: [\n    { id: '1', label: 'Company1' },\n    { id: '2', label: 'Company2' },\n    // nodes data ...\n  ],\n  edges: [\n    {\n      source: '1',\n      target: '2',\n      data: { type: 'name1', amount: '100,000,000,00 Yuan', date: '2019-08-03' },\n    },\n    // edges data ...\n  ],\n};\n\nexport default () => {\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const graphRef = React.useRef<Graph>();\n\n  useEffect(() => {\n    if (graphRef.current || !containerRef.current) return;\n\n    const graph = new Graph({\n      container: containerRef.current,\n      width: 1200,\n      height: 800,\n      modes: { default: ['drag-canvas'] },\n      layout: { type: 'dagre', direction: 'LR' },\n      defaultNode: {\n        type: 'node',\n        labelCfg: {\n          style: { fill: '#000000A6', fontSize: 10 },\n        },\n        style: { stroke: '#72CC4A', width: 150 },\n      },\n      defaultEdge: { type: 'polyline' },\n    });\n\n    // Binding data\n    graph.data(data);\n    // Rendering\n    graph.render();\n\n    graphRef.current = graph;\n  }, []);\n\n  return <div ref={containerRef}></div>;\n};\n",paraId:6,tocIndex:1},{value:"The styles of the built-in tooltips on nodes/edges and thecontext menu on nodes are too simple to satisfy the complex requirements. Now we show how to customize React components for these tools, then the styles of them can be controlled by users. During the interaction, G6 defines the render timing and position of these components. When the timing and the position are available, they can be managed by React state.",paraId:7,tocIndex:2},{value:"// The coordinate of node tooltip\nconst [showNodeTooltip, setShowNodeTooltip] = useState(false);\nconst [nodeTooltipX, setNodeToolTipX] = useState(0);\nconst [nodeTooltipY, setNodeToolTipY] = useState(0);\n\n// Listen to the mouse event on node\ngraph.on('node:mouseenter', (evt) => {\n  const { item } = evt;\n  const model = item.getModel();\n  const { x, y } = model;\n  const point = graph.getCanvasByPoint(x, y);\n\n  setNodeToolTipX(point.x - 75);\n  setNodeToolTipY(point.y + 15);\n  setShowNodeTooltip(true);\n});\n\n// Hide the tooltip and the contextMenu when the mouseleave event is activated on the node\ngraph.on('node:mouseleave', () => {\n  setShowNodeTooltip(false);\n});\n\nreturn <div ref={ref}>{showNodeTooltip && <NodeTooltips x={nodeTooltipX} y={nodeTooltipY} />}</div>;\n",paraId:8,tocIndex:2},{value:"The complete code of this demo 「",paraId:9,tocIndex:2},{value:"HERE",paraId:9,tocIndex:2},{value:"」.",paraId:9,tocIndex:2}]},19474:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Due to the good compatibility, type diversity, color diversity, The iconfont is popupar for front-end developments now. Refer to the ",paraId:0,tocIndex:0},{value:"Iconfont Library of Alibaba",paraId:0,tocIndex:0},{value:".",paraId:0,tocIndex:0},{value:"Browse the ",paraId:1,tocIndex:2},{value:"Iconfont Library of Alibaba",paraId:1,tocIndex:2},{value:" and download the iconfont you like by searching a iconfont -> adding it to your library -> going to your library by clicking the shopping cart logo on the right top -> adding it to your project (new one if you do not have any project) -> downloading the iconfont in 'my project' -> decompressing. You will get the files as shown below if everything is right:",paraId:1,tocIndex:2},{value:" ",paraId:1,tocIndex:2},{value:"Copy the files in the red area (there are lots of unecessary files, we can still copy them all since the unused files will not be packed)to your project. In general, the iconfont files are on the directory of 'static/icons' or 'assets/icons'. New the directory if there is no such directory. It is also fine to put them into any directory. But note to import the right path when you use it. Now, the importing process is done.",paraId:2,tocIndex:2},{value:"PS: The directory for this example is '/static/icons'.",paraId:3,tocIndex:2},{value:"There are several ways to import G6 introduced in ",paraId:4,tocIndex:3},{value:"Getting Started",paraId:5,tocIndex:3},{value:". ",paraId:4,tocIndex:3},{value:"PS: We import G6 by CDN in this example.",paraId:4,tocIndex:3},{value:'<script src="https://gw.alipayobjects.com/os/lib/antv/g6/4.3.11/dist/g6.min.js"><\/script>\n',paraId:6,tocIndex:3},{value:"We import the iconfont in HTML here:",paraId:7,tocIndex:4},{value:"<style>\n  @import '/static/icons/iconfont.css';\n</style>\n",paraId:8,tocIndex:4},{value:"G6.registerNode('iconfont', {\n  draw(cfg, group) {\n    const { backgroundConfig: backgroundStyle, style, labelCfg: labelStyle } = cfg;\n\n    if (backgroundStyle) {\n      group.addShape('circle', {\n        attrs: {\n          x: 0,\n          y: 0,\n          r: cfg.size,\n          ...backgroundStyle,\n        },\n        // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n        name: 'circle-shape',\n      });\n    }\n\n    const keyShape = group.addShape('text', {\n      attrs: {\n        x: 0,\n        y: 0,\n        fontFamily: 'iconfont', // 对应css里面的font-family: \"iconfont\";\n        textAlign: 'center',\n        textBaseline: 'middle',\n        text: cfg.text,\n        fontSize: cfg.size,\n        ...style,\n      },\n      // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n      name: 'text-shape1',\n    });\n    const labelY = backgroundStyle ? cfg.size * 2 : cfg.size;\n\n    group.addShape('text', {\n      attrs: {\n        x: 0,\n        y: labelY,\n        textAlign: 'center',\n        text: cfg.label,\n        ...labelStyle.style,\n      },\n      // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n      name: 'text-shape2',\n    });\n    return keyShape;\n  },\n});\n\nconst COLOR = '#40a9ff';\nconst graph = new G6.TreeGraph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  modes: {\n    default: ['collapse-expand', 'drag-canvas', 'drag-node'],\n  },\n  defaultNode: {\n    backgroundConfig: {\n      backgroundType: 'circle',\n      fill: COLOR,\n      stroke: 'LightSkyBlue',\n    },\n    type: 'iconfont',\n    size: 12,\n    style: {\n      fill: '#fff',\n    },\n    labelCfg: {\n      style: {\n        fill: COLOR,\n        fontSize: 12,\n      },\n    },\n  },\n  // 布局相关\n  layout: {\n    type: 'compactBox',\n    direction: 'LR',\n    getId(d) {\n      return d.id;\n    },\n    getHeight() {\n      return 16;\n    },\n    getWidth() {\n      return 16;\n    },\n    getVGap() {\n      return 20;\n    },\n    getHGap() {\n      return 60;\n    },\n  },\n});\n\ngraph.edge(({ target }) => {\n  const fill = target.get('model').backgroundConfig && target.get('model').backgroundConfig.fill;\n  return {\n    type: 'cubic-horizontal',\n    color: fill || COLOR,\n    label: target.get('model').relation || '',\n    labelCfg: {\n      style: {\n        fill: fill || COLOR,\n        fontSize: 12,\n      },\n    },\n  };\n});\n\nconst data = {\n  isRoot: true,\n  id: 'Root',\n  label: '可疑人员王**',\n  text: '\\ue6b2', // 对应iconfont.css 里面的content，注意加u，后面的自行修改一下。\n  style: {\n    fill: 'red',\n  },\n  labelCfg: {\n    style: {\n      fill: 'red',\n    },\n  },\n  backgroundConfig: null, // 自定义项，用于判读是否需要圆背景\n  size: 30,\n  children: [\n    {\n      id: 'SubTreeNode1',\n      label: '**网咖',\n      text: '&#xe605;',\n      relation: '上网',\n      children: [\n        {\n          id: 'SubTreeNode2',\n          label: '多伦多',\n          text: '&#xe64b;',\n        },\n        {\n          id: 'id1',\n          label: '小王',\n          text: '&#xe622;',\n          children: [\n            {\n              id: 'SubTreeNode1.2.1',\n              label: '182****2123',\n              text: '&#xe60d;',\n            },\n            {\n              id: 'SubTreeNode4',\n              label: '今晚在吗',\n              text: '&#xe629;',\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 'SubTreeNode3',\n      label: 'subway',\n      text: '&#xe653;',\n      children: [\n        {\n          id: 'SubTreeNode3.1',\n          label: '王五',\n          text: '&#xe622;',\n        },\n        {\n          id: 'SubTreeNode3.2',\n          label: '张三',\n          text: '&#xe622;',\n        },\n      ],\n    },\n    {\n      id: 'SubTreeNode5',\n      label: '小花',\n      relation: '老婆',\n      text: '&#xe74b;',\n      backgroundConfig: {\n        fill: 'Coral',\n      },\n      style: {\n        fill: '#fff',\n      },\n      labelCfg: {\n        style: {\n          fill: 'Coral',\n        },\n      },\n      children: [\n        {\n          id: 'SubTreeNode1.2.1',\n          label: '182****2123',\n          text: '&#xe60d;',\n          relation: '通话',\n          backgroundConfig: {\n            fill: 'Coral',\n          },\n          style: {\n            fill: '#fff',\n          },\n          labelCfg: {\n            style: {\n              fill: 'Coral',\n            },\n          },\n        },\n        {\n          id: 'SubTreeNode3.3',\n          label: '凶器',\n          text: '&#xe673;',\n          relation: '指纹',\n          backgroundConfig: {\n            fill: 'Coral',\n          },\n          style: {\n            fill: '#fff',\n          },\n          labelCfg: {\n            style: {\n              fill: 'Coral',\n            },\n          },\n        },\n      ],\n    },\n    {\n      id: 'SubTreeNode6',\n      label: '马航37*',\n      relation: '乘坐',\n      text: '&#xe610;',\n    },\n  ],\n};\n\ngraph.data(data);\ngraph.render();\n",paraId:9,tocIndex:5},{value:"In fact, iconfont is a text shape.",paraId:10,tocIndex:6},{value:"1、The ",paraId:11,tocIndex:6},{value:"fontFamily",paraId:11,tocIndex:6},{value:" of the text and the ",paraId:11,tocIndex:6},{value:"font-family",paraId:11,tocIndex:6},{value:" in iconfont.css shoulde be kept consistent:",paraId:11,tocIndex:6},{value:" ",paraId:11,tocIndex:6},{value:"2、The ",paraId:12,tocIndex:6},{value:"text",paraId:12,tocIndex:6},{value:" in data is the ",paraId:12,tocIndex:6},{value:"content",paraId:12,tocIndex:6},{value:" in iconfont.css. And add an ",paraId:12,tocIndex:6},{value:"u",paraId:12,tocIndex:6},{value:" after ",paraId:12,tocIndex:6},{value:"\\",paraId:12,tocIndex:6},{value:".",paraId:12,tocIndex:6},{value:"3、If the iconfonts are rendered wrongly (maybe it is rendered as an empty rect), check whether the font file has been loaded:",paraId:13,tocIndex:6},{value:" ",paraId:13,tocIndex:6},{value:"If there is no node using font icon in the page, the font file will not be automatically downloaded, so you can add a hidden node to trigger the loading. If it is already loaded, you can try the following code to refresh the rendering.",paraId:14,tocIndex:6},{value:"// Call the following code after graph.render()\nsetTimeout(() => {\n  graph.paint();\n}, 16);\n",paraId:15,tocIndex:6},{value:"You can write a function as below to transform unicode. Attention, unicode cannot be connected manually (",paraId:16,tocIndex:7},{value:"\\\\u${icon.unicode}",paraId:16,tocIndex:7},{value:"). Here we use the ",paraId:16,tocIndex:7},{value:"code_decimal",paraId:16,tocIndex:7},{value:" in iconfont.json. For more detail, please refer to ",paraId:16,tocIndex:7},{value:"MDN String.fromCodePoint",paraId:16,tocIndex:7},{value:".",paraId:16,tocIndex:7},{value:"import fonts from '../fonts/iconfont.json';\n\nconst icons = fonts.glyphs.map((icon) => {\n  return {\n    name: icon.name,\n    unicode: String.fromCodePoint(icon.unicode_decimal), // `\\\\u${icon.unicode}`,\n  };\n});\nconst getIcon = (type: string) => {\n  const matchIcon = icons.find((icon) => {\n    return icon.name === type;\n  }) || { unicode: '', name: 'default' };\n  return matchIcon.unicode;\n};\n",paraId:17,tocIndex:7},{value:" {\n    type: 'text',\n    attrs: {\n        id: 'node-icon',\n        x: 0,\n        y: 0,\n        fontSize: iconSize,\n        fill: primaryColor,\n        text: getIcon('logo'), //logo is the name of the unicode\n        fontFamily: 'iconfont', // same as font-family: \"iconfont\"; in CSS\n        textAlign: 'center',\n        textBaseline: 'middle',\n    },\n  }\n",paraId:18,tocIndex:8}]},45240:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"In this chapter, we will introduce the interactions in G6 by adding nodes and edges. You nee to be familiar with the following before reading this chapter:",paraId:0},{value:"Custom Behavior",paraId:1},{value:";",paraId:2},{value:"Mode",paraId:3},{value:".",paraId:2},{value:"The final result in shown above. The complete code: ",paraId:4},{value:"Adding Items",paraId:4},{value:"There are three mode options in the drop-down menu on the upper left.",paraId:4},{value:'Switch to the default interactive mode when the "Default" button is selected: The dragged node will move with the mouse; The node will be selected by clicking;',paraId:5},{value:'Switch to the addNode interactive mode when the "Add Node" button is selected: Add a node by clicking canvas; Select a node by clicking node;',paraId:5},{value:'Switch to the addEdge interactive mode when the "Add Edge" button is selected: Add an edge by clicking the end nodes in order.',paraId:5},{value:"The reason for using multiple modes:",paraId:6},{value:" The same mouse operation has different meanings in different scenarios. For example:",paraId:6},{value:"Canceling the selected state by clicking the canvas V.S. Adding new node on the clicked position on the canvas. Both these two requirements are binded to the event of clicking the canvas;",paraId:7},{value:"Selecting a node by clicking it V.S. Adding an edge by clicking two end nodes. Both these two requirements are binded to the event of clicking the node.",paraId:7},{value:"To distinguish the meanings of these operations, we utilize the interaction modes on a graph for different scenarios .",paraId:8},{value:"Here goes the basic HTML code for this chapter. We will add new codes incrementally to enable new functions. This prerequisite code defines the drop-down menu and the source ",paraId:9,tocIndex:0},{value:"data",paraId:9,tocIndex:0},{value:".",paraId:9,tocIndex:0},{value:'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <title>Interactively Add</title>\n  </head>\n  <body>\n    \x3c!-- The drop-down menu on the upper left --\x3e\n    <select id="selector">\n      <option value="default">Default</option>\n      <option value="addNode">Add Node</option>\n      <option value="addEdge">Add Edge</option>\n    </select>\n    <div id="mountNode"></div>\n    <script src="https://gw.alipayobjects.com/os/lib/antv/g6/4.3.11/dist/g6.min.js"><\/script>\n    <script>\n      // Source data\n      const data = {\n        nodes: [\n          {\n            id: \'node1\',\n            x: 100,\n            y: 200,\n          },\n          {\n            id: \'node2\',\n            x: 300,\n            y: 200,\n          },\n          {\n            id: \'node3\',\n            x: 300,\n            y: 300,\n          },\n        ],\n        edges: [\n          {\n            id: \'edge1\',\n            target: \'node2\',\n            source: \'node1\',\n          },\n        ],\n      };\n    <\/script>\n  </body>\n</html>\n',paraId:10,tocIndex:0},{value:"The following code instantiates the Graph, and configure the interaction ",paraId:11,tocIndex:1},{value:"modes",paraId:11,tocIndex:1},{value:", including ",paraId:11,tocIndex:1},{value:"default",paraId:11,tocIndex:1},{value:" Mode, ",paraId:11,tocIndex:1},{value:"addNode",paraId:11,tocIndex:1},{value:" Mode, and ",paraId:11,tocIndex:1},{value:"addEdge",paraId:11,tocIndex:1},{value:" Mode. There are several interaction Behaviors inside each Mode, where ",paraId:11,tocIndex:1},{value:"'drag-node'",paraId:11,tocIndex:1},{value:" and ",paraId:11,tocIndex:1},{value:"'click-select'",paraId:11,tocIndex:1},{value:" are the built-in Behaviors of G6. ",paraId:11,tocIndex:1},{value:"'click-add-node'",paraId:11,tocIndex:1},{value:" and ",paraId:11,tocIndex:1},{value:"'click-add-edge'",paraId:11,tocIndex:1},{value:" are the custom Behavior to be defined.",paraId:11,tocIndex:1},{value:"// const data = ...\nconst graph = new G6.Graph({\n  container: 'mountNode',\n  width: 500,\n  height: 500,\n  // The set of interaction Modes\n  modes: {\n    // Default mode\n    default: ['drag-node', 'click-select'],\n    // The Mode of adding nodes\n    addNode: ['click-add-node', 'click-select'],\n    // The Mode of adding edges\n    addEdge: ['click-add-edge', 'click-select'],\n  },\n  // The node styles in different states\n  nodeStateStyles: {\n    // The node styles in selected state, corresponds to the built-in click-select behavior\n    selected: {\n      stroke: '#666',\n      lineWidth: 2,\n      fill: 'steelblue'\n    }\n});\n\ngraph.data(data);\ngraph.render();\n\n// Listen to the change of the drop-down menu to swith the interaction Mode\ndocument.getElementById('selector').addEventListener('change', e => {\n  const value = e.target.value;\n  // Switch the interaction Mode\n  graph.setMode(value);\n});\n",paraId:12,tocIndex:1},{value:"When user select the 'Add Node' button in the menu, the Mode will be switched to the addNode, which includes two Behaviors: ",paraId:13,tocIndex:2},{value:"'click-add-node'",paraId:13,tocIndex:2},{value:" and ",paraId:13,tocIndex:2},{value:"'click-select'",paraId:13,tocIndex:2},{value:". The ",paraId:13,tocIndex:2},{value:"'click-add-node'",paraId:13,tocIndex:2},{value:" is registered by ",paraId:13,tocIndex:2},{value:"G6.registerBehavior",paraId:13,tocIndex:2},{value:". P.S. the name of ",paraId:13,tocIndex:2},{value:"'click-add-node'",paraId:13,tocIndex:2},{value:" can be assigned to any one you like.",paraId:13,tocIndex:2},{value:"// The count of the added nodes, it will be used to generate unique id for added node\nlet addedNodeCount = 0;\n// Register the custom Behavior of adding a node by clicking\nG6.registerBehavior('click-add-node', {\n  // Bind the events and response functions for this custom Behavior\n  getEvents() {\n    return {\n      'canvas:click': 'onClick', // The event to be listned is canvas:click. The response function is onClick\n    };\n  },\n  // The click event\n  onClick(ev) {\n    const graph = this.graph;\n    // Add a new node on the canvas\n    const node = this.graph.addItem('node', {\n      x: ev.canvasX,\n      y: ev.canvasY,\n      id: `node-${addedNodeCount}`, // Generate a unique id\n    });\n    addedNodeCount++;\n  },\n});\n",paraId:14,tocIndex:2},{value:"To add an edge between two end nodes, the users need to switch to the ",paraId:15,tocIndex:3},{value:"addEdge",paraId:15,tocIndex:3},{value:" Mode, which includes two behaviors: ",paraId:15,tocIndex:3},{value:"'click-add-edge'",paraId:15,tocIndex:3},{value:" and ",paraId:15,tocIndex:3},{value:"'click-select'",paraId:15,tocIndex:3},{value:". The ",paraId:15,tocIndex:3},{value:"'click-add-edge'",paraId:15,tocIndex:3},{value:" is registered by ",paraId:15,tocIndex:3},{value:"G6.registerBehavior",paraId:15,tocIndex:3},{value:". P.S. the name of ",paraId:15,tocIndex:3},{value:"'click-add-edge'",paraId:15,tocIndex:3},{value:" can be assigned to any one you like.",paraId:15,tocIndex:3},{value:"// Register the custom Behavior of adding a edge by clicking\nG6.registerBehavior('click-add-edge', {\n  // Bind the events and response functions for this custom Behavior\n  getEvents() {\n    return {\n      'node:click': 'onClick', // The event to be listned is node:click. The response function is onClick\n      mousemove: 'onMousemove', // The event to be listned is mousemove. The response function is onMousemove\n      'edge:click': 'onEdgeClick', // The event to be listned is edge:click. The response function is onEdgeClick\n    };\n  },\n  // The response function for 'node:click' defined in getEvents\n  onClick(ev) {\n    const node = ev.item;\n    const graph = this.graph;\n    // The position of the node where the mouse is currently clicking on\n    const point = { x: ev.x, y: ev.y };\n    const model = node.getModel();\n    if (this.addingEdge && this.edge) {\n      graph.updateItem(this.edge, {\n        target: model.id,\n      });\n\n      this.edge = null;\n      this.addingEdge = false;\n    } else {\n      // Add a new edge to the graph with the currently clicked node's position as the end point\n      this.edge = graph.addItem('edge', {\n        source: model.id,\n        target: point,\n      });\n      this.addingEdge = true;\n    }\n  },\n  // The response function for mousemove defined in getEvents\n  onMousemove(ev) {\n    // The current position of the mouse\n    const point = { x: ev.x, y: ev.y };\n    if (this.addingEdge && this.edge) {\n      // Update the end point of the edge to be the current position of the mouse\n      this.graph.updateItem(this.edge, {\n        target: point,\n      });\n    }\n  },\n  // The response function for 'edge:click' defined in getEvents\n  onEdgeClick(ev) {\n    const currentEdge = ev.item;\n    // The click event while dragging\n    if (this.addingEdge && this.edge == currentEdge) {\n      graph.removeItem(this.edge);\n      this.edge = null;\n      this.addingEdge = false;\n    }\n  },\n});\n",paraId:16,tocIndex:3},{value:"Adding Items",paraId:17,tocIndex:4},{value:".",paraId:17,tocIndex:4}]},50488:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"⚠️ Attention:",paraId:0},{value:" State with multiple values, mutually exclusive state, updating styles for sub shapes are supported after V3.4.",paraId:0},{value:"State of item (Node/Edge) build the fast relationships between 「interactions/data changes」 and 「changes of item styles」.",paraId:1,tocIndex:0},{value:"e.g.: the 'hover' state of a node is activated when the mouse enters the node, and the style of the node is changed to response the interaction; 'hover' state is inactivated when the mouse leave the node, and the style of the node is resumed.",paraId:2,tocIndex:0},{value:"In actual scene, state has lots of implicity recommand and complexity.",paraId:3,tocIndex:0},{value:"Configure the target state quickly",paraId:4,tocIndex:1},{value:": Assign a new state and clear all the existing states on a node;",paraId:4,tocIndex:1},{value:"State with multiple values",paraId:4,tocIndex:1},{value:": e.g. the 'bodyState' of a node representing a person has four values 'healthy', 'suspect', 'ill', and 'dead';",paraId:4,tocIndex:1},{value:"Mutually exclusive state",paraId:4,tocIndex:1},{value:": e.g. 'healthy', 'suspect', 'ill', and 'dead' for 'bodyState' are mutually exclusive to each other, any two of them will not exist on a person in the same time;",paraId:4,tocIndex:1},{value:"Update the styles for all the sub shapes on a node or an edge",paraId:4,tocIndex:1},{value:": e.g. a node consist of a rect, a text and a icon image. When the state of the node is chagned, styles of all the shapes can be changed to response it; Modify the state configurations: modify the style configurations for a state easily.",paraId:4,tocIndex:1},{value:"To address the issues above, we have the following functions for states in G6 3.4:",paraId:5,tocIndex:2},{value:"Define a state with unified method;",paraId:6,tocIndex:2},{value:"Set state value with ",paraId:6,tocIndex:2},{value:"setItemState",paraId:6,tocIndex:2},{value:" function;",paraId:6,tocIndex:2},{value:"Update state value with ",paraId:6,tocIndex:2},{value:"updateItem",paraId:6,tocIndex:2},{value:" function;",paraId:6,tocIndex:2},{value:"Cancel state with ",paraId:6,tocIndex:2},{value:"clearItemStates",paraId:6,tocIndex:2},{value:" function.",paraId:6,tocIndex:2},{value:"The global state in G6 is defined by ",paraId:7,tocIndex:4},{value:"nodeStateStyles",paraId:7,tocIndex:4},{value:" and ",paraId:7,tocIndex:4},{value:"edgeStateStyles",paraId:7,tocIndex:4},{value:" on the graph instance.",paraId:7,tocIndex:4},{value:"const graph = new G6.Graph({\n  container,\n  width,\n  height,\n  nodeStateStyles: {\n    hover: {\n      fill: 'red',\n      'keyShape-name': {\n        fill: 'red',\n      },\n    },\n  },\n  edgeStateStyles: {},\n});\n",paraId:8,tocIndex:4},{value:"The state style of ",paraId:9,tocIndex:4},{value:"keyShape",paraId:10,tocIndex:4},{value:" can be defined in ",paraId:9,tocIndex:4},{value:"nodeStateStyles",paraId:9,tocIndex:4},{value:" or ",paraId:9,tocIndex:4},{value:"edgeStateStyles",paraId:9,tocIndex:4},{value:" directly. You can also define the styles in the object with the key equals to the ",paraId:9,tocIndex:4},{value:"name",paraId:9,tocIndex:4},{value:" of the keyShape.",paraId:9,tocIndex:4},{value:"Expect set the global styles for items(nodes/edges), you can also define different styles for different items by assgin ",paraId:11,tocIndex:5},{value:"stateStyles",paraId:11,tocIndex:5},{value:" in ",paraId:11,tocIndex:5},{value:"graph.node(fn)",paraId:11,tocIndex:5},{value:" / ",paraId:11,tocIndex:5},{value:"graph.edge(fn)",paraId:11,tocIndex:5},{value:" function.",paraId:11,tocIndex:5},{value:"graph.node((node) => {\n  return {\n    ...node,\n    stateStyles: {},\n  };\n});\n\nconst data = {\n  nodes: [\n    {\n      id: 'node',\n      stateStyles: {},\n    },\n  ],\n};\n",paraId:12,tocIndex:5},{value:"On the ascpect of drawing, an item(node/edge) has a graphics group, which contains a keyShape and several sub-shapes. Before V3.4, state styles are only available on keyShape, which means users need to define state styles for other sub shapes in ",paraId:13,tocIndex:6},{value:"setState",paraId:13,tocIndex:6},{value:" function when custom a node or an item type.",paraId:13,tocIndex:6},{value:"G6 3.4 supports state styles for sub shapes. They can also be defined by two ways as ",paraId:14,tocIndex:6},{value:"Global State",paraId:15,tocIndex:6},{value:" and State for ",paraId:14,tocIndex:6},{value:"Single Node/Edge",paraId:16,tocIndex:6},{value:". Now we show how to define the global state styles for sub shapes as an example.",paraId:14,tocIndex:6},{value:"const graph = new G6.Graph({\n  container,\n  width,\n  height,\n  nodeStateStyles: {\n    selected: {\n      'sub-element': {\n        fill: 'green',\n      },\n      'text-element': {\n        stroke: 'red',\n      },\n    },\n  },\n  edgeStateStyles: {},\n});\n",paraId:17,tocIndex:6},{value:"In ",paraId:18,tocIndex:6},{value:"Global State",paraId:19,tocIndex:6},{value:", we recommand define the keyShape's state styles by an object with key equals to the ",paraId:18,tocIndex:6},{value:"name",paraId:18,tocIndex:6},{value:" of the keyShape. Similary, you can define the state styles for any sub shape with an object with key equals to its ",paraId:18,tocIndex:6},{value:"name",paraId:18,tocIndex:6},{value:".",paraId:18,tocIndex:6},{value:"As the shown in the above code, we define the state styles for two sub shapes with ",paraId:20,tocIndex:6},{value:"name",paraId:20,tocIndex:6},{value:"s ",paraId:20,tocIndex:6},{value:"'sub-element'",paraId:20,tocIndex:6},{value:" and ",paraId:20,tocIndex:6},{value:"'text-element'",paraId:20,tocIndex:6},{value:" respectively. When we set the state for an item by calling ",paraId:20,tocIndex:6},{value:"graph.setItemState(item, 'selected', true)",paraId:20,tocIndex:6},{value:", the styles of the sub shapes named ",paraId:20,tocIndex:6},{value:"'sub-element'",paraId:20,tocIndex:6},{value:" and ",paraId:20,tocIndex:6},{value:"'text-element'",paraId:20,tocIndex:6},{value:" will be updated as well.",paraId:20,tocIndex:6},{value:"// Calling the following code, the styles of sub-element and text-element will be changed\ngraph.setItemState(item, 'selected', true);\n",paraId:21,tocIndex:6},{value:"Besides, G6 also supports ",paraId:22,tocIndex:6},{value:"updateItem",paraId:22,tocIndex:6},{value:" function to update the state styles for an item.",paraId:22,tocIndex:6},{value:"⚠️ NOTICE: ",paraId:23,tocIndex:6},{value:"The state styles for sub-shapes are only available for the sub-shapes which are the chilren of the root graphics group of a node/edge, but not other descendant shapes grouped by nested sub-graphics-groups. The sub-shapes in the built-in nodes/edges are all the children of the root graphics group of a node/edge. If you are customizing a node/edge type, this rule should be noticed.",paraId:24,tocIndex:6},{value:"G6 V3.4 supports state with multiple values and binary values:",paraId:25,tocIndex:7},{value:"Binary: the value can be ",paraId:26,tocIndex:7},{value:"true",paraId:26,tocIndex:7},{value:" or ",paraId:26,tocIndex:7},{value:"false",paraId:26,tocIndex:7},{value:", means the state is activated or inactivated respectivly; Multiple value: e.g. a node represents a person with 'bodyState', which has four values: 'healthy', 'suspect', 'ill', 'dead'.",paraId:26,tocIndex:7},{value:"Binary state is commonly used in interactions, e.g. hover, selected, etc. When a node is selected, the selected state is activated with true value; the selected state is inactivated with false when the node is deselected.",paraId:27,tocIndex:8},{value:"Set the binary state by calling ",paraId:28,tocIndex:8},{value:"graph.setItemState(item, 'selected', true)",paraId:28,tocIndex:8},{value:".",paraId:28,tocIndex:8},{value:"const graph = new G6.Graph({\n  //...\n  nodeStateStyles: {\n    selected: {\n      fill: 'red',\n    },\n  },\n});\n\ngraph.setItemState(item, 'selected', true);\n",paraId:29,tocIndex:8},{value:"State with multiple values exists in complex actual cases, e.g. the 'bodyState' of a node representing a person has four values 'healthy', 'suspect', 'ill', and 'dead'. The binary state can not satisfy such situation.",paraId:30,tocIndex:9},{value:"const graph = new Graph({\n  // ... Other configurations\n  // The state styles in different states\n  nodeStateStyles: {\n    // bodyState with multiple values and matually exclusive\n    'bodyState:healthy': {\n      // the state styles for the keyShape\n      fill: 'green',\n    },\n    'bodyState:suspect': {},\n    'bodyState:ill': {},\n  },\n});\n\ngraph.setItemState(item, 'bodyState', 'healthy');\n",paraId:31,tocIndex:9},{value:"State with multiple values also solves the matually exclusive problem. We now use the same example as above, ",paraId:32,tocIndex:10},{value:"bodyState",paraId:32,tocIndex:10},{value:" has four values: ",paraId:32,tocIndex:10},{value:"healthy",paraId:32,tocIndex:10},{value:", ",paraId:32,tocIndex:10},{value:"suspect",paraId:32,tocIndex:10},{value:", ",paraId:32,tocIndex:10},{value:"ill",paraId:32,tocIndex:10},{value:", ",paraId:32,tocIndex:10},{value:"dead",paraId:32,tocIndex:10},{value:".",paraId:32,tocIndex:10},{value:"// Matually exclusive state\ngraph.setItemState(item, 'bodyState', 'healthy');\n// Call the following code, the value of bodyState will be changed to dead，\n// and item.hasState('bodyState:healthy') will return false\ngraph.setItemState(item, 'bodyState', 'dead');\n",paraId:33,tocIndex:10},{value:"After calling the code above, the value of the item's ",paraId:34,tocIndex:10},{value:"bodyState",paraId:34,tocIndex:10},{value:" is ",paraId:34,tocIndex:10},{value:"dead",paraId:34,tocIndex:10},{value:".",paraId:34,tocIndex:10},{value:"Before V3.3, G6 does not support modification on the configurations for state styles. And ",paraId:35,tocIndex:11},{value:"updateItem",paraId:35,tocIndex:11},{value:" can only be used to update the default style for keyShape. With V3.4, ",paraId:35,tocIndex:11},{value:"updateItem",paraId:35,tocIndex:11},{value:" supports updating the default styles and state styles for keyShape and other sub shapes.",paraId:35,tocIndex:11},{value:"You can update the default styles for keyShape and sub shapes by assigning the object with the key equals the ",paraId:36,tocIndex:12},{value:"name",paraId:36,tocIndex:12},{value:" of the sub shape in ",paraId:36,tocIndex:12},{value:"style",paraId:36,tocIndex:12},{value:" of the ",paraId:36,tocIndex:12},{value:"updateItem",paraId:36,tocIndex:12},{value:"'s second parameter.",paraId:36,tocIndex:12},{value:"// Update item with the default style of keyShape and other sub shapes\ngraph.updateItem(item, {\n  style: {\n    // for keyShape's fill, stroke, and opacity\n    fill: 'green',\n    stroke: 'green',\n    opacity: 0.5,\n    // the styles for the sub shape named 'node-text'\n    'node-text': {\n      stroke: 'yellow',\n    },\n  },\n});\n",paraId:37,tocIndex:12},{value:"updateItem",paraId:38,tocIndex:13},{value:" also can be used to update the state styles for keyShape and sub shapes with ",paraId:38,tocIndex:13},{value:"stateStyles",paraId:38,tocIndex:13},{value:".",paraId:38,tocIndex:13},{value:"graph.updateItem(item, {\n  style: {\n    stroke: 'green',\n    'node-text': {\n      stroke: 'yellow',\n    },\n  },\n  stateStyles: {\n    hover: {\n      opacity: 0.1,\n      'node-text': {\n        stroke: 'blue',\n      },\n    },\n  },\n});\ngraph.setItemState(item, 'hover', true);\n",paraId:39,tocIndex:13},{value:"There might be two situations when calling ",paraId:40,tocIndex:13},{value:"updateItem",paraId:40,tocIndex:13},{value:":",paraId:40,tocIndex:13},{value:"The state style to be updated is already activated on an item, ",paraId:41,tocIndex:13},{value:"item.hasState('hover') === true",paraId:41,tocIndex:13},{value:": the style will be changed immediately after calling ",paraId:41,tocIndex:13},{value:"updateItem",paraId:41,tocIndex:13},{value:";",paraId:41,tocIndex:13},{value:"The state style to be updated is not active on an item, ",paraId:41,tocIndex:13},{value:"item.hasState('hover') === false",paraId:41,tocIndex:13},{value:": The style will be changed after calling ",paraId:41,tocIndex:13},{value:"graph.setItemState(item, 'hover', true)",paraId:41,tocIndex:13},{value:".",paraId:41,tocIndex:13},{value:"graph.clearItemStates",paraId:42,tocIndex:14},{value:" can be used to cancel one or more states set by ",paraId:42,tocIndex:14},{value:"graph.setItemState",paraId:42,tocIndex:14},{value:".",paraId:42,tocIndex:14},{value:"graph.setItemState(item, 'bodyState', 'healthy');\ngraph.setItemState(item, 'selected', true);\ngraph.setItemState(item, 'active', true);\n\n// Cancel a single state\ngraph.clearItemStates(item, 'selected');\ngraph.clearItemStates(item, ['selected']);\n\n// Cancel multiple states\ngraph.clearItemStates(item, ['bodyState:healthy', 'selected', 'active']);\n",paraId:43,tocIndex:14},{value:"G6 does not explicitly provide the state priority mechanism. But the ",paraId:44,tocIndex:15},{value:"hasState",paraId:44,tocIndex:15},{value:" function which is used to get the value of a state, helps users to control the priority by themselves. e.g.:",paraId:44,tocIndex:15},{value:"// Activate the 'active' state of the item to be true\ngraph.setItemState(item, 'active', true);\n\n// returns the value of 'active' state\nconst hasActived = item.hasState('active');\n\n// If the value of 'active' state is false, the 'hover' state can be set to true\nif (!hasActived) {\n  graph.setItemState(item, 'hover', true);\n}\n",paraId:45,tocIndex:15}]},40084:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Most graphs are visualized as node-link diagram, which is appropriate for traffic network with geographical information on nodes, e.g. migration graph and ariline network.",paraId:0,tocIndex:0},{value:" ",paraId:0,tocIndex:0},{value:" ",paraId:0,tocIndex:0},{value:"(Left) Figure 1. The airlines of France. (Right) Figure 2. The airlines of United States.",paraId:1,tocIndex:0},{value:"(Left) Figure 3. The world IXP peering network. (Right) Figure 4. The American immigration network.",paraId:2,tocIndex:0},{value:"Though the node-link diagram is intuitive, the severe visual clutter problem still exists when the graph has large amount of data. The visual clutter of the node-link diagram mostly moes from the edge crossings and congestion. As shown in Figure 1~4, in the traffic networks, the positions of the node often have well-defined geographical meanings, which means the node positions are usually non-editable for reducing the visual clutter. Lots of research works focus on the methods to improve the visual clustter on edges, where the Edge Bundling is a widely used way to achieve it. The researches about edge bundlings are summarized 「",paraId:3,tocIndex:1},{value:"HERE",paraId:3,tocIndex:1},{value:"」.",paraId:3,tocIndex:1},{value:"Here goes a example with complicated American flights data, where the nodes represent the cities with latitute and longitute; the edges represent the flights:",paraId:4,tocIndex:1},{value:'{\n  "nodes": [\n    {\n      "x": -922.24444,\n      "y": 347.29444,\n      "id": "0",\n      "lon": -92.224444,\n      "lat": 34.729444\n    },\n    {\n      "x": -922.24444,\n      "y": 347.29444,\n      "id": "1",\n      "lon": -92.224444,\n      "lat": 34.729444\n    }\n    // ... Other nodes\n  ],\n  "edges": [\n    {\n      "source": "0",\n      "target": "21",\n      "id": "e0"\n    },\n    {\n      "source": "2",\n      "target": "13",\n      "id": "e1"\n    }\n    // ... Other edges\n  ]\n}\n',paraId:5,tocIndex:1},{value:"Render the nodes and edges by G6 directly, we will obtain the result: ",paraId:6,tocIndex:1},{value:" ",paraId:6,tocIndex:1},{value:"Figure 5. Render the source data by G6.",paraId:7,tocIndex:1},{value:"Figure 5 shows the result with chaotic crossings which is hard for users to figure out the details and global trends.",paraId:8,tocIndex:1},{value:"We wish to improve the visual clutter of Figure 5 by edge bundling to show the global trends and structures and highlight the important cities with many flights. These cities might be the important traffic pivots. We also try to illustrate some statistical informations for analysis. Powered by G6, we are able to achive the result with: Bundling the edges, Mapping the edge directions to gradient colors(departure-orange, arrival-cyan) of the edge; Mapping the total number of flights about the cities to the size of the node; Adding interactions of hover; Utilizing the tooltip to show the longitute and latitute.",paraId:9,tocIndex:2},{value:"The expected effect and the tooltip.",paraId:10,tocIndex:2},{value:"First, we count the total degrees of each node based on the data by simple JavaScript code. The ",paraId:11,tocIndex:4},{value:"degree",paraId:11,tocIndex:4},{value:" of a node indicates the total number of the flights arriving and leaving the city; The ",paraId:11,tocIndex:4},{value:"outDegree",paraId:11,tocIndex:4},{value:" indicates the leaving flights; The ",paraId:11,tocIndex:4},{value:"inDegree",paraId:11,tocIndex:4},{value:" indicates the arriving flights.",paraId:11,tocIndex:4},{value:"const nodes = data.nodes;\nconst edges = data.edges;\nnodes.forEach((n) => {\n  n.y = -n.y;\n  n.degree = 0;\n  n.inDegree = 0;\n  n.outDegree = 0;\n});\n// Compute the degree of each node\nconst nodeIdMap = new Map();\nnodes.forEach((node) => {\n  nodeIdMap.set(node.id, node);\n});\nedges.forEach((e) => {\n  const source = nodeIdMap.get(e.source);\n  const target = nodeIdMap.get(e.target);\n  source.outDegree++;\n  target.inDegree++;\n  source.degree++;\n  target.degree++;\n});\nlet maxDegree = -9999,\n  minDegree = 9999;\nnodes.forEach((n) => {\n  if (maxDegree < n.degree) maxDegree = n.degree;\n  if (minDegree > n.degree) minDegree = n.degree;\n});\nconst sizeRange = [1, 20];\nconst degreeDataRange = [minDegree, maxDegree];\n// The range of the degree is degreeDataRange, now we map it onto sizeRange and write the 'size' into node data.\nscaleNodeProp(nodes, 'size', 'degree', degreeDataRange, sizeRange);\n",paraId:12,tocIndex:4},{value:"scaleNodeProp()",paraId:13,tocIndex:4},{value:" maps the node property ",paraId:13,tocIndex:4},{value:"refPropName",paraId:13,tocIndex:4},{value:" to another property ",paraId:13,tocIndex:4},{value:"propName",paraId:13,tocIndex:4},{value:" with the range ",paraId:13,tocIndex:4},{value:"outRange",paraId:13,tocIndex:4},{value:":",paraId:13,tocIndex:4},{value:"/**\n * Mapping properties\n * @param  {array} nodes          The array of nodes\n * @param  {string} propName      The name of the property to be writed\n * @param  {string} refPropName   The name of the property to be normalized\n * @param  {array} dataRange      The range of the property to be normalized, [min, max]\n * @param  {array} outRange       The arange of the property to be writed, [min, max]\n */\nfunction scaleNodeProp(nodes, propName, refPropName, dataRange, outRange) {\n  const outLength = outRange[1] - outRange[0];\n  const dataLength = dataRange[1] - dataRange[0];\n  nodes.forEach((n) => {\n    n[propName] = ((n[refPropName] - dataRange[0]) * outLength) / dataLength + outRange[0];\n  });\n}\n",paraId:14,tocIndex:4},{value:"Now, we have normalized the degrees onto the ",paraId:15,tocIndex:4},{value:"size",paraId:15,tocIndex:4},{value:"s of nodes.",paraId:15,tocIndex:4},{value:"The edge bunlding technique in G6 is implemented according to the paper FEDB (",paraId:16,tocIndex:5},{value:"Force-Directed Edge Bundling for Graph Visualization",paraId:16,tocIndex:5},{value:"). By tuning the configurations, you can adjust the bundling result easily.",paraId:16,tocIndex:5},{value:"const edgeBundling = new Bundling({\n  bundleThreshold: 0.6, // The tolerance of bundling. Lower number, the higher similarity of the bundled edges is required, the smaller number of edges to be bundled together.\n  K: 100, // The strength of the bundling\n});\n",paraId:17,tocIndex:5},{value:"In the first step, we have mapped the degrees of nodes onto their size. To demonstrate the ratio of leaving and arriving flights, we design a pie-chart node for each city. For example, ",paraId:18,tocIndex:6},{value:", the orange fan represents the number of arriving flights, and the cyan fan represents the number of leaving flights. The built-in nodes in G6 do not meet such requirement. Thus, we now register a custom node by the custom mechanism of G6:",paraId:18,tocIndex:6},{value:"const lightBlue = 'rgb(119, 243, 252)';\nconst lightOrange = 'rgb(230, 100, 64)';\n\n// Register a type of custom node named pie-node\nG6.registerNode(\n  'pie-node',\n  {\n    drawShape: (cfg, group) => {\n      const radius = cfg.size / 2; // The radius the of node\n      const inPercentage = cfg.inDegree / cfg.degree; // The percentage of the inDegree\n      const inAngle = inPercentage * Math.PI * 2; // The angle of the fan of inDegree\n      const outAngle = Math.PI * 2 - inAngle; // The angle of the fan of outDegree\n      const inArcEnd = [radius * Math.cos(inAngle), radius * Math.sin(inAngle)]; // The end point of the inDegree fan\n      let isInBigArc = 1,\n        isOutBigArc = 0;\n      if (inAngle > Math.PI) {\n        isInBigArc = 0;\n        isOutBigArc = 1;\n      }\n      // The inDegree fan\n      const fanIn = group.addShape('path', {\n        attrs: {\n          path: [\n            ['M', radius, 0],\n            ['A', radius, radius, 0, isInBigArc, 0, inArcEnd[0], inArcEnd[1]],\n            ['L', 0, 0],\n            ['B'],\n          ],\n          lineWidth: 0,\n          fill: lightOrange,\n        },\n        // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n        name: 'in-fan-shape',\n      });\n      // The outDegree fan\n      const fanOut = group.addShape('path', {\n        attrs: {\n          path: [\n            ['M', inArcEnd[0], inArcEnd[1]],\n            ['A', radius, radius, 0, isOutBigArc, 0, radius, 0],\n            ['L', 0, 0],\n            ['B'],\n          ],\n          lineWidth: 0,\n          fill: lightBlue,\n        },\n        // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n        name: 'out-fan-shape',\n      });\n      // return the keyshape\n      return fanIn;\n    },\n  },\n  'single-node',\n);\n",paraId:19,tocIndex:6},{value:"The code above registers a 'pie-node' type node.",paraId:20,tocIndex:6},{value:"Now, we are going to register a graph and assign the Edge Bundling plugin, node type ('pie-node'), and item styles for it.",paraId:21,tocIndex:7},{value:"const edgeBundling = new Bundling({\n  bundleThreshold: 0.6, // The tolerance of bundling. Lower number, the higher similarity of the bundled edges is required, the smaller number of edges to be bundled together.\n  K: 100, // The strength of the bundling\n});\nconst graph = new G6.Graph({\n  container: 'mountNode',\n  width: 1000,\n  height: 800,\n  plugins: [edgeBundling], // Add the plugin\n  fitView: true,\n  defaultNode: {\n    size: 3,\n    color: 'steelblue',\n    fill: 'steelblue',\n  },\n  nodeStyle: {\n    default: {\n      lineWidth: 0,\n      fill: 'steelblue',\n    },\n  },\n  edgeStyle: {\n    default: {\n      lineWidth: 0.7,\n      strokeOpacity: 0.1, // The opacity of the edge. The transparency of the gathered edges will be superimposed, which has the effect of highlighting high-density areas\n      stroke: 'l(0) 0:' + llightBlue16 + ' 1:' + llightOrange16,\n    },\n  },\n});\n",paraId:22,tocIndex:7},{value:"The edge begin with ",paraId:23,tocIndex:7},{value:"llightBlue16",paraId:23,tocIndex:7},{value:" color and end with ",paraId:23,tocIndex:7},{value:"llightOrange16",paraId:23,tocIndex:7},{value:" color:",paraId:23,tocIndex:7},{value:"const llightBlue16 = '#C8FDFC';\nconst llightOrange16 = '#FFAA86';\n",paraId:24,tocIndex:7},{value:"Set the background of the body to be black to reach a better visual effect:",paraId:25,tocIndex:7},{value:"<style>\n  body {\n    background: rgb(0, 0, 0);\n  }\n</style>\n",paraId:26,tocIndex:7},{value:"The Graph and the Edge Bundling Plugin have been instantiated to ",paraId:27,tocIndex:8},{value:"graph",paraId:27,tocIndex:8},{value:" and ",paraId:27,tocIndex:8},{value:"edgeBundling",paraId:27,tocIndex:8},{value:". The following code executes the bundling and load the data, render the graph:",paraId:27,tocIndex:8},{value:"edgeBundling.bundling(data); // Execute the bundling\ngraph.data(data);\ngraph.render();\n",paraId:28,tocIndex:8},{value:"Tooltip shows the detail information when the mouse hovers on a node. We first configure the style for the tooltip in HTML:",paraId:29,tocIndex:9},{value:"<style>\n  .g6-tooltip {\n    border: 1px solid #e2e2e2;\n    border-radius: 4px;\n    font-size: 12px;\n    color: #545454;\n    background-color: rgba(255, 255, 255, 0.9);\n    padding: 10px 8px;\n    box-shadow: rgb(174, 174, 174) 0px 0px 10px;\n  }\n</style>\n",paraId:30,tocIndex:9},{value:"Then, we add a configuration ",paraId:31,tocIndex:9},{value:"modes",paraId:31,tocIndex:9},{value:" onto the graph in the code about instantiating the Graph. As shown below, the ",paraId:31,tocIndex:9},{value:"drag-canvas",paraId:31,tocIndex:9},{value:", ",paraId:31,tocIndex:9},{value:"zoom-canvas",paraId:31,tocIndex:9},{value:", and ",paraId:31,tocIndex:9},{value:"tooltip",paraId:31,tocIndex:9},{value:" are activated. The content of the ",paraId:31,tocIndex:9},{value:"tooltip",paraId:31,tocIndex:9},{value:" is defined in ",paraId:31,tocIndex:9},{value:"formatText",paraId:31,tocIndex:9},{value:":",paraId:31,tocIndex:9},{value:" modes: {\n   default: [ 'drag-canvas', 'zoom-canvas', {\n     type: 'tooltip',\n     formatText(model) {\n       const text = 'Longitude: ' + model.lon + '\\n Latitude: ' + model.lat;\n       return text;\n     },\n     shouldUpdate: e => {\n       return true;\n     }\n   }]\n }\n",paraId:32,tocIndex:9},{value:"After these configurations, the ",paraId:33,tocIndex:9},{value:"tooltip",paraId:33,tocIndex:9},{value:" with longitude and latitude will show up when mouse hovers a node:",paraId:33,tocIndex:9},{value:" ",paraId:33,tocIndex:9},{value:"tooltip",paraId:34,tocIndex:9},{value:"In the same time, the canvas is draggable and zoomable: ",paraId:35,tocIndex:9},{value:" ",paraId:35,tocIndex:9},{value:"Drag and zoom the canvas",paraId:36,tocIndex:9},{value:"The final result. The size of the node indicates the total flights about the city. The pie node indicates the ratio of leaving flights and arriving flights (orange for arriving, cyan for leaving). The gradient color of an edge indicates its direction (cyan for start, orange for end).",paraId:37,tocIndex:10},{value:"Now, let's analyze the final result:",paraId:38,tocIndex:10},{value:"Large nodes are mainly concentrated in the east-central region. According to the positions, It can be speculated that these cities are: Atlanta, New York, Chicago, Houston, Kansas, etc. All these cities are important transportation hubs in the United States;",paraId:39,tocIndex:10},{value:"There are lots of orange edges in the east American, which means there are more arriving flights in east American;",paraId:39,tocIndex:10},{value:"In contrast, there are more leaving flights from western cities;",paraId:39,tocIndex:10},{value:"Flight directions are start from east and end in west overall;",paraId:39,tocIndex:10},{value:"The eastern flights are also denser and more frequent than the western ones;",paraId:39,tocIndex:10},{value:"There are more flights on the west coast from Seattle and Portland to Los Angeles.",paraId:39,tocIndex:10},{value:"The above findings can be easily explained: The eastern United States is the economic and political concentration region of the United States.",paraId:40,tocIndex:10}]},94638:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Social network is an important scenario of graph visualization. The relationships between people and people, people and organization are getting complicated. It is hard to meet the analyzing requirements by the classical methods. Therefore, graph visualization and analysis become important.",paraId:0,tocIndex:0},{value:"It is a graph analysis application powered by G6. It simulates a relation analysis scenario with mock data, and demonstrates the analyzing abilities of G6:",paraId:1,tocIndex:1},{value:"Expand the Relationships;",paraId:2,tocIndex:1},{value:"Relationship Prediction;",paraId:2,tocIndex:1},{value:"Relationship Clustering;",paraId:2,tocIndex:1},{value:"Circle Detection;",paraId:2,tocIndex:1},{value:"Circle Query;",paraId:2,tocIndex:1},{value:"Efficient Analysis:\n",paraId:2,tocIndex:1},{value:"Data Filtering;",paraId:3,tocIndex:1},{value:"Mark the Node and Edge;",paraId:3,tocIndex:1},{value:"Hide / Show Node;",paraId:3,tocIndex:1},{value:"Hide / Show Label.",paraId:3,tocIndex:1},{value:"Users can query a person by inputing some keywords into the syste, and then do some analysis by expanding the 1-6 degree relationships of the person. The relationships between the person and other organizations can be obtained too.",paraId:4,tocIndex:2},{value:"Applicable Scene:",paraId:5,tocIndex:2},{value:" The 1-degree relationships indicate the friends of one person in the social network, 2-degree relationships indicate the friends' friend of the person.",paraId:5,tocIndex:2},{value:"The types of relationships are various in social network with large data. For example, we suppose that we know that A is a friend of B. We do not know whether C and D belong to og too; How will the graph transform if we add C and D onto the current graph; How will the graph transform if we add a 'prediction' type edge to C and D. Relationship prediction helps us to explore the unknown information.",paraId:6,tocIndex:3},{value:"Applicable Scene:",paraId:7,tocIndex:3},{value:" In social network, we want to know how the graph transform when there is a new connection added to two unrelated nodes.",paraId:7,tocIndex:3},{value:"There might be multiple 'colleague' type relationships betwenn node A and B, e.g. A and B are colleague in company1 and company2. These two 'colleague' relationships have different timestamp. We do not render all the similar relationships onto the graph, but render a clustered edge which can be expanded by clicking.",paraId:8,tocIndex:4},{value:"Applicable Scene:",paraId:9,tocIndex:4},{value:" Cluster relationships with same type into one edge to reduce the visual clutter.",paraId:9,tocIndex:4},{value:"Suppose that we know a circle of friends: A is a friend of B, B is a friend of C, C is a friend of A. Now we want to figure out if D and E are related to the known circle. Input D and E into circle detection, D and E will show up if they are related to the circle.",paraId:10,tocIndex:5},{value:"Applicable Scene:",paraId:11,tocIndex:5},{value:" Detect the existence and relationships of a node in a known circle.",paraId:11,tocIndex:5},{value:"For the known circles, we are able to query to nodes and relationships about them.",paraId:12,tocIndex:6},{value:"Applicable Scene:",paraId:13,tocIndex:6},{value:" Query the person and relationships in the circles of friends.",paraId:13,tocIndex:6},{value:"To improve the efficiency of analyzing, we provides data filtering, node/edge marking, node/edge hiding/showing, label hiding/showing, etc.",paraId:14,tocIndex:7},{value:"It is hard for users to explore a graph with large amount of nodes and edges. By utilizing data filtering, the unconcerned items will be hided.",paraId:15,tocIndex:8},{value:"Marking the important nodes and edges helps users analyze the information about the focus items.",paraId:16,tocIndex:9},{value:"This function is appropriate for the exploration on complex network.",paraId:17,tocIndex:9},{value:"During the analysis process, we can selectively hide unimportant nodes and their related edges, so that we can focus on the important nodes. When the analysis is completed, we can choose to display all hidden items.",paraId:18,tocIndex:10},{value:"When the number of edges is particularly large, the labels on the edges overlap each other, affecting our further analysis. At this point, you can choose to hide the labels on the edges.",paraId:19,tocIndex:11},{value:"This application uses simulated social network data as an example to demonstrate a graph analysis application powered by ",paraId:20,tocIndex:12},{value:"G6",paraId:20,tocIndex:12},{value:". In actual scenarios, it is not limited to social network data. Any relational data can be analyzed using graph analysis techniques, such as risk control, anti-money laundering, credit card fraud, and other business fields. ",paraId:20,tocIndex:12},{value:"G6",paraId:20,tocIndex:12},{value:" is an open source graph visualization engine that focuses on the demonstration and the analysis of relational data, and it is appropriate for building graph analysis applications.",paraId:20,tocIndex:12},{value:"Official website of G6: ",paraId:21,tocIndex:13},{value:"https://g6.antv.antgroup.com/",paraId:21,tocIndex:13},{value:" ",paraId:21,tocIndex:13},{value:"GitHub of G6: ",paraId:21,tocIndex:13},{value:"https://github.com/antvis/g6",paraId:21,tocIndex:13}]},51654:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"With the rapid development of Internet business, the business and application systems, middleware and their relationships and dependencies have become more and more complex. It is hard for the developers, testing personnel, architect, and maintenance personnel to control and maintain the super complex relationships between the applications and middleware. Once a problem occurs online, the entire process from the occurrence of a failure to the organization for emergency requires multiple parties to participate. They use multiple system tools and platforms to query and synchronize information. There are breaks between multiple stages of the process, the impact assessment and change retrospection take a long time, and the requirements for emergency personnel are relatively high. There is no efficient and systematic solution for the overall failure emergency response. For example, after receiving an online alarm, the impact area and source of change cannot be located quickly. It is difficult to make accurate decisions. And it is not possible to quickly minimize online failures.",paraId:0,tocIndex:0},{value:"Based on this background, we try to provide a set of emergency plan visualizations to solve a series of emergency decision-making assistance information and methods such as processes, influence areas, emergency plans, ..., to quickly stop bleeding to reduce and avoid failure upgrades.",paraId:1,tocIndex:0},{value:"The demonstration of emergency is the main view after users enter the emergency mode. It contains six features: ",paraId:2,tocIndex:2},{value:"1）Shows the node where the exception occurred on, the nodes that have a calling relationship with the abnormal node, and the calling relationship link; ",paraId:2,tocIndex:2},{value:"2）Shows the remark information about paths or nodes; ",paraId:2,tocIndex:2},{value:"3）The interaction abilities: show detail information when mouse hover or click a node; ",paraId:2,tocIndex:2},{value:"4）Combines with the left panel to display; ",paraId:2,tocIndex:2},{value:"5）Allows the menu of the node to be extended; ",paraId:2,tocIndex:2},{value:"6）Time series analysis: time bar with bar chart to show the error counts in different time slots, allows refreshing the graph by clicking a bar.",paraId:2,tocIndex:2},{value:"The affect area: The impact of each anomaly. On the one hand, it is a bussiness affect area if it happens on bussiness; On the other hand, it is a front-end affect area if it happens on the front-end; If it happens on the specific applications, it will be a application affect area. ",paraId:3,tocIndex:3},{value:"The affect area is shown in the left panel with the features: ",paraId:3,tocIndex:3},{value:"1）Open / close the affect area panel; ",paraId:3,tocIndex:3},{value:"2）Show the list of affect area; ",paraId:3,tocIndex:3},{value:"3）Swich to bussiness affect area / front-end affect area / application affect area; ",paraId:3,tocIndex:3},{value:"4）Show the affect trends; ",paraId:3,tocIndex:3},{value:"5）Show the list of logs; ",paraId:3,tocIndex:3},{value:"6）The information view is collapsible; ",paraId:3,tocIndex:3},{value:"7）Basic architecture dependencies.",paraId:3,tocIndex:3},{value:"The entrance of the operation panel is the detail link of the list of affect area. ",paraId:4,tocIndex:4},{value:"The operations include: ",paraId:4,tocIndex:4},{value:"1）Show and manipulate the summary information; ",paraId:4,tocIndex:4},{value:"2）The list of emergency assistances and operations with pop-up icons; ",paraId:4,tocIndex:4},{value:"3）Open / close the affect area panel; ",paraId:4,tocIndex:4},{value:"4）The information view is collapsible.",paraId:4,tocIndex:4},{value:"There are some extensions in the detail view of the app: ",paraId:5,tocIndex:5},{value:"1）Log demonstration; ",paraId:5,tocIndex:5},{value:"2）Emergency assistances.",paraId:5,tocIndex:5},{value:"Share links. The links have timestamps for going back to the abnormal place;",paraId:6,tocIndex:6},{value:"Be able to limit the flow;",paraId:6,tocIndex:6},{value:"Highlight the key words. Use regular to match some keywords and process the HTML text to be displayed.",paraId:6,tocIndex:6},{value:"The demonstration of emergency is an architecture graph with states, which aims to visualize and analyze the relationships between systems and showing the abnormal states for operation and maintenance. Users can find the abnormal nodes easily by viewing the demonstration of emergency. ",paraId:7,tocIndex:8},{value:"We provide two views for the demonstration of emergency: flow and path.",paraId:7,tocIndex:8},{value:"The flow view looks fantastic at first glance, but there are lots of redundant information in actual emergency works. It is not helpful for handling the key problem quickly. Therefore, we use the path view on the emergency workbench to show the graph more clearly. The core data of these two views are the same. The path view bundles the flow paths.",paraId:8,tocIndex:8},{value:"Actually, a graph can only map the state profile of the actual system at a moment. The problem does not occur instantaneously, but more like the undulating waters of a lake. To understand the state of the system at any time, we need to use the ability of timing analysis. It can be achieved by the time series analysis tool:",paraId:9,tocIndex:9},{value:" ",paraId:9,tocIndex:9},{value:"This tool has three levels of time control: minutes -> hour -> day. The user switches between different days through the date selection control, analyzes the 24-hour fluctuation trend through the time axis throughout the day, and selects the specific time period to determine the minute-level analysis to be performed. Finally, the analysis is performed by selecting the specific aspect.",paraId:10,tocIndex:9},{value:"The timing analysis module has added a time axis. By default, a bar chart of the total number of errors per hour in the last hour is displayed. Clicking the bar chart indicates that a certain time point is selected. After selection, all function request interfaces are triggered to refresh all functions.",paraId:11,tocIndex:9},{value:"After selecting a specific time point, all functions in the page need to be refreshed again. Therefore, the data model layer of the selection time is relatively global in this page module, and all submodules that need to be changed based on this data should listen to this data during the life cycle. The demonstration also needs to be updated after new data is requested. After handling the above details, our demonstration has a very powerful timing analysis capability.",paraId:11,tocIndex:9},{value:'From the perspective of experience, when we deal with emergency work, what we want to do most is that users do not rely on other applications, and can directly find the most fundamental cause of the problem on our demonstation. However, due to the limitations of the current graph visualization, all the information currently converges to a "node" color block, and the information that can be mapped is very limited. Therefore, a natural idea is to expand the node expression ability.',paraId:12,tocIndex:10},{value:"Thanks to G6's rendering capabilities, we can easily expand the expressions we want on the nodes. Through the following example, you can see that the node extension capability of G6 is very powerful.",paraId:12,tocIndex:10},{value:"The abilities after extend:",paraId:13,tocIndex:10},{value:"We achieve these features by G6:",paraId:14,tocIndex:10},{value:"With such a foundation, node styles are not limited to simple geometric shapes, but instead map representative information to nodes so that the shape of a node can roughly reflect the characteristics of a node at a glance. This is also meaningful in some scenarios where multiple nodes need to be compared.",paraId:15,tocIndex:10},{value:" ",paraId:15,tocIndex:10},{value:" In this emergency workbench, the error data within one hour is selected to expand the node information. The specific solution is to distribute these time series information on the circumference of the original node, and the size of the information value is mapped with a radial histogram.",paraId:15,tocIndex:10},{value:"\n  ",paraId:16},{value:"In general, the emergency workbench is deeply focused on business scenarios, providing complete functions, reasonable logic, and complete processes. There are many things that can be deepened in the future. For example, the extension of node information can be more abundant, and richer data properties can be mapped into the node shapes; The current layout is based on the hierarchical layout: Dagre, some complex paths are not clear enough; Although the current emergency workbench is based on the previous Nebula demonstration, it has discarded the 'location' information of nodes in the entire domain architecture. All these problems should be optimized continually in the future.",paraId:17,tocIndex:12},{value:"Code: ",paraId:18,tocIndex:13},{value:"https://github.com/scaletimes/g6-flow-demo",paraId:18,tocIndex:13},{value:" ",paraId:18,tocIndex:13},{value:"Official website of G6: ",paraId:18,tocIndex:13},{value:"https://g6.antv.antgroup.com/",paraId:18,tocIndex:13},{value:" ",paraId:18,tocIndex:13},{value:"GitHub of G6: ",paraId:18,tocIndex:13},{value:"https://github.com/antvis/g6",paraId:18,tocIndex:13}]},62346:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"There are two ways to import G6: by NPM; by CDN.",paraId:0,tocIndex:1},{value:"Step 1:",paraId:1,tocIndex:2},{value:" Run the following command under the your project's directory in terminal:",paraId:1,tocIndex:2},{value:" npm install --save @antv/g6\n",paraId:2,tocIndex:2},{value:"Step 2:",paraId:3,tocIndex:2},{value:" Import the JS file to the file where G6 is going to be used:",paraId:3,tocIndex:2},{value:"import G6 from '@antv/g6';\n",paraId:4,tocIndex:2},{value:'// version <= 3.2\n<script src="https://gw.alipayobjects.com/os/antv/pkg/_antv.g6-{$version}/build/g6.js"><\/script>\n\n// version >= 3.3\n<script src="https://gw.alipayobjects.com/os/lib/antv/g6/{$version}/dist/g6.min.js"><\/script>\n\n// version >= 4.0\n<script src="https://gw.alipayobjects.com/os/lib/antv/g6/4.3.11/dist/g6.min.js"><\/script>\n\n',paraId:5,tocIndex:3},{value:"⚠️Attention:",paraId:6,tocIndex:3},{value:"Replace ",paraId:7,tocIndex:3},{value:"{$version}",paraId:7,tocIndex:3},{value:" by the version number. e.g. ",paraId:7,tocIndex:3},{value:"3.7.1",paraId:7,tocIndex:3},{value:";",paraId:7,tocIndex:3},{value:"The last version and its number can be found on ",paraId:7,tocIndex:3},{value:"NPM",paraId:7,tocIndex:3},{value:";",paraId:7,tocIndex:3},{value:"Please refer to the branch in Github: ",paraId:7,tocIndex:3},{value:"https://github.com/antvis/g6/tree/master",paraId:7,tocIndex:3},{value:" for more detail.",paraId:7,tocIndex:3},{value:"The following steps lead to a Graph of G6:",paraId:8,tocIndex:4},{value:"Create an HTML container for graph;",paraId:9,tocIndex:4},{value:"Prepare the data;",paraId:9,tocIndex:4},{value:"Instancialize the Graph;",paraId:9,tocIndex:4},{value:"Load the data and render.",paraId:9,tocIndex:4},{value:"Create an HTML container for graph canvas, ",paraId:10,tocIndex:5},{value:"div",paraId:10,tocIndex:5},{value:" tag in general. G6 will append a ",paraId:10,tocIndex:5},{value:"canvas",paraId:10,tocIndex:5},{value:" tag to it and draw graph on the ",paraId:10,tocIndex:5},{value:"canvas",paraId:10,tocIndex:5},{value:".",paraId:10,tocIndex:5},{value:'<div id="mountNode"></div>\n',paraId:11,tocIndex:5},{value:"The data for G6 should be JSON format, includes arrays ",paraId:12,tocIndex:6},{value:"nodes",paraId:12,tocIndex:6},{value:" and ",paraId:12,tocIndex:6},{value:"edges",paraId:12,tocIndex:6},{value:":",paraId:12,tocIndex:6},{value:"const data = {\n  // The array of nodes\n  nodes: [\n    {\n      id: 'node1', // String, unique and required\n      x: 100, // Number, the x coordinate\n      y: 200, // Number, the y coordinate\n    },\n    {\n      id: 'node2', // String, unique and required\n      x: 300, // Number, the x coordinate\n      y: 200, // Number, the y coordinate\n    },\n  ],\n  // The array of edges\n  edges: [\n    {\n      source: 'node1', // String, required, the id of the source node\n      target: 'node2', // String, required, the id of the target node\n    },\n  ],\n};\n",paraId:13,tocIndex:6},{value:"⚠️Attention:",paraId:14,tocIndex:6},{value:"nodes",paraId:15,tocIndex:6},{value:" is an array of nodes, the ",paraId:15,tocIndex:6},{value:"id",paraId:15,tocIndex:6},{value:" is unique and required property; the ",paraId:15,tocIndex:6},{value:"x",paraId:15,tocIndex:6},{value:" and ",paraId:15,tocIndex:6},{value:"y",paraId:15,tocIndex:6},{value:" are coordinates of the node;",paraId:15,tocIndex:6},{value:"edges",paraId:15,tocIndex:6},{value:" is an array of edges, ",paraId:15,tocIndex:6},{value:"source",paraId:15,tocIndex:6},{value:" and ",paraId:15,tocIndex:6},{value:"target",paraId:15,tocIndex:6},{value:" are required, represent the ",paraId:15,tocIndex:6},{value:"id",paraId:15,tocIndex:6},{value:" of the source node and the ",paraId:15,tocIndex:6},{value:"id",paraId:15,tocIndex:6},{value:" of the target node respectively;",paraId:15,tocIndex:6},{value:"The properties of node and edge are described in ",paraId:15,tocIndex:6},{value:"Built-in Nodes",paraId:16,tocIndex:6},{value:" and ",paraId:15,tocIndex:6},{value:"Built-in Edges",paraId:17,tocIndex:6},{value:".",paraId:15,tocIndex:6},{value:"The container, width, and height are required configurations when instantiating a Graph:",paraId:18,tocIndex:7},{value:"const graph = new G6.Graph({\n  container: 'mountNode', // String | HTMLElement, required, the id of DOM element or an HTML node\n  width: 800, // Number, required, the width of the graph\n  height: 500, // Number, required, the height of the graph\n});\n",paraId:19,tocIndex:7},{value:"graph.data(data); // Load the data defined in Step 2\ngraph.render(); // Render the graph\n",paraId:20,tocIndex:8},{value:"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Tutorial Demo</title>\n  </head>\n  <body>\n    /* The container of the graph */\n    <div id=\"mountNode\"></div>\n\n    /* Import G6 by CDN */\n    <script src=\"https://gw.alipayobjects.com/os/lib/antv/g6/4.3.11/dist/g6.min.js\"><\/script>\n\n    <script>\n      // Define the source data\n      const data = {\n        // The array of nodes\n        nodes: [\n          {\n            id: 'node1',\n            x: 100,\n            y: 200,\n          },\n          {\n            id: 'node2',\n            x: 300,\n            y: 200,\n          },\n        ],\n        // The array of edges\n        edges: [\n          // An edge links from node1 to node2\n          {\n            source: 'node1',\n            target: 'node2',\n          },\n        ],\n      };\n\n      // Instantiate a Graph\n      const graph = new G6.Graph({\n        container: 'mountNode', // The id of the container\n        // The width and height of the graph\n        width: 800,\n        height: 500,\n      });\n      // Load the data\n      graph.data(data);\n      // Render the graph\n      graph.render();\n    <\/script>\n  </body>\n</html>\n",paraId:21,tocIndex:10},{value:"We provide a demo about using G6 with React: ",paraId:22,tocIndex:11},{value:"Demo",paraId:22,tocIndex:11},{value:".",paraId:22,tocIndex:11},{value:"For more information about it, please refer to ",paraId:23,tocIndex:11},{value:"Using G6 with React",paraId:24,tocIndex:11},{value:". Welcome the ",paraId:23,tocIndex:11},{value:"Issues",paraId:23,tocIndex:11},{value:".",paraId:23,tocIndex:11},{value:"In this chapter, we only briefly introduce the installation and usage. In G6 Tutorial, you will learn:",paraId:25,tocIndex:12},{value:"Common configurations of Graph;",paraId:26,tocIndex:12},{value:"Set the properties and styls for items (node/edge);",paraId:26,tocIndex:12},{value:"Configure the layout;",paraId:26,tocIndex:12},{value:"Configure the interaction;",paraId:26,tocIndex:12},{value:"Configure the animation;",paraId:26,tocIndex:12},{value:"The usage of components.",paraId:26,tocIndex:12},{value:"For more advanced functions, please refer to ",paraId:27,tocIndex:12},{value:"Key Concepts",paraId:28,tocIndex:12},{value:" and ",paraId:27,tocIndex:12},{value:"Further Reading",paraId:29,tocIndex:12},{value:".",paraId:27,tocIndex:12}]},36639:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:" ",paraId:0},{value:" ",paraId:0},{value:" ",paraId:0},{value:" ",paraId:0},{value:" ",paraId:0},{value:" ",paraId:0},{value:"中文简介",paraId:1},{value:"G6",paraId:2,tocIndex:0},{value:" is a graph visualization engine, which provides a set of basic mechanisms, including rendering, layout, analysis, interaction, animation, and other auxiliary tools. G6 aims to simplify the complex relationships, and help people to obtain the insight of relational data.",paraId:2,tocIndex:0},{value:"Developers are able to build graph visualization ",paraId:3,tocIndex:0},{value:"analysis",paraId:3,tocIndex:0},{value:" applications or graph visualization ",paraId:3,tocIndex:0},{value:"modeling",paraId:3,tocIndex:0},{value:" applications easily.",paraId:3,tocIndex:0},{value:"Powerful Layouts",paraId:4,tocIndex:0},{value:"Powerful Animation and Interactions",paraId:5,tocIndex:0},{value:"Excellent Perforamnce: Supports large graph visualization and interactive exploration;",paraId:6,tocIndex:1},{value:"Abundant Built-in Items: Nodes and edges with free configurations;",paraId:6,tocIndex:1},{value:"Steerable Interactions: More than 10 basic interaction behaviors ;",paraId:6,tocIndex:1},{value:"Powerful Layouts: More than 10 layout algorithms;",paraId:6,tocIndex:1},{value:"Convenient Components: Outstanding abilities and performance;",paraId:6,tocIndex:1},{value:"Friendly User Experience: Complete documents for different levels of requirements. TypeScript supported.",paraId:6,tocIndex:1},{value:"G6 concentrates on the principle of 'good by default'. In addition, the custom mechanism of the item, interation behavior, and layout satisfies the customization requirements.",paraId:7,tocIndex:1},{value:"Abundant Built-in Items",paraId:8,tocIndex:1},{value:"$ npm install @antv/g6\n",paraId:9,tocIndex:2},{value:"// The source data\nconst data = {\n  // The array of nodes\n  nodes: [\n    {\n      id: 'node1',\n      x: 100,\n      y: 200,\n    },\n    {\n      id: 'node2',\n      x: 300,\n      y: 200,\n    },\n  ],\n  // The array of edges\n  edges: [\n    // An edge links from node1 to node2\n    {\n      source: 'node1',\n      target: 'node2',\n    },\n  ],\n};\n\n// Instantiate the Graph\nconst graph = new G6.Graph({\n  container: 'mountNode', // The container id or HTML node of the graph canvas.\n  // The width and the height of graph canvas\n  width: 800,\n  height: 500,\n});\n// Load the data\ngraph.data(data);\n// Render the graph\ngraph.render();\n",paraId:10,tocIndex:3},{value:"For more information about the usage, please refer to ",paraId:11,tocIndex:3},{value:"Getting Started",paraId:12,tocIndex:3},{value:".",paraId:11,tocIndex:3},{value:"Tutorial",paraId:13,tocIndex:4},{value:"Key Concepts",paraId:14,tocIndex:4},{value:"Further Reading",paraId:15,tocIndex:4},{value:"API Reference",paraId:16,tocIndex:4},{value:"Official independent product: Graphin",paraId:17,tocIndex:5},{value:"Graphin stands for Graph Insight. It's a toolkit based on G6 and React, that focuses on relational visual analysis. It's simple, efficient, out of the box.",paraId:18,tocIndex:5},{value:"github: ",paraId:19,tocIndex:5},{value:"https://github.com/antvis/Graphin",paraId:19,tocIndex:5},{value:"website: ",paraId:19,tocIndex:5},{value:"https://graphin.antv.vision",paraId:19,tocIndex:5},{value:"Some implementations combined with front-end libraries from the third party:",paraId:20,tocIndex:5},{value:"Flow visualization editor powered by G6 and React - Workflow Designer",paraId:21,tocIndex:5},{value:";",paraId:21,tocIndex:5},{value:"Visualization editor powered by G6 and Vue",paraId:21,tocIndex:5},{value:";",paraId:21,tocIndex:5},{value:"Visualization and graphics editor powered by G6 and Vue - A visual graph editor based on G6 and Vue",paraId:21,tocIndex:5},{value:"Visualization and graphics ER editor powered by G6 and React",paraId:21,tocIndex:5},{value:"；",paraId:21,tocIndex:5},{value:"Visualization and graphics editor powered by G6 and Angular",paraId:21,tocIndex:5},{value:"Visualization Flow editor powered by G6 and Vue",paraId:21,tocIndex:5},{value:"Welcome to join the ",paraId:22,tocIndex:6},{value:"G6 Communication Group",paraId:22,tocIndex:6},{value:" or ",paraId:22,tocIndex:6},{value:"G6 Communication Group-2",paraId:22,tocIndex:6},{value:" (DingTalk groups). We also welcome the github issues.",paraId:22,tocIndex:6},{value:"Please let us know what you are you going to help. Do check out ",paraId:23,tocIndex:7},{value:"issues",paraId:23,tocIndex:7},{value:" for bug reports or suggestions first.",paraId:23,tocIndex:7},{value:"MIT license",paraId:24,tocIndex:8},{value:".",paraId:24,tocIndex:8}]},83854:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"There are two levels of animation in G6:",paraId:0},{value:"GLobal animation: Transform the graph animatively when the changes are global;",paraId:1},{value:"Item animation: The animation on a node or an edge.",paraId:1},{value:"The global animation is controlled by Graph instance. It takes effect when some global changes happen, such as:",paraId:2,tocIndex:0},{value:"graph.updateLayout(cfg)",paraId:3,tocIndex:0},{value:" change the layout;",paraId:3,tocIndex:0},{value:"graph.changeData()",paraId:3,tocIndex:0},{value:" change the data.",paraId:3,tocIndex:0},{value:"Configure ",paraId:4,tocIndex:0},{value:"animate: true",paraId:4,tocIndex:0},{value:" when instantiating a graph to achieve it. And the ",paraId:4,tocIndex:0},{value:"animateCfg",paraId:4,tocIndex:0},{value:" is the configurations for the animate, see ",paraId:4,tocIndex:0},{value:"animateCfg",paraId:5,tocIndex:0},{value:" for more detail. ",paraId:4,tocIndex:0},{value:"const graph = new G6.Graph({\n  // ...                      // Other configurations\n  animate: true, // Boolean, whether to activate the animation when global changes happen\n  animateCfg: {\n    duration: 500, // Number, the duration of one animation\n    easing: 'linearEasing', // String, the easing function\n  },\n});\n",paraId:6,tocIndex:0},{value:"All the built-in nodes and edges are static withou animation. To animate node or edge, please register your type of ",paraId:7,tocIndex:1},{value:"Custom Node",paraId:8,tocIndex:1},{value:" or ",paraId:7,tocIndex:1},{value:"Custom Edge",paraId:9,tocIndex:1},{value:", and override the ",paraId:7,tocIndex:1},{value:"afterDraw",paraId:7,tocIndex:1},{value:" function.",paraId:7,tocIndex:1},{value:"The animation frames are applied on one graphics shape of a node. We are going to introduce this part by three demos:",paraId:10,tocIndex:2},{value:"The graphics animation (Left of the figure below);",paraId:11,tocIndex:2},{value:"The background animation (Center of the figure below);",paraId:11,tocIndex:2},{value:"Partial animation (Right of the figure below).",paraId:11,tocIndex:2},{value:"The code of the three demos can be found at: ",paraId:12,tocIndex:2},{value:"Node Animation",paraId:12,tocIndex:2},{value:".",paraId:12,tocIndex:2},{value:"In this example, we are going to magnify and shrink the node. ",paraId:13,tocIndex:3},{value:"We first find the graphics shape to be animated by ",paraId:14,tocIndex:3},{value:"group.get('children')[0]",paraId:14,tocIndex:3},{value:". Here we find the 0th graphics shape of this type of node. Then, we call ",paraId:14,tocIndex:3},{value:"animate",paraId:14,tocIndex:3},{value:" for the node to define the properties for each frame(The first parameter is a function which returns the properties of each frame; the second parameter defines the configuration for animation, see ",paraId:14,tocIndex:3},{value:"animateCfg",paraId:15,tocIndex:3},{value:").",paraId:14,tocIndex:3},{value:"// Magnify and shrink animation\nG6.registerNode(\n  'circle-animate',\n  {\n    afterDraw(cfg, group) {\n      // Get the first graphics shape of this type of node\n      const shape = group.get('children')[0];\n      // The animation\n      shape.animate(\n        (ratio) => {\n          // Returns the properties for each frame. The input parameter ratio is a number that range from 0 to 1. The return value is an object that defines the properties for this frame.\n          // Magnify first, and then shrink\n          const diff = ratio <= 0.5 ? ratio * 10 : (1 - ratio) * 10;\n          let radius = cfg.size;\n          if (isNaN(radius)) radius = radius[0];\n          // The properties for this frame. Only radius for this example\n          return {\n            r: radius / 2 + diff,\n          };\n        },\n        {\n          repeat: true, // Whehter play the animation repeatly\n          duration: 3000, // The duration of one animation is 3000\n          easing: 'easeCubic', // The easing fuction is 'easeCubic'\n        },\n      );\n    },\n  },\n  'circle',\n); // This custom node extend the built-in node 'circle'. Except for the overrode afterDraw, other functions will extend from 'circle' node\n",paraId:16,tocIndex:3},{value:"You can add extra shape with animation in ",paraId:17,tocIndex:4},{value:"afterDraw",paraId:17,tocIndex:4},{value:".",paraId:17,tocIndex:4},{value:"In ",paraId:18,tocIndex:4},{value:"afterDraw",paraId:18,tocIndex:4},{value:" of this demo, we draw three background circle shape with different filling colors. And the ",paraId:18,tocIndex:4},{value:"animate",paraId:18,tocIndex:4},{value:" is called for magnifying and fading out the three circles. We do not use set the first parameter as a function here, but assign the target style for each animation to the input paramter: magify the radius to 10 and reduce the opacity to 0.1. The second parameter defines the configuration for the animation, see ",paraId:18,tocIndex:4},{value:"animateCfg",paraId:19,tocIndex:4},{value:".",paraId:18,tocIndex:4},{value:"G6.registerNode('background-animate', {\n  afterDraw(cfg, group) {\n    let r = cfg.size / 2;\n      if (isNaN(r)) {\n        r = cfg.size[0] / 2;\n      };\n    // The first background circle\n    const back1 = group.addShape('circle',{\n      zIndex: -3,\n      attrs: {\n        x: 0,\n        y: 0,\n        r,\n        fill: cfg.color,\n        opacity: 0.6\n      },\n      // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n      name: 'circle-shape1'\n    });\n    // The second background circle\n    const back2 = group.addShape('circle',{\n      zIndex: -2,\n      attrs: {\n        x: 0,\n        y: 0,\n        r,\n        fill: 'blue',\n        opacity: 0.6\n      },\n      // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n      name: 'circle-shape2'\n    });\n    // The third background circle\n    const back3 = group.addShape('circle',{\n      zIndex: -1,\n      attrs: {\n        x: 0,\n        y: 0,\n        r,\n        fill: 'green',\n        opacity: 0.6\n      },\n      // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n      name: 'circle-shape3'\n    });\n    group.sort(); // Sort the graphic shapes of the nodes by zIndex\n\n    // Magnify the first circle and fade it out\n    back1.animate({\n      r: r + 10,\n      opacity: 0.1\n    }, {\n      repeat: true, // Play the animation repeatly\n      duration: 3000,\n      easing: 'easeCubic'\n      delay: 0 // No delay\n    })\n\n    // Magnify the second circle and fade it out\n    back2.animate({\n      r: r + 10,\n      opacity: 0.1\n    }, {\n      repeat: true // Play the animation repeatly\n      duration: 3000,\n      easing: 'easeCubic',\n      delay: 1000 // Delay 1s\n    })\n\n    // Magnify the third circle and fade it out\n    back3.animate({\n      r: r + 10,\n      opacity: 0.1\n    }, {\n      repeat: true // Play the animation repeatly\n      duration: 3000,\n      easing: 'easeCubic',\n      delay: 2000 // Delay 2s\n    })\n  }\n}, 'circle');\n",paraId:20,tocIndex:4},{value:"In this demo, we add extra graphics shape(an image) in ",paraId:21,tocIndex:5},{value:"afterDraw",paraId:21,tocIndex:5},{value:", and set a rotation animation for it. Note that the rotation animation is a little complicated, which should be manipulated by matrix. The first parameter of ",paraId:21,tocIndex:5},{value:"animate()",paraId:21,tocIndex:5},{value:" is a function which returns the properties of each frame; the second parameter defines the configuration for animation, see ",paraId:21,tocIndex:5},{value:"animateCfg",paraId:22,tocIndex:5},{value:"G6.registerNode(\n  'inner-animate',\n  {\n    afterDraw(cfg, group) {\n      const size = cfg.size;\n      const width = size[0] - 12;\n      const height = size[1] - 12;\n      // Add an image shape\n      const image = group.addShape('image', {\n        attrs: {\n          x: -width / 2,\n          y: -height / 2,\n          width: width,\n          height: height,\n          img: cfg.img,\n        },\n        // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n        name: 'image-shape',\n      });\n      // Add animation for the image\n      image.animate(\n        (ratio) => {\n          // Returns the properties for each frame. The input parameter ratio is a number that range from 0 to 1. The return value is an object that defines the properties for this frame.\n          // Rotate by manipulating matrix\n          // The current matrix\n          const matrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n          // The target matrix\n          const toMatrix = Util.transform(matrix, [['r', ratio * Math.PI * 2]]);\n          // The properties of this frame. Only target matrix for this demo\n          return {\n            matrix: toMatrix,\n          };\n        },\n        {\n          repeat: true, // Play the animation repeatly\n          duration: 3000,\n          easing: 'easeCubic',\n        },\n      );\n    },\n  },\n  'rect',\n);\n",paraId:23,tocIndex:5},{value:"We are going to introduce this part by three demos:",paraId:24,tocIndex:6},{value:"A circle move along the edge (Left of the figure below);",paraId:25,tocIndex:6},{value:"A running dashed line (Center of the figure below. The gif may look like a static edge due to the low fps problem. You can check out the demo by link);",paraId:25,tocIndex:6},{value:"A growing line (Right of the figure below).",paraId:25,tocIndex:6},{value:"The code of the three demo can be found in: ",paraId:26,tocIndex:6},{value:"Edge Animation",paraId:26,tocIndex:6},{value:".",paraId:26,tocIndex:6},{value:"In this demo, we add a circle shape with moving animation in ",paraId:27,tocIndex:7},{value:"afterDraw",paraId:27,tocIndex:7},{value:". In each frame, we return the relative position of the circle on the edge. The first parameter of ",paraId:27,tocIndex:7},{value:"animate()",paraId:27,tocIndex:7},{value:" is a function which returns the properties of each frame; the second parameter defines the configuration for animation, see ",paraId:27,tocIndex:7},{value:"animateCfg",paraId:28,tocIndex:7},{value:"G6.registerEdge(\n  'circle-running',\n  {\n    afterDraw(cfg, group) {\n      // Get the first graphics shape of this type of edge, which is the edge's path\n      const shape = group.get('children')[0];\n      // The start point of the edge's path\n      const startPoint = shape.getPoint(0);\n\n      // Add a red circle shape\n      const circle = group.addShape('circle', {\n        attrs: {\n          x: startPoint.x,\n          y: startPoint.y,\n          fill: 'red',\n          r: 3,\n        },\n        // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n        name: 'circle-shape',\n      });\n\n      // Add the animation to the red circle\n      circle.animate(\n        (ratio) => {\n          // Returns the properties for each frame. The input parameter ratio is a number that range from 0 to 1. The return value is an object that defines the properties for this frame\n          // Get the position on the edge according to the ratio\n          const tmpPoint = shape.getPoint(ratio);\n          // Return the properties of this frame, x and y for this demo\n          return {\n            x: tmpPoint.x,\n            y: tmpPoint.y,\n          };\n        },\n        {\n          repeat: true, // Play the animation repeatly\n          duration: 3000, // The duration for one animation\n        },\n      );\n    },\n  },\n  'cubic',\n); // Extend the built-in edge cubic\n",paraId:29,tocIndex:7},{value:"The running dashed line is achieved by modifying the ",paraId:30,tocIndex:8},{value:"lineDash",paraId:30,tocIndex:8},{value:" in every frame. The first parameter of ",paraId:30,tocIndex:8},{value:"animate()",paraId:30,tocIndex:8},{value:" is a function which returns the properties of each frame; the second parameter defines the configuration for animation, see ",paraId:30,tocIndex:8},{value:"animateCfg",paraId:31,tocIndex:8},{value:"const lineDash = [4, 2, 1, 2];\n\nG6.registerEdge(\n  'line-dash',\n  {\n    afterDraw(cfg, group) {\n      let index = 0;\n      // Define the animation\n      shape.animate(\n        () => {\n          index++;\n          if (index > 9) {\n            index = 0;\n          }\n          const res = {\n            lineDash,\n            lineDashOffset: -index,\n          };\n          // Returns the configurations to be modified in this frame. Here the return value contains lineDash and lineDashOffset\n          return res;\n        },\n        {\n          repeat: true, // whether executed repeatly\n          duration: 3000, // animation's duration\n        },\n      );\n    },\n  },\n  'cubic',\n); // Extend the built-in edge cubic\n",paraId:32,tocIndex:8},{value:"A growing edge can also be implemented by calculating the ",paraId:33,tocIndex:9},{value:"lineDash",paraId:33,tocIndex:9},{value:". The first parameter of ",paraId:33,tocIndex:9},{value:"animate()",paraId:33,tocIndex:9},{value:" is a function which returns the properties of each frame; the second parameter defines the configuration for animation, see ",paraId:33,tocIndex:9},{value:"animateCfg",paraId:34,tocIndex:9},{value:" ",paraId:33,tocIndex:9},{value:"G6.registerEdge(\n  'line-growth',\n  {\n    afterDraw(cfg, group) {\n      const shape = group.get('children')[0];\n      const length = group.getTotalLength();\n      shape.animate(\n        (ratio) => {\n          // Returns the properties for each frame. The input parameter ratio is a number that range from 0 to 1. The return value is an object that defines the properties for this frame\n          const startLen = ratio * length;\n          // Calculate the lineDash\n          const cfg = {\n            lineDash: [startLen, length - startLen],\n          };\n          return cfg;\n        },\n        {\n          repeat: true, // Play the animation repeatly\n          duration: 2000, // The duration for one animation\n        },\n      );\n    },\n  },\n  'cubic',\n); // Extend the built-in edge cubic\n",paraId:35,tocIndex:9},{value:"G6 allows user to add animation for the interaction. As showin in the figure beow, when the mouse enters the node, the related edges will show the dashed line animation.",paraId:36,tocIndex:10},{value:"The code for the demo can be found in: ",paraId:36,tocIndex:10},{value:"Animation of State Changing",paraId:36,tocIndex:10},{value:".",paraId:36,tocIndex:10},{value:"This kind of animation is related to the ",paraId:37,tocIndex:10},{value:"State",paraId:38,tocIndex:10},{value:" of edge. Override the function ",paraId:37,tocIndex:10},{value:"setState",paraId:37,tocIndex:10},{value:" to response the state changing. When the mouse enters a node, some state of the related edges are activated. The ",paraId:37,tocIndex:10},{value:"setState",paraId:37,tocIndex:10},{value:" of the edges activate the animation once it receive the state changing. The steps are:",paraId:37,tocIndex:10},{value:"Override the ",paraId:39,tocIndex:10},{value:"setState",paraId:39,tocIndex:10},{value:" in custom edge, and listen to the state changing in this function;",paraId:39,tocIndex:10},{value:"Listen the ",paraId:39,tocIndex:10},{value:"mouseenter",paraId:39,tocIndex:10},{value:" and ",paraId:39,tocIndex:10},{value:"mouseleave",paraId:39,tocIndex:10},{value:" of the nodes to activate the state of the related edges.",paraId:39,tocIndex:10},{value:"The code below is a part of the code in ",paraId:40,tocIndex:10},{value:"Animation of State Changing",paraId:40,tocIndex:10},{value:". Please note that we have omit some code to emphasize the code related to the animation.",paraId:40,tocIndex:10},{value:"The first parameter of ",paraId:41,tocIndex:10},{value:"animate()",paraId:41,tocIndex:10},{value:" is a function which returns the properties of each frame; the second parameter defines the configuration for animation, see ",paraId:41,tocIndex:10},{value:"animateCfg",paraId:42,tocIndex:10},{value:"// const data = ...\n// const graph = new G6.Graph({...});\n\nconst lineDash = [4, 2, 1, 2];\n\n// Register a type of edge named 'can-running'\nG6.registerEdge(\n  'can-running',\n  {\n    // Override setState\n    setState(name, value, item) {\n      const shape = item.get('keyShape');\n      // Response the running state\n      if (name === 'running') {\n        // When the running state is turned to be true\n        if (value) {\n          let index = 0;\n          shape.animate(\n            () => {\n              index++;\n              if (index > 9) {\n                index = 0;\n              }\n              const res = {\n                lineDash,\n                lineDashOffset: -index,\n              };\n              // Returns the configurations to be modified in this frame. Here the return value contains lineDash and lineDashOffset\n              return res;\n            },\n            {\n              repeat: true, // whether executed repeatly\n              duration: 3000, // animation's duration\n            },\n          );\n        } else {\n          // When the running state is turned to be false\n          // Stop the animation\n          shape.stopAnimate();\n          // Clear the lineDash\n          shape.attr('lineDash', null);\n        }\n      }\n    },\n  },\n  'cubic-horizontal',\n); // Extend the built-in edge cubic-horizontal\n\n// Listen the mouseenter event on node\ngraph.on('node:mouseenter', (ev) => {\n  // Get the target node of the event\n  const node = ev.item;\n  // Get the related edges of the target node\n  const edges = node.getEdges();\n  // Turn the running state of all the related edges to be true. The setState function will be activated now\n  edges.forEach((edge) => graph.setItemState(edge, 'running', true));\n});\n\n// Listen the mouseleave event on node\ngraph.on('node:mouseleave', (ev) => {\n  // Get the target node of the event\n  const node = ev.item;\n  // Get the related edges of the target node\n  const edges = node.getEdges();\n  // Turn the running state of all the related edges to be false. The setState function will be activated now\n  edges.forEach((edge) => graph.setItemState(edge, 'running', false));\n});\n\n// graph.data(data);\n// graph.render();\n",paraId:43,tocIndex:10},{value:"   ",paraId:44,tocIndex:10},{value:"⚠️Attention:",paraId:44,tocIndex:10},{value:" When ",paraId:44,tocIndex:10},{value:"running",paraId:44,tocIndex:10},{value:" is turned to be ",paraId:44,tocIndex:10},{value:"false",paraId:44,tocIndex:10},{value:", the animation should be stopped and the ",paraId:44,tocIndex:10},{value:"lineDash",paraId:44,tocIndex:10},{value:" should be cleared.",paraId:44,tocIndex:10},{value:"Configuration",paraId:45,tocIndex:11},{value:"Type",paraId:45,tocIndex:11},{value:"Default Value",paraId:45,tocIndex:11},{value:"Description",paraId:45,tocIndex:11},{value:"duration",paraId:45,tocIndex:11},{value:"Number",paraId:45,tocIndex:11},{value:"500",paraId:45,tocIndex:11},{value:"The duration for animating once",paraId:45,tocIndex:11},{value:"easing",paraId:45,tocIndex:11},{value:"boolean",paraId:45,tocIndex:11},{value:"'linearEasing'",paraId:45,tocIndex:11},{value:"The easing function for the animation, see ",paraId:45,tocIndex:11},{value:"Easing Function",paraId:46,tocIndex:11},{value:" for more detail",paraId:45,tocIndex:11},{value:"delay",paraId:45,tocIndex:11},{value:"Number",paraId:45,tocIndex:11},{value:"0",paraId:45,tocIndex:11},{value:"Execute the animation with delay",paraId:45,tocIndex:11},{value:"repeat",paraId:45,tocIndex:11},{value:"boolean",paraId:45,tocIndex:11},{value:"false",paraId:45,tocIndex:11},{value:"Whether execute the animation repeatly",paraId:45,tocIndex:11},{value:"callback",paraId:45,tocIndex:11},{value:"Function",paraId:45,tocIndex:11},{value:"undefined",paraId:45,tocIndex:11},{value:"Callback function after the animation finish",paraId:45,tocIndex:11},{value:"pauseCallback",paraId:45,tocIndex:11},{value:"Function",paraId:45,tocIndex:11},{value:"undefined",paraId:45,tocIndex:11},{value:"Callback function after the animation is paused by shape.pause()",paraId:45,tocIndex:11},{value:"resumeCallback",paraId:45,tocIndex:11},{value:"Function",paraId:45,tocIndex:11},{value:"undefined",paraId:45,tocIndex:11},{value:"Callback function after the animation is resume by shape.resume()",paraId:45,tocIndex:11},{value:"G6 supports all the easing functions in d3.js. Thus, the options of ",paraId:47,tocIndex:12},{value:"easing",paraId:47,tocIndex:12},{value:" in ",paraId:47,tocIndex:12},{value:"animateCfg",paraId:47,tocIndex:12},{value:": ",paraId:47,tocIndex:12},{value:"'easeLinear'",paraId:47,tocIndex:12},{value:", ",paraId:47,tocIndex:12},{value:"'easePolyIn'",paraId:47,tocIndex:12},{value:", ",paraId:47,tocIndex:12},{value:"'easePolyOut'",paraId:47,tocIndex:12},{value:", ",paraId:47,tocIndex:12},{value:"'easePolyInOut'",paraId:47,tocIndex:12},{value:" , ",paraId:47,tocIndex:12},{value:"'easeQuad'",paraId:47,tocIndex:12},{value:", ",paraId:47,tocIndex:12},{value:"'easeQuadIn'",paraId:47,tocIndex:12},{value:", ",paraId:47,tocIndex:12},{value:"'easeQuadOut'",paraId:47,tocIndex:12},{value:", ",paraId:47,tocIndex:12},{value:"'easeQuadInOut'",paraId:47,tocIndex:12},{value:" .",paraId:47,tocIndex:12},{value:"For more detail of the easing functions, please refer to: ",paraId:48,tocIndex:12},{value:"d3 Easings",paraId:48,tocIndex:12},{value:".",paraId:48,tocIndex:12}]},93637:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"In G6, you can set ",paraId:0},{value:"Linear Gradient",paraId:0},{value:" for stroke and ",paraId:0},{value:"Circular Gradient",paraId:0},{value:" for filling color.",paraId:0},{value:"l",paraId:1,tocIndex:1},{value:" is the flag for linear gradient, the text in green can be modified to satisfy your requirements.",paraId:1,tocIndex:1},{value:"Assign the ",paraId:2,tocIndex:2},{value:"stroke",paraId:2,tocIndex:2},{value:" as below while ",paraId:2,tocIndex:2},{value:"Configurating the Node or Edge",paraId:3,tocIndex:2},{value:":",paraId:2,tocIndex:2},{value:"// Using the linear gradient for the stroke. The gradient angle is 0, and the begin color is #ffffff, the color of the midpoint is #7ec2f3, and the end color is #1890ff\nstroke: 'l(0) 0:#ffffff 0.5:#7ec2f3 1:#1890ff'\n",paraId:4,tocIndex:2},{value:"r",paraId:5,tocIndex:4},{value:" is the flag for circular gradient, the text in green can be modified to satisfy your requirements. The ",paraId:5,tocIndex:4},{value:"x",paraId:5,tocIndex:4},{value:" ",paraId:5,tocIndex:4},{value:"y",paraId:5,tocIndex:4},{value:" and ",paraId:5,tocIndex:4},{value:"r",paraId:5,tocIndex:4},{value:" are the relative values and range from 0 to 1.",paraId:5,tocIndex:4},{value:"Assign the ",paraId:6,tocIndex:5},{value:"fill",paraId:6,tocIndex:5},{value:" as below while ",paraId:6,tocIndex:5},{value:"Configurating the Node or Edge",paraId:7,tocIndex:5},{value:":",paraId:6,tocIndex:5},{value:"// Using the radial gradient for filling color. The center of the circular gradient is the center of the filled shape's bbox(bounding box). The radius is equal to 0.1 multiples the length of the diagonal of the bbox. The begin color is #ffffff, the color of the midpoint is #7ec2f3, and the end color is #1890ff\nfill: 'r(0.5, 0.5, 0.1) 0:#ffffff 1:#1890ff'\n",paraId:8,tocIndex:5}]},11834:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"In versions below G6 3.4.4, when we want to add the background to label of a node or edge, wo need use ",paraId:0,tocIndex:0},{value:"group.addShape('rect', {})",paraId:0,tocIndex:0},{value:" to implement it, the implementation method is not friendly enough.",paraId:0,tocIndex:0},{value:"In G6 3.4.5 version, uses can set the background for nodes or edges through ",paraId:1,tocIndex:1},{value:"background",paraId:1,tocIndex:1},{value:" configuration.",paraId:1,tocIndex:1},{value:"Important Hint：",paraId:2,tocIndex:1},{value:" The ",paraId:2,tocIndex:1},{value:"PR",paraId:2,tocIndex:1},{value:" comes from GitHub use @zhanba.",paraId:2,tocIndex:1},{value:"const graph = new G6.Graph({\n  // ...\n  defaultNode: {\n    labelCfg: {\n      position: 'left',\n      style: {\n        background: {\n          fill: '#ffffff',\n          stroke: 'green',\n          padding: [3, 2, 3, 2],\n          radius: 2,\n          lineWidth: 3,\n        },\n      },\n    }\n  },\n  defaultEdge: {\n    labelCfg: {\n      autoRotate: true,\n      style: {\n        background: {\n          fill: '#ffffff',\n          stroke: '#000000',\n          padding: [2, 2, 2, 2],\n          radius: 2,\n        },\n      },\n    }\n  }\n})\n",paraId:3,tocIndex:1}]},88790:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"G6 support filling a shape with texture with ",paraId:0},{value:"Image",paraId:0},{value:" or ",paraId:0},{value:"Data URL",paraId:0},{value:".",paraId:0},{value:"p",paraId:1},{value:" is the flag for using texture; the text in green can be modified to satisfy your requirements; ",paraId:1},{value:"a",paraId:1},{value:" is a way of repeating of the texture, which can be changed into:",paraId:1},{value:"a",paraId:2},{value:": Repeat in horizontal and vertical; - ",paraId:2},{value:"x",paraId:2},{value:": Repeat only in horizontal; - ",paraId:2},{value:"y",paraId:2},{value:": Repeat only in vertical; - ",paraId:2},{value:"n",paraId:2},{value:": No repeat.",paraId:2},{value:"Assign the ",paraId:3},{value:"fill",paraId:3},{value:" as below while ",paraId:3},{value:"Configurating the Node or Edge",paraId:4},{value:":",paraId:3},{value:"shape.attr('fill', 'p(a)https://gw.alipay.com/cube.png');\n",paraId:5}]},66566:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"There are three ways to modify the styles for labels in G6.",paraId:0},{value:"When instantiating a Graph, assign ",paraId:1,tocIndex:0},{value:"labelCfg",paraId:1,tocIndex:0},{value:" in ",paraId:1,tocIndex:0},{value:"defaultNode",paraId:1,tocIndex:0},{value:" or ",paraId:1,tocIndex:0},{value:"defaultEdge",paraId:1,tocIndex:0},{value:" to configure the styles for labels of global nodes and global edges respectively. This is a way to define the configurations of labels in global.",paraId:1,tocIndex:0},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 1000,\n  height: 800,\n  defaultNode: {\n    type: 'node',\n    labelCfg: {\n      style: {\n        fill: '#fff',\n        fontSize: 14,\n      },\n    },\n  },\n  defaultEdge: {\n    type: 'line-with-arrow',\n    labelCfg: {\n      style: {\n        fill: '#fff',\n        fontSize: 14,\n      },\n    },\n  },\n});\n",paraId:2,tocIndex:0},{value:"By this way, you can configure the ",paraId:3,tocIndex:1},{value:"labelCfg",paraId:3,tocIndex:1},{value:" for different nodes and edges.",paraId:3,tocIndex:1},{value:"const data = {\n  nodes: [\n    {\n      id: 'node1',\n      label: 'node1',\n      labelCfg: {\n        style: {\n          fill: '#fff',\n          fontSize: 12,\n        },\n      },\n    },\n  ],\n};\n",paraId:4,tocIndex:1},{value:"When using ",paraId:5,tocIndex:2},{value:"update/updateItem",paraId:5,tocIndex:2},{value:" to update a node or edge, the label can be updated as well. This is used for updating the configurations of the label.",paraId:5,tocIndex:2},{value:"graph.updateItem(node, {\n  // The style of the node\n  style: {\n    stroke: 'blue',\n  },\n  // The configurations of the label on the node\n  labelCfg: {\n    style: {\n      fill: '#fff',\n      fontSize: 12,\n    },\n  },\n});\n",paraId:6,tocIndex:2},{value:"For more information about the label styles, refer to ",paraId:7,tocIndex:2},{value:"Label on Node",paraId:8,tocIndex:2},{value:" and ",paraId:7,tocIndex:2},{value:"Label on Edge",paraId:9,tocIndex:2},{value:".",paraId:7,tocIndex:2}]},79827:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Built-in Circle Combo has the default style as below, the label is drawed on the center of it. ",paraId:0},{value:"Demo",paraId:0},{value:" ",paraId:0},{value:" ",paraId:0},{value:"As stated in ",paraId:1,tocIndex:0},{value:"Built-in Combos",paraId:2,tocIndex:0},{value:" , there are three methods to configure combos: Configure combos globally when instantiating a Graph; Configure combos in their data; Configure combos by ",paraId:1,tocIndex:0},{value:"graph.combo(comboFn)",paraId:1,tocIndex:0},{value:". Their priorities are:",paraId:1,tocIndex:0},{value:"graph.combo(comboFn",paraId:3,tocIndex:0},{value:" > Configure in data > Configure globally",paraId:3,tocIndex:0},{value:"⚠️ Attention:",paraId:4,tocIndex:0},{value:" Expect for ",paraId:4,tocIndex:0},{value:"id",paraId:4,tocIndex:0},{value:", ",paraId:4,tocIndex:0},{value:"parentId",paraId:4,tocIndex:0},{value:", and ",paraId:4,tocIndex:0},{value:"label",paraId:4,tocIndex:0},{value:" which should be assigned to every single combo data, the other configurations in ",paraId:4,tocIndex:0},{value:"The Common Property",paraId:5,tocIndex:0},{value:" and in each combo type (refer to doc of each combo type) support to be assigned by the three ways.",paraId:4,tocIndex:0},{value:"⚠️ Attention:",paraId:6,tocIndex:0},{value:" Must set the ",paraId:6,tocIndex:0},{value:"groupByTypes",paraId:6,tocIndex:0},{value:" to ",paraId:6,tocIndex:0},{value:"false",paraId:6,tocIndex:0},{value:" when instantiating the graph, which will result in rendering result with reasonable visual zIndex for combos.",paraId:6,tocIndex:0},{value:"Assign ",paraId:7,tocIndex:1},{value:"type",paraId:7,tocIndex:1},{value:" to ",paraId:7,tocIndex:1},{value:"'circle'",paraId:7,tocIndex:1},{value:" in the ",paraId:7,tocIndex:1},{value:"defaultCombo",paraId:7,tocIndex:1},{value:" object when instantiating a Graph:",paraId:7,tocIndex:1},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  // Set groupByTypes to false to get rendering result with reasonable visual zIndex for combos\n  groupByTypes: false,\n  defaultCombo: {\n    type: 'circle', // The type of the combo\n    // ... Other configuraltions\n  },\n});\n",paraId:8,tocIndex:1},{value:"To configure different combo with different properties, you can write the properties into the combo data.",paraId:9,tocIndex:2},{value:"const data = {\n  nodes: [\n    ... // nodes\n  ],\n  edges: [\n    ... // edges\n  ],\n  combos: [\n    {\n      id: 'combo1',\n      type: 'circle', // The tyep of the combo\n      ... // Other configurations\n    },\n    ... // Other combos\n  ]\n};\n",paraId:10,tocIndex:2},{value:"The ",paraId:11,tocIndex:3},{value:"Combo Common Properties",paraId:12,tocIndex:3},{value:" are available for Circle combo, some special properties are shown below. The property with Object type will be described after the table:",paraId:11,tocIndex:3},{value:"Name",paraId:13,tocIndex:3},{value:"Description",paraId:13,tocIndex:3},{value:"Type",paraId:13,tocIndex:3},{value:"Remark",paraId:13,tocIndex:3},{value:"size",paraId:13,tocIndex:3},{value:"The MINIMUM diameter of the combo (not for fixing the size)",paraId:13,tocIndex:3},{value:"number / number[]",paraId:13,tocIndex:3},{value:"When it is an array, the first element will take effect",paraId:13,tocIndex:3},{value:"fixSize",paraId:13,tocIndex:3},{value:"Fix the size of the combo",paraId:13,tocIndex:3},{value:"number",paraId:13,tocIndex:3},{value:"If it is not assigned, the rendering size of the combo depends on the sizes and distribution of its children items. If the ",paraId:13,tocIndex:3},{value:"fixSize",paraId:13,tocIndex:3},{value:" is assigned but the ",paraId:13,tocIndex:3},{value:"fixCollapseSize",paraId:13,tocIndex:3},{value:" is not, the size of the collapsed combo will still be ",paraId:13,tocIndex:3},{value:"fixSize",paraId:13,tocIndex:3},{value:"fixCollapseSize",paraId:13,tocIndex:3},{value:"Fix the size of the collapsed combo",paraId:13,tocIndex:3},{value:"number",paraId:13,tocIndex:3},{value:"If it is not assigned and the ",paraId:13,tocIndex:3},{value:"fixSize",paraId:13,tocIndex:3},{value:" is assigned, the size of the collapsed Combo is ",paraId:13,tocIndex:3},{value:"fixSize",paraId:13,tocIndex:3},{value:"; and if ",paraId:13,tocIndex:3},{value:"fixCollapseSize",paraId:13,tocIndex:3},{value:" and ",paraId:13,tocIndex:3},{value:"fixSize",paraId:13,tocIndex:3},{value:" are both not assigned, the size of the collapsed Combo is ",paraId:13,tocIndex:3},{value:"size",paraId:13,tocIndex:3},{value:" ｜",paraId:13,tocIndex:3},{value:"style",paraId:13,tocIndex:3},{value:"The default style of circle combo",paraId:13,tocIndex:3},{value:"Object",paraId:13,tocIndex:3},{value:"Refer to the ",paraId:13,tocIndex:3},{value:"style",paraId:14,tocIndex:3},{value:"label",paraId:13,tocIndex:3},{value:"The text of the label",paraId:13,tocIndex:3},{value:"String",paraId:13,tocIndex:3},{value:"labelCfg",paraId:13,tocIndex:3},{value:"The configurations of the label",paraId:13,tocIndex:3},{value:"Object",paraId:13,tocIndex:3},{value:"Refer to the ",paraId:13,tocIndex:3},{value:"labelCfg",paraId:15,tocIndex:3},{value:"stateStyles",paraId:13,tocIndex:3},{value:"The styles in different states",paraId:13,tocIndex:3},{value:"Object",paraId:13,tocIndex:3},{value:"Refer to ",paraId:13,tocIndex:3},{value:"Configure Styles for State",paraId:16,tocIndex:3},{value:"The ",paraId:17,tocIndex:4},{value:"Combo Common Styles",paraId:18,tocIndex:4},{value:" are available for Circle combo. ",paraId:17,tocIndex:4},{value:"style",paraId:17,tocIndex:4},{value:" is an object to configure the filling color, stroke, and other styles. The following code shows how to configure the ",paraId:17,tocIndex:4},{value:"style",paraId:17,tocIndex:4},{value:" globally when instantiating a Graph.",paraId:17,tocIndex:4},{value:" ",paraId:17,tocIndex:4},{value:"const data = {\n  combos: [\n    {\n      label: 'combo_circle',\n      type: 'circle',\n      label: 'Circle',\n    },\n  ],\n};\nconst graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  // Set groupByTypes to false to get rendering result with reasonable visual zIndex for combos\n  groupByTypes: false,\n  defaultCombo: {\n    // type: 'circle',  // The type has been assigned in the data, we do not have to define it any more\n    style: {\n      fill: '#bae637',\n      stroke: '#eaff8f',\n      lineWidth: 5,\n    },\n  },\n});\ngraph.data(data);\ngraph.render();\n",paraId:19,tocIndex:4},{value:"labelCfg",paraId:20,tocIndex:5},{value:" is an object to configure the label of the combo. The ",paraId:20,tocIndex:5},{value:"Combo Common Label Configurations",paraId:21,tocIndex:5},{value:" are available. Base on the code in ",paraId:20,tocIndex:5},{value:"style",paraId:22,tocIndex:5},{value:" section, we add ",paraId:20,tocIndex:5},{value:"labelCfg",paraId:20,tocIndex:5},{value:" to ",paraId:20,tocIndex:5},{value:"defaultCombo",paraId:20,tocIndex:5},{value:".",paraId:20,tocIndex:5},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for graph\n  // Set groupByTypes to false to get rendering result with reasonable visual zIndex for combos\n  groupByTypes: false,\n  defaultCombo: {\n    // ... Other properties for combos\n    labelCfg: {\n      position: 'bottom',\n      refX: 5,\n      style: {\n        fill: '#bae637',\n        fontSize: 15,\n        // ... The style of the label\n      },\n    },\n  },\n});\n// ...\n",paraId:23,tocIndex:5}]},21377:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Built-in Rect Combo has the default style as below, the label is drawed on the left top inside. ",paraId:0},{value:"Demo",paraId:0},{value:" ",paraId:0},{value:" ",paraId:0},{value:"As stated in ",paraId:1,tocIndex:0},{value:"Built-in Combos",paraId:2,tocIndex:0},{value:" , there are three methods to configure combos: Configure combos globally when instantiating a Graph; Configure combos in their data; Configure combos by ",paraId:1,tocIndex:0},{value:"graph.combo(comboFn)",paraId:1,tocIndex:0},{value:". Their priorities are:",paraId:1,tocIndex:0},{value:"graph.combo(comboFn",paraId:3,tocIndex:0},{value:" > Configure in data > Configure globally",paraId:3,tocIndex:0},{value:"⚠️ Attention:",paraId:4,tocIndex:0},{value:" Expect for ",paraId:4,tocIndex:0},{value:"id",paraId:4,tocIndex:0},{value:", ",paraId:4,tocIndex:0},{value:"parentId",paraId:4,tocIndex:0},{value:", and ",paraId:4,tocIndex:0},{value:"label",paraId:4,tocIndex:0},{value:" which should be assigned to every single combo data, the other configurations in ",paraId:4,tocIndex:0},{value:"The Common Property",paraId:5,tocIndex:0},{value:" and in each combo type (refer to doc of each combo type) support to be assigned by the three ways.",paraId:4,tocIndex:0},{value:"⚠️ Attention:",paraId:6,tocIndex:0},{value:" Must set the ",paraId:6,tocIndex:0},{value:"groupByTypes",paraId:6,tocIndex:0},{value:" to ",paraId:6,tocIndex:0},{value:"false",paraId:6,tocIndex:0},{value:" when instantiating the graph, which will result in rendering result with reasonable visual zIndex for combos.",paraId:6,tocIndex:0},{value:"Assign ",paraId:7,tocIndex:1},{value:"type",paraId:7,tocIndex:1},{value:" to ",paraId:7,tocIndex:1},{value:"'rect'",paraId:7,tocIndex:1},{value:" in the ",paraId:7,tocIndex:1},{value:"defaultCombo",paraId:7,tocIndex:1},{value:" object when instantiating a Graph:",paraId:7,tocIndex:1},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  // Set groupByTypes to false to get rendering result with reasonable visual zIndex for combos\n  groupByTypes: false,\n  defaultCombo: {\n    type: 'rect', // The type of the combo\n    // ... Other configuraltions\n  },\n});\n",paraId:8,tocIndex:1},{value:"To configure different combo with different properties, you can write the properties into the combo data.",paraId:9,tocIndex:2},{value:"const data = {\n  nodes: [\n    ... // nodes\n  ],\n  edges: [\n    ... // edges\n  ],\n  combos: [\n    {\n      id: 'combo1',\n      type: 'rect', // The tyep of the combo\n      ... // Other configurations\n    },\n    ... // Other combos\n  ]\n};\n",paraId:10,tocIndex:2},{value:"The ",paraId:11,tocIndex:3},{value:"Combo Common Properties",paraId:12,tocIndex:3},{value:" are available for Rect combo, some special properties are shown below. The property with Object type will be described after the table:",paraId:11,tocIndex:3},{value:"Name",paraId:13,tocIndex:3},{value:"Description",paraId:13,tocIndex:3},{value:"Type",paraId:13,tocIndex:3},{value:"Remark",paraId:13,tocIndex:3},{value:"size",paraId:13,tocIndex:3},{value:"The MINIMUM diameter of the combo (not for fixing the size)",paraId:13,tocIndex:3},{value:"Number / Array",paraId:13,tocIndex:3},{value:"When it is an array, the first element will take effect",paraId:13,tocIndex:3},{value:"fixSize",paraId:13,tocIndex:3},{value:"Fix the size of the Combo",paraId:13,tocIndex:3},{value:"number / number[]",paraId:13,tocIndex:3},{value:"If it is not assigned, the rendering size of the combo depends on the sizes and distribution of its children items. If the ",paraId:13,tocIndex:3},{value:"fixSize",paraId:13,tocIndex:3},{value:" is assigned but the ",paraId:13,tocIndex:3},{value:"fixCollapseSize",paraId:13,tocIndex:3},{value:" is not, the size of the collapsed combo will still be ",paraId:13,tocIndex:3},{value:"fixSize",paraId:13,tocIndex:3},{value:"fixCollapseSize",paraId:13,tocIndex:3},{value:"Fix the size of the collapsed Combo",paraId:13,tocIndex:3},{value:"number / number[]",paraId:13,tocIndex:3},{value:"If it is not assigned and the ",paraId:13,tocIndex:3},{value:"fixSize",paraId:13,tocIndex:3},{value:" is assigned, the size of the collapsed Combo is ",paraId:13,tocIndex:3},{value:"fixSize",paraId:13,tocIndex:3},{value:"; and if ",paraId:13,tocIndex:3},{value:"fixCollapseSize",paraId:13,tocIndex:3},{value:" and ",paraId:13,tocIndex:3},{value:"fixSize",paraId:13,tocIndex:3},{value:" are both not assigned, the size of the collapsed Combo is ",paraId:13,tocIndex:3},{value:"size",paraId:13,tocIndex:3},{value:" ｜",paraId:13,tocIndex:3},{value:"style",paraId:13,tocIndex:3},{value:"The default style of rect combo",paraId:13,tocIndex:3},{value:"Object",paraId:13,tocIndex:3},{value:"Refer to the ",paraId:13,tocIndex:3},{value:"style",paraId:14,tocIndex:3},{value:"label",paraId:13,tocIndex:3},{value:"The text of the label",paraId:13,tocIndex:3},{value:"String",paraId:13,tocIndex:3},{value:"labelCfg",paraId:13,tocIndex:3},{value:"The configurations of the label",paraId:13,tocIndex:3},{value:"Object",paraId:13,tocIndex:3},{value:"Refer to the ",paraId:13,tocIndex:3},{value:"labelCfg",paraId:15,tocIndex:3},{value:"stateStyles",paraId:13,tocIndex:3},{value:"The styles in different states",paraId:13,tocIndex:3},{value:"Object",paraId:13,tocIndex:3},{value:"Refer to ",paraId:13,tocIndex:3},{value:"Configure Styles for State",paraId:16,tocIndex:3},{value:"The ",paraId:17,tocIndex:4},{value:"Combo Common Styles",paraId:18,tocIndex:4},{value:" are available for Rect combo. ",paraId:17,tocIndex:4},{value:"style",paraId:17,tocIndex:4},{value:" is an object to configure the filling color, stroke, and other styles. The following code shows how to configure the ",paraId:17,tocIndex:4},{value:"style",paraId:17,tocIndex:4},{value:" globally when instantiating a Graph.",paraId:17,tocIndex:4},{value:" ",paraId:17,tocIndex:4},{value:"const data = {\n  combos: [\n    {\n      label: 'combo_rect',\n      type: 'rect',\n      label: 'rect',\n    },\n  ],\n};\nconst graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  // Set groupByTypes to false to get rendering result with reasonable visual zIndex for combos\n  groupByTypes: false,\n  defaultCombo: {\n    // type: 'rect',  // The type has been assigned in the data, we do not have to define it any more\n    style: {\n      fill: '#bae637',\n      stroke: '#eaff8f',\n      lineWidth: 5,\n    },\n  },\n});\ngraph.data(data);\ngraph.render();\n",paraId:19,tocIndex:4},{value:"labelCfg",paraId:20,tocIndex:5},{value:" is an object to configure the label of the combo. The ",paraId:20,tocIndex:5},{value:"Combo Common Label Configurations",paraId:21,tocIndex:5},{value:" are available. ",paraId:20,tocIndex:5},{value:"Supported by v4.7.17 and later versions",paraId:20,tocIndex:5},{value:" And rect type combo has a special value ",paraId:20,tocIndex:5},{value:"'top-center'",paraId:20,tocIndex:5},{value:" for ",paraId:20,tocIndex:5},{value:"labelCfg.position",paraId:20,tocIndex:5},{value:", to place the label text on the top center of the rect. Base on the code in ",paraId:20,tocIndex:5},{value:"style",paraId:22,tocIndex:5},{value:" section, we add ",paraId:20,tocIndex:5},{value:"labelCfg",paraId:20,tocIndex:5},{value:" to ",paraId:20,tocIndex:5},{value:"defaultCombo",paraId:20,tocIndex:5},{value:".",paraId:20,tocIndex:5},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for graph\n  // Set groupByTypes to false to get rendering result with reasonable visual zIndex for combos\n  groupByTypes: false,\n  defaultCombo: {\n    // ... Other properties for combos\n    labelCfg: {\n      position: 'bottom',\n      refX: -12,\n      style: {\n        fill: '#bae637',\n        fontSize: 15,\n        // ... The style of the label\n      },\n    },\n  },\n});\n// ...\n",paraId:23,tocIndex:5}]},65219:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"G6 provides two types of ",paraId:0},{value:"Built-in Combos",paraId:1},{value:": ",paraId:0},{value:"circle",paraId:2},{value:", [rect](/en/docs/manual/middle/elements/combos/built-in/rect. Besides, the custom machanism allows the users to extend the built-in Combos to design their own type of nodes by ",paraId:0},{value:"G6.registerCombo('comboName', options, expendedComboName)",paraId:0},{value:". A combo with complex graphics shapes, complex interactions, fantastic animations can be implemented easily.",paraId:0},{value:"In this document, we will introduce the custom combo mechanism by two examples:",paraId:3},{value:"1. Extend the Rect Combo;",paraId:4},{value:"2. Extend the Circle Combo. ",paraId:4},{value:"As stated in ",paraId:5,tocIndex:0},{value:"Shape",paraId:6,tocIndex:0},{value:", there are two points should be satisfied when customize a combo:",paraId:5,tocIndex:0},{value:"Controll the life cycle of the combo;",paraId:7,tocIndex:0},{value:"Analyze the input data and show it by graphics.",paraId:7,tocIndex:0},{value:"The API and the methods which can be rewritten when extending a built-in combo are shown below:",paraId:8,tocIndex:0},{value:"G6.regitserCombo(\n  'comboName',\n  {\n    /**\n     * Draw the shapes of the Combo.\n     * Do not need the label shape, it will be added by the extended class\n     * @param  {Object} cfg The configurations of the combo\n     * @param  {G.Group} group Graphics group, the container of the shapes of the combo\n     * @return {G.Shape} The keyShape of the combo. It can be obtained by combo.get('keyShape')\n     * More details about keyShape can be found in Middle-Graph Elements-Graphis Shape and keyShape\n     */\n    drawShape(cfg, group) {},\n    /**\n     * The extra operations after drawing the combo. There is no operation in this function by default\n     * @param  {Object} cfg The configurations of the combo\n     * @param  {G.Group} group Graphics group, the container of the shapes of the combo\n     */\n    afterDraw(cfg, group) {},\n    /**\n     * The operations after updating the combo.\n     * Control the update logic of the new graphic shapes expect keyShape here\n     * @override\n     * @param  {Object} cfg The configurations of the combo\n     * @param  {Combo} combo The combo item\n     */\n    afterUpdate(cfg, combo) {},\n    /**\n     * Response the combo states change.\n     * Should be rewritten when you want to response the state changes by animation.\n     * Responsing the state changes by styles can be configured, which is described in the document Middle-Behavior & Event-State\n     * @param  {String} name The name of the state\n     * @param  {Object} value The value of the state\n     * @param  {Combo} combo The combo item\n     */\n    setState(name, value, combo) {},\n  },\n  // the type name of the extended Combo, options: 'circle' or 'rect'\n  extendComboName,\n);\n",paraId:9,tocIndex:0},{value:"Since the updating logic of Combo is special (upate the size and position according to the children automatically), registering a combo is kind of different from regitering a node or an edge:",paraId:10,tocIndex:1},{value:"It is not recommended to customize a Combo without extending a built-in Combo, you should ",paraId:11,tocIndex:1},{value:"extend the built-in 'circle' or 'rect' Combo",paraId:11,tocIndex:1},{value:";",paraId:11,tocIndex:1},{value:"Do not add text shape for label in ",paraId:11,tocIndex:1},{value:"drawShape",paraId:11,tocIndex:1},{value:", it will be added and updated automatically by the base class;",paraId:11,tocIndex:1},{value:"Different from registering a node or an edge, it is not recommended to rewritten ",paraId:11,tocIndex:1},{value:"update",paraId:11,tocIndex:1},{value:" and ",paraId:11,tocIndex:1},{value:"draw",paraId:11,tocIndex:1},{value:", or the updating logic will be abnormal;",paraId:11,tocIndex:1},{value:"The rewirtten ",paraId:11,tocIndex:1},{value:"drawShape",paraId:11,tocIndex:1},{value:" should return the same type of keyShape as the keyShape of the extended Combo. Means that return a circle shape if you are extending the circle Combo, rect shape if you are extending the rect Combo;",paraId:11,tocIndex:1},{value:"The updating logic of new shapes expect the keyShape and the label should be defined in ",paraId:11,tocIndex:1},{value:"afterUpdate",paraId:11,tocIndex:1},{value:";",paraId:11,tocIndex:1},{value:"setState",paraId:11,tocIndex:1},{value:" should be override when you want to response the state changes by animation. Responsing the state changes by simple styles can be achieved by ",paraId:11,tocIndex:1},{value:"Configure Styles for State",paraId:12,tocIndex:1},{value:".",paraId:11,tocIndex:1},{value:"Demo",paraId:13,tocIndex:2},{value:".",paraId:13,tocIndex:2},{value:"As shown in the figure below, the position logic of built-in rect Combo:",paraId:14,tocIndex:3},{value:"The area boxed by the grey dashed rectangle is the area of the Combo's children to be positioned. innerWidth and innerHeight are the width and the height of the area respectively;",paraId:15,tocIndex:3},{value:"The padding around the grey dashed area can be configured, and the real drawing width/height of the keyShape is equal to the innerWidth/innerHeight plus padding values;",paraId:15,tocIndex:3},{value:"The shapes inside the combo uses the self coordinate system with origin (0, 0) centered at the center of the dashed area;",paraId:15,tocIndex:3},{value:"The top and bottom padding, left and right padding are different, which leads to result that the (x, y) of the keyShape rect's left-top is not simply equal to (-width / 2, -height / 2), but calculated as shown in the figure;",paraId:15,tocIndex:3},{value:"The default label of the rect Combo is positioned on the left-top inside the keyShape rect with refY to the top border and refX to the left border. The ",paraId:15,tocIndex:3},{value:"position",paraId:15,tocIndex:3},{value:", ",paraId:15,tocIndex:3},{value:"refX",paraId:15,tocIndex:3},{value:", and ",paraId:15,tocIndex:3},{value:"refY",paraId:15,tocIndex:3},{value:" can be configured while using the Combo.",paraId:15,tocIndex:3},{value:"Illustration of Built-in Rect Combo",paraId:16,tocIndex:3},{value:"Now, we are going to register a Combo as shown below (the figure below shows an empty combo):",paraId:17,tocIndex:4},{value:"According to the ",paraId:18,tocIndex:4},{value:"Illustration of Built-in Rect Combo",paraId:19,tocIndex:4},{value:", please be caution about the ",paraId:18,tocIndex:4},{value:"x",paraId:18,tocIndex:4},{value:", ",paraId:18,tocIndex:4},{value:"y",paraId:18,tocIndex:4},{value:", ",paraId:18,tocIndex:4},{value:"width",paraId:18,tocIndex:4},{value:", ",paraId:18,tocIndex:4},{value:"height",paraId:18,tocIndex:4},{value:" of the shapes when extending the rect Combo.",paraId:18,tocIndex:4},{value:"G6.registerCombo(\n  'cRect',\n  {\n    drawShape: function drawShape(cfg, group) {\n      const self = this;\n      // Get the padding from the configuration\n      cfg.padding = cfg.padding || [50, 20, 20, 20];\n      // Get the shape's style, where the style.width and style.height correspond to the width and height in the figure of Illustration of Built-in Rect Combo\n      const style = self.getShapeStyle(cfg);\n      // Add a rect shape as the keyShape which is the same as the extended rect Combo\n      const rect = group.addShape('rect', {\n        attrs: {\n          ...style,\n          x: -style.width / 2 - padding[3],\n          y: -style.height / 2 - padding[0],\n          width: style.width,\n          height: style.height,\n        },\n        draggable: true,\n        name: 'combo-keyShape', // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n      });\n      // Add the circle on the right\n      group.addShape('circle', {\n        attrs: {\n          ...style,\n          fill: '#fff',\n          opacity: 1,\n          // cfg.style.width and cfg.style.heigth correspond to the innerWidth and innerHeight in the figure of Illustration of Built-in Rect Combo\n          x: cfg.style.width / 2 + cfg.padding[1],\n          y: (cfg.padding[2] - cfg.padding[0]) / 2,\n          r: 5,\n        },\n        draggable: true,\n        name: 'combo-circle-shape', // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n      });\n      return rect;\n    },\n    // Define the updating logic of the right circle\n    afterUpdate: function afterUpdate(cfg, combo) {\n      const group = combo.get('group');\n      // Find the circle shape in the graphics group of the Combo by name\n      const circle = group.find((ele) => ele.get('name') === 'combo-circle-shape');\n      // Update the position of the right circle\n      circle.attr({\n        // cfg.style.width and cfg.style.heigth correspond to the innerWidth and innerHeight in the figure of Illustration of Built-in Rect Combo\n        x: cfg.style.width / 2 + cfg.padding[1],\n        y: (cfg.padding[2] - cfg.padding[0]) / 2,\n      });\n    },\n  },\n  'rect',\n);\n",paraId:20,tocIndex:4},{value:"Attention: you need to assign ",paraId:21,tocIndex:4},{value:"name",paraId:21,tocIndex:4},{value:" and ",paraId:21,tocIndex:4},{value:"draggable",paraId:21,tocIndex:4},{value:" for the shapes added in the custom node, where ",paraId:21,tocIndex:4},{value:"the value of ",paraId:21,tocIndex:4},{value:"name",paraId:21,tocIndex:4},{value:" must be unique in a custom node/edge/combo type",paraId:21,tocIndex:4},{value:". ",paraId:21,tocIndex:4},{value:"draggable: true",paraId:21,tocIndex:4},{value:" means that the shape is allowed to response the drag events. Only when ",paraId:21,tocIndex:4},{value:"draggable: true",paraId:21,tocIndex:4},{value:", the interaction behavior ",paraId:21,tocIndex:4},{value:"'drag-node'",paraId:21,tocIndex:4},{value:" can be responsed on this shape. In the codes above, if you only assign ",paraId:21,tocIndex:4},{value:"draggable: true",paraId:21,tocIndex:4},{value:" to the ",paraId:21,tocIndex:4},{value:"keyShape",paraId:21,tocIndex:4},{value:" but not the right circle shape, the drag events will only be responsed on the ",paraId:21,tocIndex:4},{value:"keyShape",paraId:21,tocIndex:4},{value:".",paraId:21,tocIndex:4},{value:"The following code uses the ",paraId:22,tocIndex:5},{value:"'cRect'",paraId:22,tocIndex:5},{value:" Combo:",paraId:22,tocIndex:5},{value:"const data = {\n  nodes: [\n    { id: 'node1', x: 250, y: 100, comboId: 'combo1' },\n    { id: 'node2', x: 300, y: 100, comboId: 'combo1' },\n  ],\n  combos: [\n    { id: 'combo1', label: 'Combo 1', parentId: 'combo2' },\n    { id: 'combo2', label: 'Combo 2' },\n    { id: 'combo3', label: 'Combo 3' },\n  ],\n};\nconst graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 800,\n  // Configure the combos globally\n  defaultCombo: {\n    // The type of the combos. You can also assign type in the data of combos\n    type: 'cRect',\n    // ... Other global configurations for combos\n  },\n});\ngraph.data(data);\ngraph.render();\n",paraId:23,tocIndex:5},{value:"Demo",paraId:24,tocIndex:6},{value:".",paraId:24,tocIndex:6},{value:"As shown in the figure below, the position logic of built-in circle Combo is much more simple thant rect Combo, where the (x, y) is the center of the circle， and the ",paraId:25,tocIndex:7},{value:"padding",paraId:25,tocIndex:7},{value:" is a number:",paraId:25,tocIndex:7},{value:"The area boxed by the grey dashed circle is the area of the Combo's children to be positioned. innerR is the radius of the area;",paraId:26,tocIndex:7},{value:"The padding around the grey dashed area can be configured, and the real drawing radius of the keyShape R = innerR + padding;",paraId:26,tocIndex:7},{value:"The shapes inside the combo uses the self coordinate system with origin (0, 0) centered at the center of the circle;",paraId:26,tocIndex:7},{value:"The padding around the circle is even;",paraId:26,tocIndex:7},{value:"The default label of the circle Combo is positioned on the top outside the keyShape circle with refY to the top border. The ",paraId:26,tocIndex:7},{value:"position",paraId:26,tocIndex:7},{value:", ",paraId:26,tocIndex:7},{value:"refX",paraId:26,tocIndex:7},{value:", and ",paraId:26,tocIndex:7},{value:"refY",paraId:26,tocIndex:7},{value:" can be configured while using the Combo.",paraId:26,tocIndex:7},{value:"Illustration of Built-in Rect Combo",paraId:27,tocIndex:7},{value:"Now, we are going to register a Combo as shown below (the figure below shows an empty combo):",paraId:28,tocIndex:8},{value:"// The symbols for the marker inside the combo\nconst collapseIcon = (x, y, r) => {\n  return [\n    ['M', x - r, y],\n    ['a', r, r, 0, 1, 0, r * 2, 0],\n    ['a', r, r, 0, 1, 0, -r * 2, 0],\n    ['M', x - r + 4, y],\n    ['L', x - r + 2 * r - 4, y],\n  ];\n};\nconst expandIcon = (x, y, r) => {\n  return [\n    ['M', x - r, y],\n    ['a', r, r, 0, 1, 0, r * 2, 0],\n    ['a', r, r, 0, 1, 0, -r * 2, 0],\n    ['M', x - r + 4, y],\n    ['L', x - r + 2 * r - 4, y],\n    ['M', x - r + r, y - r + 4],\n    ['L', x, y + r - 4],\n  ];\n};\n\nG6.registerCombo(\n  'cCircle',\n  {\n    drawShape: function draw(cfg, group) {\n      const self = this;\n      // Get the shape style, where the style.r corresponds to the R in the Illustration of Built-in Rect Combo\n      const style = self.getShapeStyle(cfg);\n      // Add a circle shape as keyShape which is the same as the extended 'circle' type Combo\n      const circle = group.addShape('circle', {\n        attrs: {\n          ...style,\n          x: 0,\n          y: 0,\n          r: style.r,\n        },\n        draggable: true,\n        name: 'combo-keyShape', // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n      });\n      // Add the marker on the bottom\n      const marker = group.addShape('marker', {\n        attrs: {\n          ...style,\n          fill: '#fff',\n          opacity: 1,\n          x: 0,\n          y: style.r,\n          r: 10,\n          symbol: collapseIcon,\n        },\n        draggable: true,\n        name: 'combo-marker-shape', // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n      });\n\n      return circle;\n    },\n    // Define the updating logic for the marker\n    afterUpdate: function afterUpdate(cfg, combo) {\n      const self = this;\n      // Get the shape style, where the style.r corresponds to the R in the Illustration of Built-in Rect Combo\n      const style = self.getShapeStyle(cfg);\n      const group = combo.get('group');\n      // Find the marker shape in the graphics group of the Combo\n      const marker = group.find((ele) => ele.get('name') === 'combo-marker-shape');\n      // Update the marker shape\n      marker.attr({\n        x: 0,\n        y: style.r,\n        // The property 'collapsed' in the combo data represents the collapsing state of the Combo\n        // Update the symbol according to 'collapsed'\n        symbol: cfg.collapsed ? expandIcon : collapseIcon,\n      });\n    },\n  },\n  'circle',\n);\n",paraId:29,tocIndex:8},{value:"Attention: you need to assign ",paraId:30,tocIndex:8},{value:"name",paraId:30,tocIndex:8},{value:" and ",paraId:30,tocIndex:8},{value:"draggable",paraId:30,tocIndex:8},{value:" for the shapes added in the custom node, where the ",paraId:30,tocIndex:8},{value:"name",paraId:30,tocIndex:8},{value:" can be not unique with any value you want. ",paraId:30,tocIndex:8},{value:"draggable: true",paraId:30,tocIndex:8},{value:" means that the shape is allowed to response the drag events. Only when ",paraId:30,tocIndex:8},{value:"draggable: true",paraId:30,tocIndex:8},{value:", the interaction behavior ",paraId:30,tocIndex:8},{value:"'drag-node'",paraId:30,tocIndex:8},{value:" can be responsed on this shape. In the codes above, if you only assign ",paraId:30,tocIndex:8},{value:"draggable: true",paraId:30,tocIndex:8},{value:" to the ",paraId:30,tocIndex:8},{value:"keyShape",paraId:30,tocIndex:8},{value:" but not the bottom marker shape, the drag events will only be responsed on the ",paraId:30,tocIndex:8},{value:"keyShape",paraId:30,tocIndex:8},{value:".",paraId:30,tocIndex:8},{value:"The following code uses the ",paraId:31,tocIndex:9},{value:"'cCircle'",paraId:31,tocIndex:9},{value:" Combo:",paraId:31,tocIndex:9},{value:"const data = {\n  nodes: [\n    { id: 'node1', x: 250, y: 100, comboId: 'combo1' },\n    { id: 'node2', x: 300, y: 100, comboId: 'combo1' },\n  ],\n  combos: [\n    { id: 'combo1', label: 'Combo 1', parentId: 'combo2' },\n    { id: 'combo2', label: 'Combo 2' },\n    { id: 'combo3', label: 'Combo 3' },\n  ],\n};\nconst graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 800,\n  // Configure the combos globally\n  defaultCombo: {\n    // The type of the combos. You can also assign type in the data of combos\n    type: 'cCircle',\n    labelCfg: {\n      refY: 2,\n    },\n    // ... Other global configurations for combos\n  },\n  modes: {\n    default: [\n      // The behavior to collapse/expand the Combo by double click\n      // It modifies the property 'collapsed' of the combo data\n      'collapse-expand-combo',\n    ],\n  },\n});\ngraph.data(data);\ngraph.render();\n",paraId:32,tocIndex:9},{value:"In the code above, we configured ",paraId:33,tocIndex:10},{value:"'collapse-expand-combo'",paraId:33,tocIndex:10},{value:" for the graph, which means allowing user to double click a combo to make it collapsed or expanded. To expand/collapse the combo when clicking the marker instead of double clicking the combo, remove ",paraId:33,tocIndex:10},{value:"'collapse-expand-combo'",paraId:33,tocIndex:10},{value:" configuration, and append the following code:",paraId:33,tocIndex:10},{value:"// collapse/expand when click the marker\ngraph.on('combo:click', (e) => {\n  if (e.target.get('name') === 'combo-marker-shape') {\n    // Collapse or expand the combo\n    graph.collapseExpandCombo(e.item);\n\n    if (graph.get('layout')) graph.layout();\n    // If there is a layout configured on the graph, relayout\n    else graph.refreshPositions(); // Refresh positions for items otherwise\n  }\n});\n",paraId:34,tocIndex:10}]},75066:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Node Combo is a new feature for V3.5. The ",paraId:0},{value:"node group",paraId:1},{value:" will be deprecated. We recommend to use Combo for node grouping. ",paraId:0},{value:"Demo",paraId:0},{value:". ",paraId:0},{value:"The built-in Combos in G6 include circle and rect types. ",paraId:2},{value:" ",paraId:2},{value:"In this document, we will briefly introduce the built-in Combos in G6, the common property, and the way to configure the combo type. To know more about each type of built-in combos in G6, please refer to the corresponding documents in this directory.",paraId:3},{value:"⚠️ Attention:",paraId:4},{value:" Must set the ",paraId:4},{value:"groupByTypes",paraId:4},{value:" to ",paraId:4},{value:"false",paraId:4},{value:" when instantiating the graph, which will result in rendering result with reasonable visual zIndex for combos.",paraId:4},{value:"To keep the stability of the structure of the source data, we do some compatible changes to introduce combos:",paraId:5,tocIndex:0},{value:"combos",paraId:6,tocIndex:0},{value:" array to contains all the combos data, and each of them has the properties:",paraId:6,tocIndex:0},{value:"Property",paraId:7,tocIndex:0},{value:"Type",paraId:7,tocIndex:0},{value:"Required",paraId:7,tocIndex:0},{value:"Example",paraId:7,tocIndex:0},{value:"Description",paraId:7,tocIndex:0},{value:"id",paraId:7,tocIndex:0},{value:"string",paraId:7,tocIndex:0},{value:"true",paraId:7,tocIndex:0},{value:"'comboA'",paraId:7,tocIndex:0},{value:"The uinique ID for the combo. ",paraId:7,tocIndex:0},{value:"MUST",paraId:7,tocIndex:0},{value:" be a unique string",paraId:7,tocIndex:0},{value:"parentId",paraId:7,tocIndex:0},{value:"string",paraId:7,tocIndex:0},{value:"false",paraId:7,tocIndex:0},{value:"'comboB'",paraId:7,tocIndex:0},{value:"The ID of the parent combo",paraId:7,tocIndex:0},{value:"size",paraId:7,tocIndex:0},{value:"false",paraId:7,tocIndex:0},{value:"Number / Array",paraId:7,tocIndex:0},{value:"30 or [30, 20]",paraId:7,tocIndex:0},{value:"The MINIMUM size of the combo (not for fixing the size of combo). The default value for 'circle' type Combo is 20, [20, 5] for 'rect' type",paraId:7,tocIndex:0},{value:"fixSize",paraId:7,tocIndex:0},{value:"number / number[]",paraId:7,tocIndex:0},{value:"false",paraId:7,tocIndex:0},{value:"10 or [ 10, 20 ]",paraId:7,tocIndex:0},{value:"Fix the size of the Combo. If it is not assigned, the rendering size of the combo depends on the sizes and distribution of its children items. If the ",paraId:7,tocIndex:0},{value:"fixSize",paraId:7,tocIndex:0},{value:" is assigned but the ",paraId:7,tocIndex:0},{value:"fixCollapseSize",paraId:7,tocIndex:0},{value:" is not, the size of the collapsed combo will still be ",paraId:7,tocIndex:0},{value:"fixSize",paraId:7,tocIndex:0},{value:"fixCollapseSize",paraId:7,tocIndex:0},{value:"number / number[]",paraId:7,tocIndex:0},{value:"false",paraId:7,tocIndex:0},{value:"10 or [ 10, 20 ]",paraId:7,tocIndex:0},{value:"Fix the size of the collapsed Combo. If it is not assigned and the ",paraId:7,tocIndex:0},{value:"fixSize",paraId:7,tocIndex:0},{value:" is assigned, the size of the collapsed Combo is ",paraId:7,tocIndex:0},{value:"fixSize",paraId:7,tocIndex:0},{value:"; and if ",paraId:7,tocIndex:0},{value:"fixCollapseSize",paraId:7,tocIndex:0},{value:" and ",paraId:7,tocIndex:0},{value:"fixSize",paraId:7,tocIndex:0},{value:" are both not assigned, the size of the collapsed Combo is ",paraId:7,tocIndex:0},{value:"size",paraId:7,tocIndex:0},{value:" ｜",paraId:7,tocIndex:0},{value:"padding",paraId:7,tocIndex:0},{value:"Number / Number[]",paraId:7,tocIndex:0},{value:"10 or [ 10, 20, 10, 20 ]",paraId:7,tocIndex:0},{value:"The padding inside the combo",paraId:7,tocIndex:0},{value:"label",paraId:7,tocIndex:0},{value:"string",paraId:7,tocIndex:0},{value:"false",paraId:7,tocIndex:0},{value:"'combo A'",paraId:7,tocIndex:0},{value:"The label text of the combo",paraId:7,tocIndex:0},{value:"style",paraId:7,tocIndex:0},{value:"Object",paraId:7,tocIndex:0},{value:"false",paraId:7,tocIndex:0},{value:"The style configuration of the combo, details are in ",paraId:7,tocIndex:0},{value:"Built-in Combo Configuration",paraId:8,tocIndex:0},{value:" and documents of each type of combo",paraId:7,tocIndex:0},{value:"labelCfg",paraId:7,tocIndex:0},{value:"Object",paraId:7,tocIndex:0},{value:"false",paraId:7,tocIndex:0},{value:"The label configuration of the combo, details are in ",paraId:7,tocIndex:0},{value:"Built-in Combo Configuration",paraId:9,tocIndex:0},{value:" and documents of each type of combo",paraId:7,tocIndex:0},{value:"collapsed",paraId:7,tocIndex:0},{value:"Boolean",paraId:7,tocIndex:0},{value:"false",paraId:7,tocIndex:0},{value:"true",paraId:7,tocIndex:0},{value:"Whether the combo is collapsed. Config it with true before render will make the combo collapsed by default",paraId:7,tocIndex:0},{value:"collapsedSubstituteIcon",paraId:7,tocIndex:0},{value:"Object",paraId:7,tocIndex:0},{value:"false",paraId:7,tocIndex:0},{value:"{ show: true }",paraId:7,tocIndex:0},{value:"Supported by v4.6.8",paraId:7,tocIndex:0},{value:" The image shows while the combo is collapsed",paraId:7,tocIndex:0},{value:"An example for the data item for a combo",paraId:10,tocIndex:0},{value:"{\n  id: 'comboA',\n  label: 'A',\n  parentId: 'comboC'\n},\n",paraId:11,tocIndex:0},{value:"Introduce ",paraId:12,tocIndex:0},{value:"comboId",paraId:12,tocIndex:0},{value:" in data items of nodes to indicate the affiliation.",paraId:12,tocIndex:0},{value:"{\n  nodes: [\n    {\n      id: 'node1',\n      comboId: 'comboA' // node1 belongs to comboA\n    },\n    {\n      id: 'node2',\n      comboId: 'comboB' // node2 belongs to comboB\n    },\n    {\n      id: 'node3' // node3 belongs to no one\n    },\n    // ...\n  ],\n  edges: [\n    // ...\n  ],\n  combos: [\n    { // define comboA\n      id: 'comboA',\n      label: 'A',\n      parentId: 'comboC'\n    },\n    { // define comboB\n      id: 'comboB',\n      parentId: 'comboB'\n    },\n    { // define comboC, an empty combo\n      id: 'comboC'\n    },\n    // ...\n  ]\n}\n",paraId:13,tocIndex:0},{value:"The table below shows the built-in Combos and their special properties:",paraId:14,tocIndex:1},{value:"Name",paraId:15,tocIndex:1},{value:"Description",paraId:15,tocIndex:1},{value:"Default",paraId:15,tocIndex:1},{value:"circle",paraId:15,tocIndex:1},{value:"Circle Combo: ",paraId:15,tocIndex:1},{value:"- ",paraId:15,tocIndex:1},{value:"size",paraId:15,tocIndex:1},{value:" is a number representing the diameter",paraId:15,tocIndex:1},{value:"- The circle is centered at the combo position",paraId:15,tocIndex:1},{value:"- ",paraId:15,tocIndex:1},{value:"color",paraId:15,tocIndex:1},{value:" takes effect on the stroke",paraId:15,tocIndex:1},{value:"- The label is placed on the top of the circle by default",paraId:15,tocIndex:1},{value:"- More properties are described in ",paraId:15,tocIndex:1},{value:"circle",paraId:16,tocIndex:1},{value:"- ",paraId:15,tocIndex:1},{value:"Demo",paraId:15,tocIndex:1},{value:"rect",paraId:15,tocIndex:1},{value:"Rect Combo: ",paraId:15,tocIndex:1},{value:"- ",paraId:15,tocIndex:1},{value:"size",paraId:15,tocIndex:1},{value:" is an array, e.g. [100, 50]",paraId:15,tocIndex:1},{value:"- The rect in centered at the combo position",paraId:15,tocIndex:1},{value:"- ",paraId:15,tocIndex:1},{value:"color",paraId:15,tocIndex:1},{value:" takes effect on the stroke",paraId:15,tocIndex:1},{value:"- The label is placed on the left top of the circle by default",paraId:15,tocIndex:1},{value:"- More properties are described in ",paraId:15,tocIndex:1},{value:"rect",paraId:17,tocIndex:1},{value:"- ",paraId:15,tocIndex:1},{value:"Demo",paraId:15,tocIndex:1},{value:"Name",paraId:18,tocIndex:2},{value:"Required",paraId:18,tocIndex:2},{value:"Type",paraId:18,tocIndex:2},{value:"Example",paraId:18,tocIndex:2},{value:"Remark",paraId:18,tocIndex:2},{value:"id",paraId:18,tocIndex:2},{value:"true",paraId:18,tocIndex:2},{value:"String",paraId:18,tocIndex:2},{value:"'comboA'",paraId:18,tocIndex:2},{value:"The id of the Combo, ",paraId:18,tocIndex:2},{value:"Must",paraId:18,tocIndex:2},{value:" be a unique string",paraId:18,tocIndex:2},{value:"type",paraId:18,tocIndex:2},{value:"false",paraId:18,tocIndex:2},{value:"String",paraId:18,tocIndex:2},{value:"'rect'",paraId:18,tocIndex:2},{value:"The shape type of the Combo. It can be the type of built-in Combo, or the custom Combo. ",paraId:18,tocIndex:2},{value:"'circle'",paraId:18,tocIndex:2},{value:" by default",paraId:18,tocIndex:2},{value:"parentId",paraId:18,tocIndex:2},{value:"string",paraId:18,tocIndex:2},{value:"false",paraId:18,tocIndex:2},{value:"'comboB'",paraId:18,tocIndex:2},{value:"The ID of the parent Combo",paraId:18,tocIndex:2},{value:"size",paraId:18,tocIndex:2},{value:"false",paraId:18,tocIndex:2},{value:"Number / Array",paraId:18,tocIndex:2},{value:"30 or [30, 20]",paraId:18,tocIndex:2},{value:"The MINIMUM size of the combo (not for fixing the size of combo). The default value for 'circle' type Combo is 20, [20, 5] for 'rect' type",paraId:18,tocIndex:2},{value:"fixSize",paraId:18,tocIndex:2},{value:"number / number[]",paraId:18,tocIndex:2},{value:"false",paraId:18,tocIndex:2},{value:"10 or [ 10, 20 ]",paraId:18,tocIndex:2},{value:"Fix the size of the Combo. If it is not assigned, the rendering size of the combo depends on the sizes and distribution of its children items. If the ",paraId:18,tocIndex:2},{value:"fixSize",paraId:18,tocIndex:2},{value:" is assigned but the ",paraId:18,tocIndex:2},{value:"fixCollapseSize",paraId:18,tocIndex:2},{value:" is not, the size of the collapsed combo will still be ",paraId:18,tocIndex:2},{value:"fixSize",paraId:18,tocIndex:2},{value:"fixCollapseSize",paraId:18,tocIndex:2},{value:"number / number[]",paraId:18,tocIndex:2},{value:"false",paraId:18,tocIndex:2},{value:"10 or [ 10, 20 ]",paraId:18,tocIndex:2},{value:"Fix the size of the collapsed Combo. If it is not assigned and the ",paraId:18,tocIndex:2},{value:"fixSize",paraId:18,tocIndex:2},{value:" is assigned, the size of the collapsed Combo is ",paraId:18,tocIndex:2},{value:"fixSize",paraId:18,tocIndex:2},{value:"; and if ",paraId:18,tocIndex:2},{value:"fixCollapseSize",paraId:18,tocIndex:2},{value:" and ",paraId:18,tocIndex:2},{value:"fixSize",paraId:18,tocIndex:2},{value:" are both not assigned, the size of the collapsed Combo is ",paraId:18,tocIndex:2},{value:"size",paraId:18,tocIndex:2},{value:" ｜",paraId:18,tocIndex:2},{value:"padding",paraId:18,tocIndex:2},{value:"Number / Number[]",paraId:18,tocIndex:2},{value:"false",paraId:18,tocIndex:2},{value:"10 or [ 10, 20, 10, 20 ]",paraId:18,tocIndex:2},{value:"The padding of the Combo. The default value for 'circle' type Combo is 25, [25, 20, 15, 20] for 'rect'",paraId:18,tocIndex:2},{value:"style",paraId:18,tocIndex:2},{value:"false",paraId:18,tocIndex:2},{value:"Object",paraId:18,tocIndex:2},{value:"The Combo style",paraId:18,tocIndex:2},{value:"label",paraId:18,tocIndex:2},{value:"false",paraId:18,tocIndex:2},{value:"String",paraId:18,tocIndex:2},{value:"'Combo A'",paraId:18,tocIndex:2},{value:"The label text of the combo",paraId:18,tocIndex:2},{value:"labelCfg",paraId:18,tocIndex:2},{value:"false",paraId:18,tocIndex:2},{value:"Object",paraId:18,tocIndex:2},{value:"The configurations of the combo",paraId:18,tocIndex:2},{value:"style",paraId:19,tocIndex:3},{value:" is an object to configure the filling color, stroke color, shadow, and so on. Here is the commonly used properties in ",paraId:19,tocIndex:3},{value:"style",paraId:19,tocIndex:3},{value:":",paraId:19,tocIndex:3},{value:"Name",paraId:20,tocIndex:3},{value:"Required",paraId:20,tocIndex:3},{value:"Type",paraId:20,tocIndex:3},{value:"Remark",paraId:20,tocIndex:3},{value:"fill",paraId:20,tocIndex:3},{value:"false",paraId:20,tocIndex:3},{value:"String",paraId:20,tocIndex:3},{value:"The filling color",paraId:20,tocIndex:3},{value:"stroke",paraId:20,tocIndex:3},{value:"false",paraId:20,tocIndex:3},{value:"String",paraId:20,tocIndex:3},{value:"The stroke color",paraId:20,tocIndex:3},{value:"lineWidth",paraId:20,tocIndex:3},{value:"false",paraId:20,tocIndex:3},{value:"Number",paraId:20,tocIndex:3},{value:"The line width of the stroke",paraId:20,tocIndex:3},{value:"shadowColor",paraId:20,tocIndex:3},{value:"false",paraId:20,tocIndex:3},{value:"String",paraId:20,tocIndex:3},{value:"The shadow color",paraId:20,tocIndex:3},{value:"shadowBlur",paraId:20,tocIndex:3},{value:"false",paraId:20,tocIndex:3},{value:"Number",paraId:20,tocIndex:3},{value:"The blur of the shadow",paraId:20,tocIndex:3},{value:"shadowOffsetX",paraId:20,tocIndex:3},{value:"false",paraId:20,tocIndex:3},{value:"Number",paraId:20,tocIndex:3},{value:"The x offset of the shadow",paraId:20,tocIndex:3},{value:"shadowOffsetY",paraId:20,tocIndex:3},{value:"false",paraId:20,tocIndex:3},{value:"Number",paraId:20,tocIndex:3},{value:"The y offset of the shadow",paraId:20,tocIndex:3},{value:"opacity",paraId:20,tocIndex:3},{value:"false",paraId:20,tocIndex:3},{value:"Number",paraId:20,tocIndex:3},{value:"The alpha or transparency of the combo",paraId:20,tocIndex:3},{value:"fillOpacity",paraId:20,tocIndex:3},{value:"false",paraId:20,tocIndex:3},{value:"Number",paraId:20,tocIndex:3},{value:"The filling alpha or transparency of the combo",paraId:20,tocIndex:3},{value:"cursor",paraId:20,tocIndex:3},{value:"false",paraId:20,tocIndex:3},{value:"String",paraId:20,tocIndex:3},{value:"The type of the mouse when hovering the combo. The options are the same as ",paraId:20,tocIndex:3},{value:"cursor in CSS",paraId:20,tocIndex:3},{value:"Configure ",paraId:21,tocIndex:3},{value:"style",paraId:21,tocIndex:3},{value:" globally when instantiating the Graph:",paraId:21,tocIndex:3},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  // Set groupByTypes to false to get rendering result with reasonable visual zIndex for combos\n  groupByTypes: false,\n  defaultCombo: {\n    // ... Other properties for combos\n    style: {\n      fill: '#steelblue',\n      stroke: '#eaff8f',\n      lineWidth: 5,\n      // ... Other style properties\n    },\n  },\n});\n",paraId:22,tocIndex:3},{value:"label",paraId:23,tocIndex:4},{value:" is a string which indicates the content of the label. ",paraId:23,tocIndex:4},{value:"labelCfg",paraId:23,tocIndex:4},{value:" is an object to configure the label. The commonly used configurations of ",paraId:23,tocIndex:4},{value:"labelCfg",paraId:23,tocIndex:4},{value:":",paraId:23,tocIndex:4},{value:"Name",paraId:24,tocIndex:4},{value:"Required",paraId:24,tocIndex:4},{value:"Type",paraId:24,tocIndex:4},{value:"Remark",paraId:24,tocIndex:4},{value:"position",paraId:24,tocIndex:4},{value:"false",paraId:24,tocIndex:4},{value:"String",paraId:24,tocIndex:4},{value:"The relative positions to the combo. Options:  ",paraId:24,tocIndex:4},{value:"'center'",paraId:24,tocIndex:4},{value:", ",paraId:24,tocIndex:4},{value:"'top'",paraId:24,tocIndex:4},{value:", ",paraId:24,tocIndex:4},{value:"'left'",paraId:24,tocIndex:4},{value:", ",paraId:24,tocIndex:4},{value:"'right'",paraId:24,tocIndex:4},{value:", ",paraId:24,tocIndex:4},{value:"'bottom'",paraId:24,tocIndex:4},{value:". ",paraId:24,tocIndex:4},{value:"'top'",paraId:24,tocIndex:4},{value:" by default",paraId:24,tocIndex:4},{value:"refX",paraId:24,tocIndex:4},{value:"false",paraId:24,tocIndex:4},{value:"Number",paraId:24,tocIndex:4},{value:"The label's offset along the x-axis",paraId:24,tocIndex:4},{value:"refY",paraId:24,tocIndex:4},{value:"false",paraId:24,tocIndex:4},{value:"Number",paraId:24,tocIndex:4},{value:"The label's offset along the y-axis",paraId:24,tocIndex:4},{value:"style",paraId:24,tocIndex:4},{value:"false",paraId:24,tocIndex:4},{value:"Object",paraId:24,tocIndex:4},{value:"The style property of the label",paraId:24,tocIndex:4},{value:"The commonly used configurations for the ",paraId:25,tocIndex:4},{value:"style",paraId:25,tocIndex:4},{value:" in the above table are:",paraId:25,tocIndex:4},{value:"Name",paraId:26,tocIndex:4},{value:"Required",paraId:26,tocIndex:4},{value:"Type",paraId:26,tocIndex:4},{value:"Remark",paraId:26,tocIndex:4},{value:"fill",paraId:26,tocIndex:4},{value:"false",paraId:26,tocIndex:4},{value:"String",paraId:26,tocIndex:4},{value:"The color of the label",paraId:26,tocIndex:4},{value:"stroke",paraId:26,tocIndex:4},{value:"false",paraId:26,tocIndex:4},{value:"String",paraId:26,tocIndex:4},{value:"The stroke color of the label",paraId:26,tocIndex:4},{value:"lineWidth",paraId:26,tocIndex:4},{value:"false",paraId:26,tocIndex:4},{value:"Number",paraId:26,tocIndex:4},{value:"The line width of the label",paraId:26,tocIndex:4},{value:"opacity",paraId:26,tocIndex:4},{value:"false",paraId:26,tocIndex:4},{value:"Number",paraId:26,tocIndex:4},{value:"The opacity of the label",paraId:26,tocIndex:4},{value:"fontFamily",paraId:26,tocIndex:4},{value:"false",paraId:26,tocIndex:4},{value:"String",paraId:26,tocIndex:4},{value:"文本字体",paraId:26,tocIndex:4},{value:"fontSize",paraId:26,tocIndex:4},{value:"false",paraId:26,tocIndex:4},{value:"Number",paraId:26,tocIndex:4},{value:"The font size of the label",paraId:26,tocIndex:4},{value:"... The label styles of Combo, Node and Edge are the same, summarized in ",paraId:26,tocIndex:4},{value:"Text Shape API",paraId:27,tocIndex:4},{value:"The following code shows how to configure ",paraId:28,tocIndex:4},{value:"label",paraId:28,tocIndex:4},{value:" and ",paraId:28,tocIndex:4},{value:"labelCfg",paraId:28,tocIndex:4},{value:" globally when instantiating a Graph:",paraId:28,tocIndex:4},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  // Set groupByTypes to false to get rendering result with reasonable visual zIndex for combos\n  groupByTypes: false,\n  defaultCombo: {\n    // ... Other properties for combos\n    labelCfg: {\n      position: 'top',\n      offset: [10, 10, 10, 10],\n      style: {\n        fill: '#666',\n      },\n    },\n  },\n});\n",paraId:29,tocIndex:4},{value:"Supported by v4.6.8",paraId:30,tocIndex:5},{value:" ",paraId:30,tocIndex:5},{value:"collapsedSubstituteIcon",paraId:30,tocIndex:5},{value:" is an object to configure a substitute image for the collapsed combo. Here is the commonly used properties in ",paraId:30,tocIndex:5},{value:"collapsedSubstituteIcon",paraId:30,tocIndex:5},{value:":",paraId:30,tocIndex:5},{value:"Name",paraId:31,tocIndex:5},{value:"Required",paraId:31,tocIndex:5},{value:"Type",paraId:31,tocIndex:5},{value:"Remark",paraId:31,tocIndex:5},{value:"show",paraId:31,tocIndex:5},{value:"false",paraId:31,tocIndex:5},{value:"Boolean",paraId:31,tocIndex:5},{value:"Whether show the substitute image when the combo is collapsed. false by default",paraId:31,tocIndex:5},{value:"img",paraId:31,tocIndex:5},{value:"false",paraId:31,tocIndex:5},{value:"String",paraId:31,tocIndex:5},{value:"The image url for the Icon, default image: ",paraId:31,tocIndex:5},{value:"width",paraId:31,tocIndex:5},{value:"false",paraId:31,tocIndex:5},{value:"Number",paraId:31,tocIndex:5},{value:"The width of the icon image. The width of collapsed combo will take effect by default",paraId:31,tocIndex:5},{value:"height",paraId:31,tocIndex:5},{value:"false",paraId:31,tocIndex:5},{value:"Number",paraId:31,tocIndex:5},{value:"The height of the icon image. The height of collapsed combo will take effect by default",paraId:31,tocIndex:5},{value:"Configure ",paraId:32,tocIndex:5},{value:"collapsedSubstituteIcon",paraId:32,tocIndex:5},{value:" globally when instantiating the Graph:",paraId:32,tocIndex:5},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  // Set groupByTypes to false to get rendering result with reasonable visual zIndex for combos\n  groupByTypes: false,\n  defaultCombo: {\n    // ... Other properties for combos\n    collapsedSubstituteIcon: {\n      show: true,\n      img: 'https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*IEQFS5VtXX8AAAAAAAAAAABkARQnAQ',\n      // ... other properties\n    },\n  },\n});\n",paraId:33,tocIndex:5},{value:"There are three methods to configure combos: Configure combos globally when instantiating a Graph; Configure combos in their data; Configure combos by ",paraId:34,tocIndex:6},{value:"graph.combo(comboFn)",paraId:34,tocIndex:6},{value:". Their priorities are:",paraId:34,tocIndex:6},{value:"graph.combo(comboFn",paraId:35,tocIndex:6},{value:" > Configure in data > Configure globally",paraId:35,tocIndex:6},{value:"That means, if there are same configurations in different ways, the way with higher priority will take effect.",paraId:36,tocIndex:6},{value:"⚠️ Attention:",paraId:37,tocIndex:6},{value:" Expect for ",paraId:37,tocIndex:6},{value:"id",paraId:37,tocIndex:6},{value:", ",paraId:37,tocIndex:6},{value:"parentId",paraId:37,tocIndex:6},{value:", and ",paraId:37,tocIndex:6},{value:"label",paraId:37,tocIndex:6},{value:" which should be assigned to every single combo data, the other configurations in ",paraId:37,tocIndex:6},{value:"The Common Property",paraId:38,tocIndex:6},{value:" and in each combo type (refer to doc of each combo type) support to be assigned by the three ways.",paraId:37,tocIndex:6},{value:"Assign ",paraId:39,tocIndex:7},{value:"defaultCombo",paraId:39,tocIndex:7},{value:" to configure all the combos globally:",paraId:39,tocIndex:7},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  // Set groupByTypes to false to get rendering result with reasonable visual zIndex for combos\n  groupByTypes: false,\n  defaultCombo: {\n    type: 'circle',\n    // Other properties for all the combos\n  },\n});\n",paraId:40,tocIndex:7},{value:"To configure different combos with different properties, you can write the properties into their data individually:",paraId:41,tocIndex:8},{value:"const data = {\n  nodes: [\n    ... // nodes\n  ],\n  edges: [\n    ... // edges\n  ],\n  combos: [{\n    id: 'combo0',\n    size: 100,\n    type: 'circle',\n    ...    // Other properties for this combo\n    style: {\n      ...  // Style properties for this combo. Different styles for different types of combos can be refered to the subdocuments\n    }\n  },{\n    id: 'combo1',\n    size: [50, 100],\n    type: 'rect',\n    ...    // Other properties for this combo\n    style: {\n      ...  // Style properties for this combo. Different styles for different types of combos can be refered to the subdocuments\n    }\n  },\n  // other combos\n  ]\n}\n",paraId:42,tocIndex:8},{value:"By this way, we can configure different combos with different properties.",paraId:43,tocIndex:9},{value:"⚠️Attention:",paraId:44,tocIndex:9},{value:"graph.combo(comboFn)",paraId:45,tocIndex:9},{value:" must be called ",paraId:45,tocIndex:9},{value:"before calling render()",paraId:45,tocIndex:9},{value:". It does not take effect otherwise;",paraId:45,tocIndex:9},{value:"It has the highest priority that will override the same properties configured by other ways;",paraId:45,tocIndex:9},{value:"Each combo will be updated when adding or updating items. It will cost a lot when the amount of the data is large.",paraId:45,tocIndex:9},{value:"// const data = ...\n// const graph = ...\ngraph.combo((combo) => {\n  return {\n    id: combo.id,\n    type: 'rect',\n    style: {\n      fill: 'blue',\n    },\n  };\n});\n\ngraph.data(data);\ngraph.render();\n",paraId:46,tocIndex:9},{value:"To allow the users to interact with the combos, we implemented three built-in behaviors: ",paraId:47,tocIndex:10},{value:"drag-combo",paraId:47,tocIndex:10},{value:", ",paraId:47,tocIndex:10},{value:"collapse-expand-combo",paraId:47,tocIndex:10},{value:", and ",paraId:47,tocIndex:10},{value:"drag-node",paraId:47,tocIndex:10},{value:" ",paraId:47,tocIndex:10},{value:"Behavior",paraId:48,tocIndex:10},{value:"s.",paraId:47,tocIndex:10},{value:"'drag-combo'",paraId:49,tocIndex:11},{value:"behavior supports dragging a combo to re-arrange its position or its hierarchy.",paraId:49,tocIndex:11},{value:"'collapse-expand-combo'",paraId:50,tocIndex:12},{value:"behavior supports collapsing or expanding the combo by double clicking. The children will be hidden when the combo is collapsed, and the edges related to the children will link to the combo. If the graph has layout configuration and the ",paraId:50,tocIndex:12},{value:"relayout",paraId:50,tocIndex:12},{value:" for this behavior is ",paraId:50,tocIndex:12},{value:"true",paraId:50,tocIndex:12},{value:" (",paraId:50,tocIndex:12},{value:"true",paraId:50,tocIndex:12},{value:" by default), this behavior will trigger re-layout. If you do not want re-layout the graph after collapsing or expanding a combo, assign ",paraId:50,tocIndex:12},{value:"relayout: false",paraId:50,tocIndex:12},{value:" for this behavior, or use combo's click listener and ",paraId:50,tocIndex:12},{value:"graph.collapseExpandCombo API",paraId:51,tocIndex:12},{value:" instead.",paraId:50,tocIndex:12},{value:"'drag-node'",paraId:52,tocIndex:13},{value:" behavior allows end users to drag the node to re-arrange the position and change the hierarchy of the node and its parent combo.",paraId:52,tocIndex:13},{value:"The code below shows how to configure the behaviors onto the graph:",paraId:53,tocIndex:14},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  // Set groupByTypes to false to get rendering result with reasonable visual zIndex for combos\n  groupByTypes: false,\n  modes: {\n    default: ['drag-combo', 'collapse-expand-combo', 'drag-node'],\n  },\n});\n",paraId:54,tocIndex:14},{value:"const data = {\n  nodes: [\n    {\n      id: 'node1',\n      label: 'Node1',\n      comboId: 'rect_combo',\n    },\n    {\n      id: 'node2',\n      label: 'Node 2',\n    },\n  ],\n  combos: [\n    {\n      id: 'circle_combo',\n      type: 'circle',\n      label: 'Circle',\n    },\n    {\n      id: 'rect_combo',\n      type: 'rect',\n      label: 'Rect',\n    },\n  ],\n};\n\nconst graph = new G6.Graph({\n  container: 'mountNode',\n  width: 1500,\n  height: 300,\n  // Set groupByTypes to false to get rendering result with reasonable visual zIndex for combos\n  groupByTypes: false,\n});\ngraph.data(data);\ngraph.render();\n",paraId:55,tocIndex:15},{value:"The result: ",paraId:56,tocIndex:15},{value:" ",paraId:56,tocIndex:15},{value:"By writing the properties into the data, we adjust the label position, color, and styles of the combo with ",paraId:57,tocIndex:16},{value:"'rect_combo'",paraId:57,tocIndex:16},{value:" as its id. Replace the following code to the code about ",paraId:57,tocIndex:16},{value:"'rect_combo'",paraId:57,tocIndex:16},{value:"'s data to obtain the result.",paraId:57,tocIndex:16},{value:"{\n  id: 'rect_combo',\n  type: 'rect',\n  label: 'Rect Combo',\n  labelCfg: {\n    position: 'bottom',\n    refX: 5,\n    refY: -12,\n    style: {\n      fill: '#fff'\n    }\n  },\n  style: {\n    fill: '#fa8c16',\n    stroke: '#000',\n    lineWidth: 2\n  }\n}\n",paraId:58,tocIndex:16},{value:"State",paraId:59,tocIndex:18},{value:" —— Change the styles during the interaction process;",paraId:60,tocIndex:18},{value:"Hull",paraId:61,tocIndex:18},{value:".",paraId:60,tocIndex:18}]},64998:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"No matter built-in edges or ",paraId:0},{value:"custom edges",paraId:1},{value:", arrows can be assigned to the end or begin position of an edge. There are three kinds of arrows in G6: default arrow, built-in arrow, and custom arrow.",paraId:0},{value:" ",paraId:2},{value:"Configure the ",paraId:3,tocIndex:1},{value:"endArrow",paraId:3,tocIndex:1},{value:" or ",paraId:3,tocIndex:1},{value:"startArrow",paraId:3,tocIndex:1},{value:" to ",paraId:3,tocIndex:1},{value:"true",paraId:3,tocIndex:1},{value:" in the ",paraId:3,tocIndex:1},{value:"style",paraId:3,tocIndex:1},{value:" of an edge:",paraId:3,tocIndex:1},{value:"style: {\n  endArrow: true,\n  startArrow: true\n}\n",paraId:4,tocIndex:1},{value:"Supported by v3.5.8 and later versions.",paraId:5,tocIndex:2},{value:"Name",paraId:6,tocIndex:3},{value:"Parameters",paraId:6,tocIndex:3},{value:"Usage",paraId:6,tocIndex:3},{value:"Result",paraId:6,tocIndex:3},{value:"triangle",paraId:6,tocIndex:3},{value:"The paramters are arrow's width (10 by default), length (15 by default), and offset (0 by default, corresponds to ",paraId:6,tocIndex:3},{value:"d",paraId:6,tocIndex:3},{value:"), respectively.",paraId:6,tocIndex:3},{value:"endArrow: {",paraId:6,tocIndex:3},{value:" path: G6.Arrow.triangle(10, 20, 25),",paraId:6,tocIndex:3},{value:" d: 25",paraId:6,tocIndex:3},{value:"}",paraId:6,tocIndex:3},{value:"vee",paraId:6,tocIndex:3},{value:"The paramters are arrow's width (15 by default), length (20 by default), and offset (0 by default, corresponds to ",paraId:6,tocIndex:3},{value:"d",paraId:6,tocIndex:3},{value:"), respectively. ",paraId:6,tocIndex:3},{value:"endArrow: {",paraId:6,tocIndex:3},{value:" path: G6.Arrow.vee(10, 20, 25),",paraId:6,tocIndex:3},{value:" d: 25",paraId:6,tocIndex:3},{value:"}",paraId:6,tocIndex:3},{value:"circle",paraId:6,tocIndex:3},{value:"The paramters are arrow's radius (5 by default) and offset (0 by default, corresponds to ",paraId:6,tocIndex:3},{value:"d",paraId:6,tocIndex:3},{value:") respectively. ",paraId:6,tocIndex:3},{value:"endArrow: {",paraId:6,tocIndex:3},{value:" path: G6.Arrow.circle(10, 25),",paraId:6,tocIndex:3},{value:" d: 25",paraId:6,tocIndex:3},{value:"}",paraId:6,tocIndex:3},{value:"diamond",paraId:6,tocIndex:3},{value:"The paramters are arrow's width (15 by default), length (15 by default), and offset (0 by default, corresponds to ",paraId:6,tocIndex:3},{value:"d",paraId:6,tocIndex:3},{value:"), respectively. ",paraId:6,tocIndex:3},{value:"endArrow: {",paraId:6,tocIndex:3},{value:" path: G6.Arrow.diamond(10, 20, 25),",paraId:6,tocIndex:3},{value:" d: 25",paraId:6,tocIndex:3},{value:"}",paraId:6,tocIndex:3},{value:"rect",paraId:6,tocIndex:3},{value:"The paramters are arrow's width (10 by default), length (10 by default), and offset (0 by default, corresponds to ",paraId:6,tocIndex:3},{value:"d",paraId:6,tocIndex:3},{value:"), respectively. ",paraId:6,tocIndex:3},{value:"endArrow: {",paraId:6,tocIndex:3},{value:" path: G6.Arrow.rect(10, 20, 25),",paraId:6,tocIndex:3},{value:" d: 25",paraId:6,tocIndex:3},{value:"}",paraId:6,tocIndex:3},{value:"triangleRect",paraId:6,tocIndex:3},{value:"The paramters are triangle's width (15 by default), triangle's length (20 by default), rect's width (15 by default), rect's length (3 by default), gap between the triangle and the rect (3 by default), and offset (0 by default, corresponds to ",paraId:6,tocIndex:3},{value:"d",paraId:6,tocIndex:3},{value:"), respectively. ",paraId:6,tocIndex:3},{value:"endArrow: {",paraId:6,tocIndex:3},{value:" path: G6.Arrow.triangleRect(15, 15, 15, 3, 5, 25),",paraId:6,tocIndex:3},{value:" d: 25",paraId:6,tocIndex:3},{value:"}",paraId:6,tocIndex:3},{value:"Call ",paraId:7,tocIndex:4},{value:"G6.Arrow.arrowName",paraId:7,tocIndex:4},{value:" for the ",paraId:7,tocIndex:4},{value:"path",paraId:7,tocIndex:4},{value:" in ",paraId:7,tocIndex:4},{value:"style",paraId:7,tocIndex:4},{value:"'s ",paraId:7,tocIndex:4},{value:"endArrow",paraId:7,tocIndex:4},{value:" or ",paraId:7,tocIndex:4},{value:"startArrow",paraId:7,tocIndex:4},{value:":",paraId:7,tocIndex:4},{value:"style: {\n  endArrow: {\n    path: G6.Arrow.triangle(10, 20, 25), // Using the built-in edges for the path, parameters are the width, length, offset (0 by default, corresponds to d), respectively\n    d: 25\n  },\n  startArrow: {\n    path: G6.Arrow.vee(15, 20, 15), // Using the built-in edges for the path, parameters are the width, length, offset (0 by default, corresponds to d), respectively\n    d: 15\n  },\n}\n",paraId:8,tocIndex:4},{value:"Please follow the ",paraId:9,tocIndex:5},{value:"Custom Arrow",paraId:10,tocIndex:5},{value:" in the Advanced Doc.",paraId:9,tocIndex:5},{value:"Only built-in edges and custom edges can be configured.",paraId:11,tocIndex:6},{value:"Name",paraId:12,tocIndex:7},{value:"Required",paraId:12,tocIndex:7},{value:"Type",paraId:12,tocIndex:7},{value:"Description",paraId:12,tocIndex:7},{value:"fill",paraId:12,tocIndex:7},{value:"false",paraId:12,tocIndex:7},{value:"String",paraId:12,tocIndex:7},{value:"Filling color. No fill by default",paraId:12,tocIndex:7},{value:"stroke",paraId:12,tocIndex:7},{value:"false",paraId:12,tocIndex:7},{value:"String",paraId:12,tocIndex:7},{value:"The stroke color. Same as the edge by default",paraId:12,tocIndex:7},{value:"lineWidth",paraId:12,tocIndex:7},{value:"false",paraId:12,tocIndex:7},{value:"Number",paraId:12,tocIndex:7},{value:"The line width. Same as the edge by default",paraId:12,tocIndex:7},{value:"opacity",paraId:12,tocIndex:7},{value:"false",paraId:12,tocIndex:7},{value:"Number",paraId:12,tocIndex:7},{value:"Opacity",paraId:12,tocIndex:7},{value:"strokeOpacity",paraId:12,tocIndex:7},{value:"false",paraId:12,tocIndex:7},{value:"Number",paraId:12,tocIndex:7},{value:"The stroke opacity",paraId:12,tocIndex:7},{value:"shadowColor",paraId:12,tocIndex:7},{value:"false",paraId:12,tocIndex:7},{value:"String",paraId:12,tocIndex:7},{value:"The color of the shadow",paraId:12,tocIndex:7},{value:"shadowBlur",paraId:12,tocIndex:7},{value:"false",paraId:12,tocIndex:7},{value:"Number",paraId:12,tocIndex:7},{value:"The blur degree of the shadow",paraId:12,tocIndex:7},{value:"shadowOffsetX",paraId:12,tocIndex:7},{value:"false",paraId:12,tocIndex:7},{value:"Number",paraId:12,tocIndex:7},{value:"The x offset of the shadow",paraId:12,tocIndex:7},{value:"shadowOffsetY",paraId:12,tocIndex:7},{value:"false",paraId:12,tocIndex:7},{value:"Number",paraId:12,tocIndex:7},{value:"The y offset of the shadow",paraId:12,tocIndex:7},{value:"lineDash",paraId:12,tocIndex:7},{value:"false",paraId:12,tocIndex:7},{value:"Array",paraId:12,tocIndex:7},{value:"The style of the dash line. It is an array that describes the length of gaps and line segments. If the number of the elements in the array is odd, the elements will be dulplicated. Such as [5, 15, 25] will be regarded as [5, 15, 25, 5, 15, 25]",paraId:12,tocIndex:7},{value:"// Built-in Arrow\nstyle: {\n  endArrow: {\n    path: G6.Arrow.triangle(10, 20, 25),\n    d: 25,\n    fill: '#f00',\n    stroke: '#0f0',\n    opacity: 0.5,\n    lineWidth: 3,\n    // ...\n  },\n}\n\n\n// Custom Arrow\nstyle: {\n  endArrow: {\n    path: 'M 0,0 L 20,10 L 20,-10 Z',\n    d: 5,\n    fill: '#f00',\n    stroke: '#0f0',\n    opacity: 0.5,\n    lineWidth: 3,\n    // ...\n  },\n}\n",paraId:13,tocIndex:8}]},4286:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"A built-in edge Arc has the default style as below.",paraId:0},{value:"As stated in ",paraId:1,tocIndex:0},{value:"Built-in Edges",paraId:2,tocIndex:0},{value:" , there are three methods to configure edges: Configure edges globally when instantiating a Graph; Configure edges in their data; Configure edges by ",paraId:1,tocIndex:0},{value:"graph.edge(edgeFn)",paraId:1,tocIndex:0},{value:". Their priorities are:",paraId:1,tocIndex:0},{value:"graph.edge(edgeFn)",paraId:3,tocIndex:0},{value:" > Configure in data > Configure globally",paraId:3,tocIndex:0},{value:"⚠️ Attention:",paraId:4,tocIndex:0},{value:" Expect for ",paraId:4,tocIndex:0},{value:"id",paraId:4,tocIndex:0},{value:", ",paraId:4,tocIndex:0},{value:"source",paraId:4,tocIndex:0},{value:", ",paraId:4,tocIndex:0},{value:"target",paraId:4,tocIndex:0},{value:", ",paraId:4,tocIndex:0},{value:"label",paraId:4,tocIndex:0},{value:" which should be assigned to every single edge data, the other configurations in ",paraId:4,tocIndex:0},{value:"The Common Property",paraId:5,tocIndex:0},{value:" and in each edge type (refer to doc of each edge type) support to be assigned by the three ways.",paraId:4,tocIndex:0},{value:"Assign ",paraId:6,tocIndex:1},{value:"type",paraId:6,tocIndex:1},{value:" to ",paraId:6,tocIndex:1},{value:"'arc'",paraId:6,tocIndex:1},{value:" in the ",paraId:6,tocIndex:1},{value:"defaultEdge",paraId:6,tocIndex:1},{value:" object when instantiating a Graph:",paraId:6,tocIndex:1},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultEdge: {\n    type: 'arc', // The type of the edge\n    // ...  Other configuraltions\n  },\n});\n",paraId:7,tocIndex:1},{value:"To configure different edges with different properties, you can write the properties into the edge data.",paraId:8,tocIndex:2},{value:"const data = {\n  nodes: [\n    ... // nodes\n  ],\n  edges: [{\n    source: 'node0',\n    target: 'node1'\n    type: 'arc',\n    //... // Other configurations for edges\n    style: {\n      //...  // Style properties for edges\n    }\n  },\n    //... // Other edges\n  ]\n}\n",paraId:9,tocIndex:2},{value:"Arc edge has the ",paraId:10,tocIndex:3},{value:"Common Edge Properties",paraId:11,tocIndex:3},{value:", and some commonly used properties are shown below, where ",paraId:10,tocIndex:3},{value:"curveOffset",paraId:10,tocIndex:3},{value:" is the special property for arc edge , controlling the size and the bending direction of the arc.",paraId:10,tocIndex:3},{value:"color: '#87e8de',\ncurveOffset: 20,  // The distance between the center of the two endpoints and the center of the arc\nstyle: {\n  lineWidth: 2,\n  stroke: '#87e8de'\n},\nlabel: 'Text of the label',\nlabelCfg: {\n  refX: 10,  // x offset of the label\n  refY: 10,  // y offset of the label\n  style: {\n    fill: '#595959'\n  }\n}\n",paraId:12,tocIndex:3},{value:"Name",paraId:13,tocIndex:3},{value:"Description",paraId:13,tocIndex:3},{value:"Type",paraId:13,tocIndex:3},{value:"Remark",paraId:13,tocIndex:3},{value:"color",paraId:13,tocIndex:3},{value:"The color of the edge",paraId:13,tocIndex:3},{value:"String",paraId:13,tocIndex:3},{value:"The priority id lower than ",paraId:13,tocIndex:3},{value:"stroke",paraId:13,tocIndex:3},{value:" in ",paraId:13,tocIndex:3},{value:"style",paraId:13,tocIndex:3},{value:"curveOffset",paraId:13,tocIndex:3},{value:"The distance between the center of the two endpoints and the center of the arc",paraId:13,tocIndex:3},{value:"Number",paraId:13,tocIndex:3},{value:"The absolute value of ",paraId:13,tocIndex:3},{value:"curveOffset",paraId:13,tocIndex:3},{value:" is the size of the arc, the sign of ",paraId:13,tocIndex:3},{value:"curveOffset",paraId:13,tocIndex:3},{value:" is the bending direction of the arc. ",paraId:13,tocIndex:3},{value:"20",paraId:13,tocIndex:3},{value:" by default. It is the special property for arc edge",paraId:13,tocIndex:3},{value:"style",paraId:13,tocIndex:3},{value:"The default style of edge",paraId:13,tocIndex:3},{value:"Object",paraId:13,tocIndex:3},{value:"Correspond to the styles in Canvas",paraId:13,tocIndex:3},{value:"label",paraId:13,tocIndex:3},{value:"The text of the label",paraId:13,tocIndex:3},{value:"String",paraId:13,tocIndex:3},{value:"labelCfg",paraId:13,tocIndex:3},{value:"The configurations of the label",paraId:13,tocIndex:3},{value:"Object",paraId:13,tocIndex:3},{value:"stateStyles",paraId:13,tocIndex:3},{value:"The styles in different states",paraId:13,tocIndex:3},{value:"Object",paraId:13,tocIndex:3},{value:"Refer to ",paraId:13,tocIndex:3},{value:"Configure Styles for State",paraId:14,tocIndex:3},{value:"curveOffset",paraId:15,tocIndex:4},{value:" is the special property for arc edge, which controlls the size and the bending direction of the arc. The following code shows how to configure the ",paraId:15,tocIndex:4},{value:"curveOffset",paraId:15,tocIndex:4},{value:" globally when instantiating a Graph.",paraId:15,tocIndex:4},{value:" ",paraId:15,tocIndex:4},{value:"const data = {\n  nodes: [\n    {\n      id: 'node0',\n      x: 100,\n      y: 100,\n      size: 20,\n    },\n    {\n      id: 'node1',\n      x: 200,\n      y: 200,\n      size: 20,\n    },\n  ],\n  edges: [\n    {\n      source: 'node0',\n      target: 'node1',\n      type: 'arc',\n      label: 'arc',\n    },\n  ],\n};\nconst graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  linkCenter: true,\n  defaultEdge: {\n    // type: 'arc', // The type has been assigned in the data, we do not have to define it any more\n    curveOffset: -80,\n  },\n});\ngraph.data(data);\ngraph.render();\n",paraId:16,tocIndex:4},{value:"⚠️Attention:",paraId:17,tocIndex:4},{value:" ",paraId:17,tocIndex:4},{value:" ",paraId:17,tocIndex:4},{value:"linkCenter: true",paraId:17,tocIndex:4},{value:" is assigned to the graph in the code above to ensure the arc edges link to the center of their end nodes.",paraId:17,tocIndex:4},{value:"style",paraId:18,tocIndex:5},{value:" is an object which is the same as the ",paraId:18,tocIndex:5},{value:"Common Edge Style Properties",paraId:19,tocIndex:5},{value:". Base on the code in ",paraId:18,tocIndex:5},{value:"curveOffset",paraId:20,tocIndex:5},{value:" section, we add ",paraId:18,tocIndex:5},{value:"style",paraId:18,tocIndex:5},{value:" to ",paraId:18,tocIndex:5},{value:"defaultEdge",paraId:18,tocIndex:5},{value:". ",paraId:18,tocIndex:5},{value:"! ",paraId:18,tocIndex:5},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for graph\n  defaultEdge: {\n    // ... Other properties for edges\n    style: {\n      stroke: '#088',\n      lineWidth: 3,\n    },\n  },\n});\n// ...\n",paraId:21,tocIndex:5},{value:"### labelCfg",paraId:22,tocIndex:5},{value:"labelCfg",paraId:23,tocIndex:5},{value:" is an object which is the same as the ",paraId:23,tocIndex:5},{value:"Common Edge Label Properties",paraId:24,tocIndex:5},{value:". Base on the code in ",paraId:23,tocIndex:5},{value:"Special Property: curveOffset",paraId:25,tocIndex:5},{value:" section, we add ",paraId:23,tocIndex:5},{value:"labelCfg",paraId:23,tocIndex:5},{value:" to ",paraId:23,tocIndex:5},{value:"defaultEdge",paraId:23,tocIndex:5},{value:".",paraId:23,tocIndex:5},{value:" ",paraId:23,tocIndex:5},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for graph\n  defaultEdge: {\n    // ... Other properties for edges\n    labelCfg: {\n      autoRotate: true,\n      refY: -30,\n      refX: 30,\n    },\n  },\n});\n// ...\n",paraId:26,tocIndex:5}]},25240:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"A built-in edge Cubic has the default style as below.",paraId:0},{value:" ",paraId:0},{value:"As stated in ",paraId:1,tocIndex:0},{value:"Built-in Edges",paraId:2,tocIndex:0},{value:" , there are three methods to configure edges: Configure edges globally when instantiating a Graph; Configure edges in their data; Configure edges by ",paraId:1,tocIndex:0},{value:"graph.edge(edgeFn)",paraId:1,tocIndex:0},{value:". Their priorities are:",paraId:1,tocIndex:0},{value:"graph.edge(edgeFn)",paraId:3,tocIndex:0},{value:" > Configure in data > Configure globally",paraId:3,tocIndex:0},{value:"⚠️ Attention:",paraId:4,tocIndex:0},{value:" Expect for ",paraId:4,tocIndex:0},{value:"id",paraId:4,tocIndex:0},{value:", ",paraId:4,tocIndex:0},{value:"source",paraId:4,tocIndex:0},{value:", ",paraId:4,tocIndex:0},{value:"target",paraId:4,tocIndex:0},{value:", ",paraId:4,tocIndex:0},{value:"label",paraId:4,tocIndex:0},{value:" which should be assigned to every single edge data, the other configurations in ",paraId:4,tocIndex:0},{value:"The Common Property",paraId:5,tocIndex:0},{value:" and in each edge type (refer to doc of each edge type) support to be assigned by the three ways.",paraId:4,tocIndex:0},{value:"Assign ",paraId:6,tocIndex:1},{value:"type",paraId:6,tocIndex:1},{value:" to ",paraId:6,tocIndex:1},{value:"'cubic'",paraId:6,tocIndex:1},{value:" in the ",paraId:6,tocIndex:1},{value:"defaultEdge",paraId:6,tocIndex:1},{value:" object when instantiating a Graph:",paraId:6,tocIndex:1},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultEdge: {\n    type: 'cubic', // The type of the edge\n    // ...  Other configuraltions\n  },\n});\n",paraId:7,tocIndex:1},{value:"To configure different edges with different properties, you can write the properties into the edge data.",paraId:8,tocIndex:2},{value:"const data = {\n  nodes: [\n    // ... // nodes\n  ],\n  edges: [{\n    source: 'node0',\n    target: 'node1'\n    type: 'cubic',\n    //... // Other configurations for edges\n    style: {\n      //...  // Style properties for edges\n    }\n  },\n    //... // Other edges\n  ]\n}\n",paraId:9,tocIndex:2},{value:"Cubic edge has the ",paraId:10,tocIndex:3},{value:"Common Edge Properties",paraId:11,tocIndex:3},{value:", and some commonly used properties are shown below. The properties with object type will be described in detail after the table.",paraId:10,tocIndex:3},{value:"Name",paraId:12,tocIndex:3},{value:"Description",paraId:12,tocIndex:3},{value:"Type",paraId:12,tocIndex:3},{value:"Remark",paraId:12,tocIndex:3},{value:"color",paraId:12,tocIndex:3},{value:"The color of the edge",paraId:12,tocIndex:3},{value:"String",paraId:12,tocIndex:3},{value:"The priority id lower than ",paraId:12,tocIndex:3},{value:"stroke",paraId:12,tocIndex:3},{value:" in ",paraId:12,tocIndex:3},{value:"style",paraId:12,tocIndex:3},{value:"style",paraId:12,tocIndex:3},{value:"The default style of edge",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"Correspond to the styles in Canvas",paraId:12,tocIndex:3},{value:"label",paraId:12,tocIndex:3},{value:"The text of the label",paraId:12,tocIndex:3},{value:"String",paraId:12,tocIndex:3},{value:"labelCfg",paraId:12,tocIndex:3},{value:"The configurations of the label",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"controlPoints",paraId:12,tocIndex:3},{value:"The array of the control points for the cubic curve",paraId:12,tocIndex:3},{value:"Array",paraId:12,tocIndex:3},{value:"If it is not assgined, the default control points on the 1/3 and 2/3 of the curve will take effect. e.g. ",paraId:12,tocIndex:3},{value:"[{ x: 10, y: 20 }, { x: 15, y: 30 }]",paraId:12,tocIndex:3},{value:"curveOffset",paraId:12,tocIndex:3},{value:"The distances between the controlPoints to the line connecting the two endpoints. They control the degree of bending of the curve. When the type is Number, the two controlPoints are on different sides of the line and the distances are the same. The sign of it controls the bending direction.",paraId:12,tocIndex:3},{value:"Number / Number[]",paraId:12,tocIndex:3},{value:"It is a special configuration for 'cubic', 'quadratic', 'cubic-vertical', 'cubic-horizontal' type edge",paraId:12,tocIndex:3},{value:"minCurveOffset",paraId:12,tocIndex:3},{value:"The MINIMUM distances betweent the controlPoints to the line connecting to two endpoints. They control the degree of bending of the curve to prevent the too 'flat' curve. And it takes effect when the ",paraId:12,tocIndex:3},{value:"curveOffset",paraId:12,tocIndex:3},{value:" is not assigned",paraId:12,tocIndex:3},{value:"Number / Number[]",paraId:12,tocIndex:3},{value:"It is a special configuration for 'cubic-vertical' type and 'cubic-horizontal' type edge",paraId:12,tocIndex:3},{value:"curvePosition",paraId:12,tocIndex:3},{value:"The relative positions of the two controlPoints on the line connecting the two endpoints. Ranges from 0 to 1",paraId:12,tocIndex:3},{value:"Number / Number[]",paraId:12,tocIndex:3},{value:"It is a special configuration for 'cubic', 'quadratic', 'cubic-vertical', 'cubic-horizontal' type edge",paraId:12,tocIndex:3},{value:"stateStyles",paraId:12,tocIndex:3},{value:"The styles in different states",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"Refer to ",paraId:12,tocIndex:3},{value:"Configure Styles for State",paraId:13,tocIndex:3},{value:"style",paraId:14,tocIndex:4},{value:" is an object which is the same as the ",paraId:14,tocIndex:4},{value:"Common Edge Style Properties",paraId:15,tocIndex:4},{value:". The following code shows how to configure the ",paraId:14,tocIndex:4},{value:"style",paraId:14,tocIndex:4},{value:" globally when instantiating a Graph.",paraId:14,tocIndex:4},{value:" ",paraId:14,tocIndex:4},{value:"const data = {\n  nodes: [\n    {\n      id: 'node0',\n      x: 100,\n      y: 100,\n      size: 20,\n    },\n    {\n      id: 'node1',\n      x: 200,\n      y: 200,\n      size: 20,\n    },\n  ],\n  edges: [\n    {\n      source: 'node0',\n      target: 'node1',\n      type: 'cubic',\n      label: 'cubic',\n    },\n  ],\n};\nconst graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultEdge: {\n    // type: 'cubic',  // The type has been assigned in the data, we do not have to define it any more\n    style: {\n      endArrow: true,\n      stroke: '#088',\n      lineWidth: 3,\n    },\n  },\n});\ngraph.data(data);\ngraph.render();\n",paraId:16,tocIndex:4},{value:"labelCfg",paraId:17,tocIndex:5},{value:" is an object which is the same as the ",paraId:17,tocIndex:5},{value:"Common Edge Label Properties",paraId:18,tocIndex:5},{value:". Base on the code in ",paraId:17,tocIndex:5},{value:"style",paraId:19,tocIndex:5},{value:" section, we add ",paraId:17,tocIndex:5},{value:"labelCfg",paraId:17,tocIndex:5},{value:" to ",paraId:17,tocIndex:5},{value:"defaultEdge",paraId:17,tocIndex:5},{value:".",paraId:17,tocIndex:5},{value:" ",paraId:17,tocIndex:5},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for graph\n  defaultEdge: {\n    // ... Other properties for edges\n    labelCfg: {\n      autoRotate: true,\n      refY: 10,\n      refX: 40,\n    },\n  },\n});\n// ...\n",paraId:20,tocIndex:5}]},25207:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"A built-in edge Line has the default style as below.",paraId:0},{value:" ",paraId:0},{value:"As stated in ",paraId:1,tocIndex:0},{value:"Built-in Edges",paraId:2,tocIndex:0},{value:" , there are three methods to configure edges: Configure edges globally when instantiating a Graph; Configure edges in their data; Configure edges by ",paraId:1,tocIndex:0},{value:"graph.edge(edgeFn)",paraId:1,tocIndex:0},{value:". Their priorities are:",paraId:1,tocIndex:0},{value:"graph.edge(edgeFn)",paraId:3,tocIndex:0},{value:" > Configure in data > Configure globally",paraId:3,tocIndex:0},{value:"⚠️ Attention:",paraId:4,tocIndex:0},{value:" Expect for ",paraId:4,tocIndex:0},{value:"id",paraId:4,tocIndex:0},{value:", ",paraId:4,tocIndex:0},{value:"source",paraId:4,tocIndex:0},{value:", ",paraId:4,tocIndex:0},{value:"target",paraId:4,tocIndex:0},{value:", ",paraId:4,tocIndex:0},{value:"label",paraId:4,tocIndex:0},{value:" which should be assigned to every single edge data, the other configurations in ",paraId:4,tocIndex:0},{value:"The Common Property",paraId:5,tocIndex:0},{value:" and in each edge type (refer to doc of each edge type) support to be assigned by the three ways.",paraId:4,tocIndex:0},{value:"Assign ",paraId:6,tocIndex:1},{value:"type",paraId:6,tocIndex:1},{value:" to ",paraId:6,tocIndex:1},{value:"'line'",paraId:6,tocIndex:1},{value:" in the ",paraId:6,tocIndex:1},{value:"defaultEdge",paraId:6,tocIndex:1},{value:" object when instantiating a Graph:",paraId:6,tocIndex:1},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultEdge: {\n    type: 'line', // The type of the edge\n    // ...  Other configuraltions\n  },\n});\n",paraId:7,tocIndex:1},{value:"To configure different edges with different properties, you can write the properties into the edge data.",paraId:8,tocIndex:2},{value:"const data = {\n  nodes: [\n    ... // nodes\n  ],\n  edges: [{\n    source: 'node0',\n    target: 'node1'\n    type: 'line',\n    //... // Other configurations for edges\n    style: {\n      //...  // Style properties for edges\n    }\n  },\n    //... // Other edges\n  ]\n}\n",paraId:9,tocIndex:2},{value:"Cubic edge has the ",paraId:10,tocIndex:3},{value:"Common Edge Properties",paraId:11,tocIndex:3},{value:", and some commonly used properties are shown below. The properties with object type will be described in detail after the table.",paraId:10,tocIndex:3},{value:"Name",paraId:12,tocIndex:3},{value:"Description",paraId:12,tocIndex:3},{value:"Type",paraId:12,tocIndex:3},{value:"Remark",paraId:12,tocIndex:3},{value:"color",paraId:12,tocIndex:3},{value:"The color of the edge",paraId:12,tocIndex:3},{value:"String",paraId:12,tocIndex:3},{value:"The priority id lower than ",paraId:12,tocIndex:3},{value:"stroke",paraId:12,tocIndex:3},{value:" in ",paraId:12,tocIndex:3},{value:"style",paraId:12,tocIndex:3},{value:"style",paraId:12,tocIndex:3},{value:"The default style of edge",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"Correspond to the styles in Canvas",paraId:12,tocIndex:3},{value:"label",paraId:12,tocIndex:3},{value:"The text of the label",paraId:12,tocIndex:3},{value:"String",paraId:12,tocIndex:3},{value:"labelCfg",paraId:12,tocIndex:3},{value:"The configurations of the label",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"stateStyles",paraId:12,tocIndex:3},{value:"The styles in different states",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"Refer to ",paraId:12,tocIndex:3},{value:"Configure Styles for State",paraId:13,tocIndex:3},{value:"style",paraId:14,tocIndex:4},{value:" is an object which is the same as the ",paraId:14,tocIndex:4},{value:"Common Edge Style Properties",paraId:15,tocIndex:4},{value:". The following code shows how to configure the ",paraId:14,tocIndex:4},{value:"style",paraId:14,tocIndex:4},{value:" globally when instantiating a Graph.",paraId:14,tocIndex:4},{value:" ",paraId:14,tocIndex:4},{value:"const data = {\n  nodes: [\n    {\n      id: 'node0',\n      x: 100,\n      y: 100,\n      size: 20,\n    },\n    {\n      id: 'node1',\n      x: 200,\n      y: 100,\n      size: 20,\n    },\n  ],\n  edges: [\n    {\n      source: 'node0',\n      target: 'node1',\n      type: 'line',\n      label: 'line',\n    },\n  ],\n};\nconst graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultEdge: {\n    // type: 'line',  // The type has been assigned in the data, we do not have to define it any more\n    style: {\n      stroke: 'steelblue',\n      lineWidth: 5,\n    },\n    labelCfg: {\n      position: 'end',\n      refY: -10,\n    },\n  },\n});\ngraph.data(data);\ngraph.render();\n",paraId:16,tocIndex:4},{value:"labelCfg",paraId:17,tocIndex:5},{value:" is an object which is the same as the ",paraId:17,tocIndex:5},{value:"Common Edge Label Properties",paraId:18,tocIndex:5},{value:". Base on the code in ",paraId:17,tocIndex:5},{value:"style",paraId:19,tocIndex:5},{value:" section, we add ",paraId:17,tocIndex:5},{value:"labelCfg",paraId:17,tocIndex:5},{value:" to ",paraId:17,tocIndex:5},{value:"defaultEdge",paraId:17,tocIndex:5},{value:".",paraId:17,tocIndex:5},{value:" ",paraId:17,tocIndex:5},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for graph\n  defaultEdge: {\n    // ... Other properties for edges\n    labelCfg: {\n      position: 'end',\n      refY: -10,\n    },\n  },\n});\n// ...\n",paraId:20,tocIndex:5}]},63892:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"A built-in edge Line has the default style as below.",paraId:0},{value:" ",paraId:0},{value:"⚠️Attention:",paraId:1},{value:" ",paraId:1},{value:"loop edge is appropriate for the self-loop edges whose target node and the source node are the same. In other words, a loop edge connect a node to itself. There will be a strange result if the loop edge is applied to the edge which is not a self-loop. ",paraId:1},{value:" ",paraId:1},{value:"As stated in ",paraId:2,tocIndex:0},{value:"Built-in Edges",paraId:3,tocIndex:0},{value:" , there are three methods to configure edges: Configure edges globally when instantiating a Graph; Configure edges in their data; Configure edges by ",paraId:2,tocIndex:0},{value:"graph.edge(edgeFn)",paraId:2,tocIndex:0},{value:". Their priorities are:",paraId:2,tocIndex:0},{value:"graph.edge(edgeFn)",paraId:4,tocIndex:0},{value:" > Configure in data > Configure globally",paraId:4,tocIndex:0},{value:"⚠️ Attention:",paraId:5,tocIndex:0},{value:" Expect for ",paraId:5,tocIndex:0},{value:"id",paraId:5,tocIndex:0},{value:", ",paraId:5,tocIndex:0},{value:"source",paraId:5,tocIndex:0},{value:", ",paraId:5,tocIndex:0},{value:"target",paraId:5,tocIndex:0},{value:", ",paraId:5,tocIndex:0},{value:"label",paraId:5,tocIndex:0},{value:" which should be assigned to every single edge data, the other configurations in ",paraId:5,tocIndex:0},{value:"The Common Property",paraId:6,tocIndex:0},{value:" and in each edge type (refer to doc of each edge type) support to be assigned by the three ways.",paraId:5,tocIndex:0},{value:"Assign ",paraId:7,tocIndex:1},{value:"type",paraId:7,tocIndex:1},{value:" to ",paraId:7,tocIndex:1},{value:"'cubic'",paraId:7,tocIndex:1},{value:" in the ",paraId:7,tocIndex:1},{value:"defaultEdge",paraId:7,tocIndex:1},{value:" object when instantiating a Graph:",paraId:7,tocIndex:1},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultEdge: {\n    type: 'loop', // The type of the edge\n    // ...  Other configuraltions\n  },\n});\n",paraId:8,tocIndex:1},{value:"To configure different edges with different properties, you can write the properties into the edge data.",paraId:9,tocIndex:2},{value:"const data = {\n  nodes: [\n    ... // nodes\n  ],\n  edges: [{\n    source: 'node0',\n    target: 'node0'\n    type: 'loop',\n    //... // Other configurations for edges\n    style: {\n      //...  // Style properties for edges\n    }\n  },\n    //... // Other edges\n  ]\n}\n",paraId:10,tocIndex:2},{value:"Loop edge has the ",paraId:11,tocIndex:3},{value:"Common Edge Properties",paraId:12,tocIndex:3},{value:", and some commonly used properties are shown below. The properties with object type will be described in detail after the table, where ",paraId:11,tocIndex:3},{value:"loopCfg",paraId:11,tocIndex:3},{value:" is the special property for loop edge.",paraId:11,tocIndex:3},{value:"loop 边支持以下的配置项，对于 Object 类型的配置项将在后面有详细讲解：",paraId:13,tocIndex:3},{value:"Name",paraId:14,tocIndex:3},{value:"Description",paraId:14,tocIndex:3},{value:"Type",paraId:14,tocIndex:3},{value:"Remark",paraId:14,tocIndex:3},{value:"color",paraId:14,tocIndex:3},{value:"The color of the edge",paraId:14,tocIndex:3},{value:"String",paraId:14,tocIndex:3},{value:"The priority id lower than ",paraId:14,tocIndex:3},{value:"stroke",paraId:14,tocIndex:3},{value:" in ",paraId:14,tocIndex:3},{value:"style",paraId:14,tocIndex:3},{value:"style",paraId:14,tocIndex:3},{value:"The default style of edge",paraId:14,tocIndex:3},{value:"Object",paraId:14,tocIndex:3},{value:"Correspond to the styles in Canvas",paraId:14,tocIndex:3},{value:"label",paraId:14,tocIndex:3},{value:"The text of the label",paraId:14,tocIndex:3},{value:"String",paraId:14,tocIndex:3},{value:"labelCfg",paraId:14,tocIndex:3},{value:"The configurations of the label",paraId:14,tocIndex:3},{value:"Object",paraId:14,tocIndex:3},{value:"stateStyles",paraId:14,tocIndex:3},{value:"The styles in different states",paraId:14,tocIndex:3},{value:"Object",paraId:14,tocIndex:3},{value:"Refer to ",paraId:14,tocIndex:3},{value:"Configure Styles for State",paraId:15,tocIndex:3},{value:"loopCfg",paraId:14,tocIndex:3},{value:"Special property for loop edge",paraId:14,tocIndex:3},{value:"Object",paraId:14,tocIndex:3},{value:"style",paraId:16,tocIndex:4},{value:" is an object which is the same as the ",paraId:16,tocIndex:4},{value:"Common Edge Style Properties",paraId:17,tocIndex:4},{value:". The following code shows how to configure the ",paraId:16,tocIndex:4},{value:"style",paraId:16,tocIndex:4},{value:" globally when instantiating a Graph.",paraId:16,tocIndex:4},{value:" ",paraId:16,tocIndex:4},{value:"const data = {\n  nodes: [\n    {\n      id: 'node0',\n      x: 100,\n      y: 100,\n      size: 20,\n    },\n  ],\n  edges: [\n    {\n      source: 'node0',\n      target: 'node0',\n      type: 'loop',\n      label: 'loop',\n    },\n  ],\n};\nconst graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultEdge: {\n    // type: 'loop',  // The type has been assigned in the data, we do not have to define it any more\n    style: {\n      endArrow: true,\n      stroke: '#088',\n      lineWidth: 3,\n    },\n  },\n});\ngraph.data(data);\ngraph.render();\n",paraId:18,tocIndex:4},{value:"labelCfg",paraId:19,tocIndex:5},{value:" is an object which is the same as the ",paraId:19,tocIndex:5},{value:"Common Edge Label Properties",paraId:20,tocIndex:5},{value:". Base on the code in ",paraId:19,tocIndex:5},{value:"style",paraId:21,tocIndex:5},{value:" section, we add ",paraId:19,tocIndex:5},{value:"labelCfg",paraId:19,tocIndex:5},{value:" to ",paraId:19,tocIndex:5},{value:"defaultEdge",paraId:19,tocIndex:5},{value:".",paraId:19,tocIndex:5},{value:" ",paraId:19,tocIndex:5},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for graph\n  defaultEdge: {\n    // ... Other properties for edges\n    labelCfg: {\n      refY: -5,\n      refX: 30,\n    },\n  },\n});\n// ...\n",paraId:22,tocIndex:5},{value:"loopCfg",paraId:23,tocIndex:6},{value:" is an object that configures the direction, height, and clockwise, connection point start and end position.",paraId:23,tocIndex:6},{value:"position",paraId:24,tocIndex:6},{value:": The relative position to the source/target node. Options: ",paraId:24,tocIndex:6},{value:"top",paraId:24,tocIndex:6},{value:", ",paraId:24,tocIndex:6},{value:"top-right",paraId:24,tocIndex:6},{value:", ",paraId:24,tocIndex:6},{value:"right",paraId:24,tocIndex:6},{value:",",paraId:24,tocIndex:6},{value:"bottom-right",paraId:24,tocIndex:6},{value:", ",paraId:24,tocIndex:6},{value:"bottom",paraId:24,tocIndex:6},{value:", ",paraId:24,tocIndex:6},{value:"bottom-left",paraId:24,tocIndex:6},{value:", ",paraId:24,tocIndex:6},{value:"left",paraId:24,tocIndex:6},{value:", ",paraId:24,tocIndex:6},{value:"top-left",paraId:24,tocIndex:6},{value:". ",paraId:24,tocIndex:6},{value:"top",paraId:24,tocIndex:6},{value:" by default.",paraId:24,tocIndex:6},{value:"dist",paraId:24,tocIndex:6},{value:": The distance between the keyShape of the source/target node to the highest position of the loop. It is equal to the height of the source/target node by default.",paraId:24,tocIndex:6},{value:"clockwise",paraId:24,tocIndex:6},{value:": Whether to draw the loop clockwisely. ",paraId:24,tocIndex:6},{value:"true",paraId:24,tocIndex:6},{value:" by default",paraId:24,tocIndex:6},{value:"pointPadding",paraId:24,tocIndex:6},{value:": For non-circular nodes, the offset between the connection point and the node center coordinates ('top right', 'bottom right', 'top left', 'bottom left', which are special, four angular coordinates) in the x-axis or y-axis direction, the default value is' 1/4 of the minimum value of node width and height '. ",paraId:24,tocIndex:6},{value:"Supported by v4.7.8.",paraId:24,tocIndex:6},{value:"Base on the code in ",paraId:25,tocIndex:6},{value:"style",paraId:26,tocIndex:6},{value:" section, we add ",paraId:25,tocIndex:6},{value:"loopCfg",paraId:25,tocIndex:6},{value:" to ",paraId:25,tocIndex:6},{value:"defaultEdge",paraId:25,tocIndex:6},{value:".",paraId:25,tocIndex:6},{value:" ",paraId:25,tocIndex:6},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for graph\n  defaultEdge: {\n    // ... Other properties for edges\n    loopCfg: {\n      position: 'left',\n      dist: 100,\n      clockwise: false,\n      pointPadding: 15,\n    },\n  },\n});\n// ...\n",paraId:27,tocIndex:6}]},87605:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"A built-in edge Polyline has the default style as below.",paraId:0},{value:" ",paraId:0},{value:"As stated in ",paraId:1,tocIndex:0},{value:"Built-in Edges",paraId:2,tocIndex:0},{value:" , there are three methods to configure edges: Configure edges globally when instantiating a Graph; Configure edges in their data; Configure edges by ",paraId:1,tocIndex:0},{value:"graph.edge(edgeFn)",paraId:1,tocIndex:0},{value:". Their priorities are:",paraId:1,tocIndex:0},{value:"graph.edge(edgeFn)",paraId:3,tocIndex:0},{value:" > Configure in data > Configure globally",paraId:3,tocIndex:0},{value:"⚠️ Attention:",paraId:4,tocIndex:0},{value:" Expect for ",paraId:4,tocIndex:0},{value:"id",paraId:4,tocIndex:0},{value:", ",paraId:4,tocIndex:0},{value:"source",paraId:4,tocIndex:0},{value:", ",paraId:4,tocIndex:0},{value:"target",paraId:4,tocIndex:0},{value:", ",paraId:4,tocIndex:0},{value:"label",paraId:4,tocIndex:0},{value:" which should be assigned to every single edge data, the other configurations in ",paraId:4,tocIndex:0},{value:"The Common Property",paraId:5,tocIndex:0},{value:" and in each edge type (refer to doc of each edge type) support to be assigned by the three ways.",paraId:4,tocIndex:0},{value:"Assign ",paraId:6,tocIndex:1},{value:"type",paraId:6,tocIndex:1},{value:" to ",paraId:6,tocIndex:1},{value:"'cubic'",paraId:6,tocIndex:1},{value:" in the ",paraId:6,tocIndex:1},{value:"defaultEdge",paraId:6,tocIndex:1},{value:" object when instantiating a Graph:",paraId:6,tocIndex:1},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultEdge: {\n    type: 'polyline', // The type of the edge\n    // ...  Other configuraltions\n  },\n});\n",paraId:7,tocIndex:1},{value:"To configure different edges with different properties, you can write the properties into the edge data.",paraId:8,tocIndex:2},{value:"const data = {\n  nodes: [\n    // ... // nodes\n  ],\n  edges: [{\n    source: 'node0',\n    target: 'node1'\n    type: 'polyline',\n    //... // Other configurations for edges\n    style: {\n      //...  // Style properties for edges\n    }\n  },\n    //... // Other edges\n  ]\n}\n",paraId:9,tocIndex:2},{value:"Polyline edge has the ",paraId:10,tocIndex:3},{value:"Common Edge Properties",paraId:11,tocIndex:3},{value:", and some commonly used properties are shown below. The properties with object type will be described in detail after the table",paraId:10,tocIndex:3},{value:"color: '#87e8de',\nstyle: {\n  offset: 20,  // The minimum distance between the bend and the source/target node\n  radius: 10,  // The border radius of the bend.\n  lineWidth: 2,\n  stroke: '#87e8de'\n},\nlabel: 'Label text',\nlabelCfg: {\n  refX: 10,  // x offset of the label\n  refY: 10,  // y offset of the label\n  style: {\n    fill: '#595959'\n  }\n}\n",paraId:12,tocIndex:3},{value:"Name",paraId:13,tocIndex:3},{value:"Description",paraId:13,tocIndex:3},{value:"Type",paraId:13,tocIndex:3},{value:"Remark",paraId:13,tocIndex:3},{value:"color",paraId:13,tocIndex:3},{value:"The color of the edge",paraId:13,tocIndex:3},{value:"String",paraId:13,tocIndex:3},{value:"The priority id lower than ",paraId:13,tocIndex:3},{value:"stroke",paraId:13,tocIndex:3},{value:" in ",paraId:13,tocIndex:3},{value:"style",paraId:13,tocIndex:3},{value:"style",paraId:13,tocIndex:3},{value:"The default style of edge",paraId:13,tocIndex:3},{value:"Object",paraId:13,tocIndex:3},{value:"Correspond to the styles in Canvas",paraId:13,tocIndex:3},{value:"style.radius",paraId:13,tocIndex:3},{value:"The border radius of the bend",paraId:13,tocIndex:3},{value:"Number",paraId:13,tocIndex:3},{value:"It is a special property for polyline edge",paraId:13,tocIndex:3},{value:"style.offset",paraId:13,tocIndex:3},{value:"The minimum distance between the bend and the source/target node",paraId:13,tocIndex:3},{value:"Number",paraId:13,tocIndex:3},{value:"5",paraId:13,tocIndex:3},{value:" by default. It is a special property for polyline edge",paraId:13,tocIndex:3},{value:"label",paraId:13,tocIndex:3},{value:"The text of the label",paraId:13,tocIndex:3},{value:"String",paraId:13,tocIndex:3},{value:"labelCfg",paraId:13,tocIndex:3},{value:"The configurations of the label",paraId:13,tocIndex:3},{value:"Object",paraId:13,tocIndex:3},{value:"controlPoints",paraId:13,tocIndex:3},{value:"The array of the control points for the polyline",paraId:13,tocIndex:3},{value:"Array",paraId:13,tocIndex:3},{value:"If it is not assigned, G6 will calculate it by ",paraId:13,tocIndex:3},{value:"A* algorithm",paraId:13,tocIndex:3},{value:" If it is assgned, the path of the polyline will be generated according to it. e.g. ",paraId:13,tocIndex:3},{value:"[{ x: 10, y: 20 }, { x: 20, y: 25 }, ...]",paraId:13,tocIndex:3},{value:"stateStyles",paraId:13,tocIndex:3},{value:"The styles in different states",paraId:13,tocIndex:3},{value:"Object",paraId:13,tocIndex:3},{value:"Refer to ",paraId:13,tocIndex:3},{value:"Configure Styles for State",paraId:14,tocIndex:3},{value:"routeCfg",paraId:13,tocIndex:3},{value:"Route configurations",paraId:13,tocIndex:3},{value:"Object",paraId:13,tocIndex:3},{value:"Takes effect when there are no controlPoints on edge data and calculate the route by itself. Refer to routeCfg section below",paraId:13,tocIndex:3},{value:"routeCfg",paraId:15,tocIndex:4},{value:" is an object, takes effect when there are no controlPoints on edge data and calculate the route by itself. The attributes are:",paraId:15,tocIndex:4},{value:"Name",paraId:16,tocIndex:4},{value:"Default Value",paraId:16,tocIndex:4},{value:"Type",paraId:16,tocIndex:4},{value:"Description",paraId:16,tocIndex:4},{value:"gridSize",paraId:16,tocIndex:4},{value:"10",paraId:16,tocIndex:4},{value:"number",paraId:16,tocIndex:4},{value:"The grid size for calculation. Smaller the value, higher the cost",paraId:16,tocIndex:4},{value:"maxAllowedDirectionChange",paraId:16,tocIndex:4},{value:"Math.PI / 2",paraId:16,tocIndex:4},{value:"number",paraId:16,tocIndex:4},{value:"The max angle at each bend, in radian system",paraId:16,tocIndex:4},{value:"obstacles",paraId:16,tocIndex:4},{value:"INode[]",paraId:16,tocIndex:4},{value:"[]",paraId:16,tocIndex:4},{value:"The obstacle nodes to avoid passing through",paraId:16,tocIndex:4},{value:"The polyline does not support avoid obstacles automatically. You could avoid several nodes by calling ",paraId:17,tocIndex:4},{value:"graph.updateItem(edge, { routeCfg: { obstacles: [graph.findById('node1', graph.findById('node2'))] } })",paraId:17,tocIndex:4},{value:". If you have strong requirements on ER diagram or graph editing, we suggest @antv/x6 for better route algorithms for polyline, ",paraId:17,tocIndex:4},{value:"Manhattan Router",paraId:17,tocIndex:4},{value:".",paraId:17,tocIndex:4},{value:"style",paraId:18,tocIndex:5},{value:" is an object. The ",paraId:18,tocIndex:5},{value:"Common Edge Style Properties",paraId:19,tocIndex:5},{value:" are available for polyline edge. There are two special properties in ",paraId:18,tocIndex:5},{value:"style",paraId:18,tocIndex:5},{value:" for polyline edge:",paraId:18,tocIndex:5},{value:"radius",paraId:20,tocIndex:5},{value:", he border radius of the bend;",paraId:20,tocIndex:5},{value:"offset",paraId:20,tocIndex:5},{value:", The minimum distance between the bend and the source/target node, ",paraId:20,tocIndex:5},{value:"5",paraId:20,tocIndex:5},{value:" by default.",paraId:20,tocIndex:5},{value:"The other style properties are the same as the common style property of edge. Refer to [Built-in Edges]. The following code shows how to configure the ",paraId:21,tocIndex:5},{value:"style",paraId:21,tocIndex:5},{value:" globally when instantiating a Graph.",paraId:21,tocIndex:5},{value:" ",paraId:21,tocIndex:5},{value:"const data = {\n  nodes: [\n    {\n      id: 'node0',\n      x: 100,\n      y: 100,\n      size: 20,\n    },\n    {\n      id: 'node1',\n      x: 200,\n      y: 200,\n      size: 20,\n    },\n  ],\n  edges: [\n    {\n      source: 'node0',\n      target: 'node1',\n      type: 'polyline',\n      label: 'polyline',\n    },\n  ],\n};\nconst graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultEdge: {\n    // type: 'polyline',  // The type has been assigned in the data, we do not have to define it any more\n    style: {\n      radius: 10,\n      offset: 10,\n      stroke: 'steelblue',\n      lineWidth: 5,\n    },\n  },\n});\ngraph.data(data);\ngraph.render();\n",paraId:22,tocIndex:5},{value:"labelCfg",paraId:23,tocIndex:6},{value:" is an object which is the same as the ",paraId:23,tocIndex:6},{value:"Common Edge Label Properties",paraId:24,tocIndex:6},{value:". Base on the code in ",paraId:23,tocIndex:6},{value:"style",paraId:25,tocIndex:6},{value:" section, we add ",paraId:23,tocIndex:6},{value:"labelCfg",paraId:23,tocIndex:6},{value:" to ",paraId:23,tocIndex:6},{value:"defaultEdge",paraId:23,tocIndex:6},{value:".",paraId:23,tocIndex:6},{value:" ",paraId:23,tocIndex:6},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for graph\n  defaultEdge: {\n    // ... Other properties for edges\n    labelCfg: {\n      refY: -10,\n      refX: 60,\n    },\n  },\n});\n// ...\n",paraId:26,tocIndex:6}]},44204:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"A built-in edge Quadratic has the default style as below.",paraId:0},{value:" ",paraId:0},{value:"As stated in ",paraId:1,tocIndex:0},{value:"Built-in Edges",paraId:2,tocIndex:0},{value:" , there are three methods to configure edges: Configure edges globally when instantiating a Graph; Configure edges in their data; Configure edges by ",paraId:1,tocIndex:0},{value:"graph.edge(edgeFn)",paraId:1,tocIndex:0},{value:". Their priorities are:",paraId:1,tocIndex:0},{value:"graph.edge(edgeFn)",paraId:3,tocIndex:0},{value:" > Configure in data > Configure globally",paraId:3,tocIndex:0},{value:"⚠️ Attention:",paraId:4,tocIndex:0},{value:" Expect for ",paraId:4,tocIndex:0},{value:"id",paraId:4,tocIndex:0},{value:", ",paraId:4,tocIndex:0},{value:"source",paraId:4,tocIndex:0},{value:", ",paraId:4,tocIndex:0},{value:"target",paraId:4,tocIndex:0},{value:", ",paraId:4,tocIndex:0},{value:"label",paraId:4,tocIndex:0},{value:" which should be assigned to every single edge data, the other configurations in ",paraId:4,tocIndex:0},{value:"The Common Property",paraId:5,tocIndex:0},{value:" and in each edge type (refer to doc of each edge type) support to be assigned by the three ways.",paraId:4,tocIndex:0},{value:"Assign ",paraId:6,tocIndex:1},{value:"type",paraId:6,tocIndex:1},{value:" to ",paraId:6,tocIndex:1},{value:"'quadratic'",paraId:6,tocIndex:1},{value:" in the ",paraId:6,tocIndex:1},{value:"defaultEdge",paraId:6,tocIndex:1},{value:" object when instantiating a Graph:",paraId:6,tocIndex:1},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultEdge: {\n    type: 'quadratic', // The type of the edge\n    // ...  Other configuraltions\n  },\n});\n",paraId:7,tocIndex:1},{value:"To configure different edges with different properties, you can write the properties into the edge data.",paraId:8,tocIndex:2},{value:"const data = {\n  nodes: [\n    // ... // nodes\n  ],\n  edges: [{\n    source: 'node0',\n    target: 'node1'\n    type: 'quadratic',\n    //... // Other configurations for edges\n    style: {\n      .//...  // Style properties for edges\n    }\n  },\n    //... // Other edges\n  ]\n}\n",paraId:9,tocIndex:2},{value:"Quadratic edge has the ",paraId:10,tocIndex:3},{value:"Common Edge Properties",paraId:11,tocIndex:3},{value:", and some commonly used properties are shown below. The properties with object type will be described in detail after the table.",paraId:10,tocIndex:3},{value:"Name",paraId:12,tocIndex:3},{value:"Description",paraId:12,tocIndex:3},{value:"Type",paraId:12,tocIndex:3},{value:"Remark",paraId:12,tocIndex:3},{value:"color",paraId:12,tocIndex:3},{value:"The color of the edge",paraId:12,tocIndex:3},{value:"String",paraId:12,tocIndex:3},{value:"The priority id lower than ",paraId:12,tocIndex:3},{value:"stroke",paraId:12,tocIndex:3},{value:" in ",paraId:12,tocIndex:3},{value:"style",paraId:12,tocIndex:3},{value:"style",paraId:12,tocIndex:3},{value:"The default style of edge",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"Correspond to the styles in Canvas",paraId:12,tocIndex:3},{value:"label",paraId:12,tocIndex:3},{value:"The text of the label",paraId:12,tocIndex:3},{value:"String",paraId:12,tocIndex:3},{value:"labelCfg",paraId:12,tocIndex:3},{value:"The configurations of the label",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"controlPoints",paraId:12,tocIndex:3},{value:"The array of the control points for the quadratic curve",paraId:12,tocIndex:3},{value:"Array",paraId:12,tocIndex:3},{value:"If it is not assgined, the default control point on the center of the curve will take effect. e.g. ",paraId:12,tocIndex:3},{value:"[{ x: 10, y: 20 }]",paraId:12,tocIndex:3},{value:"curveOffset",paraId:12,tocIndex:3},{value:"The distance between the the controlPoint to the line connecting the two endpoints. It controls the degree of bending of the curve. The sign of it controls the bending direction.",paraId:12,tocIndex:3},{value:"Number / Number[]",paraId:12,tocIndex:3},{value:"It is a special configuration for 'cubic', 'horizontal', 'cubic-vertical', 'cubic-horizontal' type edge",paraId:12,tocIndex:3},{value:"curvePosition",paraId:12,tocIndex:3},{value:"The relative position of the controlPoint on the line connecting the two endpoints. Ranges from 0 to 1",paraId:12,tocIndex:3},{value:"Number / Number[]",paraId:12,tocIndex:3},{value:"It is a special configuration for 'cubic', 'horizontal', 'cubic-vertical', 'cubic-horizontal' type edge",paraId:12,tocIndex:3},{value:"stateStyles",paraId:12,tocIndex:3},{value:"The styles in different states",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"Refer to ",paraId:12,tocIndex:3},{value:"Configure Styles for State",paraId:13,tocIndex:3},{value:"### style",paraId:14,tocIndex:3},{value:"style",paraId:15,tocIndex:3},{value:" is an object which is the same as the ",paraId:15,tocIndex:3},{value:"Common Edge Style Properties",paraId:16,tocIndex:3},{value:". The following code shows how to configure the ",paraId:15,tocIndex:3},{value:"style",paraId:15,tocIndex:3},{value:" globally when instantiating a Graph.",paraId:15,tocIndex:3},{value:" ",paraId:15,tocIndex:3},{value:"const data = {\n  nodes: [\n    {\n      id: 'node0',\n      x: 100,\n      y: 100,\n      size: 20,\n    },\n    {\n      id: 'node1',\n      x: 200,\n      y: 100,\n      size: 20,\n    },\n  ],\n  edges: [\n    {\n      source: 'node0',\n      target: 'node1',\n      type: 'quadratic',\n      label: 'quadratic',\n    },\n  ],\n};\nconst graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultEdge: {\n    // type: 'quadratic',  // The type has been assigned in the data, we do not have to define it any more\n    style: {\n      stroke: '#088',\n      endArrow: true,\n      lineWidth: 3,\n    },\n  },\n});\ngraph.data(data);\ngraph.render();\n",paraId:17,tocIndex:3},{value:"labelCfg",paraId:18,tocIndex:4},{value:" is an object which is the same as the ",paraId:18,tocIndex:4},{value:"Common Edge Label Properties",paraId:19,tocIndex:4},{value:". Base on the code in ",paraId:18,tocIndex:4},{value:"style",paraId:20,tocIndex:4},{value:" section, we add ",paraId:18,tocIndex:4},{value:"labelCfg",paraId:18,tocIndex:4},{value:" to ",paraId:18,tocIndex:4},{value:"defaultEdge",paraId:18,tocIndex:4},{value:". ",paraId:18,tocIndex:4},{value:" ",paraId:18,tocIndex:4},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for graph\n  defaultEdge: {\n    // ... Other properties for edges\n    labelCfg: {\n      refY: 10,\n      refX: 40,\n    },\n  },\n});\n// ...\n",paraId:21,tocIndex:4}]},64830:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"G6 provides abundant ",paraId:0},{value:"Built-in Edges",paraId:1},{value:". Besides, the custom machanism allows the users to design their own type of edges. An edge with complex graphics shapes, complex interactions, fantastic animations can be implemented easily.",paraId:0},{value:"You are able to custom an edge type by ",paraId:2},{value:"G6.registerEdge(typeName: string, edgeDefinition: object, extendedEdgeType?: string)",paraId:2},{value:", where:",paraId:2},{value:"typeName",paraId:3},{value:": the name of the new edge type;",paraId:3},{value:"extendedEdgeType",paraId:3},{value:": The name of the existing type that will be extended, which can be a built-in edge type, or an existing custom edge type. When it is not assigned, the custom edge will not extend any existing edge type;",paraId:3},{value:"edgeDefinition",paraId:3},{value:": The definition of the new edge type. The required options can be found at ",paraId:3},{value:"Custom Mechanism API",paraId:4},{value:". When the ",paraId:3},{value:"extendedEdgeType",paraId:3},{value:" is assigned, the functions which are not rewritten will extend from the type with name ",paraId:3},{value:"extendedEdgeType",paraId:3},{value:".",paraId:3},{value:"Noted",paraId:5},{value:" that if the ",paraId:5},{value:"extendedEdgeType",paraId:5},{value:" is assigned, the required functions such as ",paraId:5},{value:"draw",paraId:5},{value:", ",paraId:5},{value:"update",paraId:5},{value:", and ",paraId:5},{value:"setState",paraId:5},{value:" will extend from ",paraId:5},{value:"extendedEdgeType",paraId:5},{value:" unless they are rewritten in ",paraId:5},{value:"edgeDefinition",paraId:5},{value:". Due to this mechanism, a question is often fed back:",paraId:5},{value:"Q: when the custom edge/node is updated, the re-draw logic is not the same as ",paraId:6},{value:"draw",paraId:6},{value:" or ",paraId:6},{value:"drawShape",paraId:6},{value:" function defined in ",paraId:6},{value:"edgeDefinition",paraId:6},{value:". e.g., some shapes are not updated as expected, and some text shapes show up.",paraId:6},{value:"A: Since the ",paraId:6},{value:"extendedEdgeType",paraId:6},{value:" is assigned, and the ",paraId:6},{value:"update",paraId:6},{value:" is not implemented in ",paraId:6},{value:"extendedEdgeType",paraId:6},{value:", the ",paraId:6},{value:"update",paraId:6},{value:" of the extended edge type will be called when updating the edge/node, whose logic might be different from the ",paraId:6},{value:"draw",paraId:6},{value:" or ",paraId:6},{value:"drawShape",paraId:6},{value:" defined by yourself. To avoid this problem, you can override the ",paraId:6},{value:"update",paraId:6},{value:" by ",paraId:6},{value:"undefined",paraId:6},{value:" in ",paraId:6},{value:"edgeDefinition",paraId:6},{value:". When ",paraId:6},{value:"update",paraId:6},{value:" is ",paraId:6},{value:"undefined",paraId:6},{value:", the ",paraId:6},{value:"draw",paraId:6},{value:" or ",paraId:6},{value:"drawShape",paraId:6},{value:" will be called when updating the edge/node.",paraId:6},{value:"In this document, we will introduce the custom edge by four examples: ",paraId:7},{value:"1. Register a brand new edge; ",paraId:7},{value:"2. Register an edge by extending a built-in edge; ",paraId:7},{value:"2. Register an edge with an extra shape; ",paraId:7},{value:"4. Register an edge with interactions and styles; ",paraId:7},{value:"5. Register an edge with custom arrow.",paraId:7},{value:"Now, we are goint to register a perpendicular polyline:",paraId:8,tocIndex:0},{value:"(Left) Straight line edge. (Center) A custom polyline edge. (Right) The result after modifying the link points of the end nodes.",paraId:9,tocIndex:0},{value:"G6.registerEdge('hvh', {\n  draw(cfg, group) {\n    const startPoint = cfg.startPoint;\n    const endPoint = cfg.endPoint;\n    const shape = group.addShape('path', {\n      attrs: {\n        stroke: '#333',\n        path: [\n          ['M', startPoint.x, startPoint.y],\n          ['L', endPoint.x / 3 + (2 / 3) * startPoint.x, startPoint.y], // 1/3\n          ['L', endPoint.x / 3 + (2 / 3) * startPoint.x, endPoint.y], // 2/3\n          ['L', endPoint.x, endPoint.y],\n        ],\n      },\n      // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n      name: 'path-shape',\n    });\n    return shape;\n  },\n});\n",paraId:10,tocIndex:1},{value:"Now, we have registered a custom edge named ",paraId:11,tocIndex:1},{value:"'hvh'",paraId:11,tocIndex:1},{value:" whose result is shown in the center of the figure above. The default ",paraId:11,tocIndex:1},{value:"startPoint",paraId:11,tocIndex:1},{value:" and ",paraId:11,tocIndex:1},{value:"endPoint",paraId:11,tocIndex:1},{value:" in the custom edge are the intersection of the edge and the end nodes.",paraId:11,tocIndex:1},{value:"To achieve the result shown in the right of the figure, we modify the anchorPoints (link points) of the end nodes to change the positions of ",paraId:12,tocIndex:1},{value:"startPoint",paraId:12,tocIndex:1},{value:" and ",paraId:12,tocIndex:1},{value:"endPoint",paraId:12,tocIndex:1},{value:".",paraId:12,tocIndex:1},{value:"Now, we modify ",paraId:13,tocIndex:2},{value:"anchorPoints",paraId:13,tocIndex:2},{value:" in the node data, and then assign ",paraId:13,tocIndex:2},{value:"shape",paraId:13,tocIndex:2},{value:" to ",paraId:13,tocIndex:2},{value:"'hvh'",paraId:13,tocIndex:2},{value:" in edge data as shown below.",paraId:13,tocIndex:2},{value:"const data = {\n  nodes: [\n    {\n      id: 'node1',\n      x: 100,\n      y: 200,\n      anchorPoints: [\n        [0, 0.5],\n        [1, 0.5],\n      ],\n    },\n    {\n      id: 'node2',\n      x: 200,\n      y: 100,\n      anchorPoints: [\n        [0, 0.5],\n        [1, 0.5],\n      ],\n    },\n    {\n      id: 'node3',\n      x: 200,\n      y: 300,\n      anchorPoints: [\n        [0, 0.5],\n        [1, 0.5],\n      ],\n    },\n  ],\n  edges: [\n    {\n      id: 'edge1',\n      target: 'node2',\n      source: 'node1',\n      type: 'hvh',\n    },\n    {\n      id: 'edge2',\n      target: 'node3',\n      source: 'node1',\n      type: 'hvh',\n    },\n  ],\n};\n",paraId:14,tocIndex:2},{value:"In this section, we add animation to a built-in edge by ",paraId:15,tocIndex:3},{value:"afterDraw",paraId:15,tocIndex:3},{value:".",paraId:15,tocIndex:3},{value:"G6.registerEdge(\n  'line-growth',\n  {\n    afterDraw(cfg, group) {\n      const shape = group.get('children')[0];\n      const length = shape.getTotalLength();\n      shape.animate(\n        (ratio) => {\n          const startLen = ratio * length;\n          const cfg = {\n            lineDash: [startLen, length - startLen],\n          };\n          return cfg;\n        },\n        {\n          repeat: true,\n          duration: 2000,\n        },\n      );\n    },\n  },\n  'cubic',\n);\n",paraId:16,tocIndex:3},{value:"Adding an extra shape on an arbitrary position on the path of the edge can be implemented by ",paraId:17,tocIndex:4},{value:"afterDraw",paraId:17,tocIndex:4},{value:". ",paraId:17,tocIndex:4},{value:"shape.getPoint(ratio)",paraId:17,tocIndex:4},{value:" helps us to find the coordiante of an arbitrary point on the ",paraId:17,tocIndex:4},{value:"path",paraId:17,tocIndex:4},{value:".",paraId:17,tocIndex:4},{value:"G6.registerEdge(\n  'mid-point-edge',\n  {\n    afterDraw(cfg, group) {\n      // get the first shape in the graphics group of this edge, it is the path of the edge here\n      const shape = group.get('children')[0];\n      // get the coordinate of the mid point on the path\n      const midPoint = shape.getPoint(0.5);\n      // add a rect on the mid point of the path. note that the origin of a rect shape is on its lefttop\n      group.addShape('rect', {\n        attrs: {\n          width: 10,\n          height: 10,\n          fill: '#f00',\n          // x and y should be minus width / 2 and height / 2 respectively to translate the center of the rect to the midPoint\n          x: midPoint.x - 5,\n          y: midPoint.y - 5,\n        },\n        name: 'mid-point-edge-rect', // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n      });\n    },\n    update: undefined,\n  },\n  'cubic',\n);\n",paraId:18,tocIndex:4},{value:"In this section, we implement a type of edge with the interaction styles below:",paraId:19,tocIndex:5},{value:"Widen the edge by clicking. Restore it by clicking again;",paraId:20,tocIndex:5},{value:"Turn to red by mouse hovering. Restore it by mouse leaving.",paraId:20,tocIndex:5},{value:"The result:",paraId:21,tocIndex:5},{value:"⚠️Attention:",paraId:22},{value:" when the edge is too thin to be hitted by mouse, set `lineAppendWidth` to enlarge the hitting area.\n",paraId:22},{value:"// Extend a new type of edge by extending line edge\nG6.registerEdge(\n  'custom-edge',\n  {\n    // Response the states change\n    setState(name, value, item) {\n      const group = item.getContainer();\n      const shape = group.get('children')[0]; // The order is determined by the ordering of been draw\n      if (name === 'active') {\n        if (value) {\n          shape.attr('stroke', 'red');\n        } else {\n          shape.attr('stroke', '#333');\n        }\n      }\n      if (name === 'selected') {\n        if (value) {\n          shape.attr('lineWidth', 3);\n        } else {\n          shape.attr('lineWidth', 2);\n        }\n      }\n    },\n  },\n  'line',\n);\n\n// Select by clicking, cancel by clicking again\ngraph.on('edge:click', (ev) => {\n  const edge = ev.item;\n  graph.setItemState(edge, 'selected', !edge.hasState('selected')); // Switch the 'selected' state\n});\n\ngraph.on('edge:mouseenter', (ev) => {\n  const edge = ev.item;\n  graph.setItemState(edge, 'active', true);\n});\n\ngraph.on('edge:mouseleave', (ev) => {\n  const edge = ev.item;\n  graph.setItemState(edge, 'active', false);\n});\n",paraId:23,tocIndex:5},{value:"G6 (v3.5.8 and later versions) provides ",paraId:24,tocIndex:6},{value:"default arrow and built-in arrows",paraId:25,tocIndex:6},{value:" for edges. The default end arrows might not meet the requirements sometimes. You can register an edge with a custom arrow by the custom mechanism of G6.",paraId:24,tocIndex:6},{value:"(Left) Built-in arrow of G6. (Right) A custom edge with custom arrow.",paraId:26,tocIndex:6},{value:"⚠️ Attention:",paraId:27,tocIndex:6},{value:" The coordinate system of custom arrow is changed by G6 3.4.1. In the figure below, the left one is the demonstration of the custom arrow before v3.4.1, and the right one illustates v3.4.1 and its later versions. The pointed direction is changed from negative direction to positive direction of x-axis. In the same time, the dirrection of the offset ",paraId:27,tocIndex:6},{value:"d",paraId:27,tocIndex:6},{value:" is changed. In both versions, the origin of the self coordinate system of the custom arrow is on the end point of the corresponding edge or path, and the slope of the arrow is the same as the slope of edge or path at the end point.",paraId:27,tocIndex:6},{value:"(Left) Illustration for the coordinate system of custom arrow before v3.4.1. (Right) Illustration for v3.4.1 and its later versions.",paraId:28,tocIndex:6},{value:"There are three ways to configure a custom arrow to an edge in G6:",paraId:29,tocIndex:6},{value:"Configuring on the graph to global edges;",paraId:30,tocIndex:6},{value:"Configuring in data for single edge;",paraId:30,tocIndex:6},{value:"Configuring in a custom edge type.",paraId:30,tocIndex:6},{value:"const graph = new Graph({\n  // ... Other configurations for graph\n  defaultEdge: {\n    style: {\n      endArrow: {\n        // The custom arrow is a path points at (0, 0), and its tail points to the positive direction of x-axis\n        path: 'M 0,0 L 20,10 L 20,-10 Z',\n        // the offset of the arrow, nagtive value means the arrow is moved alone the positive direction of x-axis\n        // d: -10\n        // styles are supported after v3.4.1\n        fill: '#333',\n        stroke: '#666',\n        opacity: 0.8,\n        // ...\n      },\n    },\n  },\n});\n",paraId:31,tocIndex:7},{value:"const data = {\n  nodes: [\n    { id: 'node1' },\n    { id: 'node2' },\n    // ... other nodes\n  ],\n  edges: [\n    {\n      source: 'node1',\n      target: 'node2',\n      style: {\n        endArrow: {\n          // The custom arrow is a path points at (0, 0), and its tail points to the positive direction of x-axis\n          path: 'M 0,0 L 20,10 L 20,-10 Z',\n          // the offset of the arrow, nagtive value means the arrow is moved alone the positive direction of x-axis\n          // d: -10\n          // styles are supported after v3.4.1\n          fill: '#333',\n          stroke: '#666',\n          opacity: 0.8,\n          // ...\n        },\n      },\n    },\n    //... other edges\n  ],\n};\n",paraId:32,tocIndex:8},{value:"G6.registerEdge('line-arrow', {\n  draw(cfg, group) {\n    const { startPoint, endPoint } = cfg;\n    const keyShape = group.addShape('path', {\n      attrs: {\n        path: [\n          ['M', startPoint.x, startPoint.y],\n          ['L', endPoint.x, endPoint.y],\n        ],\n        stroke: 'steelblue',\n        lineWidth: 3,\n        startArrow: {\n          // The custom arrow is a path points at (0, 0), and its tail points to the positive direction of x-axis\n          path: 'M 0,0 L 20,10 L 20,-10 Z',\n          // the offset of the arrow, nagtive value means the arrow is moved alone the positive direction of x-axis\n          // d: -10\n        },\n        endArrow: {\n          // The custom arrow is a path points at (0, 0), and its tail points to the positive direction of x-axis\n          path: 'M 0,0 L 20,10 L 20,-10 Z',\n          // the offset of the arrow, nagtive value means the arrow is moved alone the positive direction of x-axis\n          // d: -10\n        },\n      },\n      // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n      name: 'path-shape',\n    });\n    return keyShape;\n  },\n});\n",paraId:33,tocIndex:9}]},99782:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"There are 9 built-in edges in G6:",paraId:0},{value:"line: straight line without control points;",paraId:1},{value:"polyline: polyline with one or more control points;",paraId:1},{value:"arc;",paraId:1},{value:"quadratic: quadratic bezier curve;",paraId:1},{value:"cubic: cubic bezier curve;",paraId:1},{value:"cubic-vertical：vertical cubic bezier curve. The user can not assign the control point for this type of edge;",paraId:1},{value:"cubic-horizontal: horizontal cubic bezier curve. The user can not assign the control point for this type of edge;",paraId:1},{value:"loop: self-loop edge.",paraId:1},{value:"The table below shows the built-in edges and their special properties:",paraId:2,tocIndex:0},{value:"Name",paraId:3,tocIndex:0},{value:"Description",paraId:3,tocIndex:0},{value:"line",paraId:3,tocIndex:0},{value:"A straight line connected two end nodes: ",paraId:3,tocIndex:0},{value:"- ",paraId:3,tocIndex:0},{value:"controlPoints",paraId:3,tocIndex:0},{value:" does not take effect",paraId:3,tocIndex:0},{value:"- Refer to properties of line for more information",paraId:3,tocIndex:0},{value:"polyline",paraId:3,tocIndex:0},{value:"A polyline with one or more control points: ",paraId:3,tocIndex:0},{value:"- ",paraId:3,tocIndex:0},{value:"controlPoints",paraId:3,tocIndex:0},{value:" is the set of all the control points of polyline. If it is not assigned, G6 will calculate it by ",paraId:3,tocIndex:0},{value:"A* algorithm",paraId:3,tocIndex:0},{value:"- Refer to properties of polyline for more information",paraId:3,tocIndex:0},{value:"arc",paraId:3,tocIndex:0},{value:"An arc connects two end nodes: ",paraId:3,tocIndex:0},{value:"- ",paraId:3,tocIndex:0},{value:"controlPoints",paraId:3,tocIndex:0},{value:" does not take effects",paraId:3,tocIndex:0},{value:"- control the bending and direction by ",paraId:3,tocIndex:0},{value:"curveOffset",paraId:3,tocIndex:0},{value:"- Refer to properties of arc for more informatio",paraId:3,tocIndex:0},{value:"quadratic",paraId:3,tocIndex:0},{value:"A quadratic bezier curve with one control point: ",paraId:3,tocIndex:0},{value:"- The curve will be bended on the center if the ",paraId:3,tocIndex:0},{value:"controlPoints",paraId:3,tocIndex:0},{value:" is not defined ",paraId:3,tocIndex:0},{value:"- Refer to properties of quadratic for more informatio",paraId:3,tocIndex:0},{value:"cubic",paraId:3,tocIndex:0},{value:"A cubic bezier curve with two control points: ",paraId:3,tocIndex:0},{value:"- The curve will be bended on the position of 1/3 and 2/3 if the ",paraId:3,tocIndex:0},{value:"controlPoints",paraId:3,tocIndex:0},{value:" is not defined",paraId:3,tocIndex:0},{value:"- Refer to properties of cubic for more informatio",paraId:3,tocIndex:0},{value:"cubic-vertical",paraId:3,tocIndex:0},{value:"The vertical cubic bezier curve. The user can not assign the control point for this type of edge",paraId:3,tocIndex:0},{value:"cubic-horizontal",paraId:3,tocIndex:0},{value:"The horizontal cubic bezier curve. The user can not assign the control point for this type of edge",paraId:3,tocIndex:0},{value:"loop",paraId:3,tocIndex:0},{value:"Self-loop edge. Refer to properties of loop for more informatio",paraId:3,tocIndex:0},{value:"| Name | Required | Type | Remark |\n| --- | --- | --- | --- | --- |\n| id | true | String | The id of the edge, ",paraId:4,tocIndex:1},{value:"MUST",paraId:4,tocIndex:1},{value:" be a unique string |\n| source | true | String | Number | The id of the source node |\n| target | true | String | The id of the target node |\n| type | false | String | The type of the edge. It can be the type of a Built-in Edge, or a custom Edge. ",paraId:4,tocIndex:1},{value:"'line'",paraId:4,tocIndex:1},{value:" by default |\n| sourceAnchor | false | Number | The index of link points on the source node. The link point is the intersection of the edge and related node |\n| targetAnchor | false | Number | The index of link points on the target node. The link point is the intersection of the edge and related node |\n| style | false | Object | The edge style |\n| label | false | String | The label text of the edge |\n| labelCfg | false | Object | The configurations of the label |",paraId:4,tocIndex:1},{value:"style",paraId:5,tocIndex:2},{value:" is an object to configure the stroke color, shadow, and so on. Here is the commonly used properties in ",paraId:5,tocIndex:2},{value:"style",paraId:5,tocIndex:2},{value:":",paraId:5,tocIndex:2},{value:"Name",paraId:6,tocIndex:2},{value:"Required",paraId:6,tocIndex:2},{value:"Type",paraId:6,tocIndex:2},{value:"Remark",paraId:6,tocIndex:2},{value:"stroke",paraId:6,tocIndex:2},{value:"false",paraId:6,tocIndex:2},{value:"String",paraId:6,tocIndex:2},{value:"The stroke color",paraId:6,tocIndex:2},{value:"lineWidth",paraId:6,tocIndex:2},{value:"false",paraId:6,tocIndex:2},{value:"Number",paraId:6,tocIndex:2},{value:"The line width",paraId:6,tocIndex:2},{value:"lineAppendWidth",paraId:6,tocIndex:2},{value:"false",paraId:6,tocIndex:2},{value:"Number",paraId:6,tocIndex:2},{value:"The width of the response area for interaction. In other words, when the edge is too thin to be hitted by mouse, enlarge the value of ",paraId:6,tocIndex:2},{value:"lineWidth",paraId:6,tocIndex:2},{value:" to widen the response area",paraId:6,tocIndex:2},{value:"endArrow",paraId:6,tocIndex:2},{value:"false",paraId:6,tocIndex:2},{value:"Boolean / Object",paraId:6,tocIndex:2},{value:"The arrow on the end of the edge. When ",paraId:6,tocIndex:2},{value:"startArrow",paraId:6,tocIndex:2},{value:" is ",paraId:6,tocIndex:2},{value:"true",paraId:6,tocIndex:2},{value:", show a default arrow on the end of the edge. User can customize an arrow by path, e.g.:",paraId:6,tocIndex:2},{value:"endArrow: {",paraId:6,tocIndex:2},{value:" path: 'M 0,0 L 20,10 L 20,-10 Z', // Customize the path for the arrow",paraId:6,tocIndex:2},{value:" d: -2 // offset",paraId:6,tocIndex:2},{value:"}",paraId:6,tocIndex:2},{value:"startArrow",paraId:6,tocIndex:2},{value:"false",paraId:6,tocIndex:2},{value:"Boolean / Object",paraId:6,tocIndex:2},{value:"The arrow on the start of the edge. When ",paraId:6,tocIndex:2},{value:"startArrow",paraId:6,tocIndex:2},{value:" is ",paraId:6,tocIndex:2},{value:"true",paraId:6,tocIndex:2},{value:", show a default arrow on the start of the edge. User can customize an arrow by path, e.g.:",paraId:6,tocIndex:2},{value:"endArrow: {",paraId:6,tocIndex:2},{value:" path: 'M 0,0 L 20,10 L 20,-10 Z', // Customize the path for the arrow",paraId:6,tocIndex:2},{value:" d: -2 // offset",paraId:6,tocIndex:2},{value:"}",paraId:6,tocIndex:2},{value:"strokeOpacity",paraId:6,tocIndex:2},{value:"false",paraId:6,tocIndex:2},{value:"Number",paraId:6,tocIndex:2},{value:"The stroke opacity",paraId:6,tocIndex:2},{value:"shadowColor",paraId:6,tocIndex:2},{value:"false",paraId:6,tocIndex:2},{value:"String",paraId:6,tocIndex:2},{value:"The color of the shadow",paraId:6,tocIndex:2},{value:"shadowBlur",paraId:6,tocIndex:2},{value:"false",paraId:6,tocIndex:2},{value:"Number",paraId:6,tocIndex:2},{value:"The blur degree of the shadow",paraId:6,tocIndex:2},{value:"shadowOffsetX",paraId:6,tocIndex:2},{value:"false",paraId:6,tocIndex:2},{value:"Number",paraId:6,tocIndex:2},{value:"The x offset of the shadow",paraId:6,tocIndex:2},{value:"shadowOffsetY",paraId:6,tocIndex:2},{value:"false",paraId:6,tocIndex:2},{value:"Number",paraId:6,tocIndex:2},{value:"The y offset of the shadow",paraId:6,tocIndex:2},{value:"lineDash",paraId:6,tocIndex:2},{value:"false",paraId:6,tocIndex:2},{value:"Array",paraId:6,tocIndex:2},{value:"The style of the dash line. It is an array that describes the length of gaps and line segments. If the number of the elements in the array is odd, the elements will be dulplicated. Such as [5, 15, 25] will be regarded as [5, 15, 25, 5, 15, 25]",paraId:6,tocIndex:2},{value:"cursor",paraId:6,tocIndex:2},{value:"false",paraId:6,tocIndex:2},{value:"String",paraId:6,tocIndex:2},{value:"The type of the mouse when hovering the edge. The options are the same as ",paraId:6,tocIndex:2},{value:"cursor in CSS",paraId:6,tocIndex:2},{value:"Configure ",paraId:7,tocIndex:2},{value:"style",paraId:7,tocIndex:2},{value:" globally when instantiating the Graph:",paraId:7,tocIndex:2},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultEdge: {\n    // ... Other properties for edges\n    style: {\n      stroke: '#eaff8f',\n      lineWidth: 5,\n      // ... Other style properties\n    },\n  },\n});\n",paraId:8,tocIndex:2},{value:"label",paraId:9,tocIndex:3},{value:" is a string which indicates the content of the label. ",paraId:9,tocIndex:3},{value:"labelCfg",paraId:9,tocIndex:3},{value:" is an object to configure the label. The commonly used configurations of ",paraId:9,tocIndex:3},{value:"labelCfg",paraId:9,tocIndex:3},{value:":",paraId:9,tocIndex:3},{value:"Name",paraId:10,tocIndex:3},{value:"Required",paraId:10,tocIndex:3},{value:"Type",paraId:10,tocIndex:3},{value:"Remark",paraId:10,tocIndex:3},{value:"refX",paraId:10,tocIndex:3},{value:"false",paraId:10,tocIndex:3},{value:"Number",paraId:10,tocIndex:3},{value:"x offset of the label",paraId:10,tocIndex:3},{value:"refY",paraId:10,tocIndex:3},{value:"false",paraId:10,tocIndex:3},{value:"Number",paraId:10,tocIndex:3},{value:"y offset of the label",paraId:10,tocIndex:3},{value:"position",paraId:10,tocIndex:3},{value:"false",paraId:10,tocIndex:3},{value:"String",paraId:10,tocIndex:3},{value:"The relative position to the edge. Options: ",paraId:10,tocIndex:3},{value:"'start'",paraId:10,tocIndex:3},{value:", ",paraId:10,tocIndex:3},{value:"'middle'",paraId:10,tocIndex:3},{value:", and ",paraId:10,tocIndex:3},{value:"'end'",paraId:10,tocIndex:3},{value:". ",paraId:10,tocIndex:3},{value:"'middle'",paraId:10,tocIndex:3},{value:" by default",paraId:10,tocIndex:3},{value:"autoRotate",paraId:10,tocIndex:3},{value:"false",paraId:10,tocIndex:3},{value:"Boolean",paraId:10,tocIndex:3},{value:"Whether to activate ratating according to the edge automatically. ",paraId:10,tocIndex:3},{value:"false",paraId:10,tocIndex:3},{value:" by default",paraId:10,tocIndex:3},{value:"style",paraId:10,tocIndex:3},{value:"false",paraId:10,tocIndex:3},{value:"Object",paraId:10,tocIndex:3},{value:"The style property of the label",paraId:10,tocIndex:3},{value:"The commonly used configurations for the ",paraId:11,tocIndex:3},{value:"style",paraId:11,tocIndex:3},{value:" in the above table are:",paraId:11,tocIndex:3},{value:"Name",paraId:12,tocIndex:3},{value:"Required",paraId:12,tocIndex:3},{value:"Type",paraId:12,tocIndex:3},{value:"Remark",paraId:12,tocIndex:3},{value:"fill",paraId:12,tocIndex:3},{value:"false",paraId:12,tocIndex:3},{value:"String",paraId:12,tocIndex:3},{value:"The color of the label",paraId:12,tocIndex:3},{value:"stroke",paraId:12,tocIndex:3},{value:"false",paraId:12,tocIndex:3},{value:"String",paraId:12,tocIndex:3},{value:"The stroke color",paraId:12,tocIndex:3},{value:"lineWidth",paraId:12,tocIndex:3},{value:"false",paraId:12,tocIndex:3},{value:"Number",paraId:12,tocIndex:3},{value:"The line width of the stroke",paraId:12,tocIndex:3},{value:"opacity",paraId:12,tocIndex:3},{value:"false",paraId:12,tocIndex:3},{value:"Number",paraId:12,tocIndex:3},{value:"The opacity",paraId:12,tocIndex:3},{value:"fontSize",paraId:12,tocIndex:3},{value:"false",paraId:12,tocIndex:3},{value:"Number",paraId:12,tocIndex:3},{value:"The font size",paraId:12,tocIndex:3},{value:"fontFamily",paraId:12,tocIndex:3},{value:"false",paraId:12,tocIndex:3},{value:"String",paraId:12,tocIndex:3},{value:"The font family",paraId:12,tocIndex:3},{value:"... The label styles of node and edge are the same, summarized in ",paraId:12,tocIndex:3},{value:"Text Shape API",paraId:13,tocIndex:3},{value:"The following code shows how to configure ",paraId:14,tocIndex:3},{value:"label",paraId:14,tocIndex:3},{value:" and ",paraId:14,tocIndex:3},{value:"labelCfg",paraId:14,tocIndex:3},{value:" globally when instantiating a Graph:",paraId:14,tocIndex:3},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultEdge: {\n    // ... Other properties for nodes\n    label: 'edge-label',\n    labelCfg: {\n      refY: -10,\n      refX: 60,\n    },\n  },\n});\n",paraId:15,tocIndex:3},{value:"There are three methods to configure edges: Configure edges globally when instantiating a Graph; Configure edges in their data; Configure edges by ",paraId:16,tocIndex:4},{value:"graph.edge(edgeFn)",paraId:16,tocIndex:4},{value:". Their priorities are:",paraId:16,tocIndex:4},{value:"graph.edge(edgeFn)",paraId:17,tocIndex:4},{value:" > Configure in data > Configure globally",paraId:17,tocIndex:4},{value:"That means, if there are same configurations in different ways, the way with higher priority will take effect.",paraId:18,tocIndex:4},{value:"⚠️ Attention:",paraId:19,tocIndex:4},{value:" Expect for ",paraId:19,tocIndex:4},{value:"id",paraId:19,tocIndex:4},{value:", ",paraId:19,tocIndex:4},{value:"source",paraId:19,tocIndex:4},{value:", ",paraId:19,tocIndex:4},{value:"target",paraId:19,tocIndex:4},{value:", ",paraId:19,tocIndex:4},{value:"label",paraId:19,tocIndex:4},{value:" which should be assigned to every single edge data, the other configurations in ",paraId:19,tocIndex:4},{value:"The Common Property",paraId:20,tocIndex:4},{value:" and in each edge type (refer to doc of each edge type) support to be assigned by the three ways.",paraId:19,tocIndex:4},{value:"Assign ",paraId:21,tocIndex:5},{value:"defaultEdge",paraId:21,tocIndex:5},{value:" to configure all the nodes globally:",paraId:21,tocIndex:5},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultEdge: {\n    type: 'line',\n    // Other properties for all the nodes\n  },\n});\n",paraId:22,tocIndex:5},{value:"To configure different nodes with different properties, you can write the properties into their data individually:",paraId:23,tocIndex:6},{value:"const data = {\n  nodes: [\n    ... // nodes\n  ],\n  edges: [{\n    source: 'node0',\n    target: 'node1'\n    type: 'polyline',\n    // ...    // Other properties for this edge\n    style: {\n      // ...  // Style properties for this edge\n    }\n  },{\n    source: 'node1',\n    target: 'node2'\n    type: 'cubic',\n    // ...    // Other properties for this edge\n    style: {\n      // ...  // Style properties for this edge\n    }\n  },\n    // ... // edges\n  ]\n}\n",paraId:24,tocIndex:6},{value:"By this way, we can configure different nodes with different properties.",paraId:25,tocIndex:7},{value:"⚠️Attention:",paraId:26,tocIndex:7},{value:"graph.edge(edgeFn)",paraId:27,tocIndex:7},{value:" must be called ",paraId:27,tocIndex:7},{value:"before calling render()",paraId:27,tocIndex:7},{value:". It does not take effect otherwise;",paraId:27,tocIndex:7},{value:"It has the highest priority that will override the same properties configured by other ways;",paraId:27,tocIndex:7},{value:"Each edge will be updated when adding or updating items. It will cost a lot when the amount of the data is large.",paraId:27,tocIndex:7},{value:"// const data = ...\n// const graph = ...\ngraph.edge((edge) => {\n  return {\n    id: edge.id,\n    type: 'polyline',\n    style: {\n      fill: 'steelblue',\n    },\n  };\n});\n\ngraph.data(data);\ngraph.render();\n",paraId:28,tocIndex:7},{value:"const data = {\n  nodes: [\n    { id: '1', x: 50, y: 50, size: 20 },\n    { id: '2', x: 150, y: 50, size: 20 },\n    { id: '3', x: 200, y: 50, size: 20 },\n    { id: '4', x: 300, y: 130, size: 20 },\n    { id: '5', x: 350, y: 50, size: 20 },\n    { id: '6', x: 450, y: 50, size: 20 },\n    { id: '7', x: 500, y: 50, size: 20 },\n    { id: '8', x: 600, y: 50, size: 20 },\n    { id: '9', x: 650, y: 50, size: 20 },\n    { id: '10', x: 750, y: 50, size: 20 },\n    { id: '11', x: 800, y: 50, size: 20 },\n    { id: '12', x: 900, y: 150, size: 20 },\n    { id: '13', x: 950, y: 50, size: 20 },\n    { id: '14', x: 1050, y: 150, size: 20 },\n    { id: '15', x: 1100, y: 50, size: 20 },\n  ],\n  edges: [\n    { source: '1', target: '2', type: 'line', label: 'line' },\n    { source: '3', target: '4', type: 'polyline', label: 'polyline' },\n    { source: '5', target: '6', type: 'arc', label: 'arc' },\n    { source: '7', target: '8', type: 'quadratic', label: 'quadratic' },\n    { source: '9', target: '10', type: 'cubic', label: 'cubic' },\n    { source: '11', target: '12', type: 'cubic-vertical', label: 'cubic-vertical' },\n    { source: '13', target: '14', type: 'cubic-horizontal', label: 'cubic-horizontal' },\n    { source: '15', target: '15', type: 'loop', label: 'loop' },\n  ],\n};\n\nconst graph = new G6.Graph({\n  container: 'mountNode',\n  width: 1500,\n  height: 300,\n  linkCenter: true, // edges connect the nodes' center\n});\ngraph.data(data);\ngraph.render();\n",paraId:29,tocIndex:8},{value:"The result: ",paraId:30,tocIndex:8},{value:" ",paraId:30,tocIndex:8},{value:"By writing the properties into the data, we adjust the style and the label of the edges of '9-10' and '11-12'.",paraId:31,tocIndex:9},{value:"// Move the label of this edge\n{\n  source: '9',\n  target: '10',\n  type: 'cubic',\n  label: 'cubic',\n  labelCfg: {\n    refY: -15 // refY is the offset along the clockwise down direction\n  }\n},\n// Set the color, line dash, line width, and style of the label of this edge\n{\n  source: '11',\n  target: '12',\n  type: 'cubic-vertical',\n  color: '#722ed1',     // Color\n  size: 5,              // Line width\n  style: {\n  \tlineDash: [2, 2]    // Dash line\n  },\n  label: 'cubic-vertical',\n  labelCfg: {\n  \tposition: 'center', // The position of the label=\n    autoRotate: true,   // Whether to rotate the label according to the edge\n    style: {\n      stroke: 'white',  // White stroke for the label\n    \tlineWidth: 5,     // The line width of the stroke\n      fill: '#722ed1',  // The color of the text\n    }\n  }\n}\n",paraId:32,tocIndex:9},{value:"State",paraId:33,tocIndex:10},{value:" —— Change the styles during the interaction process.",paraId:34,tocIndex:10}]},12073:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Show and hide the node/edge/combo by the following six functions:",paraId:0,tocIndex:0},{value:"// Show the instance of the node nodeItem. The property `visible` of the node will be true after calling the following code\nnodeItem.show();\n\n// Hide the instance of the node nodeItem. The property `visible` of the node will be false after calling the following code\nnodeItem.hide();\n\n// Show the instance of the edge edgeItem. The property `visible` of the node will be true after calling the following code\nedgeItem.show();\n\n// Hide the instance of the edge edgeItem. The property `visible` of the node will be false after calling the following code\nedgeItem.hide();\n\n// Show the instance of the combo comboItem. The property `visible` of the node will be true after calling the following code\ncomboItem.show();\n\n// Hide the instance of the combo comboItem. The property `visible` of the node will be false after calling the following code\ncomboItem.hide();\n",paraId:1,tocIndex:0},{value:"In this example, we bind the listeners to node clicking, edge clicking, and canvas clicking. And show/hide items in the inside the listeners:",paraId:2,tocIndex:1},{value:"// Hide the node when the mouse clicks on it\ngraph.on('node:click', (ev) => {\n  const node = ev.item;\n  console.log('before hide(), the nodevisible = ', node.get('visible'));\n  node.hide();\n  console.log('after hide(), the node visible = ', node.get('visible'));\n});\n\n// Hide the edge when the mouse clicks on it\ngraph.on('edge:click', (ev) => {\n  const edge = ev.item;\n  console.log('before hide(), the edge visible = ', edge.get('visible'));\n  edge.hide();\n  console.log('after hide(), the edge visible = ', edge.get('visible'));\n});\n\n// Show all the nodes and edges when the mouse clicks the canvas\ngraph.on('canvas:click', (ev) => {\n  const nodes = graph.getNodes();\n  const edges = graph.getEdges();\n  nodes.forEach((node) => {\n    node.show();\n  });\n  edges.forEach((edge) => {\n    edge.show();\n  });\n});\n",paraId:3,tocIndex:1}]},84526:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"The visual levels (zIndex) of nodes and edges are refered to their ",paraId:0},{value:"Graphics Group",paraId:1},{value:" (hereinafter referred to as Shape). (",paraId:0},{value:"⚠️Attention:",paraId:0},{value:" The Graphics Group is different from the ",paraId:0},{value:"Node Combo",paraId:2},{value:", the differences are described in ",paraId:0},{value:"Graphics Group",paraId:3},{value:").",paraId:0},{value:"In ",paraId:4},{value:"Graphics Group",paraId:5},{value:", we stated: All the nodes instances in a Graph is grouped by a Group named ",paraId:4},{value:"nodeGroup",paraId:4},{value:", all the edges instances are grouped by ",paraId:4},{value:"edgeGroup",paraId:4},{value:". And the visual level (zIndex) of ",paraId:4},{value:"nodeGroup",paraId:4},{value:" is higher than ",paraId:4},{value:"edgeGroup",paraId:4},{value:", which means all the nodes will be drawed on the top of all the edges.",paraId:4},{value:"Sometimes, we want to draw the edges on the top. For example, highlighting a node and its related edges. In this situation, you can configure ",paraId:6},{value:"groupByTypes",paraId:6},{value:" of the graph to false and call ",paraId:6},{value:"toFront()",paraId:6},{value:" and ",paraId:6},{value:"toBack()",paraId:6},{value:" to order the nodes or edges.",paraId:6},{value:"The expected effect is: the related nodes and edges are drawed on the top of others when the mouse enters a node; Restore the visual levels (zIndex) when the mouse moves out of the node. ",paraId:7},{value:"Complete Code of the Demo",paraId:7},{value:". ",paraId:7},{value:"There are 3 steps to implement the expected effect:",paraId:8},{value:"Step 1: Configure",paraId:9},{value:"groupByTypes",paraId:9},{value:" to ",paraId:9},{value:"false",paraId:9},{value:" when instantiating a Graph;",paraId:9},{value:"Step 2: Place the nodes to the top of edges;",paraId:9},{value:"Step 3: Change the visual levels in the listener function of mouse entering.",paraId:9},{value:"The following code imports G6, defines the data, instantiates the Graph, renders the graph. We will modify this code to implement the expected effect.",paraId:10,tocIndex:0},{value:"// The source data\nconst data = {\n  nodes: [\n    {\n      id: 'node0',\n      x: 100,\n      y: 100,\n      size: 20,\n    },\n    {\n      id: 'node1',\n      x: 200,\n      y: 200,\n      size: 20,\n    },\n    {\n      id: 'node2',\n      x: 150,\n      y: 150,\n      size: 20,\n    },\n    {\n      id: 'node3',\n      x: 150,\n      y: 250,\n      size: 20,\n    },\n    {\n      id: 'node4',\n      x: 150,\n      y: 200,\n      size: 20,\n    },\n  ],\n  edges: [\n    {\n      id: 'edge0',\n      source: 'node0',\n      target: 'node1',\n    },\n    {\n      id: 'edge1',\n      source: 'node2',\n      target: 'node3',\n    },\n  ],\n};\n\n// Instantiate the graph\nconst graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  // Make the edge thicker for demonstration\n  defaultEdge: {\n    style: {\n      lineWidth: 2,\n    },\n  },\n});\n\n// Load the data\ngraph.data(data);\n// Render the graph\ngraph.render();\n",paraId:11,tocIndex:0},{value:"groupByTypes",paraId:12,tocIndex:1},{value:" is a configuration of Graph with ",paraId:12,tocIndex:1},{value:"true",paraId:12,tocIndex:1},{value:" as default value. That means that all the nodes are grouped in a Group named ",paraId:12,tocIndex:1},{value:"nodeGroup",paraId:12,tocIndex:1},{value:", all the edges are groupd in ",paraId:12,tocIndex:1},{value:"edgeGroup",paraId:12,tocIndex:1},{value:", and ",paraId:12,tocIndex:1},{value:"nodeGroup",paraId:12,tocIndex:1},{value:" is on the top of ",paraId:12,tocIndex:1},{value:"edgeGroup",paraId:12,tocIndex:1},{value:". Assign ",paraId:12,tocIndex:1},{value:"false",paraId:12,tocIndex:1},{value:" to ",paraId:12,tocIndex:1},{value:"groupByTypes",paraId:12,tocIndex:1},{value:" to cancel the ",paraId:12,tocIndex:1},{value:"nodeGroup",paraId:12,tocIndex:1},{value:" and ",paraId:12,tocIndex:1},{value:"edgeGroup",paraId:12,tocIndex:1},{value:". And all the nodes and edges will be grouped in one Group. The visual level (zIndex) in determined by their generation order.",paraId:12,tocIndex:1},{value:"Name",paraId:13,tocIndex:2},{value:"Type",paraId:13,tocIndex:2},{value:"Default",paraId:13,tocIndex:2},{value:"Description",paraId:13,tocIndex:2},{value:"groupByTypes",paraId:13,tocIndex:2},{value:"Boolean",paraId:13,tocIndex:2},{value:"true",paraId:13,tocIndex:2},{value:"Whether nodes and edges are grouped in different Group.",paraId:13,tocIndex:2},{value:"Modify the code about instantiating the Graph in Prerequisite Code. Add ",paraId:14,tocIndex:3},{value:"groupByTypes",paraId:14,tocIndex:3},{value:" with ",paraId:14,tocIndex:3},{value:"false",paraId:14,tocIndex:3},{value:":",paraId:14,tocIndex:3},{value:"const graph = new G6.Graph({\n  // ...  // Other configurations\n  groupByTypes: false,\n});\n",paraId:15,tocIndex:3},{value:"We obtain this result now:",paraId:16,tocIndex:3},{value:"Due to the ",paraId:17,tocIndex:4},{value:"groupByTypes",paraId:17,tocIndex:4},{value:" with ",paraId:17,tocIndex:4},{value:"false",paraId:17,tocIndex:4},{value:" and edges are generated after nodes, the edges are on the top of the nodes in the figure above, which is a little strange. To draw the nodes on the top, we call ",paraId:17,tocIndex:4},{value:"toFront()",paraId:17,tocIndex:4},{value:" for each node after ",paraId:17,tocIndex:4},{value:"graph.render()",paraId:17,tocIndex:4},{value:".",paraId:17,tocIndex:4},{value:"// Shift the node instance nodeItem to the front\nnodeItem.toFront();\n// Shift the node instance nodeItem to the back\nnodeItem.toBack();\n// Shift the edge instance edgeItem to the front\nedgeItem.toFront();\n// Shift the edge instance edgeItem to the back\nedgeItem.toBack();\n",paraId:18,tocIndex:5},{value:"// const graph = ...\ngraph.data(data);\ngraph.render();\n// Get all the node instances of the graph\nconst nodes = graph.getNodes();\n// Traverse the nodes, and shift them to the front\nnodes.forEach((node) => {\n  node.toFront();\n});\n",paraId:19,tocIndex:6},{value:"Now, all the nodes are drawed on the top of edges:",paraId:20,tocIndex:6},{value:"When the mouse enters a node, the related nodes and edges will be shifted to the front. And they will be restored after mouse leaving.",paraId:21,tocIndex:7},{value:"Listen the mouse entering and leaving by the following four functions:",paraId:22,tocIndex:8},{value:"// Mouse enters a node\ngraph.on('node:mouseenter', (ev) => {\n  // ...\n});\n\n// Mouse leaves a node\ngraph.on('node:mouseleave', (ev) => {\n  // ...\n});\n\n// Mouse enters an edge\ngraph.on('edge:mouseenter', (ev) => {\n  // ...\n});\n\n// Mouse leaves an edge\ngraph.on('edge:mouseleave', (ev) => {\n  // ...\n});\n",paraId:23,tocIndex:8},{value:"// Mouse enters an edge\ngraph.on('edge:mouseenter', (ev) => {\n  // Get the target of the entering event\n  const edge = ev.item;\n  // The source node of the edge\n  const source = edge.getSource();\n  // The target node of the edge\n  const target = edge.getTarget();\n  // Shift the edge to the front, and then shift the end nodes to the front\n  edge.toFront();\n  source.toFront();\n  target.toFront();\n});\n\ngraph.on('edge:mouseleave', (ev) => {\n  // Get all the edge instances of the graph\n  const edges = graph.getEdges();\n  // Travers the edges, shift them to the back to restore\n  edges.forEach((edge) => {\n    edge.toBack();\n  });\n});\n\ngraph.on('node:mouseenter', (ev) => {\n  // Get the target of the entering event\n  const node = ev.item;\n  // Get the related edges of the node\n  const edges = node.getEdges();\n  // Travers the related edges, shift them to the front, and then shift the end nodes to the front\n  edges.forEach((edge) => {\n    edge.toFront();\n    edge.getSource().toFront();\n    edge.getTarget().toFront();\n  });\n});\n\ngraph.on('node:mouseleave', (ev) => {\n  // Get all the edge instances of the graph\n  const edges = graph.getEdges();\n  // Travers the edges, shift them to the back to restore\n  edges.forEach((edge) => {\n    edge.toBack();\n  });\n});\n",paraId:24,tocIndex:9}]},13445:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"The functions for locking a node ",paraId:0},{value:"lock()",paraId:0},{value:", ",paraId:0},{value:"unlock()",paraId:0},{value:", and ",paraId:0},{value:"hasLocked()",paraId:0},{value:" are supported by the versions from G6 V3.1.4. The locked node will not response the drag event any more. But it still can be moved while dragging and zooming the canvas. You can register a ",paraId:0},{value:"Custom Behavior",paraId:1},{value:" to fix the node when dragging and zooming.",paraId:0},{value:"The built-in ",paraId:2,tocIndex:0},{value:"drag-canvas",paraId:2,tocIndex:0},{value:" in G6 does not take the locked node into consideration. In most situations, it is a reasonable Behavior. For some special requirements that require to fix hte locked node when dragging, you can register a custom Behavior as shown bolow to achieve them.",paraId:2,tocIndex:0},{value:"import G6 from '@antv/g6';\nconst Util = G6.Util;\nconst abs = Math.abs;\nconst DRAG_OFFSET = 10;\nconst body = document.body;\nconst ALLOW_EVENTS = [16, 17, 18];\n\nG6.registerBehavior('drag-canvas-exclude-lockedNode', {\n  getDefaultCfg() {\n    return {\n      direction: 'both',\n    };\n  },\n  getEvents() {\n    return {\n      'canvas:mousedown': 'onMouseDown',\n      'canvas:mousemove': 'onMouseMove',\n      'canvas:mouseup': 'onMouseUp',\n      'canvas:click': 'onMouseUp',\n      'canvas:mouseleave': 'onOutOfRange',\n      keyup: 'onKeyUp',\n      keydown: 'onKeyDown',\n    };\n  },\n  updateViewport(e) {\n    const origin = this.origin;\n    const clientX = +e.clientX;\n    const clientY = +e.clientY;\n    if (isNaN(clientX) || isNaN(clientY)) {\n      return;\n    }\n    let dx = clientX - origin.x;\n    let dy = clientY - origin.y;\n    if (this.get('direction') === 'x') {\n      dy = 0;\n    } else if (this.get('direction') === 'y') {\n      dx = 0;\n    }\n    this.origin = {\n      x: clientX,\n      y: clientY,\n    };\n    // The difference to built-in drag-canvas:\n    const lockedNodes = this.graph.findAll('node', (node) => !node.hasLocked());\n    lockedNodes.forEach((node) => {\n      node.get('group').translate(dx, dy);\n    });\n  },\n  onMouseDown(e) {\n    if (this.keydown) {\n      return;\n    }\n\n    this.origin = { x: e.clientX, y: e.clientY };\n    this.dragging = false;\n  },\n  onMouseMove(e) {\n    if (this.keydown) {\n      return;\n    }\n\n    e = Util.cloneEvent(e);\n    const graph = this.graph;\n    if (!this.origin) {\n      return;\n    }\n    if (this.origin && !this.dragging) {\n      if (abs(this.origin.x - e.clientX) + abs(this.origin.y - e.clientY) < DRAG_OFFSET) {\n        return;\n      }\n      if (this.shouldBegin(e, this)) {\n        e.type = 'dragstart';\n        graph.emit('canvas:dragstart', e);\n        this.dragging = true;\n      }\n    }\n    if (this.dragging) {\n      e.type = 'drag';\n      graph.emit('canvas:drag', e);\n    }\n    if (this.shouldUpdate(e, this)) {\n      this.updateViewport(e);\n    }\n  },\n  onMouseUp(e) {\n    if (this.keydown) {\n      return;\n    }\n\n    if (!this.dragging) {\n      this.origin = null;\n      return;\n    }\n    e = Util.cloneEvent(e);\n    const graph = this.graph;\n    if (this.shouldEnd(e, this)) {\n      this.updateViewport(e);\n    }\n    e.type = 'dragend';\n    graph.emit('canvas:dragend', e);\n    this.endDrag();\n  },\n  endDrag() {\n    if (this.dragging) {\n      this.origin = null;\n      this.dragging = false;\n      // Check whether it exists mouseup event outside. Unbind it if it exists.\n      const fn = this.fn;\n      if (fn) {\n        body.removeEventListener('mouseup', fn, false);\n        this.fn = null;\n      }\n    }\n  },\n  // If user move the mouse out of the canvas when dragging, the drag event might not be ended by releasing the mouse. Thus, listen to the mouseup event ouside the canvas to end it.\n  onOutOfRange(e) {\n    if (this.dragging) {\n      const self = this;\n      const canvasElement = self.graph.get('canvas').get('el');\n      const fn = (ev) => {\n        if (ev.target !== canvasElement) {\n          self.onMouseUp(e);\n        }\n      };\n      this.fn = fn;\n      body.addEventListener('mouseup', fn, false);\n    }\n  },\n  onKeyDown(e) {\n    const code = e.keyCode || e.which;\n    if (!code) {\n      return;\n    }\n    if (ALLOW_EVENTS.indexOf(code) > -1) {\n      this.keydown = true;\n    } else {\n      this.keydown = false;\n    }\n  },\n  onKeyUp() {\n    this.keydown = false;\n  },\n});\n",paraId:3,tocIndex:0},{value:"Built-in Behavior ",paraId:4,tocIndex:1},{value:"zoom-canvas",paraId:4,tocIndex:1},{value:" zooms all the nodes including locked nodes. Register a custom Behavior to fix the locked nodes.",paraId:4,tocIndex:1},{value:"const DELTA = 0.05;\n\nG6.registerBehavior('zoom-canvas-exclude-lockedNode', {\n  getDefaultCfg() {\n    return {\n      sensitivity: 2,\n      minZoom: 0.1,\n      maxZoom: 10,\n    };\n  },\n  getEvents() {\n    return {\n      wheel: 'onWheel',\n    };\n  },\n  onWheel(e) {\n    e.preventDefault();\n    if (!this.shouldUpdate(e, this)) {\n      return;\n    }\n    const graph = this.graph;\n    const canvas = graph.get('canvas');\n    const point = canvas.getPointByClient(e.clientX, e.clientY);\n    const sensitivity = this.get('sensitivity');\n    let ratio = graph.getZoom();\n    // To be Compatible with IE, Firefox, and Chrome\n    if (e.wheelDelta < 0) {\n      ratio = 1 - DELTA * sensitivity;\n    } else {\n      ratio = 1 + DELTA * sensitivity;\n    }\n    const zoom = ratio * graph.getZoom();\n    if (zoom > this.get('maxZoom') || zoom < this.get('minZoom')) {\n      return;\n    }\n    graph.zoom(ratio, { x: point.x, y: point.y });\n    const lockedNodes = this.graph.findAll('node', (node) => !node.hasLocked());\n    lockedNodes.forEach((node) => {\n      const matrix = Util.clone(node.get('group').getMatrix());\n      const center = node.getModel();\n      matrix = Util.transform(matrix, [\n        ['t', -center.x, -center.y],\n        ['s', 1 / ratio, 1 / ratio],\n        ['t', center.x, center.y],\n      ]);\n      node.get('group').setMatrix(matrix);\n    });\n    graph.emit('wheelzoom', e);\n  },\n});\n",paraId:5,tocIndex:1}]},73031:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"For such a data below, how to display multiple edges between two nodes by G6?",paraId:0,tocIndex:0},{value:"const data = {\n  nodes: [\n    {\n      id: 'node1',\n      x: 100,\n      y: 150,\n      label: 'node1',\n    },\n    {\n      id: 'node2',\n      x: 300,\n      y: 150,\n      label: 'node2',\n    },\n  ],\n  edges: [\n    {\n      source: 'node1',\n      target: 'node2',\n    },\n    {\n      source: 'node2',\n      target: 'node1',\n    },\n  ],\n};\n",paraId:1,tocIndex:0},{value:"The following code handles the graph easily, where we use quadratic bezier curve instead of line to draw the edges:",paraId:2,tocIndex:0},{value:"const graph = new G6.Graph({\n  container: GRAPH_CONTAINER,\n  width: 500,\n  height: 500,\n  defaultNode: {\n    style: {\n      fill: '#DEE9FF',\n      stroke: '#5B8FF9',\n    },\n    labelCfg: {\n      style: {\n        fontSize: 12,\n      },\n    },\n  },\n  defaultEdge: {\n    type: 'quadratic', // assign the edges to be quadratic bezier curves\n    style: {\n      stroke: '#e2e2e2',\n    },\n  },\n});\n\ngraph.data(data);\ngraph.render();\n",paraId:3,tocIndex:0},{value:"The result:",paraId:4,tocIndex:0},{value:"But what if we want to show 3 or more edges?",paraId:5,tocIndex:0},{value:"We use the data below for example:",paraId:6,tocIndex:0},{value:"const data = {\n  nodes: [\n    {\n      id: 'node1',\n      x: 100,\n      y: 150,\n      label: 'node1',\n    },\n    {\n      id: 'node2',\n      x: 300,\n      y: 150,\n      label: 'node2',\n    },\n  ],\n  edges: [\n    {\n      source: 'node1',\n      target: 'node2',\n    },\n    {\n      source: 'node2',\n      target: 'node1',\n    },\n    {\n      source: 'node2',\n      target: 'node1',\n    },\n  ],\n};\n",paraId:7,tocIndex:0},{value:"We found that the code above can not handle this situation any more. The result:",paraId:8,tocIndex:0},{value:"Refer to the ",paraId:9,tocIndex:2},{value:"Demo",paraId:10,tocIndex:2},{value:" and use the util function ",paraId:9,tocIndex:2},{value:"processParallelEdges",paraId:9,tocIndex:2},{value:".",paraId:9,tocIndex:2},{value:"To solve this problem, we utlize the ",paraId:11,tocIndex:3},{value:"Custom Edge",paraId:12,tocIndex:3},{value:" of G6.",paraId:11,tocIndex:3},{value:"There are two tips should be taken into consideration before customize an edge:",paraId:13,tocIndex:3},{value:"We need a flag to identify whether there are more than one edges with same direction between two nodes",paraId:14,tocIndex:3},{value:";",paraId:14,tocIndex:3},{value:"We need a value to control the curvature of each edge to prevent overlapping",paraId:14,tocIndex:3},{value:".",paraId:14,tocIndex:3},{value:"Therefore, we add a property ",paraId:15,tocIndex:3},{value:"edgeType",paraId:15,tocIndex:3},{value:" for each edge in its data to identify different types of edges.",paraId:15,tocIndex:3},{value:"The complete the code for the demo is shown below:",paraId:16,tocIndex:3},{value:"Now, the problem is solved.",paraId:17,tocIndex:3}]},3907:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"There are three ways to modify the styles for items in G6.",paraId:0},{value:"When instantiating a Graph, assign ",paraId:1,tocIndex:0},{value:"style",paraId:1,tocIndex:0},{value:" in ",paraId:1,tocIndex:0},{value:"defaultNode",paraId:1,tocIndex:0},{value:" or ",paraId:1,tocIndex:0},{value:"defaultEdge",paraId:1,tocIndex:0},{value:" to configure the styles for global nodes and global edges respectively.",paraId:1,tocIndex:0},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 1000,\n  height: 800,\n  defaultNode: {\n    type: 'circle',\n    style: {\n      fill: '#fff',\n      fontSize: 14,\n    },\n  },\n  defaultEdge: {\n    type: 'line-with-arrow',\n    style: {\n      fill: '#fff',\n      fontSize: 14,\n    },\n  },\n});\n",paraId:2,tocIndex:0},{value:"By this way, you can configure the different nodes and edges in different styles.",paraId:3,tocIndex:1},{value:"const data = {\n  nodes: [\n    {\n      id: 'node1',\n      label: 'node1',\n      style: {\n        fill: '#fff',\n        fontSize: 12,\n      },\n    },\n  ],\n};\n",paraId:4,tocIndex:1},{value:"This is a way for updating the ",paraId:5,tocIndex:2},{value:"keyShape",paraId:6,tocIndex:2},{value:" of a node or an edge.",paraId:5,tocIndex:2},{value:"graph.updateItem(node, {\n  // The node style\n  style: {\n    stroke: 'blue',\n  },\n});\n",paraId:7,tocIndex:2},{value:"For more information about the styles, refer to ",paraId:8,tocIndex:2},{value:"Node Style Properties",paraId:9,tocIndex:2},{value:".",paraId:8,tocIndex:2}]},51739:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"The anchorPoint of a node is the link point where the related edges link to. In other words, it is the intersection of a node and its related edges. anchorPoints is a 2d array, each element represents the position of one anchor point. The positions of the anchor points in a ",paraId:0},{value:"Shape",paraId:1},{value:" are shown below, the range of each x and y is [0, 1]:",paraId:0},{value:" ",paraId:0},{value:"You can select the link points for an edge by ",paraId:2},{value:"sourceAnchor",paraId:2},{value:" and ",paraId:2},{value:"targetAnchor",paraId:2},{value:" if there are anchorPoints in the source and target node. Where This ",paraId:2},{value:"sourceAnchor",paraId:2},{value:" and ",paraId:2},{value:"targetAnchor",paraId:2},{value:" indicate the index of the array of anchorPoints. mechanism beautifies the graphs when there are multiple edges between two nodes.",paraId:2},{value:"The data below shows how to configure the anchorPoints on a node and link points for an edge:",paraId:3},{value:"const data = {\n  nodes: [\n    {\n      id: 'node1',\n      label: 'node1',\n      x: 100,\n      y: 200,\n      // There are two anchorPoints for this node\n      anchorPoints: [\n        [0, 1],\n        [0.5, 1],\n      ],\n      type: 'rect',\n    },\n    {\n      id: 'node2',\n      label: 'node2',\n      x: 300,\n      y: 400,\n      // There are two anchorPoints for this node\n      anchorPoints: [\n        [0.5, 0],\n        [1, 0.5],\n      ],\n      type: 'rect',\n    },\n  ],\n  edges: [\n    {\n      source: 'node1',\n      target: 'node2',\n      // The source link point of the edge is the 0-th anchorPoint of the source node\n      sourceAnchor: 0,\n      // The target link point of the edge is the 0-th anchorPoint of the target node\n      targetAnchor: 0,\n      style: {\n        endArrow: true,\n      },\n    },\n    {\n      source: 'node2',\n      target: 'node1',\n      // The source link point of the edge is the 1-st anchorPoint of the source node\n      sourceAnchor: 1,\n      // The target link point of the edge is the 1-st anchorPoint of the target node\n      targetAnchor: 1,\n      style: {\n        endArrow: true,\n      },\n    },\n  ],\n};\n",paraId:4}]},26274:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"A built-in node Circle has the default style as below, the label is drawed on the center of it.",paraId:0},{value:" ",paraId:0},{value:"As stated in ",paraId:1,tocIndex:0},{value:"Built-in Nodes",paraId:2,tocIndex:0},{value:" , there are three methods to configure nodes: Configure nodes globally when instantiating a Graph; Configure nodes in their data; Configure nodes by ",paraId:1,tocIndex:0},{value:"graph.node(nodeFn)",paraId:1,tocIndex:0},{value:". Their priorities are:",paraId:1,tocIndex:0},{value:"graph.node(nodeFn)",paraId:3,tocIndex:0},{value:" > Configure in data > Configure globally",paraId:3,tocIndex:0},{value:"⚠️ Attention:",paraId:4,tocIndex:0},{value:" Expect for ",paraId:4,tocIndex:0},{value:"id",paraId:4,tocIndex:0},{value:", and ",paraId:4,tocIndex:0},{value:"label",paraId:4,tocIndex:0},{value:" which should be assigned to every single node data, the other configurations in ",paraId:4,tocIndex:0},{value:"The Common Property",paraId:5,tocIndex:0},{value:" and in each node type (refer to doc of each node type) support to be assigned by the three ways.",paraId:4,tocIndex:0},{value:"Assign ",paraId:6,tocIndex:1},{value:"type",paraId:6,tocIndex:1},{value:" to ",paraId:6,tocIndex:1},{value:"'circle'",paraId:6,tocIndex:1},{value:" in the ",paraId:6,tocIndex:1},{value:"defaultNode",paraId:6,tocIndex:1},{value:" object when instantiating a Graph:",paraId:6,tocIndex:1},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultNode: {\n    type: 'circle', // The type of the node\n    // ... Other configuraltions\n  },\n});\n",paraId:7,tocIndex:1},{value:"To configure different nodes with different properties, you can write the properties into the node data.",paraId:8,tocIndex:2},{value:"const data = {\n  nodes: [\n    {\n      id: 'node0',\n      type: 'circle', // The tyep of the node\n      //... // Other configurations\n    },\n    //... // Other nodes\n  ],\n  edges: [\n    //... // edges\n  ],\n};\n",paraId:9,tocIndex:2},{value:"The ",paraId:10,tocIndex:3},{value:"Node Common Properties",paraId:11,tocIndex:3},{value:" are available for Circle node, some special properties are shown below. The property with Object type will be described after the table:",paraId:10,tocIndex:3},{value:"Name",paraId:12,tocIndex:3},{value:"Description",paraId:12,tocIndex:3},{value:"Type",paraId:12,tocIndex:3},{value:"Remark",paraId:12,tocIndex:3},{value:"size",paraId:12,tocIndex:3},{value:"The diameter of the node",paraId:12,tocIndex:3},{value:"Number / Array",paraId:12,tocIndex:3},{value:"When it is an array, the first element will take effect",paraId:12,tocIndex:3},{value:"style",paraId:12,tocIndex:3},{value:"The default style of circle node",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"Correspond to the styles in Canvas",paraId:12,tocIndex:3},{value:"label",paraId:12,tocIndex:3},{value:"The text of the label",paraId:12,tocIndex:3},{value:"String",paraId:12,tocIndex:3},{value:"labelCfg",paraId:12,tocIndex:3},{value:"The configurations of the label",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"stateStyles",paraId:12,tocIndex:3},{value:"The styles in different states",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"Refer to ",paraId:12,tocIndex:3},{value:"Configure Styles for State",paraId:13,tocIndex:3},{value:"linkPoints",paraId:12,tocIndex:3},{value:"The link points ",paraId:12,tocIndex:3},{value:"in visual",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"They are invisible by default. It is usually used with the ",paraId:12,tocIndex:3},{value:"anchorPoints",paraId:14,tocIndex:3},{value:". The differences are described in ",paraId:12,tocIndex:3},{value:"linkPoints",paraId:15,tocIndex:3},{value:"icon",paraId:12,tocIndex:3},{value:"The configurations of the icon on the circle node",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"It is invisible by default",paraId:12,tocIndex:3},{value:"The ",paraId:16,tocIndex:4},{value:"Node Common Styles",paraId:17,tocIndex:4},{value:" are available for Circle node. ",paraId:16,tocIndex:4},{value:"style",paraId:16,tocIndex:4},{value:" is an object to configure the filling color, stroke, and other styles. The following code shows how to configure the ",paraId:16,tocIndex:4},{value:"style",paraId:16,tocIndex:4},{value:" globally when instantiating a Graph.",paraId:16,tocIndex:4},{value:" ",paraId:16,tocIndex:4},{value:"const data = {\n  nodes: [\n    {\n      x: 100,\n      y: 100,\n      type: 'circle',\n      label: 'circle',\n    },\n  ],\n};\nconst graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultNode: {\n    // type: 'circle',  // The type has been assigned in the data, we do not have to define it any more\n    style: {\n      fill: '#bae637',\n      stroke: '#eaff8f',\n      lineWidth: 5,\n    },\n  },\n});\ngraph.data(data);\ngraph.render();\n",paraId:18,tocIndex:4},{value:"labelCfg",paraId:19,tocIndex:5},{value:" is an object to configure the label of the node. The ",paraId:19,tocIndex:5},{value:"Node Common Label Configurations",paraId:20,tocIndex:5},{value:" are available. Base on the code in ",paraId:19,tocIndex:5},{value:"style",paraId:21,tocIndex:5},{value:" section, we add ",paraId:19,tocIndex:5},{value:"labelCfg",paraId:19,tocIndex:5},{value:" to ",paraId:19,tocIndex:5},{value:"defaultNode",paraId:19,tocIndex:5},{value:".",paraId:19,tocIndex:5},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for graph\n  defaultNode: {\n    // ... Other properties for nodes\n    labelCfg: {\n      position: 'bottom',\n      offset: 10,\n      style: {\n        // ... The style of the label\n      },\n    },\n  },\n});\n// ...\n",paraId:22,tocIndex:5},{value:"linkPoints",paraId:23,tocIndex:6},{value:" is an object to configure the small circles on the 「top, bottom, left, and right」.",paraId:23,tocIndex:6},{value:"⚠️Attention:",paraId:24,tocIndex:6},{value:" It is different from ",paraId:24,tocIndex:6},{value:"anchorPoints",paraId:24,tocIndex:6},{value:": ",paraId:24,tocIndex:6},{value:"anchorPoints",paraId:24,tocIndex:6},{value:" is an 「",paraId:24,tocIndex:6},{value:"array",paraId:24,tocIndex:6},{value:"」 that indicates the actual relative positions used to specify the join position of the relevant edge of the node (refer to ",paraId:24,tocIndex:6},{value:"anchorPoints",paraId:25,tocIndex:6},{value:"); ",paraId:24,tocIndex:6},{value:"linkPoints",paraId:24,tocIndex:6},{value:" is an object that indicates whether 「",paraId:24,tocIndex:6},{value:"render",paraId:24,tocIndex:6},{value:"」the four small circles, which do not connect the relevant edges. These two properties are often used together.",paraId:24,tocIndex:6},{value:"Name",paraId:26,tocIndex:6},{value:"Description",paraId:26,tocIndex:6},{value:"Type",paraId:26,tocIndex:6},{value:"Remark",paraId:26,tocIndex:6},{value:"top",paraId:26,tocIndex:6},{value:"Whether to show the top small circle",paraId:26,tocIndex:6},{value:"Boolean",paraId:26,tocIndex:6},{value:"false",paraId:26,tocIndex:6},{value:" by default",paraId:26,tocIndex:6},{value:"bottom",paraId:26,tocIndex:6},{value:"Whether to show the bototm small circle",paraId:26,tocIndex:6},{value:"Boolean",paraId:26,tocIndex:6},{value:"false",paraId:26,tocIndex:6},{value:" by default",paraId:26,tocIndex:6},{value:"left",paraId:26,tocIndex:6},{value:"Whether to show the left small circle",paraId:26,tocIndex:6},{value:"Boolean",paraId:26,tocIndex:6},{value:"false",paraId:26,tocIndex:6},{value:" by default",paraId:26,tocIndex:6},{value:"right",paraId:26,tocIndex:6},{value:"Whether to show the right small circle",paraId:26,tocIndex:6},{value:"Boolean",paraId:26,tocIndex:6},{value:"false",paraId:26,tocIndex:6},{value:" by default",paraId:26,tocIndex:6},{value:"size",paraId:26,tocIndex:6},{value:"The size of the small circles",paraId:26,tocIndex:6},{value:"Number",paraId:26,tocIndex:6},{value:"3",paraId:26,tocIndex:6},{value:" by default",paraId:26,tocIndex:6},{value:"fill",paraId:26,tocIndex:6},{value:"The filling color of the small circles",paraId:26,tocIndex:6},{value:"String",paraId:26,tocIndex:6},{value:"'#72CC4A'",paraId:26,tocIndex:6},{value:" by default",paraId:26,tocIndex:6},{value:"stroke",paraId:26,tocIndex:6},{value:"The stroke color of the small circles",paraId:26,tocIndex:6},{value:"String",paraId:26,tocIndex:6},{value:"'#72CC4A'",paraId:26,tocIndex:6},{value:" by default",paraId:26,tocIndex:6},{value:"lineWidth",paraId:26,tocIndex:6},{value:"The line width of the small circles",paraId:26,tocIndex:6},{value:"Number",paraId:26,tocIndex:6},{value:"1",paraId:26,tocIndex:6},{value:" by default",paraId:26,tocIndex:6},{value:"Base on the code in ",paraId:27,tocIndex:6},{value:"style",paraId:28,tocIndex:6},{value:" section, we add ",paraId:27,tocIndex:6},{value:"linkPoints",paraId:27,tocIndex:6},{value:" to ",paraId:27,tocIndex:6},{value:"defaultNode",paraId:27,tocIndex:6},{value:".",paraId:27,tocIndex:6},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for graph\n  defaultNode: {\n    // ... Other configurations for nodes\n    linkPoints: {\n      top: true,\n      bottom: true,\n      left: true,\n      right: true,\n      fill: '#fff',\n      size: 5,\n    },\n  },\n});\n// ...\n",paraId:29,tocIndex:6},{value:"icon",paraId:30,tocIndex:7},{value:" is an object to configure the icon on the node.",paraId:30,tocIndex:7},{value:"Name",paraId:31,tocIndex:7},{value:"Description",paraId:31,tocIndex:7},{value:"Type",paraId:31,tocIndex:7},{value:"Remark",paraId:31,tocIndex:7},{value:"show",paraId:31,tocIndex:7},{value:"Whether to show the icon",paraId:31,tocIndex:7},{value:"Boolean",paraId:31,tocIndex:7},{value:"false",paraId:31,tocIndex:7},{value:" by default",paraId:31,tocIndex:7},{value:"width",paraId:31,tocIndex:7},{value:"The width of the icon",paraId:31,tocIndex:7},{value:"Number",paraId:31,tocIndex:7},{value:"16",paraId:31,tocIndex:7},{value:" by default",paraId:31,tocIndex:7},{value:"height",paraId:31,tocIndex:7},{value:"The height of the icon",paraId:31,tocIndex:7},{value:"Number",paraId:31,tocIndex:7},{value:"16",paraId:31,tocIndex:7},{value:" by default",paraId:31,tocIndex:7},{value:"img",paraId:31,tocIndex:7},{value:"The image url or base64 of the icon",paraId:31,tocIndex:7},{value:"String",paraId:31,tocIndex:7},{value:"Configuring it means the icon is an image",paraId:31,tocIndex:7},{value:"text",paraId:31,tocIndex:7},{value:"iconfont for the icon",paraId:31,tocIndex:7},{value:"String",paraId:31,tocIndex:7},{value:"Configuring it means the icon is an iconfont",paraId:31,tocIndex:7},{value:"Base on the code in ",paraId:32,tocIndex:7},{value:"style",paraId:33,tocIndex:7},{value:" section, we add ",paraId:32,tocIndex:7},{value:"icon",paraId:32,tocIndex:7},{value:" to ",paraId:32,tocIndex:7},{value:"defaultNode",paraId:32,tocIndex:7},{value:".",paraId:32,tocIndex:7},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for the graph\n  defaultNode: {\n    // ... Other configurations for nodes\n    icon: {\n      show: true,\n      width: 25,\n      height: 25,\n      // img: '...', The image url of the icon\n      // text: '...', Use an iconfont for the icon\n    },\n  },\n});\n// ...\n",paraId:34,tocIndex:7}]},93044:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"A built-in node Diamond has the default style as below, the label is drawed on the center of it.",paraId:0,tocIndex:0},{value:" ",paraId:0,tocIndex:0},{value:"As stated in ",paraId:1,tocIndex:1},{value:"Built-in Nodes",paraId:2,tocIndex:1},{value:" , there are three methods to configure nodes: Configure nodes globally when instantiating a Graph; Configure nodes in their data; Configure nodes by ",paraId:1,tocIndex:1},{value:"graph.node(nodeFn)",paraId:1,tocIndex:1},{value:". Their priorities are:",paraId:1,tocIndex:1},{value:"graph.node(nodeFn)",paraId:3,tocIndex:1},{value:" > Configure in data > Configure globally",paraId:3,tocIndex:1},{value:"⚠️ Attention:",paraId:4,tocIndex:1},{value:" Expect for ",paraId:4,tocIndex:1},{value:"id",paraId:4,tocIndex:1},{value:", and ",paraId:4,tocIndex:1},{value:"label",paraId:4,tocIndex:1},{value:" which should be assigned to every single node data, the other configurations in ",paraId:4,tocIndex:1},{value:"The Common Property",paraId:5,tocIndex:1},{value:" and in each node type (refer to doc of each node type) support to be assigned by the three ways.",paraId:4,tocIndex:1},{value:"Assign ",paraId:6,tocIndex:2},{value:"type",paraId:6,tocIndex:2},{value:" to ",paraId:6,tocIndex:2},{value:"'diamond'",paraId:6,tocIndex:2},{value:" in the ",paraId:6,tocIndex:2},{value:"defaultNode",paraId:6,tocIndex:2},{value:" object when instantiating a Graph:",paraId:6,tocIndex:2},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultNode: {\n    type: 'diamond', // The type of the node\n    // ... Other configuraltions\n  },\n});\n",paraId:7,tocIndex:2},{value:"To configure different nodes with different properties, you can write the properties into the node data.",paraId:8,tocIndex:3},{value:"const data = {\n  nodes: [\n  {\n\t  id: 'node0',\n    type: 'diamond', // The tyep of the node\n    //... // Other configurations\n  },\n    ... // Other nodes\n  ],\n  edges: [\n    ... // edges\n  ]\n}\n",paraId:9,tocIndex:3},{value:"The ",paraId:10,tocIndex:4},{value:"Node Common Properties",paraId:11,tocIndex:4},{value:" are available for Diamond node, some special properties are shown below. The property with Object type will be described after the table:",paraId:10,tocIndex:4},{value:"Name",paraId:12,tocIndex:4},{value:"Description",paraId:12,tocIndex:4},{value:"Type",paraId:12,tocIndex:4},{value:"Remark",paraId:12,tocIndex:4},{value:"size",paraId:12,tocIndex:4},{value:"The width and the height of the diamond",paraId:12,tocIndex:4},{value:"Number / Array",paraId:12,tocIndex:4},{value:"When it is a number, the width and the height are the same",paraId:12,tocIndex:4},{value:"style",paraId:12,tocIndex:4},{value:"The default style of diamond node",paraId:12,tocIndex:4},{value:"Object",paraId:12,tocIndex:4},{value:"Correspond to the styles in Canvas",paraId:12,tocIndex:4},{value:"label",paraId:12,tocIndex:4},{value:"The text of the label",paraId:12,tocIndex:4},{value:"String",paraId:12,tocIndex:4},{value:"labelCfg",paraId:12,tocIndex:4},{value:"The configurations of the label",paraId:12,tocIndex:4},{value:"Object",paraId:12,tocIndex:4},{value:"stateStyles",paraId:12,tocIndex:4},{value:"The styles in different states",paraId:12,tocIndex:4},{value:"Object",paraId:12,tocIndex:4},{value:"Refer to ",paraId:12,tocIndex:4},{value:"Configure Styles for State",paraId:13,tocIndex:4},{value:"linkPoints",paraId:12,tocIndex:4},{value:"The link points ",paraId:12,tocIndex:4},{value:"in visual",paraId:12,tocIndex:4},{value:"Object",paraId:12,tocIndex:4},{value:"They are invisible by default. It is usually used with the ",paraId:12,tocIndex:4},{value:"anchorPoints",paraId:14,tocIndex:4},{value:". The differences are described in ",paraId:12,tocIndex:4},{value:"linkPoints",paraId:15,tocIndex:4},{value:"icon",paraId:12,tocIndex:4},{value:"The configurations of the icon on the diamond node",paraId:12,tocIndex:4},{value:"Object",paraId:12,tocIndex:4},{value:"It is invisible by default",paraId:12,tocIndex:4},{value:"The ",paraId:16,tocIndex:5},{value:"Node Common Styles",paraId:17,tocIndex:5},{value:" are available for Circle node.",paraId:16,tocIndex:5},{value:"style",paraId:16,tocIndex:5},{value:" is an object to configure the filling color, stroke, and other styles. The following code shows how to configure the ",paraId:16,tocIndex:5},{value:"style",paraId:16,tocIndex:5},{value:" globally when instantiating a Graph.",paraId:16,tocIndex:5},{value:" ",paraId:16,tocIndex:5},{value:"const data = {\n  nodes: [\n    {\n      x: 100,\n      y: 100,\n      type: 'diamond',\n      label: 'diamond',\n    },\n  ],\n};\nconst graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultNode: {\n    // type'diamond', // The type has been assigned in the data, we do not have to define it any more\n    size: [200, 80],\n    style: {\n      fill: '#bae637',\n      stroke: '#eaff8f',\n      lineWidth: 5,\n    },\n  },\n});\ngraph.data(data);\ngraph.render();\n",paraId:18,tocIndex:5},{value:"labelCfg",paraId:19,tocIndex:6},{value:" is an object to configure the label of the node. The ",paraId:19,tocIndex:6},{value:"Node Common Label Configurations",paraId:20,tocIndex:6},{value:" are available. Base on the code in ",paraId:19,tocIndex:6},{value:"style",paraId:21,tocIndex:6},{value:" section, we add ",paraId:19,tocIndex:6},{value:"labelCfg",paraId:19,tocIndex:6},{value:" to ",paraId:19,tocIndex:6},{value:"defaultNode",paraId:19,tocIndex:6},{value:".。",paraId:19,tocIndex:6},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for graph\n  defaultNode: {\n    // ... Other properties for node\n    labelCfg: {\n      style: {\n        fill: '#9254de',\n        fontSize: 18,\n      },\n      position: 'bottom',\n    },\n  },\n});\n// ...\n",paraId:22,tocIndex:6},{value:"linkPoints",paraId:23,tocIndex:7},{value:" is an object to configure the small circles on the 「top, bottom, left, and right」.",paraId:23,tocIndex:7},{value:"⚠️Attention:",paraId:24,tocIndex:7},{value:" It is different from ",paraId:24,tocIndex:7},{value:"anchorPoints",paraId:24,tocIndex:7},{value:": ",paraId:24,tocIndex:7},{value:"anchorPoints",paraId:24,tocIndex:7},{value:" is an 「",paraId:24,tocIndex:7},{value:"array",paraId:24,tocIndex:7},{value:"」 that indicates the actual relative positions used to specify the join position of the relevant edge of the node (refer to ",paraId:24,tocIndex:7},{value:"anchorPoints",paraId:25,tocIndex:7},{value:"); ",paraId:24,tocIndex:7},{value:"linkPoints",paraId:24,tocIndex:7},{value:" is an object that indicates whether 「",paraId:24,tocIndex:7},{value:"render",paraId:24,tocIndex:7},{value:"」the four small circles, which do not connect the relevant edges. These two properties are often used together.",paraId:24,tocIndex:7},{value:"Name",paraId:26,tocIndex:7},{value:"Description",paraId:26,tocIndex:7},{value:"Type",paraId:26,tocIndex:7},{value:"Remark",paraId:26,tocIndex:7},{value:"top",paraId:26,tocIndex:7},{value:"Whether to show the top small circle",paraId:26,tocIndex:7},{value:"Boolean",paraId:26,tocIndex:7},{value:"false",paraId:26,tocIndex:7},{value:" by default",paraId:26,tocIndex:7},{value:"bottom",paraId:26,tocIndex:7},{value:"Whether to show the bototm small circle",paraId:26,tocIndex:7},{value:"Boolean",paraId:26,tocIndex:7},{value:"false",paraId:26,tocIndex:7},{value:" by default",paraId:26,tocIndex:7},{value:"left",paraId:26,tocIndex:7},{value:"Whether to show the left small circle",paraId:26,tocIndex:7},{value:"Boolean",paraId:26,tocIndex:7},{value:"false",paraId:26,tocIndex:7},{value:" by default",paraId:26,tocIndex:7},{value:"right",paraId:26,tocIndex:7},{value:"Whether to show the right small circle",paraId:26,tocIndex:7},{value:"Boolean",paraId:26,tocIndex:7},{value:"false",paraId:26,tocIndex:7},{value:" by default",paraId:26,tocIndex:7},{value:"size",paraId:26,tocIndex:7},{value:"The size of the small circles",paraId:26,tocIndex:7},{value:"Number",paraId:26,tocIndex:7},{value:"3",paraId:26,tocIndex:7},{value:" by default",paraId:26,tocIndex:7},{value:"fill",paraId:26,tocIndex:7},{value:"The filling color of the small circles",paraId:26,tocIndex:7},{value:"String",paraId:26,tocIndex:7},{value:"'#72CC4A'",paraId:26,tocIndex:7},{value:" by default",paraId:26,tocIndex:7},{value:"stroke",paraId:26,tocIndex:7},{value:"The stroke color of the small circles",paraId:26,tocIndex:7},{value:"String",paraId:26,tocIndex:7},{value:"'#72CC4A'",paraId:26,tocIndex:7},{value:" by default",paraId:26,tocIndex:7},{value:"lineWidth",paraId:26,tocIndex:7},{value:"The line width of the small circles",paraId:26,tocIndex:7},{value:"Number",paraId:26,tocIndex:7},{value:"1",paraId:26,tocIndex:7},{value:" by default",paraId:26,tocIndex:7},{value:"Base on the code in ",paraId:27,tocIndex:7},{value:"style",paraId:28,tocIndex:7},{value:" section, we add ",paraId:27,tocIndex:7},{value:"linkPoints",paraId:27,tocIndex:7},{value:" to ",paraId:27,tocIndex:7},{value:"defaultNode",paraId:27,tocIndex:7},{value:".",paraId:27,tocIndex:7},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for graph\n  defaultNode: {\n    // ... Other configurations for nodes\n    linkPoints: {\n      top: true,\n      bottom: true,\n      left: true,\n      right: true,\n      size: 5,\n      fill: '#fff',\n    },\n  },\n});\n// ...\n",paraId:29,tocIndex:7},{value:"icon",paraId:30,tocIndex:8},{value:" is an object to configure the icon on the node.",paraId:30,tocIndex:8},{value:"Name",paraId:31,tocIndex:8},{value:"Description",paraId:31,tocIndex:8},{value:"Type",paraId:31,tocIndex:8},{value:"Remark",paraId:31,tocIndex:8},{value:"show",paraId:31,tocIndex:8},{value:"Whether to show the icon",paraId:31,tocIndex:8},{value:"Boolean",paraId:31,tocIndex:8},{value:"false",paraId:31,tocIndex:8},{value:" by default",paraId:31,tocIndex:8},{value:"width",paraId:31,tocIndex:8},{value:"The width of the icon",paraId:31,tocIndex:8},{value:"Number",paraId:31,tocIndex:8},{value:"16",paraId:31,tocIndex:8},{value:" by default",paraId:31,tocIndex:8},{value:"height",paraId:31,tocIndex:8},{value:"The height of the icon",paraId:31,tocIndex:8},{value:"Number",paraId:31,tocIndex:8},{value:"16",paraId:31,tocIndex:8},{value:" by default",paraId:31,tocIndex:8},{value:"img",paraId:31,tocIndex:8},{value:"The image url or base64 of the icon",paraId:31,tocIndex:8},{value:"String",paraId:31,tocIndex:8},{value:"Configuring it means the icon is an image",paraId:31,tocIndex:8},{value:"text",paraId:31,tocIndex:8},{value:"iconfont for the icon",paraId:31,tocIndex:8},{value:"String",paraId:31,tocIndex:8},{value:"Configuring it means the icon is an iconfont",paraId:31,tocIndex:8},{value:"Base on the code in ",paraId:32,tocIndex:8},{value:"style",paraId:33,tocIndex:8},{value:" section, we add ",paraId:32,tocIndex:8},{value:"icon",paraId:32,tocIndex:8},{value:" to ",paraId:32,tocIndex:8},{value:"defaultNode",paraId:32,tocIndex:8},{value:".",paraId:32,tocIndex:8},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for the graph\n  defaultNode: {\n    // ... Other configurations for nodes\n    icon: {\n      show: true,\n      width: 25,\n      height: 25,\n      // img: '...', The image url of the icon\n      // text: '...', Use an iconfont for the icon\n    },\n  },\n});\n// ...\n",paraId:34,tocIndex:8}]},481:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"A built-in node Donut has the default style as below, the label is drawed on the center of it.",paraId:0},{value:" ",paraId:0},{value:"As stated in ",paraId:1,tocIndex:0},{value:"Built-in Nodes",paraId:2,tocIndex:0},{value:", there are three methods to configure nodes: Configure nodes globally when instantiating a Graph; Configure nodes in their data; Configure nodes by ",paraId:1,tocIndex:0},{value:"graph.node(nodeFn)",paraId:1,tocIndex:0},{value:". Their priorities are:",paraId:1,tocIndex:0},{value:"graph.node(nodeFn)",paraId:3,tocIndex:0},{value:" > Configure in data > Configure globally",paraId:3,tocIndex:0},{value:"⚠️ Attention:",paraId:4,tocIndex:0},{value:" Expect for ",paraId:4,tocIndex:0},{value:"id",paraId:4,tocIndex:0},{value:", and ",paraId:4,tocIndex:0},{value:"label",paraId:4,tocIndex:0},{value:" which should be assigned to every single node data, the other configurations in ",paraId:4,tocIndex:0},{value:"The Common Property",paraId:5,tocIndex:0},{value:" and in each node type (refer to doc of each node type) support to be assigned by the three ways.",paraId:4,tocIndex:0},{value:"Assign ",paraId:6,tocIndex:1},{value:"type",paraId:6,tocIndex:1},{value:" to ",paraId:6,tocIndex:1},{value:"'donut'",paraId:6,tocIndex:1},{value:" in the ",paraId:6,tocIndex:1},{value:"defaultNode",paraId:6,tocIndex:1},{value:" object when instantiating a Graph. In the same time, you should assign object ",paraId:6,tocIndex:1},{value:"donutAttrs",paraId:6,tocIndex:1},{value:" in ",paraId:6,tocIndex:1},{value:"defaultNode",paraId:6,tocIndex:1},{value:" to config the attributes and values for donut chart. There should be two and more valid attributes in ",paraId:6,tocIndex:1},{value:"donutAttrs",paraId:6,tocIndex:1},{value:", which means each attribute should have a string key and number value. The donut chart will not show up otherwise. The donut chart is paint with default color palette, if you want to custom the colors, assign ",paraId:6,tocIndex:1},{value:"donutColorMap",paraId:6,tocIndex:1},{value:" which has same key as ",paraId:6,tocIndex:1},{value:"donutAttrs",paraId:6,tocIndex:1},{value:":",paraId:6,tocIndex:1},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultNode: {\n    type: 'donut', // The type of the \n    donutAttrs: {  // The attributes show on the donut chart. Each attribute has format [key: string]: number\n      prop1: 10,\n      prop2: 20,\n      prop3: 25,\n      prop5: 10,\n      prop6: 20,\n    },\n    // donutColorMap: { // The color palette for the donut chart. The keys are the same as donutAttrs. If donutColorMap is not assigned, a default color palette will be applied\n    //   prop1: '#8eaade',\n    //   prop2: '#55a9f2',\n    //   prop3: '#0d47b5'\n    // }\n    // ... Other configuraltions\n  },\n});\n",paraId:7,tocIndex:1},{value:"To configure different nodes with different properties, you can write the properties into the node data.",paraId:8,tocIndex:2},{value:"const data = {\n  nodes: [\n    {\n      id: 'node0',\n      type: 'donut', // The tyep of the node\n      donutAttrs: {  // The attributes show on the donut chart. Each attribute has format [key: string]: number\n        prop1: 10,\n        prop2: 20,\n        prop3: 25,\n        prop5: 10,\n        prop6: 20,\n      },\n      // donutColorMap: { // The color palette for the donut chart. The keys are the same as donutAttrs. If donutColorMap is not assigned, a default color palette will be applied\n      //   prop1: '#8eaade',\n      //   prop2: '#55a9f2',\n      //   prop3: '#0d47b5'\n      // },node\n      //... // Other configurations\n    },\n    //... // Other nodes\n  ],\n  edges: [\n    //... // edges\n  ],\n};\n",paraId:9,tocIndex:2},{value:"The ",paraId:10,tocIndex:3},{value:"Node Common Properties",paraId:11,tocIndex:3},{value:" are available for Donut node, some special properties are shown below. The property with Object type will be described after the table:",paraId:10,tocIndex:3},{value:"Name",paraId:12,tocIndex:3},{value:"Description",paraId:12,tocIndex:3},{value:"Type",paraId:12,tocIndex:3},{value:"Remark",paraId:12,tocIndex:3},{value:"size",paraId:12,tocIndex:3},{value:"The diameter of the node",paraId:12,tocIndex:3},{value:"Number / Array",paraId:12,tocIndex:3},{value:"When it is an array, the first element will take effect",paraId:12,tocIndex:3},{value:"style",paraId:12,tocIndex:3},{value:"The default style of background circle",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"Correspond to the styles in Canvas",paraId:12,tocIndex:3},{value:"label",paraId:12,tocIndex:3},{value:"The text of the label",paraId:12,tocIndex:3},{value:"String",paraId:12,tocIndex:3},{value:"labelCfg",paraId:12,tocIndex:3},{value:"The configurations of the label",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"donutAttrs",paraId:12,tocIndex:3},{value:"The attributes for the donut chart",paraId:12,tocIndex:3},{value:"{ [key: string]: number }",paraId:12,tocIndex:3},{value:"donutAttrs",paraId:12,tocIndex:3},{value:" is a special property for donut node. There should be two and more valid attributes, the donut chart won't show up otherwise",paraId:12,tocIndex:3},{value:"donutColorMap",paraId:12,tocIndex:3},{value:"The color palette for the donut chart",paraId:12,tocIndex:3},{value:"{ [key: string]: string }",paraId:12,tocIndex:3},{value:"donutColorMap",paraId:12,tocIndex:3},{value:" is a special property for donut node. It has the same kes as ",paraId:12,tocIndex:3},{value:"donutAttrs",paraId:12,tocIndex:3},{value:". A default color palette will be applied if it is not assigned",paraId:12,tocIndex:3},{value:"stateStyles",paraId:12,tocIndex:3},{value:"The styles in different states",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"Refer to ",paraId:12,tocIndex:3},{value:"Configure Styles for State",paraId:13,tocIndex:3},{value:"linkPoints",paraId:12,tocIndex:3},{value:"The link points ",paraId:12,tocIndex:3},{value:"in visual",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"They are invisible by default. It is usually used with the ",paraId:12,tocIndex:3},{value:"anchorPoints",paraId:14,tocIndex:3},{value:". The differences are described in ",paraId:12,tocIndex:3},{value:"linkPoints",paraId:15,tocIndex:3},{value:"icon",paraId:12,tocIndex:3},{value:"The configurations of the icon on the donut node",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"It is invisible by default",paraId:12,tocIndex:3},{value:"The ",paraId:16,tocIndex:4},{value:"Node Common Styles",paraId:17,tocIndex:4},{value:" are available for Donut node. ",paraId:16,tocIndex:4},{value:"style",paraId:16,tocIndex:4},{value:" is an object to configure the filling color, stroke, and other styles. The following code shows how to configure the ",paraId:16,tocIndex:4},{value:"style",paraId:16,tocIndex:4},{value:" globally when instantiating a Graph.",paraId:16,tocIndex:4},{value:" ",paraId:16,tocIndex:4},{value:"const data = {\n  nodes: [\n    {\n      x: 100,\n      y: 100,\n      type: 'donut',\n      label: 'donut',\n      donutAttrs: {\n        prop1: 10,\n        prop2: 20,\n        prop3: 25,\n        prop5: 10,\n        prop6: 20,\n      },\n    },\n  ],\n};\nconst graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultNode: {\n    // type: 'donut',  // The type has been assigned in the data, we do not have to define it any more\n    style: {\n      fill: '#bae637',\n      stroke: '#eaff8f',\n      lineWidth: 5,\n    },\n    donutColorMap: { // the color palette\n      prop1: '#8eaade',\n      prop2: '#55a9f2',\n      prop3: '#0d47b5',\n      prop5: '#7b8085',\n      prop6: '#003870'\n    },\n  },\n});\ngraph.data(data);\ngraph.render();\n",paraId:18,tocIndex:4},{value:"labelCfg",paraId:19,tocIndex:5},{value:" is an object to configure the label of the node. The ",paraId:19,tocIndex:5},{value:"Node Common Label Configurations",paraId:20,tocIndex:5},{value:" are available. Base on the code in ",paraId:19,tocIndex:5},{value:"style",paraId:21,tocIndex:5},{value:" section, we add ",paraId:19,tocIndex:5},{value:"labelCfg",paraId:19,tocIndex:5},{value:" to ",paraId:19,tocIndex:5},{value:"defaultNode",paraId:19,tocIndex:5},{value:".",paraId:19,tocIndex:5},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for graph\n  defaultNode: {\n    // ... Other properties for nodes\n    labelCfg: {\n      position: 'bottom',\n      offset: 10,\n      style: {\n        // ... The style of the label\n      },\n    },\n  },\n});\n// ...\n",paraId:22,tocIndex:5},{value:"linkPoints",paraId:23,tocIndex:6},{value:" is an object to configure the small circles on the 「top, bottom, left, and right」.",paraId:23,tocIndex:6},{value:"⚠️Attention:",paraId:24,tocIndex:6},{value:" It is different from ",paraId:24,tocIndex:6},{value:"anchorPoints",paraId:24,tocIndex:6},{value:": ",paraId:24,tocIndex:6},{value:"anchorPoints",paraId:24,tocIndex:6},{value:" is an 「",paraId:24,tocIndex:6},{value:"array",paraId:24,tocIndex:6},{value:"」 that indicates the actual relative positions used to specify the join position of the relevant edge of the node (refer to ",paraId:24,tocIndex:6},{value:"anchorPoints",paraId:25,tocIndex:6},{value:"); ",paraId:24,tocIndex:6},{value:"linkPoints",paraId:24,tocIndex:6},{value:" is an object that indicates whether 「",paraId:24,tocIndex:6},{value:"render",paraId:24,tocIndex:6},{value:"」the four small circles, which do not connect the relevant edges. These two properties are often used together.",paraId:24,tocIndex:6},{value:"Name",paraId:26,tocIndex:6},{value:"Description",paraId:26,tocIndex:6},{value:"Type",paraId:26,tocIndex:6},{value:"Remark",paraId:26,tocIndex:6},{value:"top",paraId:26,tocIndex:6},{value:"Whether to show the top small circle",paraId:26,tocIndex:6},{value:"Boolean",paraId:26,tocIndex:6},{value:"false",paraId:26,tocIndex:6},{value:" by default",paraId:26,tocIndex:6},{value:"bottom",paraId:26,tocIndex:6},{value:"Whether to show the bototm small circle",paraId:26,tocIndex:6},{value:"Boolean",paraId:26,tocIndex:6},{value:"false",paraId:26,tocIndex:6},{value:" by default",paraId:26,tocIndex:6},{value:"left",paraId:26,tocIndex:6},{value:"Whether to show the left small circle",paraId:26,tocIndex:6},{value:"Boolean",paraId:26,tocIndex:6},{value:"false",paraId:26,tocIndex:6},{value:" by default",paraId:26,tocIndex:6},{value:"right",paraId:26,tocIndex:6},{value:"Whether to show the right small circle",paraId:26,tocIndex:6},{value:"Boolean",paraId:26,tocIndex:6},{value:"false",paraId:26,tocIndex:6},{value:" by default",paraId:26,tocIndex:6},{value:"size",paraId:26,tocIndex:6},{value:"The size of the small circles",paraId:26,tocIndex:6},{value:"Number",paraId:26,tocIndex:6},{value:"3",paraId:26,tocIndex:6},{value:" by default",paraId:26,tocIndex:6},{value:"fill",paraId:26,tocIndex:6},{value:"The filling color of the small circles",paraId:26,tocIndex:6},{value:"String",paraId:26,tocIndex:6},{value:"'#72CC4A'",paraId:26,tocIndex:6},{value:" by default",paraId:26,tocIndex:6},{value:"stroke",paraId:26,tocIndex:6},{value:"The stroke color of the small circles",paraId:26,tocIndex:6},{value:"String",paraId:26,tocIndex:6},{value:"'#72CC4A'",paraId:26,tocIndex:6},{value:" by default",paraId:26,tocIndex:6},{value:"lineWidth",paraId:26,tocIndex:6},{value:"The line width of the small circles",paraId:26,tocIndex:6},{value:"Number",paraId:26,tocIndex:6},{value:"1",paraId:26,tocIndex:6},{value:" by default",paraId:26,tocIndex:6},{value:"Base on the code in ",paraId:27,tocIndex:6},{value:"style",paraId:28,tocIndex:6},{value:" section, we add ",paraId:27,tocIndex:6},{value:"linkPoints",paraId:27,tocIndex:6},{value:" to ",paraId:27,tocIndex:6},{value:"defaultNode",paraId:27,tocIndex:6},{value:".",paraId:27,tocIndex:6},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for graph\n  defaultNode: {\n    // ... Other configurations for nodes\n    linkPoints: {\n      top: true,\n      bottom: true,\n      left: true,\n      right: true,\n      fill: '#fff',\n      size: 5,\n    },\n  },\n});\n// ...\n",paraId:29,tocIndex:6},{value:"icon",paraId:30,tocIndex:7},{value:" is an object to configure the icon on the node.",paraId:30,tocIndex:7},{value:"Name",paraId:31,tocIndex:7},{value:"Description",paraId:31,tocIndex:7},{value:"Type",paraId:31,tocIndex:7},{value:"Remark",paraId:31,tocIndex:7},{value:"show",paraId:31,tocIndex:7},{value:"Whether to show the icon",paraId:31,tocIndex:7},{value:"Boolean",paraId:31,tocIndex:7},{value:"false",paraId:31,tocIndex:7},{value:" by default",paraId:31,tocIndex:7},{value:"width",paraId:31,tocIndex:7},{value:"The width of the icon",paraId:31,tocIndex:7},{value:"Number",paraId:31,tocIndex:7},{value:"16",paraId:31,tocIndex:7},{value:" by default",paraId:31,tocIndex:7},{value:"height",paraId:31,tocIndex:7},{value:"The height of the icon",paraId:31,tocIndex:7},{value:"Number",paraId:31,tocIndex:7},{value:"16",paraId:31,tocIndex:7},{value:" by default",paraId:31,tocIndex:7},{value:"img",paraId:31,tocIndex:7},{value:"The image url or base64 of the icon",paraId:31,tocIndex:7},{value:"String",paraId:31,tocIndex:7},{value:"Configuring it means the icon is an image",paraId:31,tocIndex:7},{value:"text",paraId:31,tocIndex:7},{value:"iconfont for the icon",paraId:31,tocIndex:7},{value:"String",paraId:31,tocIndex:7},{value:"Configuring it means the icon is an iconfont",paraId:31,tocIndex:7},{value:"Base on the code in ",paraId:32,tocIndex:7},{value:"style",paraId:33,tocIndex:7},{value:" section, we add ",paraId:32,tocIndex:7},{value:"icon",paraId:32,tocIndex:7},{value:" to ",paraId:32,tocIndex:7},{value:"defaultNode",paraId:32,tocIndex:7},{value:".",paraId:32,tocIndex:7},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for the graph\n  defaultNode: {\n    // ... Other configurations for nodes\n    icon: {\n      show: true,\n      width: 25,\n      height: 25,\n      // img: '...', The image url of the icon\n      // text: '...', Use an iconfont for the icon\n    },\n  },\n});\n// ...\n",paraId:34,tocIndex:7}]},28504:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"A built-in node Ellipse has the default style as below, the label is drawed on the center of it.",paraId:0},{value:"As stated in ",paraId:1,tocIndex:0},{value:"Built-in Nodes",paraId:2,tocIndex:0},{value:" , there are three methods to configure nodes: Configure nodes globally when instantiating a Graph; Configure nodes in their data; Configure nodes by ",paraId:1,tocIndex:0},{value:"graph.node(nodeFn)",paraId:1,tocIndex:0},{value:". Their priorities are:",paraId:1,tocIndex:0},{value:"graph.node(nodeFn)",paraId:3,tocIndex:0},{value:" > Configure in data > Configure globally",paraId:3,tocIndex:0},{value:"⚠️ Attention:",paraId:4,tocIndex:0},{value:" Expect for ",paraId:4,tocIndex:0},{value:"id",paraId:4,tocIndex:0},{value:", and ",paraId:4,tocIndex:0},{value:"label",paraId:4,tocIndex:0},{value:" which should be assigned to every single node data, the other configurations in ",paraId:4,tocIndex:0},{value:"The Common Property",paraId:5,tocIndex:0},{value:" and in each node type (refer to doc of each node type) support to be assigned by the three ways.",paraId:4,tocIndex:0},{value:"Assign ",paraId:6,tocIndex:1},{value:"type",paraId:6,tocIndex:1},{value:" to ",paraId:6,tocIndex:1},{value:"'ellipse'",paraId:6,tocIndex:1},{value:" in the ",paraId:6,tocIndex:1},{value:"defaultNode",paraId:6,tocIndex:1},{value:" object when instantiating a Graph:",paraId:6,tocIndex:1},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultNode: {\n    type: 'ellipse', // The type of the node\n    // ... Other configuraltions\n  },\n});\n",paraId:7,tocIndex:1},{value:"To configure different nodes with different properties, you can write the properties into the node data.",paraId:8,tocIndex:2},{value:"const data = {\n  nodes: [\n    {\n      id: 'node0',\n      type: 'ellipse', // The tyep of the node\n      //... // Other configurations\n    },\n    //... // Other nodes\n  ],\n  edges: [\n    //... // edges\n  ],\n};\n",paraId:9,tocIndex:2},{value:"The ",paraId:10,tocIndex:3},{value:"Node Common Properties",paraId:11,tocIndex:3},{value:" are available for Ellipse node, some special properties are shown below. The property with Object type will be described after the table:",paraId:10,tocIndex:3},{value:"Name",paraId:12,tocIndex:3},{value:"Description",paraId:12,tocIndex:3},{value:"Type",paraId:12,tocIndex:3},{value:"Remark",paraId:12,tocIndex:3},{value:"size",paraId:12,tocIndex:3},{value:"The size of the ellipse",paraId:12,tocIndex:3},{value:"Number / Array",paraId:12,tocIndex:3},{value:"When it is a number, the ellipse looks like a circle. When it is an array, the ",paraId:12,tocIndex:3},{value:"size[0]",paraId:12,tocIndex:3},{value:" is the major diameter, the ",paraId:12,tocIndex:3},{value:"size[1]",paraId:12,tocIndex:3},{value:" is the minor diameter",paraId:12,tocIndex:3},{value:"style",paraId:12,tocIndex:3},{value:"The default style of ellipse node",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"Correspond to the styles in Canvas",paraId:12,tocIndex:3},{value:"label",paraId:12,tocIndex:3},{value:"The text of the label",paraId:12,tocIndex:3},{value:"String",paraId:12,tocIndex:3},{value:"labelCfg",paraId:12,tocIndex:3},{value:"The configurations of the label",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"stateStyles",paraId:12,tocIndex:3},{value:"The styles in different states",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"Refer to ",paraId:12,tocIndex:3},{value:"Configure Styles for State",paraId:13,tocIndex:3},{value:"linkPoints",paraId:12,tocIndex:3},{value:"The link points ",paraId:12,tocIndex:3},{value:"in visual",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"They are invisible by default. It is usually used with the ",paraId:12,tocIndex:3},{value:"anchorPoints",paraId:14,tocIndex:3},{value:". The differences are described in ",paraId:12,tocIndex:3},{value:"linkPoints",paraId:15,tocIndex:3},{value:"icon",paraId:12,tocIndex:3},{value:"The configurations of the icon on the ellipse node",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"It is invisible by default",paraId:12,tocIndex:3},{value:"The ",paraId:16,tocIndex:4},{value:"Node Common Styles",paraId:17,tocIndex:4},{value:" are available for Circle node.",paraId:16,tocIndex:4},{value:"style",paraId:16,tocIndex:4},{value:" is an object to configure the filling color, stroke, and other styles. The following code shows how to configure the ",paraId:16,tocIndex:4},{value:"style",paraId:16,tocIndex:4},{value:" globally when instantiating a Graph.",paraId:16,tocIndex:4},{value:"const data = {\n  nodes: [\n    {\n      x: 100,\n      y: 100,\n      type: 'ellipse',\n      label: 'ellipse',\n    },\n  ],\n};\nconst graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultNode: {\n    // type: 'ellipse',  // The type has been assigned in the data, we do not have to define it any more\n    size: [130, 80],\n    style: {\n      fill: '#bae637',\n      stroke: '#eaff8f',\n      lineWidth: 5,\n    },\n  },\n});\ngraph.data(data);\ngraph.render();\n",paraId:18,tocIndex:4},{value:"labelCfg",paraId:19,tocIndex:5},{value:" is an object to configure the label of the node. The ",paraId:19,tocIndex:5},{value:"Node Common Label Configurations",paraId:20,tocIndex:5},{value:" are available. Base on the code in ",paraId:19,tocIndex:5},{value:"style",paraId:21,tocIndex:5},{value:" section, we add ",paraId:19,tocIndex:5},{value:"labelCfg",paraId:19,tocIndex:5},{value:" to ",paraId:19,tocIndex:5},{value:"defaultNode",paraId:19,tocIndex:5},{value:".",paraId:19,tocIndex:5},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for graph\n  defaultNode: {\n    // ... Other properties for node\n    labelCfg: {\n      offset: 20,\n      style: {\n        fill: '#9254de',\n        fontSize: 18,\n        // ... The style of the label\n      },\n    },\n  },\n});\n// ...\n",paraId:22,tocIndex:5},{value:"linkPoints",paraId:23,tocIndex:6},{value:" is an object to configure the small circles on the 「top, bottom, left, and right」.",paraId:23,tocIndex:6},{value:"⚠️Attention:",paraId:24,tocIndex:6},{value:" It is different from ",paraId:24,tocIndex:6},{value:"anchorPoints",paraId:24,tocIndex:6},{value:": ",paraId:24,tocIndex:6},{value:"anchorPoints",paraId:24,tocIndex:6},{value:" is an 「",paraId:24,tocIndex:6},{value:"array",paraId:24,tocIndex:6},{value:"」 that indicates the actual relative positions used to specify the join position of the relevant edge of the node (refer to ",paraId:24,tocIndex:6},{value:"anchorPoints",paraId:25,tocIndex:6},{value:"); ",paraId:24,tocIndex:6},{value:"linkPoints",paraId:24,tocIndex:6},{value:" is an object that indicates whether 「",paraId:24,tocIndex:6},{value:"render",paraId:24,tocIndex:6},{value:"」the four small circles, which do not connect the relevant edges. These two properties are often used together.",paraId:24,tocIndex:6},{value:"Name",paraId:26,tocIndex:6},{value:"Description",paraId:26,tocIndex:6},{value:"Type",paraId:26,tocIndex:6},{value:"Remark",paraId:26,tocIndex:6},{value:"top",paraId:26,tocIndex:6},{value:"Whether to show the top small circle",paraId:26,tocIndex:6},{value:"Boolean",paraId:26,tocIndex:6},{value:"false",paraId:26,tocIndex:6},{value:" by default",paraId:26,tocIndex:6},{value:"bottom",paraId:26,tocIndex:6},{value:"Whether to show the bototm small circle",paraId:26,tocIndex:6},{value:"Boolean",paraId:26,tocIndex:6},{value:"false",paraId:26,tocIndex:6},{value:" by default",paraId:26,tocIndex:6},{value:"left",paraId:26,tocIndex:6},{value:"Whether to show the left small circle",paraId:26,tocIndex:6},{value:"Boolean",paraId:26,tocIndex:6},{value:"false",paraId:26,tocIndex:6},{value:" by default",paraId:26,tocIndex:6},{value:"right",paraId:26,tocIndex:6},{value:"Whether to show the right small circle",paraId:26,tocIndex:6},{value:"Boolean",paraId:26,tocIndex:6},{value:"false",paraId:26,tocIndex:6},{value:" by default",paraId:26,tocIndex:6},{value:"size",paraId:26,tocIndex:6},{value:"The size of the small circles",paraId:26,tocIndex:6},{value:"Number",paraId:26,tocIndex:6},{value:"3",paraId:26,tocIndex:6},{value:" by default",paraId:26,tocIndex:6},{value:"fill",paraId:26,tocIndex:6},{value:"The filling color of the small circles",paraId:26,tocIndex:6},{value:"String",paraId:26,tocIndex:6},{value:"'#72CC4A'",paraId:26,tocIndex:6},{value:" by default",paraId:26,tocIndex:6},{value:"stroke",paraId:26,tocIndex:6},{value:"The stroke color of the small circles",paraId:26,tocIndex:6},{value:"String",paraId:26,tocIndex:6},{value:"'#72CC4A'",paraId:26,tocIndex:6},{value:" by default",paraId:26,tocIndex:6},{value:"lineWidth",paraId:26,tocIndex:6},{value:"The line width of the small circles",paraId:26,tocIndex:6},{value:"Number",paraId:26,tocIndex:6},{value:"1",paraId:26,tocIndex:6},{value:" by default",paraId:26,tocIndex:6},{value:"Base on the code in ",paraId:27,tocIndex:6},{value:"style",paraId:28,tocIndex:6},{value:" section, we add ",paraId:27,tocIndex:6},{value:"linkPoints",paraId:27,tocIndex:6},{value:" to ",paraId:27,tocIndex:6},{value:"defaultNode",paraId:27,tocIndex:6},{value:".",paraId:27,tocIndex:6},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for graph\n  defaultNode: {\n    // ... Other configurations for nodes\n    linkPoints: {\n      top: true,\n      bottom: true,\n      left: true,\n      right: true,\n      size: 5,\n      fill: '#fff',\n    },\n  },\n});\n// ...\n",paraId:29,tocIndex:6},{value:"icon",paraId:30,tocIndex:7},{value:" is an object to configure the icon on the node.",paraId:30,tocIndex:7},{value:"Name",paraId:31,tocIndex:7},{value:"Description",paraId:31,tocIndex:7},{value:"Type",paraId:31,tocIndex:7},{value:"Remark",paraId:31,tocIndex:7},{value:"show",paraId:31,tocIndex:7},{value:"Whether to show the icon",paraId:31,tocIndex:7},{value:"Boolean",paraId:31,tocIndex:7},{value:"false",paraId:31,tocIndex:7},{value:" by default",paraId:31,tocIndex:7},{value:"width",paraId:31,tocIndex:7},{value:"The width of the icon",paraId:31,tocIndex:7},{value:"Number",paraId:31,tocIndex:7},{value:"16",paraId:31,tocIndex:7},{value:" by default",paraId:31,tocIndex:7},{value:"height",paraId:31,tocIndex:7},{value:"The height of the icon",paraId:31,tocIndex:7},{value:"Number",paraId:31,tocIndex:7},{value:"16",paraId:31,tocIndex:7},{value:" by default",paraId:31,tocIndex:7},{value:"img",paraId:31,tocIndex:7},{value:"The image url or base64 of the icon",paraId:31,tocIndex:7},{value:"String",paraId:31,tocIndex:7},{value:"Configuring it means the icon is an image",paraId:31,tocIndex:7},{value:"text",paraId:31,tocIndex:7},{value:"iconfont for the icon",paraId:31,tocIndex:7},{value:"String",paraId:31,tocIndex:7},{value:"Configuring it means the icon is an iconfont",paraId:31,tocIndex:7},{value:"Base on the code in ",paraId:32,tocIndex:7},{value:"style",paraId:33,tocIndex:7},{value:" section, we add ",paraId:32,tocIndex:7},{value:"icon",paraId:32,tocIndex:7},{value:" to ",paraId:32,tocIndex:7},{value:"defaultNode",paraId:32,tocIndex:7},{value:".",paraId:32,tocIndex:7},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for the graph\n  defaultNode: {\n    // ... Other configurations for nodes\n    icon: {\n      show: true,\n      width: 30,\n      height: 30,\n      // img: '...', The image url of the icon\n      // text: '...', Use an iconfont for the icon\n    },\n  },\n});\n// ...\n",paraId:34,tocIndex:7}]},18596:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"A built-in node Circle has the default style as below, the label is drawed on the bottom of it.",paraId:0,tocIndex:0},{value:"As stated in ",paraId:1,tocIndex:1},{value:"Built-in Nodes",paraId:2,tocIndex:1},{value:" , there are three methods to configure nodes: Configure nodes globally when instantiating a Graph; Configure nodes in their data; Configure nodes by ",paraId:1,tocIndex:1},{value:"graph.node(nodeFn)",paraId:1,tocIndex:1},{value:". Their priorities are:",paraId:1,tocIndex:1},{value:"graph.node(nodeFn)",paraId:3,tocIndex:1},{value:" > Configure in data > Configure globally",paraId:3,tocIndex:1},{value:"⚠️ Attention:",paraId:4,tocIndex:1},{value:" Expect for ",paraId:4,tocIndex:1},{value:"id",paraId:4,tocIndex:1},{value:", and ",paraId:4,tocIndex:1},{value:"label",paraId:4,tocIndex:1},{value:" which should be assigned to every single node data, the other configurations in ",paraId:4,tocIndex:1},{value:"The Common Property",paraId:5,tocIndex:1},{value:" and in each node type (refer to doc of each node type) support to be assigned by the three ways.",paraId:4,tocIndex:1},{value:"Assign ",paraId:6,tocIndex:2},{value:"type",paraId:6,tocIndex:2},{value:" to ",paraId:6,tocIndex:2},{value:"'image'",paraId:6,tocIndex:2},{value:" in the ",paraId:6,tocIndex:2},{value:"defaultNode",paraId:6,tocIndex:2},{value:" object when instantiating a Graph:",paraId:6,tocIndex:2},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultNode: {\n    type: 'image',\n    label: 'AntV Team',\n    // Other configuraltions\n  },\n});\n",paraId:7,tocIndex:2},{value:"To configure different nodes with different properties, you can write the properties into the node data.",paraId:8,tocIndex:3},{value:"const data = {\n  nodes: [{\n    id: 'node0',\n  \timg: 'https://yyb.gtimg.com/aiplat/page/product/visionimgidy/img/demo6-16a47e5d31.jpg?max_age=31536000',\n    type: 'image',\n    size: 200,\n    label: 'AntV Team',\n    labelCfg: {\n      position: 'bottom'\n    },\n    // The configurations for clipping the image\n    clipCfg: {\n      show: false,\n      type: 'circle',\n      r: 15\n    }\n  },\n    ... // Other nodes\n  ],\n  edges: [\n    ... // edges\n  ]\n}\n",paraId:9,tocIndex:3},{value:"The ",paraId:10,tocIndex:4},{value:"Node Common Properties",paraId:11,tocIndex:4},{value:" are available for Image node, some special properties are shown below. The property with Object type will be described after the table:",paraId:10,tocIndex:4},{value:"img: 'https://yyb.gtimg.com/aiplat/page/product/visionimgidy/img/demo6-16a47e5d31.jpg?max_age=31536000',\nsize: 200,\n  labelCfg: {\n    position: 'bottom'\n  },\n  // The configurations for clipping the image\n  clipCfg: {\n    show: false,\n    type: 'circle',\n    // circle\n    r: 15,\n    // ellipse\n    rx: 10,\n    ry: 15,\n    // rect\n    width: 15,\n    height: 15,\n    // Coordinates\n    x: 0,\n    y: 0\n  }\n",paraId:12,tocIndex:4},{value:"Name",paraId:13,tocIndex:4},{value:"Description",paraId:13,tocIndex:4},{value:"Type",paraId:13,tocIndex:4},{value:"Remark",paraId:13,tocIndex:4},{value:"img",paraId:13,tocIndex:4},{value:"The URL addgress",paraId:13,tocIndex:4},{value:"String",paraId:13,tocIndex:4},{value:"special property for image node",paraId:13,tocIndex:4},{value:"size",paraId:13,tocIndex:4},{value:"The size of the node",paraId:13,tocIndex:4},{value:"Number",paraId:13,tocIndex:4},{value:"Array",paraId:13,tocIndex:4},{value:"label",paraId:13,tocIndex:4},{value:"The text of the label",paraId:13,tocIndex:4},{value:"String",paraId:13,tocIndex:4},{value:"labelCfg",paraId:13,tocIndex:4},{value:"The configurations for the label",paraId:13,tocIndex:4},{value:"Object",paraId:13,tocIndex:4},{value:"The ",paraId:13,tocIndex:4},{value:"Node Common Label Configurations",paraId:14,tocIndex:4},{value:" are available.",paraId:13,tocIndex:4},{value:"clipCfg",paraId:13,tocIndex:4},{value:"The configurations for clipping",paraId:13,tocIndex:4},{value:"Object",paraId:13,tocIndex:4},{value:"Do not clip by default. It is a special property for image node",paraId:13,tocIndex:4},{value:"Name",paraId:15,tocIndex:5},{value:"Description",paraId:15,tocIndex:5},{value:"Type",paraId:15,tocIndex:5},{value:"Remark",paraId:15,tocIndex:5},{value:"type",paraId:15,tocIndex:5},{value:"The type of shape of clipping",paraId:15,tocIndex:5},{value:"String",paraId:15,tocIndex:5},{value:"Options: ",paraId:15,tocIndex:5},{value:"'circle'",paraId:15,tocIndex:5},{value:", ",paraId:15,tocIndex:5},{value:"'rect'",paraId:15,tocIndex:5},{value:", ",paraId:15,tocIndex:5},{value:"'ellipse'",paraId:15,tocIndex:5},{value:"x",paraId:15,tocIndex:5},{value:"The x coordinate of the clipping shape",paraId:15,tocIndex:5},{value:"Number",paraId:15,tocIndex:5},{value:"0 by default. Only takes effect when the ",paraId:15,tocIndex:5},{value:"type",paraId:15,tocIndex:5},{value:" is ",paraId:15,tocIndex:5},{value:"'circle'",paraId:15,tocIndex:5},{value:", ",paraId:15,tocIndex:5},{value:"'rect'",paraId:15,tocIndex:5},{value:", or ",paraId:15,tocIndex:5},{value:"'ellipse'",paraId:15,tocIndex:5},{value:"y",paraId:15,tocIndex:5},{value:"The y coordinate of the clipping shape",paraId:15,tocIndex:5},{value:"Number",paraId:15,tocIndex:5},{value:"0 by default. Only takes effect when the ",paraId:15,tocIndex:5},{value:"type",paraId:15,tocIndex:5},{value:" is ",paraId:15,tocIndex:5},{value:"'circle'",paraId:15,tocIndex:5},{value:", ",paraId:15,tocIndex:5},{value:"'rect'",paraId:15,tocIndex:5},{value:", or `'ellipse'",paraId:15,tocIndex:5},{value:"show",paraId:15,tocIndex:5},{value:"Whether to clip the image",paraId:15,tocIndex:5},{value:"Boolean",paraId:15,tocIndex:5},{value:"Do not clip by default.",paraId:15,tocIndex:5},{value:"r",paraId:15,tocIndex:5},{value:"The radius of circle clipping",paraId:15,tocIndex:5},{value:"Number",paraId:15,tocIndex:5},{value:"Takes effect when the ",paraId:15,tocIndex:5},{value:"type",paraId:15,tocIndex:5},{value:" is ",paraId:15,tocIndex:5},{value:"'circle'",paraId:15,tocIndex:5},{value:"width",paraId:15,tocIndex:5},{value:"The width of the clipping",paraId:15,tocIndex:5},{value:"Number",paraId:15,tocIndex:5},{value:"Takes effect when the ",paraId:15,tocIndex:5},{value:"type",paraId:15,tocIndex:5},{value:" is ",paraId:15,tocIndex:5},{value:"'rect'",paraId:15,tocIndex:5},{value:"height",paraId:15,tocIndex:5},{value:"The height of the clipping",paraId:15,tocIndex:5},{value:"Number",paraId:15,tocIndex:5},{value:"Takes effect when the ",paraId:15,tocIndex:5},{value:"type",paraId:15,tocIndex:5},{value:" is ",paraId:15,tocIndex:5},{value:"'rect'",paraId:15,tocIndex:5},{value:"rx",paraId:15,tocIndex:5},{value:"The major radius of the ellipse clipping",paraId:15,tocIndex:5},{value:"Number",paraId:15,tocIndex:5},{value:"Takes effect when the ",paraId:15,tocIndex:5},{value:"type",paraId:15,tocIndex:5},{value:" is ",paraId:15,tocIndex:5},{value:"'ellipse'",paraId:15,tocIndex:5},{value:"ry",paraId:15,tocIndex:5},{value:"The minor radius of the ellipse clipping",paraId:15,tocIndex:5},{value:"Number",paraId:15,tocIndex:5},{value:"Takes effect when the ",paraId:15,tocIndex:5},{value:"type",paraId:15,tocIndex:5},{value:" is ",paraId:15,tocIndex:5},{value:"'ellipse'",paraId:15,tocIndex:5},{value:"There are default values for all the types of clipping. The following code shows how to configure the ",paraId:16,tocIndex:5},{value:"clipCfg",paraId:16,tocIndex:5},{value:" when instantiating a Graph:",paraId:16,tocIndex:5},{value:"const data = {\n  nodes: [\n    {\n      x: 100,\n      y: 100,\n      type: 'image',\n      label: 'image',\n    },\n  ],\n};\nconst graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultNode: {\n    // type: 'image',  // The type has been assigned in the data, we do not have to define it any more\n    clipCfg: {\n      show: true,\n      type: 'circle',\n    },\n  },\n});\ngraph.data(data);\ngraph.render();\n",paraId:17,tocIndex:5},{value:"circle",paraId:18,tocIndex:7},{value:" When the ",paraId:18,tocIndex:7},{value:"type",paraId:18,tocIndex:7},{value:" in ",paraId:18,tocIndex:7},{value:"clipCfg",paraId:18,tocIndex:7},{value:" is ",paraId:18,tocIndex:7},{value:"'circle'",paraId:18,tocIndex:7},{value:":",paraId:18,tocIndex:7},{value:"clipCfg: {\n  show: true,\n  type: 'circle',\n  r: 100\n}\n",paraId:19,tocIndex:7},{value:"rect",paraId:20,tocIndex:8},{value:"When the ",paraId:21,tocIndex:8},{value:"type",paraId:21,tocIndex:8},{value:" in ",paraId:21,tocIndex:8},{value:"clipCfg",paraId:21,tocIndex:8},{value:" is ",paraId:21,tocIndex:8},{value:"'rect'",paraId:21,tocIndex:8},{value:":",paraId:21,tocIndex:8},{value:"clipCfg: {\n  show: true,\n  type: 'rect',\n  x: -50,\n  y: -50,\n  width: 100,\n  height: 100\n}\n",paraId:22,tocIndex:8},{value:"ellipse",paraId:23,tocIndex:9},{value:"When the ",paraId:24,tocIndex:9},{value:"type",paraId:24,tocIndex:9},{value:" in ",paraId:24,tocIndex:9},{value:"clipCfg",paraId:24,tocIndex:9},{value:" is ",paraId:24,tocIndex:9},{value:"'ellipse'",paraId:24,tocIndex:9},{value:":",paraId:24,tocIndex:9},{value:"clipCfg: {\n  show: true,\n  type: 'ellipse',\n  rx: 100,\n  ry: 60\n}\n",paraId:25,tocIndex:9}]},91704:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"A built-in node modelRect has the default style as below, the label is drawed on the center of it. ",paraId:0},{value:"Tips：",paraId:1},{value:" There will be no description when there is no ",paraId:1},{value:"description",paraId:1},{value:" in the data.",paraId:1},{value:"As stated in ",paraId:2,tocIndex:0},{value:"Built-in Nodes",paraId:3,tocIndex:0},{value:" , there are three methods to configure nodes: Configure nodes globally when instantiating a Graph; Configure nodes in their data; Configure nodes by ",paraId:2,tocIndex:0},{value:"graph.node(nodeFn)",paraId:2,tocIndex:0},{value:". Their priorities are:",paraId:2,tocIndex:0},{value:"graph.node(nodeFn)",paraId:4,tocIndex:0},{value:" > Configure in data > Configure globally",paraId:4,tocIndex:0},{value:"⚠️ Attention:",paraId:5,tocIndex:0},{value:" Expect for ",paraId:5,tocIndex:0},{value:"id",paraId:5,tocIndex:0},{value:", and ",paraId:5,tocIndex:0},{value:"label",paraId:5,tocIndex:0},{value:" which should be assigned to every single node data, the other configurations in ",paraId:5,tocIndex:0},{value:"The Common Property",paraId:6,tocIndex:0},{value:" and in each node type (refer to doc of each node type) support to be assigned by the three ways.",paraId:5,tocIndex:0},{value:"Assign ",paraId:7,tocIndex:1},{value:"type",paraId:7,tocIndex:1},{value:" to ",paraId:7,tocIndex:1},{value:"'modelRect'",paraId:7,tocIndex:1},{value:" in the ",paraId:7,tocIndex:1},{value:"defaultNode",paraId:7,tocIndex:1},{value:" object when instantiating a Graph:",paraId:7,tocIndex:1},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultNode: {\n    type: 'modelRect',\n    // Other configuraltions\n  },\n});\n",paraId:8,tocIndex:1},{value:"To configure different nodes with different properties, you can write the properties into the node data.",paraId:9,tocIndex:2},{value:"const data = {\n  nodes: [{\n\t  id: 'node0',\n    type: 'modelRect',\n    ... // Other configurations\n    },\n    ... // Other nodes\n  ],\n  edges: [\n    ... // edges\n  ]\n}\n",paraId:10,tocIndex:2},{value:"The ",paraId:11,tocIndex:3},{value:"Node Common Properties",paraId:12,tocIndex:3},{value:" are available for ModelRect node, some special properties are shown below. The property with Object type will be described after the table:",paraId:11,tocIndex:3},{value:"Name",paraId:13,tocIndex:3},{value:"Description",paraId:13,tocIndex:3},{value:"Type",paraId:13,tocIndex:3},{value:"Remark",paraId:13,tocIndex:3},{value:"size",paraId:13,tocIndex:3},{value:"The size of the modelRect node",paraId:13,tocIndex:3},{value:"Number",paraId:13,tocIndex:3},{value:"Array",paraId:13,tocIndex:3},{value:"style",paraId:13,tocIndex:3},{value:"The default style of modelRect node",paraId:13,tocIndex:3},{value:"Object",paraId:13,tocIndex:3},{value:"Correspond to the styles in Canvas",paraId:13,tocIndex:3},{value:"label",paraId:13,tocIndex:3},{value:"The text of the label",paraId:13,tocIndex:3},{value:"String",paraId:13,tocIndex:3},{value:"labelCfg",paraId:13,tocIndex:3},{value:"The configurations of the label",paraId:13,tocIndex:3},{value:"Object",paraId:13,tocIndex:3},{value:"stateStyles",paraId:13,tocIndex:3},{value:"The styles in different states",paraId:13,tocIndex:3},{value:"Object",paraId:13,tocIndex:3},{value:"Refer to ",paraId:13,tocIndex:3},{value:"Configure Styles for State",paraId:14,tocIndex:3},{value:"linkPoints",paraId:13,tocIndex:3},{value:"The link points ",paraId:13,tocIndex:3},{value:"in visual",paraId:13,tocIndex:3},{value:"Object",paraId:13,tocIndex:3},{value:"They are invisible by default. It is usually used with the ",paraId:13,tocIndex:3},{value:"anchorPoints",paraId:15,tocIndex:3},{value:". The differences are described in ",paraId:13,tocIndex:3},{value:"linkPoints",paraId:16,tocIndex:3},{value:"preRect",paraId:13,tocIndex:3},{value:"Left rect of the node",paraId:13,tocIndex:3},{value:"Object",paraId:13,tocIndex:3},{value:"Special property for modelRect",paraId:13,tocIndex:3},{value:"logoIcon",paraId:13,tocIndex:3},{value:"The left logo icon",paraId:13,tocIndex:3},{value:"Object",paraId:13,tocIndex:3},{value:"Special property for modelRect",paraId:13,tocIndex:3},{value:"stateIcon",paraId:13,tocIndex:3},{value:"The right state icon",paraId:13,tocIndex:3},{value:"Object",paraId:13,tocIndex:3},{value:"Special property for modelRect",paraId:13,tocIndex:3},{value:"description",paraId:13,tocIndex:3},{value:"The description text below the label",paraId:13,tocIndex:3},{value:"String",paraId:13,tocIndex:3},{value:"Special property for modelRect",paraId:13,tocIndex:3},{value:"descriptionCfg",paraId:13,tocIndex:3},{value:"It is supported after V3.3",paraId:13,tocIndex:3},{value:"The configuration for description text",paraId:13,tocIndex:3},{value:"Object",paraId:13,tocIndex:3},{value:"Special property for modelRect",paraId:13,tocIndex:3},{value:"    // The configuration of the logo icon in the node\n    logoIcon: {\n      // Whether to show the icon. false means hide the icon\n      show: true,\n      x: 0,\n      y: 0,\n      // the image url of icon\n      img: 'https://gw.alipayobjects.com/zos/basement_prod/4f81893c-1806-4de4-aff3-9a6b266bc8a2.svg',\n      width: 16,\n      height: 16,\n      // Adjust the left/right offset of the icon\n      offset: 0\n    },\n    // The configuration of the state icon in the node\n    stateIcon: {\n      // Whether to show the icon. false means hide the icon\n      show: true,\n      x: 0,\n      y: 0,\n      // the image url of icon\n      img: 'https://gw.alipayobjects.com/zos/basement_prod/300a2523-67e0-4cbf-9d4a-67c077b40395.svg',\n      width: 16,\n      height: 16,\n      // Adjust the left/right offset of the icon\n      offset: -5\n    }\n",paraId:17,tocIndex:3},{value:"The ",paraId:18,tocIndex:4},{value:"Node Common Styles",paraId:19,tocIndex:4},{value:" are available for Circle node.",paraId:18,tocIndex:4},{value:"style",paraId:18,tocIndex:4},{value:" is an object to configure the filling color, stroke, and other styles. The following code shows how to configure the ",paraId:18,tocIndex:4},{value:"style",paraId:18,tocIndex:4},{value:" globally when instantiating a Graph.",paraId:18,tocIndex:4},{value:"const data = {\n  nodes: [\n    {\n      x: 100,\n      y: 100,\n      type: 'modelRect',\n      label: 'modelRect',\n    },\n  ],\n};\nconst graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultNode: {\n    // type: 'modelRect',  // The type has been assigned in the data, we do not have to define it any more\n    size: [200, 80],\n    style: {\n      fill: '#f0f5ff',\n      stroke: '#adc6ff',\n      lineWidth: 2,\n    },\n  },\n});\ngraph.data(data);\ngraph.render();\n",paraId:20,tocIndex:4},{value:"labelCfg",paraId:21,tocIndex:5},{value:" is an object to configure the label of the node. The ",paraId:21,tocIndex:5},{value:"Node Common Label Configurations",paraId:22,tocIndex:5},{value:" are available. Base on the code in ",paraId:21,tocIndex:5},{value:"style",paraId:23,tocIndex:5},{value:" section, we add ",paraId:21,tocIndex:5},{value:"labelCfg",paraId:21,tocIndex:5},{value:" to ",paraId:21,tocIndex:5},{value:"defaultNode",paraId:21,tocIndex:5},{value:".",paraId:21,tocIndex:5},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for graph\n  defaultNode: {\n    // ... Other properties for node\n    labelCfg: {\n      style: {\n        fill: '#9254de',\n        fontSize: 18,\n      },\n    },\n  },\n});\n// ...\n",paraId:24,tocIndex:5},{value:"⚠️",paraId:25,tocIndex:6},{value:"Attension:",paraId:25,tocIndex:6},{value:" ",paraId:25,tocIndex:6},{value:"It will be supported after V3.3.",paraId:25,tocIndex:6},{value:"descriptionCfg",paraId:26,tocIndex:6},{value:" is an object to configure the label of the node. The ",paraId:26,tocIndex:6},{value:"Node Common Label Configurations",paraId:27,tocIndex:6},{value:" are available. Besides, descriptionCfg has special attribute:",paraId:26,tocIndex:6},{value:"Name",paraId:28,tocIndex:6},{value:"Description",paraId:28,tocIndex:6},{value:"Type",paraId:28,tocIndex:6},{value:"Remark",paraId:28,tocIndex:6},{value:"paddingTop",paraId:28,tocIndex:6},{value:"The padding from the description to the label text",paraId:28,tocIndex:6},{value:"Number",paraId:28,tocIndex:6},{value:"0",paraId:28,tocIndex:6},{value:" by default",paraId:28,tocIndex:6},{value:"Base on the code in ",paraId:29,tocIndex:6},{value:"style",paraId:30,tocIndex:6},{value:" section, we add ",paraId:29,tocIndex:6},{value:"descriptionCfg",paraId:29,tocIndex:6},{value:" to ",paraId:29,tocIndex:6},{value:"defaultNode",paraId:29,tocIndex:6},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for graph\n  defaultNode: {\n    // ... Other properties for node\n    descriptionCfg: {\n      style: {\n        fill: '#f00',\n      },\n    },\n  },\n});\n// ...\n",paraId:31,tocIndex:6},{value:"linkPoints",paraId:32,tocIndex:7},{value:" is an object to configure the small circles on the 「top, bottom, left, and right」.",paraId:32,tocIndex:7},{value:"⚠️Attention:",paraId:33,tocIndex:7},{value:" It is different from ",paraId:33,tocIndex:7},{value:"anchorPoints",paraId:33,tocIndex:7},{value:": ",paraId:33,tocIndex:7},{value:"anchorPoints",paraId:33,tocIndex:7},{value:" is an 「",paraId:33,tocIndex:7},{value:"array",paraId:33,tocIndex:7},{value:"」 that indicates the actual relative positions used to specify the join position of the relevant edge of the node (refer to ",paraId:33,tocIndex:7},{value:"anchorPoints",paraId:34,tocIndex:7},{value:"); ",paraId:33,tocIndex:7},{value:"linkPoints",paraId:33,tocIndex:7},{value:" is an object that indicates whether 「",paraId:33,tocIndex:7},{value:"render",paraId:33,tocIndex:7},{value:"」the four small circles, which do not connect the relevant edges. These two properties are often used together.",paraId:33,tocIndex:7},{value:"Name",paraId:35,tocIndex:7},{value:"Description",paraId:35,tocIndex:7},{value:"Type",paraId:35,tocIndex:7},{value:"Remark",paraId:35,tocIndex:7},{value:"top",paraId:35,tocIndex:7},{value:"Whether to show the top small circle",paraId:35,tocIndex:7},{value:"Boolean",paraId:35,tocIndex:7},{value:"false",paraId:35,tocIndex:7},{value:" by default",paraId:35,tocIndex:7},{value:"bottom",paraId:35,tocIndex:7},{value:"Whether to show the bototm small circle",paraId:35,tocIndex:7},{value:"Boolean",paraId:35,tocIndex:7},{value:"false",paraId:35,tocIndex:7},{value:" by default",paraId:35,tocIndex:7},{value:"left",paraId:35,tocIndex:7},{value:"Whether to show the left small circle",paraId:35,tocIndex:7},{value:"Boolean",paraId:35,tocIndex:7},{value:"false",paraId:35,tocIndex:7},{value:" by default",paraId:35,tocIndex:7},{value:"right",paraId:35,tocIndex:7},{value:"Whether to show the right small circle",paraId:35,tocIndex:7},{value:"Boolean",paraId:35,tocIndex:7},{value:"false",paraId:35,tocIndex:7},{value:" by default",paraId:35,tocIndex:7},{value:"size",paraId:35,tocIndex:7},{value:"The size of the small circles",paraId:35,tocIndex:7},{value:"Number",paraId:35,tocIndex:7},{value:"3",paraId:35,tocIndex:7},{value:" by default",paraId:35,tocIndex:7},{value:"fill",paraId:35,tocIndex:7},{value:"The filling color of the small circles",paraId:35,tocIndex:7},{value:"String",paraId:35,tocIndex:7},{value:"'#72CC4A'",paraId:35,tocIndex:7},{value:" by default",paraId:35,tocIndex:7},{value:"stroke",paraId:35,tocIndex:7},{value:"The stroke color of the small circles",paraId:35,tocIndex:7},{value:"String",paraId:35,tocIndex:7},{value:"'#72CC4A'",paraId:35,tocIndex:7},{value:" by default",paraId:35,tocIndex:7},{value:"lineWidth",paraId:35,tocIndex:7},{value:"The line width of the small circles",paraId:35,tocIndex:7},{value:"Number",paraId:35,tocIndex:7},{value:"1",paraId:35,tocIndex:7},{value:" by default",paraId:35,tocIndex:7},{value:"Base on the code in ",paraId:36,tocIndex:7},{value:"style",paraId:37,tocIndex:7},{value:" section, we add ",paraId:36,tocIndex:7},{value:"linkPoints",paraId:36,tocIndex:7},{value:" to ",paraId:36,tocIndex:7},{value:"defaultNode",paraId:36,tocIndex:7},{value:".",paraId:36,tocIndex:7},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for graph\n  defaultNode: {\n    // ... Other configurations for nodes\n    linkPoints: {\n      top: true,\n      bottom: true,\n      left: true,\n      right: true,\n      size: 5,\n      fill: '#fff',\n    },\n  },\n});\n// ...\n",paraId:38,tocIndex:7},{value:"preRect",paraId:39,tocIndex:8},{value:" configures the left rect of the rectModel node.",paraId:39,tocIndex:8},{value:"Name",paraId:40,tocIndex:8},{value:"Description",paraId:40,tocIndex:8},{value:"Type",paraId:40,tocIndex:8},{value:"Remark",paraId:40,tocIndex:8},{value:"show",paraId:40,tocIndex:8},{value:"Whether to show the left rect",paraId:40,tocIndex:8},{value:"Boolean",paraId:40,tocIndex:8},{value:"true",paraId:40,tocIndex:8},{value:" by default",paraId:40,tocIndex:8},{value:"width",paraId:40,tocIndex:8},{value:"The width of the left rect",paraId:40,tocIndex:8},{value:"Number",paraId:40,tocIndex:8},{value:"4",paraId:40,tocIndex:8},{value:" by default",paraId:40,tocIndex:8},{value:"fill",paraId:40,tocIndex:8},{value:"The filling color of the left rect",paraId:40,tocIndex:8},{value:"String",paraId:40,tocIndex:8},{value:"'#40a9ff'",paraId:40,tocIndex:8},{value:" by default",paraId:40,tocIndex:8},{value:"radius",paraId:40,tocIndex:8},{value:"The border radius of the left rect",paraId:40,tocIndex:8},{value:"Number",paraId:40,tocIndex:8},{value:"2",paraId:40,tocIndex:8},{value:" by default",paraId:40,tocIndex:8},{value:"Base on the code in ",paraId:41,tocIndex:8},{value:"style",paraId:42,tocIndex:8},{value:" section, we add ",paraId:41,tocIndex:8},{value:"icon",paraId:41,tocIndex:8},{value:" to ",paraId:41,tocIndex:8},{value:"defaultNode",paraId:41,tocIndex:8},{value:".",paraId:41,tocIndex:8},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for the graph\n  defaultNode: {\n    // ... Other configurations for nodes\n    preRect: {\n      // false means hiding it\n      show: true,\n      fill: '#f759ab',\n      width: 8,\n    },\n  },\n});\n// ...\n",paraId:43,tocIndex:8},{value:"logoIcon",paraId:44,tocIndex:9},{value:" and ",paraId:44,tocIndex:9},{value:"stateIcon",paraId:44,tocIndex:9},{value:" configure the left and right logo of the modelRect node. The configurations of them are the same.",paraId:44,tocIndex:9},{value:"Name",paraId:45,tocIndex:9},{value:"Description",paraId:45,tocIndex:9},{value:"Type",paraId:45,tocIndex:9},{value:"Remark",paraId:45,tocIndex:9},{value:"show",paraId:45,tocIndex:9},{value:"Whether to show the icon",paraId:45,tocIndex:9},{value:"Boolean",paraId:45,tocIndex:9},{value:"true",paraId:45,tocIndex:9},{value:" by default",paraId:45,tocIndex:9},{value:"img",paraId:45,tocIndex:9},{value:"The url of the icon image",paraId:45,tocIndex:9},{value:"String",paraId:45,tocIndex:9},{value:"- The default image for ",paraId:45,tocIndex:9},{value:"logoIcon",paraId:45,tocIndex:9},{value:" is ",paraId:45,tocIndex:9},{value:"- The default image for ",paraId:45,tocIndex:9},{value:"stateIcon",paraId:45,tocIndex:9},{value:" is ",paraId:45,tocIndex:9},{value:"width",paraId:45,tocIndex:9},{value:"The width of the icon",paraId:45,tocIndex:9},{value:"Number",paraId:45,tocIndex:9},{value:"16",paraId:45,tocIndex:9},{value:" by default",paraId:45,tocIndex:9},{value:"height",paraId:45,tocIndex:9},{value:"The height of the icon",paraId:45,tocIndex:9},{value:"Number",paraId:45,tocIndex:9},{value:"16",paraId:45,tocIndex:9},{value:" by default",paraId:45,tocIndex:9},{value:"offset",paraId:45,tocIndex:9},{value:"Adjust the left/right offset of the icon",paraId:45,tocIndex:9},{value:"Number",paraId:45,tocIndex:9},{value:"- The dfualt ",paraId:45,tocIndex:9},{value:"offset",paraId:45,tocIndex:9},{value:" of the left ",paraId:45,tocIndex:9},{value:"logoIcon",paraId:45,tocIndex:9},{value:" is ",paraId:45,tocIndex:9},{value:"0",paraId:45,tocIndex:9},{value:"- The dfualt ",paraId:45,tocIndex:9},{value:"offset",paraId:45,tocIndex:9},{value:" of the right ",paraId:45,tocIndex:9},{value:"stateIcon",paraId:45,tocIndex:9},{value:" is ",paraId:45,tocIndex:9},{value:"-5",paraId:45,tocIndex:9},{value:"Base on the code in ",paraId:46,tocIndex:9},{value:"style",paraId:47,tocIndex:9},{value:" section, we add ",paraId:46,tocIndex:9},{value:"logoIcon",paraId:46,tocIndex:9},{value:" and ",paraId:46,tocIndex:9},{value:"stateIcon",paraId:46,tocIndex:9},{value:" to ",paraId:46,tocIndex:9},{value:"defaultNode",paraId:46,tocIndex:9},{value:" to hide the left icon and change the image for right icon.",paraId:46,tocIndex:9},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for the graph\n  defaultNode: {\n    // ... Other configurations for nodes\n    logoIcon: {\n      show: false,\n    },\n    stateIcon: {\n      show: true,\n      img:\n        'https://gw.alipayobjects.com/zos/basement_prod/c781088a-c635-452a-940c-0173663456d4.svg',\n    },\n  },\n});\n// ...\n",paraId:48,tocIndex:9}]},34223:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"A built-in node Rect has the default style as below, the label is drawed on the center of it.",paraId:0},{value:"As stated in ",paraId:1,tocIndex:0},{value:"Built-in Nodes",paraId:2,tocIndex:0},{value:" , there are three methods to configure nodes: Configure nodes globally when instantiating a Graph; Configure nodes in their data; Configure nodes by ",paraId:1,tocIndex:0},{value:"graph.node(nodeFn)",paraId:1,tocIndex:0},{value:". Their priorities are:",paraId:1,tocIndex:0},{value:"graph.node(nodeFn)",paraId:3,tocIndex:0},{value:" > Configure in data > Configure globally",paraId:3,tocIndex:0},{value:"⚠️ Attention:",paraId:4,tocIndex:0},{value:" Expect for ",paraId:4,tocIndex:0},{value:"id",paraId:4,tocIndex:0},{value:", and ",paraId:4,tocIndex:0},{value:"label",paraId:4,tocIndex:0},{value:" which should be assigned to every single node data, the other configurations in ",paraId:4,tocIndex:0},{value:"The Common Property",paraId:5,tocIndex:0},{value:" and in each node type (refer to doc of each node type) support to be assigned by the three ways.",paraId:4,tocIndex:0},{value:"Assign ",paraId:6,tocIndex:1},{value:"type",paraId:6,tocIndex:1},{value:" to ",paraId:6,tocIndex:1},{value:"'rect'",paraId:6,tocIndex:1},{value:" in the ",paraId:6,tocIndex:1},{value:"defaultNode",paraId:6,tocIndex:1},{value:" object when instantiating a Graph:",paraId:6,tocIndex:1},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultNode: {\n    type: 'rect',\n    // Other configuraltions\n  },\n});\n",paraId:7,tocIndex:1},{value:"To configure different nodes with different properties, you can write the properties into the node data.",paraId:8,tocIndex:2},{value:"const data = {\n  nodes: [\n    {\n      id: 'node0',\n      type: 'rect',\n      //... // Other configurations\n    },\n    //... // Other nodes\n  ],\n  edges: [\n    //... // edges\n  ],\n};\n",paraId:9,tocIndex:2},{value:"The ",paraId:10,tocIndex:3},{value:"Node Common Properties",paraId:11,tocIndex:3},{value:" are available for Rect node, some special properties are shown below. The property with Object type will be described after the table:",paraId:10,tocIndex:3},{value:"Name",paraId:12,tocIndex:3},{value:"Description",paraId:12,tocIndex:3},{value:"Type",paraId:12,tocIndex:3},{value:"Remark",paraId:12,tocIndex:3},{value:"size",paraId:12,tocIndex:3},{value:"The size of the ellipse",paraId:12,tocIndex:3},{value:"Number / Array",paraId:12,tocIndex:3},{value:"When it is a number, the width and height are the same.",paraId:12,tocIndex:3},{value:"style",paraId:12,tocIndex:3},{value:"The default style of rect node",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"Correspond to the styles in Canvas",paraId:12,tocIndex:3},{value:"label",paraId:12,tocIndex:3},{value:"The text of the label",paraId:12,tocIndex:3},{value:"String",paraId:12,tocIndex:3},{value:"labelCfg",paraId:12,tocIndex:3},{value:"The configurations of the label",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"stateStyles",paraId:12,tocIndex:3},{value:"The styles in different states",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"Refer to ",paraId:12,tocIndex:3},{value:"Configure Styles for State",paraId:13,tocIndex:3},{value:"linkPoints",paraId:12,tocIndex:3},{value:"The link points ",paraId:12,tocIndex:3},{value:"in visual",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"They are invisible by default. It is usually used with the ",paraId:12,tocIndex:3},{value:"anchorPoints",paraId:14,tocIndex:3},{value:". The differences are described in ",paraId:12,tocIndex:3},{value:"linkPoints",paraId:15,tocIndex:3},{value:"The ",paraId:16,tocIndex:4},{value:"Node Common Styles",paraId:17,tocIndex:4},{value:" are available for Circle node.",paraId:16,tocIndex:4},{value:"style",paraId:16,tocIndex:4},{value:" is an object to configure the filling color, stroke, and other styles.",paraId:16,tocIndex:4},{value:"Name",paraId:18,tocIndex:4},{value:"Description",paraId:18,tocIndex:4},{value:"Type",paraId:18,tocIndex:4},{value:"Remark",paraId:18,tocIndex:4},{value:"radius",paraId:18,tocIndex:4},{value:"The border radius",paraId:18,tocIndex:4},{value:"Number",paraId:18,tocIndex:4},{value:"Rectangle with no border radius by default",paraId:18,tocIndex:4},{value:"stroke",paraId:18,tocIndex:4},{value:"The color of the stroke",paraId:18,tocIndex:4},{value:"String",paraId:18,tocIndex:4},{value:"lineWidth",paraId:18,tocIndex:4},{value:"The line width of the stroke",paraId:18,tocIndex:4},{value:"Number",paraId:18,tocIndex:4},{value:"1",paraId:18,tocIndex:4},{value:" by default",paraId:18,tocIndex:4},{value:"fill",paraId:18,tocIndex:4},{value:"The filling color",paraId:18,tocIndex:4},{value:"String",paraId:18,tocIndex:4},{value:"fillOpacity",paraId:18,tocIndex:4},{value:"The opacity",paraId:18,tocIndex:4},{value:"Number",paraId:18,tocIndex:4},{value:"1",paraId:18,tocIndex:4},{value:" by default",paraId:18,tocIndex:4},{value:"The following code shows how to configure the ",paraId:19,tocIndex:4},{value:"style",paraId:19,tocIndex:4},{value:" globally when instantiating a Graph.",paraId:19,tocIndex:4},{value:"const data = {\n  nodes: [\n    {\n      x: 100,\n      y: 100,\n      type: 'rect',\n      label: 'rect',\n    },\n  ],\n};\n\nconst graph = new G6.Graph({\n  container: 'mountNode',\n  width: 500,\n  height: 300,\n  defaultNode: {\n    // type: 'rect', // The type has been assigned in the data, we do not have to define it any more\n    style: {\n      fill: '#bae637',\n      stroke: '#eaff8f',\n      lineWidth: 5,\n      radius: 10,\n    },\n  },\n});\ngraph.data(data);\ngraph.render();\n",paraId:20,tocIndex:4},{value:"labelCfg",paraId:21,tocIndex:5},{value:" is an object to configure the label of the node. The ",paraId:21,tocIndex:5},{value:"Node Common Label Configurations",paraId:22,tocIndex:5},{value:" are available. Base on the code in ",paraId:21,tocIndex:5},{value:"style",paraId:23,tocIndex:5},{value:" section, we add ",paraId:21,tocIndex:5},{value:"labelCfg",paraId:21,tocIndex:5},{value:" to ",paraId:21,tocIndex:5},{value:"defaultNode",paraId:21,tocIndex:5},{value:".",paraId:21,tocIndex:5},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for graph\n  defaultNode: {\n    // ... Other properties for node\n    labelCfg: {\n      style: {\n        fill: '#9254de',\n        fontSize: 18,\n      },\n      position: 'bottom',\n    },\n  },\n});\n// ...\n",paraId:24,tocIndex:5},{value:"linkPoints",paraId:25,tocIndex:6},{value:" is an object to configure the small circles on the 「top, bottom, left, and right」.",paraId:25,tocIndex:6},{value:"⚠️Attention:",paraId:26,tocIndex:6},{value:" It is different from ",paraId:26,tocIndex:6},{value:"anchorPoints",paraId:26,tocIndex:6},{value:": ",paraId:26,tocIndex:6},{value:"anchorPoints",paraId:26,tocIndex:6},{value:" is an 「",paraId:26,tocIndex:6},{value:"array",paraId:26,tocIndex:6},{value:"」 that indicates the actual relative positions used to specify the join position of the relevant edge of the node (refer to ",paraId:26,tocIndex:6},{value:"anchorPoints",paraId:27,tocIndex:6},{value:"); ",paraId:26,tocIndex:6},{value:"linkPoints",paraId:26,tocIndex:6},{value:" is an object that indicates whether 「",paraId:26,tocIndex:6},{value:"render",paraId:26,tocIndex:6},{value:"」the four small circles, which do not connect the relevant edges. These two properties are often used together.",paraId:26,tocIndex:6},{value:"Name",paraId:28,tocIndex:6},{value:"Description",paraId:28,tocIndex:6},{value:"Type",paraId:28,tocIndex:6},{value:"Remark",paraId:28,tocIndex:6},{value:"top",paraId:28,tocIndex:6},{value:"Whether to show the top small circle",paraId:28,tocIndex:6},{value:"Boolean",paraId:28,tocIndex:6},{value:"false",paraId:28,tocIndex:6},{value:" by default",paraId:28,tocIndex:6},{value:"bottom",paraId:28,tocIndex:6},{value:"Whether to show the bototm small circle",paraId:28,tocIndex:6},{value:"Boolean",paraId:28,tocIndex:6},{value:"false",paraId:28,tocIndex:6},{value:" by default",paraId:28,tocIndex:6},{value:"left",paraId:28,tocIndex:6},{value:"Whether to show the left small circle",paraId:28,tocIndex:6},{value:"Boolean",paraId:28,tocIndex:6},{value:"false",paraId:28,tocIndex:6},{value:" by default",paraId:28,tocIndex:6},{value:"right",paraId:28,tocIndex:6},{value:"Whether to show the right small circle",paraId:28,tocIndex:6},{value:"Boolean",paraId:28,tocIndex:6},{value:"false",paraId:28,tocIndex:6},{value:" by default",paraId:28,tocIndex:6},{value:"size",paraId:28,tocIndex:6},{value:"The size of the small circles",paraId:28,tocIndex:6},{value:"Number",paraId:28,tocIndex:6},{value:"3",paraId:28,tocIndex:6},{value:" by default",paraId:28,tocIndex:6},{value:"fill",paraId:28,tocIndex:6},{value:"The filling color of the small circles",paraId:28,tocIndex:6},{value:"String",paraId:28,tocIndex:6},{value:"'#72CC4A'",paraId:28,tocIndex:6},{value:" by default",paraId:28,tocIndex:6},{value:"stroke",paraId:28,tocIndex:6},{value:"The stroke color of the small circles",paraId:28,tocIndex:6},{value:"String",paraId:28,tocIndex:6},{value:"'#72CC4A'",paraId:28,tocIndex:6},{value:" by default",paraId:28,tocIndex:6},{value:"lineWidth",paraId:28,tocIndex:6},{value:"The line width of the small circles",paraId:28,tocIndex:6},{value:"Number",paraId:28,tocIndex:6},{value:"1",paraId:28,tocIndex:6},{value:" by default",paraId:28,tocIndex:6},{value:"Base on the code in ",paraId:29,tocIndex:6},{value:"style",paraId:30,tocIndex:6},{value:" section, we add ",paraId:29,tocIndex:6},{value:"linkPoints",paraId:29,tocIndex:6},{value:" to ",paraId:29,tocIndex:6},{value:"defaultNode",paraId:29,tocIndex:6},{value:".",paraId:29,tocIndex:6},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for graph\n  defaultNode: {\n    // Other configurations for nodes\n    linkPoints: {\n      top: true,\n      bottom: true,\n      left: true,\n      right: true,\n      size: 5,\n      fill: '#fff',\n    },\n  },\n});\n// ...\n",paraId:31,tocIndex:6}]},51583:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"A built-in node Star has the default style as below, the label is drawed on the center of it.。",paraId:0},{value:"As stated in ",paraId:1,tocIndex:0},{value:"Built-in Nodes",paraId:2,tocIndex:0},{value:" , there are three methods to configure nodes: Configure nodes globally when instantiating a Graph; Configure nodes in their data; Configure nodes by ",paraId:1,tocIndex:0},{value:"graph.node(nodeFn)",paraId:1,tocIndex:0},{value:". Their priorities are:",paraId:1,tocIndex:0},{value:"graph.node(nodeFn)",paraId:3,tocIndex:0},{value:" > Configure in data > Configure globally",paraId:3,tocIndex:0},{value:"⚠️ Attention:",paraId:4,tocIndex:0},{value:" Expect for ",paraId:4,tocIndex:0},{value:"id",paraId:4,tocIndex:0},{value:", and ",paraId:4,tocIndex:0},{value:"label",paraId:4,tocIndex:0},{value:" which should be assigned to every single node data, the other configurations in ",paraId:4,tocIndex:0},{value:"The Common Property",paraId:5,tocIndex:0},{value:" and in each node type (refer to doc of each node type) support to be assigned by the three ways.",paraId:4,tocIndex:0},{value:"Assign ",paraId:6,tocIndex:1},{value:"type",paraId:6,tocIndex:1},{value:" to ",paraId:6,tocIndex:1},{value:"'star'",paraId:6,tocIndex:1},{value:" in the ",paraId:6,tocIndex:1},{value:"defaultNode",paraId:6,tocIndex:1},{value:" object when instantiating a Graph:",paraId:6,tocIndex:1},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultNode: {\n    type: 'star',\n    // ... Other configuraltions\n  },\n});\n",paraId:7,tocIndex:1},{value:"To configure different nodes with different properties, you can write the properties into the node data.",paraId:8,tocIndex:2},{value:"const data = {\n  nodes: [\n    {\n      id: 'node0',\n      type: 'star',\n      //... // Other configurations\n    },\n    //... // Other nodes\n  ],\n  edges: [\n    //... // edges\n  ],\n};\n",paraId:9,tocIndex:2},{value:"The ",paraId:10,tocIndex:3},{value:"Node Common Properties",paraId:11,tocIndex:3},{value:" are available for Star node, some special properties are shown below. The property with Object type will be described after the table:",paraId:10,tocIndex:3},{value:"Name",paraId:12,tocIndex:3},{value:"Description",paraId:12,tocIndex:3},{value:"Type",paraId:12,tocIndex:3},{value:"Remark",paraId:12,tocIndex:3},{value:"size",paraId:12,tocIndex:3},{value:"The size of the star",paraId:12,tocIndex:3},{value:"number",paraId:12,tocIndex:3},{value:"Array",paraId:12,tocIndex:3},{value:"innerR",paraId:12,tocIndex:3},{value:"The inner radius of the star",paraId:12,tocIndex:3},{value:"Number",paraId:12,tocIndex:3},{value:"Equals to ",paraId:12,tocIndex:3},{value:"size",paraId:12,tocIndex:3},{value:" * 3 / 8 by default",paraId:12,tocIndex:3},{value:"style",paraId:12,tocIndex:3},{value:"The default style of star node",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"Correspond to the styles in Canvas",paraId:12,tocIndex:3},{value:"label",paraId:12,tocIndex:3},{value:"The text of the label",paraId:12,tocIndex:3},{value:"String",paraId:12,tocIndex:3},{value:"labelCfg",paraId:12,tocIndex:3},{value:"The configurations of the label",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"stateStyles",paraId:12,tocIndex:3},{value:"The styles in different states",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"Refer to ",paraId:12,tocIndex:3},{value:"Configure Styles for State",paraId:13,tocIndex:3},{value:"linkPoints",paraId:12,tocIndex:3},{value:"The link points ",paraId:12,tocIndex:3},{value:"in visual",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"They are invisible by default. It is usually used with the ",paraId:12,tocIndex:3},{value:"anchorPoints",paraId:14,tocIndex:3},{value:". The differences are described in ",paraId:12,tocIndex:3},{value:"linkPoints",paraId:15,tocIndex:3},{value:"icon",paraId:12,tocIndex:3},{value:"The configurations of the icon on the star node",paraId:12,tocIndex:3},{value:"Object",paraId:12,tocIndex:3},{value:"It is invisible by default",paraId:12,tocIndex:3},{value:"### style",paraId:16,tocIndex:3},{value:"The ",paraId:17,tocIndex:3},{value:"Node Common Styles",paraId:18,tocIndex:3},{value:" are available for Circle node.",paraId:17,tocIndex:3},{value:"style",paraId:17,tocIndex:3},{value:" is an object to configure the filling color, stroke, and other styles. The following code shows how to configure the ",paraId:17,tocIndex:3},{value:"style",paraId:17,tocIndex:3},{value:" globally when instantiating a Graph.",paraId:17,tocIndex:3},{value:"const data = {\n  nodes: [\n    {\n      x: 100,\n      y: 100,\n      type: 'star',\n      label: 'star',\n    },\n  ],\n};\nconst graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultNode: {\n    // type: 'star',   // The type has been assigned in the data, we do not have to define it any more\n    size: 80,\n    style: {\n      fill: '#bae637',\n      stroke: '#eaff8f',\n      lineWidth: 5,\n    },\n  },\n});\ngraph.data(data);\ngraph.render();\n",paraId:19,tocIndex:3},{value:"labelCfg",paraId:20,tocIndex:4},{value:" is an object to configure the label of the node. The ",paraId:20,tocIndex:4},{value:"Node Common Label Configurations",paraId:21,tocIndex:4},{value:" are available. Base on the code in ",paraId:20,tocIndex:4},{value:"style",paraId:22,tocIndex:4},{value:" section, we add ",paraId:20,tocIndex:4},{value:"labelCfg",paraId:20,tocIndex:4},{value:" to ",paraId:20,tocIndex:4},{value:"defaultNode",paraId:20,tocIndex:4},{value:".",paraId:20,tocIndex:4},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for graph\n  defaultNode: {\n    // ... Other properties for node\n    labelCfg: {\n      style: {\n        fill: '#9254de',\n        fontSize: 18,\n      },\n    },\n  },\n});\n// ...\n",paraId:23,tocIndex:4},{value:"linkPoints",paraId:24,tocIndex:5},{value:" is an object to configure the small circles on the 「top, left bottom, right bottom, left, and right」.",paraId:24,tocIndex:5},{value:"⚠️Attention:",paraId:25,tocIndex:5},{value:" It is different from ",paraId:25,tocIndex:5},{value:"anchorPoints",paraId:25,tocIndex:5},{value:": ",paraId:25,tocIndex:5},{value:"anchorPoints",paraId:25,tocIndex:5},{value:" is an 「",paraId:25,tocIndex:5},{value:"array",paraId:25,tocIndex:5},{value:"」 that indicates the actual relative positions used to specify the join position of the relevant edge of the node (refer to ",paraId:25,tocIndex:5},{value:"anchorPoints",paraId:26,tocIndex:5},{value:"); ",paraId:25,tocIndex:5},{value:"linkPoints",paraId:25,tocIndex:5},{value:" is an object that indicates whether 「",paraId:25,tocIndex:5},{value:"render",paraId:25,tocIndex:5},{value:"」the four small circles, which do not connect the relevant edges. These two properties are often used together.",paraId:25,tocIndex:5},{value:"Name",paraId:27,tocIndex:5},{value:"Description",paraId:27,tocIndex:5},{value:"Type",paraId:27,tocIndex:5},{value:"Remark",paraId:27,tocIndex:5},{value:"top",paraId:27,tocIndex:5},{value:"Whether to show the top small circle",paraId:27,tocIndex:5},{value:"Boolean",paraId:27,tocIndex:5},{value:"false",paraId:27,tocIndex:5},{value:" by default",paraId:27,tocIndex:5},{value:"leftBottom",paraId:27,tocIndex:5},{value:"Whether to show the left bottom small circle",paraId:27,tocIndex:5},{value:"Boolean",paraId:27,tocIndex:5},{value:"false",paraId:27,tocIndex:5},{value:" by default. It is a special property for star node",paraId:27,tocIndex:5},{value:"rightBottom",paraId:27,tocIndex:5},{value:"Whether to show the right bottom small circle",paraId:27,tocIndex:5},{value:"Boolean",paraId:27,tocIndex:5},{value:"false",paraId:27,tocIndex:5},{value:" by default. It is a special property for star node",paraId:27,tocIndex:5},{value:"left",paraId:27,tocIndex:5},{value:"Whether to show the left small circle",paraId:27,tocIndex:5},{value:"Boolean",paraId:27,tocIndex:5},{value:"false",paraId:27,tocIndex:5},{value:" by default",paraId:27,tocIndex:5},{value:"right",paraId:27,tocIndex:5},{value:"Whether to show the right small circle",paraId:27,tocIndex:5},{value:"Boolean",paraId:27,tocIndex:5},{value:"false",paraId:27,tocIndex:5},{value:" by default",paraId:27,tocIndex:5},{value:"size",paraId:27,tocIndex:5},{value:"The size of the small circles",paraId:27,tocIndex:5},{value:"Number",paraId:27,tocIndex:5},{value:"3",paraId:27,tocIndex:5},{value:" by default",paraId:27,tocIndex:5},{value:"fill",paraId:27,tocIndex:5},{value:"The filling color of the small circles",paraId:27,tocIndex:5},{value:"String",paraId:27,tocIndex:5},{value:"'#72CC4A'",paraId:27,tocIndex:5},{value:" by default",paraId:27,tocIndex:5},{value:"stroke",paraId:27,tocIndex:5},{value:"The stroke color of the small circles",paraId:27,tocIndex:5},{value:"String",paraId:27,tocIndex:5},{value:"'#72CC4A'",paraId:27,tocIndex:5},{value:" by default",paraId:27,tocIndex:5},{value:"lineWidth",paraId:27,tocIndex:5},{value:"The line width of the small circles",paraId:27,tocIndex:5},{value:"Number",paraId:27,tocIndex:5},{value:"1",paraId:27,tocIndex:5},{value:" by default",paraId:27,tocIndex:5},{value:"Base on the code in ",paraId:28,tocIndex:5},{value:"style",paraId:29,tocIndex:5},{value:" section, we add ",paraId:28,tocIndex:5},{value:"linkPoints",paraId:28,tocIndex:5},{value:" to ",paraId:28,tocIndex:5},{value:"defaultNode",paraId:28,tocIndex:5},{value:".",paraId:28,tocIndex:5},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for graph\n  defaultNode: {\n    // ... Other configurations for nodes\n    linkPoints: {\n      top: true,\n      left: true,\n      right: true,\n      leftBottom: true,\n      rightBottom: true,\n      size: 5,\n      fill: '#fff',\n    },\n  },\n});\n// ...\n",paraId:30,tocIndex:5},{value:"icon",paraId:31,tocIndex:6},{value:" is an object to configure the icon on the node.",paraId:31,tocIndex:6},{value:"Name",paraId:32,tocIndex:6},{value:"Description",paraId:32,tocIndex:6},{value:"Type",paraId:32,tocIndex:6},{value:"Remark",paraId:32,tocIndex:6},{value:"show",paraId:32,tocIndex:6},{value:"Whether to show the icon",paraId:32,tocIndex:6},{value:"Boolean",paraId:32,tocIndex:6},{value:"false",paraId:32,tocIndex:6},{value:" by default",paraId:32,tocIndex:6},{value:"width",paraId:32,tocIndex:6},{value:"The width of the icon",paraId:32,tocIndex:6},{value:"Number",paraId:32,tocIndex:6},{value:"16",paraId:32,tocIndex:6},{value:" by default",paraId:32,tocIndex:6},{value:"height",paraId:32,tocIndex:6},{value:"The height of the icon",paraId:32,tocIndex:6},{value:"Number",paraId:32,tocIndex:6},{value:"16",paraId:32,tocIndex:6},{value:" by default",paraId:32,tocIndex:6},{value:"img",paraId:32,tocIndex:6},{value:"The image url or base64 of the icon",paraId:32,tocIndex:6},{value:"String",paraId:32,tocIndex:6},{value:"Configuring it means the icon is an image",paraId:32,tocIndex:6},{value:"text",paraId:32,tocIndex:6},{value:"iconfont for the icon",paraId:32,tocIndex:6},{value:"String",paraId:32,tocIndex:6},{value:"Configuring it means the icon is an iconfont",paraId:32,tocIndex:6},{value:"Base on the code in ",paraId:33,tocIndex:6},{value:"style",paraId:34,tocIndex:6},{value:" section, we add ",paraId:33,tocIndex:6},{value:"icon",paraId:33,tocIndex:6},{value:" to ",paraId:33,tocIndex:6},{value:"defaultNode",paraId:33,tocIndex:6},{value:".",paraId:33,tocIndex:6},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for the graph\n  defaultNode: {\n    // ... Other configurations for nodes\n    icon: {\n      show: true,\n      width: 25,\n      height: 25,\n      // img: '...', The image url of the icon\n      // text: '...', Use an iconfont for the icon\n    },\n  },\n});\n// ...\n",paraId:35,tocIndex:6}]},29583:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"A built-in node Triangle has the default style as below, the label is drawed on the center of it.",paraId:0,tocIndex:0},{value:"As stated in ",paraId:1,tocIndex:1},{value:"Built-in Nodes",paraId:2,tocIndex:1},{value:" , there are three methods to configure nodes: Configure nodes globally when instantiating a Graph; Configure nodes in their data; Configure nodes by ",paraId:1,tocIndex:1},{value:"graph.node(nodeFn)",paraId:1,tocIndex:1},{value:". Their priorities are:",paraId:1,tocIndex:1},{value:"graph.node(nodeFn)",paraId:3,tocIndex:1},{value:" > Configure in data > Configure globally",paraId:3,tocIndex:1},{value:"⚠️ Attention:",paraId:4,tocIndex:1},{value:" Expect for ",paraId:4,tocIndex:1},{value:"id",paraId:4,tocIndex:1},{value:", and ",paraId:4,tocIndex:1},{value:"label",paraId:4,tocIndex:1},{value:" which should be assigned to every single node data, the other configurations in ",paraId:4,tocIndex:1},{value:"The Common Property",paraId:5,tocIndex:1},{value:" and in each node type (refer to doc of each node type) support to be assigned by the three ways.",paraId:4,tocIndex:1},{value:"Assign ",paraId:6,tocIndex:2},{value:"type",paraId:6,tocIndex:2},{value:" to ",paraId:6,tocIndex:2},{value:"'triangle'",paraId:6,tocIndex:2},{value:" in the ",paraId:6,tocIndex:2},{value:"defaultNode",paraId:6,tocIndex:2},{value:" object when instantiating a Graph:",paraId:6,tocIndex:2},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultNode: {\n    type: 'triangle', // The type of the node\n    // ... Other configuraltions\n  },\n});\n",paraId:7,tocIndex:2},{value:"To configure different nodes with different properties, you can write the properties into the node data.",paraId:8,tocIndex:3},{value:"const data = {\n  nodes: [\n    {\n      id: 'node0',\n      type: 'triangle', // The tyep of the node\n      //... // Other configurations\n    },\n    //... // Other nodes\n  ],\n  edges: [\n    //... // edges\n  ],\n};\n",paraId:9,tocIndex:3},{value:"The ",paraId:10,tocIndex:4},{value:"Node Common Properties",paraId:11,tocIndex:4},{value:" are available for Triangle node, some special properties are shown below. The spetial property type will be described after the table:",paraId:10,tocIndex:4},{value:"Name",paraId:12,tocIndex:4},{value:"Description",paraId:12,tocIndex:4},{value:"Type",paraId:12,tocIndex:4},{value:"Remark",paraId:12,tocIndex:4},{value:"size",paraId:12,tocIndex:4},{value:"The length of side of the equilateral triangle",paraId:12,tocIndex:4},{value:"Number",paraId:12,tocIndex:4},{value:"Array",paraId:12,tocIndex:4},{value:"direction",paraId:12,tocIndex:4},{value:"The direction of the triangle",paraId:12,tocIndex:4},{value:"String",paraId:12,tocIndex:4},{value:"Options: ",paraId:12,tocIndex:4},{value:"'up'",paraId:12,tocIndex:4},{value:", ",paraId:12,tocIndex:4},{value:"'down'",paraId:12,tocIndex:4},{value:", ",paraId:12,tocIndex:4},{value:"'left'",paraId:12,tocIndex:4},{value:", ",paraId:12,tocIndex:4},{value:"'right'",paraId:12,tocIndex:4},{value:". ",paraId:12,tocIndex:4},{value:"'up'",paraId:12,tocIndex:4},{value:" by default",paraId:12,tocIndex:4},{value:"style",paraId:12,tocIndex:4},{value:"The default style of triangle node",paraId:12,tocIndex:4},{value:"Object",paraId:12,tocIndex:4},{value:"Correspond to the styles in Canvas",paraId:12,tocIndex:4},{value:"label",paraId:12,tocIndex:4},{value:"The text of the label",paraId:12,tocIndex:4},{value:"String",paraId:12,tocIndex:4},{value:"labelCfg",paraId:12,tocIndex:4},{value:"The configurations of the label",paraId:12,tocIndex:4},{value:"Object",paraId:12,tocIndex:4},{value:"stateStyles",paraId:12,tocIndex:4},{value:"The styles in different states",paraId:12,tocIndex:4},{value:"Object",paraId:12,tocIndex:4},{value:"Refer to ",paraId:12,tocIndex:4},{value:"Configure Styles for State",paraId:13,tocIndex:4},{value:"linkPoints",paraId:12,tocIndex:4},{value:"The link points ",paraId:12,tocIndex:4},{value:"in visual",paraId:12,tocIndex:4},{value:"Object",paraId:12,tocIndex:4},{value:"They are invisible by default. It is usually used with the ",paraId:12,tocIndex:4},{value:"anchorPoints",paraId:14,tocIndex:4},{value:". The differences are described in ",paraId:12,tocIndex:4},{value:"linkPoints",paraId:15,tocIndex:4},{value:"icon",paraId:12,tocIndex:4},{value:"The configurations of the icon on the triangle node",paraId:12,tocIndex:4},{value:"Object",paraId:12,tocIndex:4},{value:"It is invisible by default",paraId:12,tocIndex:4},{value:"It is a string with options: ",paraId:16,tocIndex:5},{value:"'``up'",paraId:16,tocIndex:5},{value:", ",paraId:16,tocIndex:5},{value:"'down'",paraId:16,tocIndex:5},{value:", ",paraId:16,tocIndex:5},{value:"'left'",paraId:16,tocIndex:5},{value:", and ",paraId:16,tocIndex:5},{value:"'right'",paraId:16,tocIndex:5},{value:". ",paraId:16,tocIndex:5},{value:"'up'",paraId:16,tocIndex:5},{value:" by default. The following code shows how to configure the ",paraId:16,tocIndex:5},{value:"direction",paraId:16,tocIndex:5},{value:" globally when instantiating a Graph.",paraId:16,tocIndex:5},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultNode: {\n    type: 'triangle',\n    direction: 'down',\n  },\n});\n",paraId:17,tocIndex:5},{value:"The results with ",paraId:18,tocIndex:5},{value:"'up'",paraId:18,tocIndex:5},{value:", ",paraId:18,tocIndex:5},{value:"'down'",paraId:18,tocIndex:5},{value:", ",paraId:18,tocIndex:5},{value:"'left'",paraId:18,tocIndex:5},{value:", ",paraId:18,tocIndex:5},{value:"'right'",paraId:18,tocIndex:5},{value:" as ",paraId:18,tocIndex:5},{value:"direction",paraId:18,tocIndex:5},{value:".",paraId:18,tocIndex:5},{value:"The ",paraId:19,tocIndex:6},{value:"Node Common Styles",paraId:20,tocIndex:6},{value:" are available for Circle node.",paraId:19,tocIndex:6},{value:"style",paraId:19,tocIndex:6},{value:" is an object to configure the filling color, stroke, and other styles. The following code shows how to configure the ",paraId:19,tocIndex:6},{value:"style",paraId:19,tocIndex:6},{value:" globally when instantiating a Graph.",paraId:19,tocIndex:6},{value:"const data = {\n  nodes: [\n    {\n      x: 100,\n      y: 100,\n      type: 'triangle',\n      label: 'triangle',\n    },\n  ],\n};\nconst graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultNode: {\n    // type: 'triangle', // The type has been assigned in the data, we do not have to define it any more\n    direction: 'up',\n    size: 100,\n    style: {\n      fill: '#bae637',\n      stroke: '#eaff8f',\n      lineWidth: 5,\n    },\n  },\n});\ngraph.data(data);\ngraph.render();\n",paraId:21,tocIndex:6},{value:"labelCfg",paraId:22,tocIndex:7},{value:" is an object to configure the label of the node. The ",paraId:22,tocIndex:7},{value:"Node Common Label Configurations",paraId:23,tocIndex:7},{value:" are available. Base on the code in ",paraId:22,tocIndex:7},{value:"style",paraId:24,tocIndex:7},{value:" section, we add ",paraId:22,tocIndex:7},{value:"labelCfg",paraId:22,tocIndex:7},{value:" to ",paraId:22,tocIndex:7},{value:"defaultNode",paraId:22,tocIndex:7},{value:".",paraId:22,tocIndex:7},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for graph\n  defaultNode: {\n    // ... Other properties for node\n    labelCfg: {\n      position: 'center',\n      style: {\n        fill: '#9254de',\n        fontSize: 18,\n      },\n    },\n  },\n});\n// ...\n",paraId:25,tocIndex:7},{value:"linkPoints",paraId:26,tocIndex:8},{value:" is an object to configure the small circles on the 「top, left, and right」.",paraId:26,tocIndex:8},{value:"⚠️Attention:",paraId:27,tocIndex:8},{value:" It is different from ",paraId:27,tocIndex:8},{value:"anchorPoints",paraId:27,tocIndex:8},{value:": ",paraId:27,tocIndex:8},{value:"anchorPoints",paraId:27,tocIndex:8},{value:" is an 「",paraId:27,tocIndex:8},{value:"array",paraId:27,tocIndex:8},{value:"」 that indicates the actual relative positions used to specify the join position of the relevant edge of the node (refer to ",paraId:27,tocIndex:8},{value:"anchorPoints",paraId:28,tocIndex:8},{value:"); ",paraId:27,tocIndex:8},{value:"linkPoints",paraId:27,tocIndex:8},{value:" is an object that indicates whether 「",paraId:27,tocIndex:8},{value:"render",paraId:27,tocIndex:8},{value:"」the four small circles, which do not connect the relevant edges. These two properties are often used together.",paraId:27,tocIndex:8},{value:"Name",paraId:29,tocIndex:8},{value:"Description",paraId:29,tocIndex:8},{value:"Type",paraId:29,tocIndex:8},{value:"Remark",paraId:29,tocIndex:8},{value:"top",paraId:29,tocIndex:8},{value:"Whether to show the top small circle",paraId:29,tocIndex:8},{value:"Boolean",paraId:29,tocIndex:8},{value:"false",paraId:29,tocIndex:8},{value:" by default",paraId:29,tocIndex:8},{value:"left",paraId:29,tocIndex:8},{value:"Whether to show the left small circle",paraId:29,tocIndex:8},{value:"Boolean",paraId:29,tocIndex:8},{value:"false",paraId:29,tocIndex:8},{value:" by default",paraId:29,tocIndex:8},{value:"right",paraId:29,tocIndex:8},{value:"Whether to show the right small circle",paraId:29,tocIndex:8},{value:"Boolean",paraId:29,tocIndex:8},{value:"false",paraId:29,tocIndex:8},{value:" by default",paraId:29,tocIndex:8},{value:"size",paraId:29,tocIndex:8},{value:"The size of the small circles",paraId:29,tocIndex:8},{value:"Number",paraId:29,tocIndex:8},{value:"3",paraId:29,tocIndex:8},{value:" by default",paraId:29,tocIndex:8},{value:"fill",paraId:29,tocIndex:8},{value:"The filling color of the small circles",paraId:29,tocIndex:8},{value:"String",paraId:29,tocIndex:8},{value:"'#72CC4A'",paraId:29,tocIndex:8},{value:" by default",paraId:29,tocIndex:8},{value:"stroke",paraId:29,tocIndex:8},{value:"The stroke color of the small circles",paraId:29,tocIndex:8},{value:"String",paraId:29,tocIndex:8},{value:"'#72CC4A'",paraId:29,tocIndex:8},{value:" by default",paraId:29,tocIndex:8},{value:"lineWidth",paraId:29,tocIndex:8},{value:"The line width of the small circles",paraId:29,tocIndex:8},{value:"Number",paraId:29,tocIndex:8},{value:"1",paraId:29,tocIndex:8},{value:" by default",paraId:29,tocIndex:8},{value:"Base on the code in ",paraId:30,tocIndex:8},{value:"style",paraId:31,tocIndex:8},{value:" section, we add ",paraId:30,tocIndex:8},{value:"linkPoints",paraId:30,tocIndex:8},{value:" to ",paraId:30,tocIndex:8},{value:"defaultNode",paraId:30,tocIndex:8},{value:".",paraId:30,tocIndex:8},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for graph\n  defaultNode: {\n    // ... Other configurations for nodes\n    linkPoints: {\n      top: true,\n      bottom: true,\n      left: true,\n      right: true,\n      fill: '#fff',\n      size: 5,\n    },\n  },\n});\n// ...\n",paraId:32,tocIndex:8},{value:"icon",paraId:33,tocIndex:9},{value:" is an object to configure the icon on the node.",paraId:33,tocIndex:9},{value:"Name",paraId:34,tocIndex:9},{value:"Description",paraId:34,tocIndex:9},{value:"Type",paraId:34,tocIndex:9},{value:"Remark",paraId:34,tocIndex:9},{value:"show",paraId:34,tocIndex:9},{value:"Whether to show the icon",paraId:34,tocIndex:9},{value:"Boolean",paraId:34,tocIndex:9},{value:"false",paraId:34,tocIndex:9},{value:" by default",paraId:34,tocIndex:9},{value:"width",paraId:34,tocIndex:9},{value:"The width of the icon",paraId:34,tocIndex:9},{value:"Number",paraId:34,tocIndex:9},{value:"16",paraId:34,tocIndex:9},{value:" by default",paraId:34,tocIndex:9},{value:"height",paraId:34,tocIndex:9},{value:"The height of the icon",paraId:34,tocIndex:9},{value:"Number",paraId:34,tocIndex:9},{value:"16",paraId:34,tocIndex:9},{value:" by default",paraId:34,tocIndex:9},{value:"img",paraId:34,tocIndex:9},{value:"The image url or base64 of the icon",paraId:34,tocIndex:9},{value:"String",paraId:34,tocIndex:9},{value:"Configuring it means the icon is an image",paraId:34,tocIndex:9},{value:"text",paraId:34,tocIndex:9},{value:"iconfont for the icon",paraId:34,tocIndex:9},{value:"String",paraId:34,tocIndex:9},{value:"Configuring it means the icon is an iconfont",paraId:34,tocIndex:9},{value:"offset",paraId:34,tocIndex:9},{value:"The offset of the icon",paraId:34,tocIndex:9},{value:"Number",paraId:34,tocIndex:9},{value:"0",paraId:34,tocIndex:9},{value:" by default. It is a special property for triangle node",paraId:34,tocIndex:9},{value:"Base on the code in ",paraId:35,tocIndex:9},{value:"style",paraId:36,tocIndex:9},{value:" section, we add ",paraId:35,tocIndex:9},{value:"icon",paraId:35,tocIndex:9},{value:" to ",paraId:35,tocIndex:9},{value:"defaultNode",paraId:35,tocIndex:9},{value:".",paraId:35,tocIndex:9},{value:"const data = {\n  // ... data\n};\nconst graph = new G6.Graph({\n  // ... Other configurations for the graph\n  defaultNode: {\n    // ... Other configurations for nodes\n    icon: {\n      show: true,\n      width: 30,\n      height: 30,\n      offset: 20,\n      // img: '...', The image url of the icon\n      // text: '...', Use an iconfont for the icon\n    },\n  },\n});\n// ...\n",paraId:37,tocIndex:9}]},27959:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"G6 provides abundant ",paraId:0},{value:"Built-in Nodes",paraId:1},{value:", including ",paraId:0},{value:"circle",paraId:2},{value:", [rect](/en/docs/manual/middle/elements/nodes/built-in/rect, ",paraId:0},{value:"ellipse",paraId:3},{value:", ",paraId:0},{value:"diamond",paraId:4},{value:", ",paraId:0},{value:"triangle",paraId:5},{value:", ",paraId:0},{value:"star",paraId:6},{value:", ",paraId:0},{value:"image",paraId:7},{value:", ",paraId:0},{value:"modelRect",paraId:8},{value:". Besides, the custom machanism allows the users to design their own type of nodes by ",paraId:0},{value:"G6.registerNode(typeName: string, nodeDefinition: object, extendedNodeType?: string)",paraId:0},{value:". A node with complex graphics shapes, complex interactions, fantastic animations can be implemented easily. For the parameters:",paraId:0},{value:"typeName",paraId:9},{value:": the name of the new node type;",paraId:9},{value:"extendedNodeType",paraId:9},{value:": The name of the existing type that will be extended, which can be a built-in node type, or an existing custom node type. When it is not assigned, the custom node will not extend any existing node type;",paraId:9},{value:"nodeDefinition",paraId:9},{value:": The definition of the new node type. The required options can be found at ",paraId:9},{value:"Custom Mechanism API",paraId:10},{value:". When the ",paraId:9},{value:"extendedNodeType",paraId:9},{value:" is assigned, the functions which are not rewritten will extend from the type with name ",paraId:9},{value:"extendedNodeType",paraId:9},{value:".",paraId:9},{value:"Noted",paraId:11},{value:" that if the ",paraId:11},{value:"extendedNodeType",paraId:11},{value:" is assigned, the required functions such as ",paraId:11},{value:"draw",paraId:11},{value:", ",paraId:11},{value:"update",paraId:11},{value:", and ",paraId:11},{value:"setState",paraId:11},{value:" will extend from ",paraId:11},{value:"extendedNodeType",paraId:11},{value:" unless they are rewritten in ",paraId:11},{value:"nodeDefinition",paraId:11},{value:". Due to this mechanism, a question is often fed back:",paraId:11},{value:"Q: when the custom node/edge is updated, the re-draw logic is not the same as ",paraId:12},{value:"draw",paraId:12},{value:" or ",paraId:12},{value:"drawShape",paraId:12},{value:" function defined in ",paraId:12},{value:"nodeDefinition",paraId:12},{value:". e.g., some shapes are not updated as expected, and some text shapes show up.",paraId:12},{value:"A: Since the ",paraId:12},{value:"extendedNodeType",paraId:12},{value:" is assigned, and the ",paraId:12},{value:"update",paraId:12},{value:" is not implemented in ",paraId:12},{value:"extendedNodeType",paraId:12},{value:", the ",paraId:12},{value:"update",paraId:12},{value:" of the extended node type will be called when updating the node/edge, whose logic might be different from the ",paraId:12},{value:"draw",paraId:12},{value:" or ",paraId:12},{value:"drawShape",paraId:12},{value:" defined by yourself. To avoid this problem, you can override the ",paraId:12},{value:"update",paraId:12},{value:" by ",paraId:12},{value:"undefined",paraId:12},{value:" in ",paraId:12},{value:"nodeDefinition",paraId:12},{value:". When ",paraId:12},{value:"update",paraId:12},{value:" is ",paraId:12},{value:"undefined",paraId:12},{value:", the ",paraId:12},{value:"draw",paraId:12},{value:" or ",paraId:12},{value:"drawShape",paraId:12},{value:" will be called when updating the node/edge.",paraId:12},{value:"In this document, we will introduce the custom node mechanism by five examples: ",paraId:13},{value:" ",paraId:13},{value:"1. Register a brand new node: ",paraId:13},{value:"Draw the graphics; Optimize the performance. ",paraId:13},{value:" ",paraId:13},{value:"2. Register a node by extending a built-in node: ",paraId:13},{value:"Add extra graphics shape; Add animation. ",paraId:13},{value:" ",paraId:13},{value:"3. Adjust the anchorPoints(link points);",paraId:13},{value:" ",paraId:13},{value:" ",paraId:13},{value:"4. Register a node with state styles: ",paraId:13},{value:"Response the states change by styles and animations ",paraId:13},{value:"5. Custom Node with DOM ",paraId:13},{value:"As stated in ",paraId:14},{value:"Shape",paraId:15},{value:", there are two points should be satisfied when customize a node:",paraId:14},{value:"Controll the life cycle of the node;",paraId:16},{value:"Analyze the input data and show it by graphics.",paraId:16},{value:"The API of cumstom node:",paraId:17},{value:"G6.registerNode(\n  'nodeName',\n  {\n    options: {\n      style: {},\n      stateStyles: {\n        hover: {},\n        selected: {},\n      },\n    },\n    /**\n     * Draw the node with label\n     * @param  {Object} cfg The configurations of the node\n     * @param  {G.Group} group Graphics group, the container of the shapes of the node\n     * @return {G.Shape} The keyShape of the node. It can be obtained by node.get('keyShape')\n     */\n    draw(cfg, group) {},\n    /**\n     * The extra operations after drawing the node. There is no operation in this function by default\n     * @param  {Object} cfg The configurations of the node\n     * @param  {G.Group} group Graphics group, the container of the shapes of the node\n     */\n    afterDraw(cfg, group) {},\n    /**\n     * Update the node and its label\n     * @override\n     * @param  {Object} cfg The configurations of the node\n     * @param  {Node} node The node item\n     */\n    update(cfg, node) {},\n    /**\n     * The operations after updating the node. It is combined with afterDraw generally\n     * @override\n     * @param  {Object} cfg The configurations of the node\n     * @param  {Node} node The node item\n     */\n    afterUpdate(cfg, node) {},\n    /**\n     * Should be rewritten when you want to response the state changes by animation.\n     * Responsing the state changes by styles can be configured, which is described in the document Middle-Behavior & Event-State\n     * @param  {String} name The name of the state\n     * @param  {Object} value The value of the state\n     * @param  {Node} node The node item\n     */\n    setState(name, value, node) {},\n    /**\n     * Get the anchorPoints(link points for related edges)\n     * @param  {Object} cfg The configurations of the node\n     * @return {Array|null} The array of anchorPoints(link points for related edges). Null means there are no anchorPoints\n     */\n    getAnchorPoints(cfg) {},\n  },\n  extendedNodeType,\n);\n",paraId:18},{value:"   ",paraId:19},{value:"⚠️Attention:",paraId:19},{value:" ",paraId:19},{value:"draw",paraId:20},{value:": it is required if the custom node does not extend any parent;",paraId:20},{value:"Coordinate system: The coordinate system of the shapes inside the custom node is a ",paraId:20},{value:"sub coordinate system relating to itself",paraId:20},{value:", which means the ",paraId:20},{value:"(0, 0)",paraId:20},{value:" is the center of the node. And the coordinates of the node is related to the whole canvas, which is controled by the group contains it and users have no need to use it when customing a node type. When adding a ",paraId:20},{value:"rect",paraId:20},{value:" shape into a custom node, be caution that its x and y should be minused half of its width and height. See the detail in ",paraId:20},{value:"Register a Bran-new Node",paraId:21},{value:";",paraId:20},{value:"update",paraId:20},{value:":\n",paraId:20},{value:"When the ",paraId:22},{value:"update",paraId:22},{value:" function is not undefined: If user has defined the third parameter ",paraId:22},{value:"extendedNodeType",paraId:22},{value:" of ",paraId:22},{value:"registerNode",paraId:22},{value:", which means extending a built-in node type, the ",paraId:22},{value:"update",paraId:22},{value:" function of the extended node type of the custom node will be executed once the node is updated; If the third parameter of ",paraId:22},{value:"registerNode",paraId:22},{value:" is not assigned, the ",paraId:22},{value:"draw",paraId:22},{value:" function of the custom node will be executed instead;",paraId:22},{value:"When the ",paraId:22},{value:"update",paraId:22},{value:" function is defined, whether the third parameter of ",paraId:22},{value:"registerNode",paraId:22},{value:" is defined, the ",paraId:22},{value:"update",paraId:22},{value:" function will be executed when the node is updated.",paraId:22},{value:"afterDraw",paraId:20},{value:" and ",paraId:20},{value:"afterUpdate",paraId:20},{value:": they are used for extending the exited nodes in general. e.g. adding extra image on rect node, adding animation on a circle node, ...;",paraId:20},{value:"setState",paraId:20},{value:" should be override when you want to response the state changes by animation. Responsing the state changes by simple styles can be achieved by ",paraId:20},{value:"Configure Styles for State",paraId:23},{value:";",paraId:20},{value:"getAnchorPoints",paraId:20},{value:": it is only required when you want to contrain the link points for nodes and their related edges. The anchorPoints can be assigned in the node data as well.",paraId:20},{value:"Now, we are going to register a diamond node:",paraId:24,tocIndex:1},{value:"Although there is a built-in diamond node in G6, we implement it here to override it for demonstration.",paraId:25,tocIndex:1},{value:"   ",paraId:26,tocIndex:1},{value:"⚠️ Attention:",paraId:26,tocIndex:1},{value:" From the following code, you will understand that the coordinates of the sub shapes of the custom node is related to itself, which means the ",paraId:26,tocIndex:1},{value:"(0, 0)",paraId:26,tocIndex:1},{value:" is the center of the node. E.g. the ",paraId:26,tocIndex:1},{value:"x",paraId:26,tocIndex:1},{value:" and ",paraId:26,tocIndex:1},{value:"y",paraId:26,tocIndex:1},{value:" of the ",paraId:26,tocIndex:1},{value:"'text'",paraId:26,tocIndex:1},{value:" shape are both 0, which means the shape is on the center of the node; The ",paraId:26,tocIndex:1},{value:"path",paraId:26,tocIndex:1},{value:" attribute of ",paraId:26,tocIndex:1},{value:"'path'",paraId:26,tocIndex:1},{value:" is also defined with the origin ",paraId:26,tocIndex:1},{value:"(0, 0)",paraId:26,tocIndex:1},{value:". In the other words, users do not need to control the sub shapes' coordinates according to the nodes' coordinate which is controlled by the matrix of the parent group of the node.",paraId:26,tocIndex:1},{value:"G6.registerNode('diamond', {\n  draw(cfg, group) {\n    // If there is style object in cfg, it should be mixed here\n    const keyShape = group.addShape('path', {\n      attrs: {\n        path: this.getPath(cfg), // Get the path by cfg\n        stroke: cfg.color, // Apply the color to the stroke. For filling, use fill: cfg.color instead\n      },\n      // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n      name: 'path-shape',\n      // allow the shape to response the drag events\n      draggable: true\n    });\n    if (cfg.label) {\n      // If the label exists\n      // The complex label configurations can be defined by labeCfg\n      // const style = (cfg.labelCfg && cfg.labelCfg.style) || {};\n      // style.text = cfg.label;\n      const label group.addShape('text', {\n        attrs: {\n          x: 0, // center\n          y: 0,\n          textAlign: 'center',\n          textBaseline: 'middle',\n          text: cfg.label,\n          fill: '#666',\n        },\n        // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n        name: 'text-shape',\n        // allow the shape to response the drag events\n        draggable: true\n      });\n    }\n    return keyShape;\n  },\n  // Return the path of a diamond\n  getPath(cfg) {\n    const size = cfg.size || [40, 40];\n    const width = size[0];\n    const height = size[1];\n    //  / 1 \\\n    // 4     2\n    //  \\ 3 /\n    const path = [\n      ['M', 0, 0 - height / 2], // Top\n      ['L', width / 2, 0], // Right\n      ['L', 0, height / 2], // Bottom\n      ['L', -width / 2, 0], // Left\n      ['Z'], // Close the path\n    ];\n    return path;\n  },\n});\n",paraId:27,tocIndex:1},{value:"We have registered a dimond node. Attention: you need to assign ",paraId:28,tocIndex:1},{value:"name",paraId:28,tocIndex:1},{value:" and ",paraId:28,tocIndex:1},{value:"draggable",paraId:28,tocIndex:1},{value:" for the shapes added in the custom node, where ",paraId:28,tocIndex:1},{value:"the value of ",paraId:28,tocIndex:1},{value:"name",paraId:28,tocIndex:1},{value:" must be unique in a custom node/edge/combo type",paraId:28,tocIndex:1},{value:". ",paraId:28,tocIndex:1},{value:"draggable: true",paraId:28,tocIndex:1},{value:" means that the shape is allowed to response the drag events. Only when ",paraId:28,tocIndex:1},{value:"draggable: true",paraId:28,tocIndex:1},{value:", the interact behavior ",paraId:28,tocIndex:1},{value:"'drag-node'",paraId:28,tocIndex:1},{value:" can be responsed on this shape. In the codes above, if you only assign ",paraId:28,tocIndex:1},{value:"draggable: true",paraId:28,tocIndex:1},{value:" to the ",paraId:28,tocIndex:1},{value:"keyShape",paraId:28,tocIndex:1},{value:" but not the ",paraId:28,tocIndex:1},{value:"label",paraId:28,tocIndex:1},{value:", the drag events will only be responsed on the ",paraId:28,tocIndex:1},{value:"keyShape",paraId:28,tocIndex:1},{value:".",paraId:28,tocIndex:1},{value:"The following code uses the diamond node:",paraId:29,tocIndex:1},{value:"const data = {\n  nodes: [\n    { id: 'node1', x: 50, y: 100, type: 'diamond' }, // The simplest form\n    { id: 'node2', x: 150, y: 100, type: 'diamond', size: [50, 100] }, // Add the size\n    { id: 'node3', x: 250, y: 100, color: 'red', type: 'diamond' }, // Add the color\n    { id: 'node4', x: 350, y: 100, label: '菱形', type: 'diamond' }, // Add the label\n  ],\n};\nconst graph = new G6.Graph({\n  container: 'mountNode',\n  width: 500,\n  height: 500,\n});\ngraph.data(data);\ngraph.render();\n",paraId:30,tocIndex:1},{value:"When the nodes or edges are updated by ",paraId:31,tocIndex:2},{value:"graph.update(item, cfg)",paraId:31,tocIndex:2},{value:", the ",paraId:31,tocIndex:2},{value:"draw",paraId:31,tocIndex:2},{value:" will be called for repainting. But in the situation with large amount of data (especially the text), repainting all the graphics shapes by ",paraId:31,tocIndex:2},{value:"draw",paraId:31,tocIndex:2},{value:" has bad performance.",paraId:31,tocIndex:2},{value:"Therefore, override the ",paraId:32,tocIndex:2},{value:"update",paraId:32,tocIndex:2},{value:" function when registering a node for partial repainting is necessary. We can repaint some of the graphics shapes instead of all the graphis by ",paraId:32,tocIndex:2},{value:"update",paraId:32,tocIndex:2},{value:". The ",paraId:32,tocIndex:2},{value:"update",paraId:32,tocIndex:2},{value:" is not required if you have no performance problem.",paraId:32,tocIndex:2},{value:"To update a few graphics shapes of a node in ",paraId:33,tocIndex:2},{value:"update",paraId:33,tocIndex:2},{value:", you need find the graphics shapes to be updated frist:",paraId:33,tocIndex:2},{value:"Find the ",paraId:34,tocIndex:2},{value:"keyShape",paraId:35,tocIndex:2},{value:" by ",paraId:34,tocIndex:2},{value:"group.get('children')[0]",paraId:34,tocIndex:2},{value:", which is the return value of ",paraId:34,tocIndex:2},{value:"draw",paraId:34,tocIndex:2},{value:";",paraId:34,tocIndex:2},{value:"Find the graphics shape of label by ",paraId:34,tocIndex:2},{value:"group.get('children')[1]",paraId:34,tocIndex:2},{value:".",paraId:34,tocIndex:2},{value:"The code shown below update the path and the color of the keyShape of the diamond:",paraId:36,tocIndex:2},{value:"G6.registerNode('diamond', {\n  draw(cfg, group) {\n    // ... // Same as the code above\n  },\n  getPath(cfg) {\n    // ... // Same as the code above\n  },\n  update(cfg, node) {\n    const group = node.getContainer(); // Get the container of the node\n    const shape = group.get('children')[0]; // Find the first graphics shape of the node. It is determined by the order of being added\n    const style = {\n      path: this.getPath(cfg),\n      stroke: cfg.color,\n    };\n    shape.attr(style); // Update\n  },\n});\n",paraId:37,tocIndex:2},{value:"There are several ",paraId:38,tocIndex:4},{value:"Built-in Nodes",paraId:39,tocIndex:4},{value:" in G6. You can extend them to make some modification on them. It is similar to register the diamond node. single-node is the base class of all the node types, you can also extend it. (single-edge is the base class of all the edge types.)",paraId:38,tocIndex:4},{value:"For example, we are going to extend the single-node. ",paraId:40,tocIndex:4},{value:"draw",paraId:40,tocIndex:4},{value:", ",paraId:40,tocIndex:4},{value:"update",paraId:40,tocIndex:4},{value:", and ",paraId:40,tocIndex:4},{value:"setState",paraId:40,tocIndex:4},{value:" have been implemented in the single-node. Thus, we only override the ",paraId:40,tocIndex:4},{value:"getShapeStyle",paraId:40,tocIndex:4},{value:", which returns the path and the styles of graphics shapes.",paraId:40,tocIndex:4},{value:"G6.registerNode(\n  'diamond',\n  {\n    draw(cfg, group) {\n      const size = this.getSize(cfg); // translate to [width, height]\n      const color = cfg.color;\n      const width = size[0];\n      const height = size[1];\n      //  / 1 \\\n      // 4     2\n      //  \\ 3 /\n      const path = [\n        ['M', 0, 0 - height / 2], // Top\n        ['L', width / 2, 0], // Right\n        ['L', 0, height / 2], // Bottom\n        ['L', -width / 2, 0], // Left\n        ['Z'], // Close the path\n      ];\n      const style = G6.Util.mix(\n        {},\n        {\n          path: path,\n          stroke: color,\n        },\n        cfg.style,\n      );\n      // add a path as keyShape\n      const keyShape = group.addShape('path', {\n        attrs: {\n          ...style,\n        },\n        draggable: true,\n        name: 'diamond-keyShape', // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n      });\n      // return the keyShape\n      return keyShape;\n    },\n  },\n  // Extend the 'single-node'\n  'single-node',\n);\n",paraId:41,tocIndex:4},{value:"We are going to add animation by ",paraId:42,tocIndex:5},{value:"afterDraw",paraId:42,tocIndex:5},{value:" in this section. The result:",paraId:42,tocIndex:5},{value:" ",paraId:42,tocIndex:5},{value:"Extend the built-in rect node, and add a graphics shape in the rect;",paraId:43,tocIndex:5},{value:"Execute the animation repeatly.",paraId:43,tocIndex:5},{value:"// Register a type of custom node named inner-animate\nG6.registerNode(\n  'inner-animate',\n  {\n    afterDraw(cfg, group) {\n      const size = cfg.size;\n      const width = size[0] - 14;\n      const height = size[1] - 14;\n      // Add an image shape\n      const image = group.addShape('image', {\n        attrs: {\n          x: -width / 2,\n          y: -height / 2,\n          width: width,\n          height: height,\n          img: cfg.img,\n        },\n        // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n        name: 'image-shape',\n      });\n      // Execute the animation\n      image.animate(\n        (ratio) => {\n          const matrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n          const toMatrix = Util.transform(matrix, [['r', ratio * Math.PI * 2]]);\n          return {\n            matrix: toMatrix,\n          };\n        },\n        {\n          repeat: true,\n          duration: 3000,\n          easing: 'easeCubic',\n        },\n      );\n    },\n  },\n  // Extend the rect node\n  'rect',\n);\n",paraId:44,tocIndex:5},{value:"For more information about animation, please refer to ",paraId:45,tocIndex:5},{value:"Basic Ainmation",paraId:46,tocIndex:5},{value:".",paraId:45,tocIndex:5},{value:"The ",paraId:47,tocIndex:6},{value:"anchorPoint",paraId:48,tocIndex:6},{value:" of a node is ",paraId:47,tocIndex:6},{value:"the intersection of the node and its related edges",paraId:47,tocIndex:6},{value:".",paraId:47,tocIndex:6},{value:"(Left) The diamond node has no anchorPoints. (Right) The diamond node has anchorPoints.",paraId:49,tocIndex:6},{value:"There are two ways to adjust the anchorPoints of the node:",paraId:50,tocIndex:6},{value:"Configure the ",paraId:51,tocIndex:6},{value:"anchorPoints",paraId:51,tocIndex:6},{value:" in the data.",paraId:51,tocIndex:6},{value:"Applicable Scene:",paraId:52,tocIndex:6},{value:" Assign different anchorPoints for different nodes.",paraId:52,tocIndex:6},{value:"Assign ",paraId:53,tocIndex:6},{value:"getAnchorPoints",paraId:53,tocIndex:6},{value:" when registering a custom node.",paraId:53,tocIndex:6},{value:"Applicable Scene:",paraId:54,tocIndex:6},{value:" Configure the anchorPoints globally for this type of node.",paraId:54,tocIndex:6},{value:"const data = {\n  nodes: [\n    {\n      id: 'node1',\n      x: 100,\n      y: 100,\n      anchorPoints: [\n        [0, 0.5], // The center of the left border\n        [1, 0.5], // The center of the right border\n      ],\n    },\n    //...       // Other nodes\n  ],\n  edges: [\n    //... // Other edges\n  ],\n};\n",paraId:55,tocIndex:7},{value:"G6.registerNode(\n  'diamond',\n  {\n    //... // Other functions\n    getAnchorPoints() {\n      return [\n        [0, 0.5], // The center of the left border\n        [1, 0.5], // The center of the right border\n      ];\n    },\n  },\n  'rect',\n);\n",paraId:56,tocIndex:8},{value:"In general, nodes and edges should response the states change by styles chaging. For example, highlight the node or edge clicked/hovered by user. We can achieve it by two ways:",paraId:57,tocIndex:9},{value:"Add a flag on the node data, control the style according to the flag in ",paraId:58,tocIndex:9},{value:"draw",paraId:58,tocIndex:9},{value:" when registering a custom node;",paraId:58,tocIndex:9},{value:"Separate the interactive states from source data and ",paraId:58,tocIndex:9},{value:"draw",paraId:58,tocIndex:9},{value:", update the node only.",paraId:58,tocIndex:9},{value:"We recommend adjust the state styles by the second way, which can be achieved by:",paraId:59,tocIndex:9},{value:"Response the states in ",paraId:60,tocIndex:9},{value:"setState",paraId:60,tocIndex:9},{value:" function when registering a node/edge;",paraId:60,tocIndex:9},{value:"Set/change the state by ",paraId:60,tocIndex:9},{value:"graph.setItemState()",paraId:60,tocIndex:9},{value:".",paraId:60,tocIndex:9},{value:"Based on rect node, we extend a custom node with white filling. It will be turned to red when the mouse clicks it. Implement it by the code below:",paraId:61,tocIndex:9},{value:"// Extend rect\nG6.registerNode(\n  'custom',\n  {\n    // Response the states\n    setState(name, value, item) {\n      const group = item.getContainer();\n      const shape = group.get('children')[0]; // Find the first graphics shape of the node. It is determined by the order of being added\n      if (name === 'selected') {\n        if (value) {\n          shape.attr('fill', 'red');\n        } else {\n          shape.attr('fill', 'white');\n        }\n      }\n    },\n  },\n  'rect',\n);\n\n// Click to select, cancel by clicking again\ngraph.on('node:click', (ev) => {\n  const node = ev.item;\n  graph.setItemState(node, 'selected', !node.hasState('selected')); // Switch the selected state\n});\n",paraId:62,tocIndex:9},{value:"G6 does not limit the states for nodes/edges, you can assign any states to a node once you response it in the ",paraId:63,tocIndex:9},{value:"setState",paraId:63,tocIndex:9},{value:" function. e.g. magnify the node by hovering:",paraId:63,tocIndex:9},{value:" ",paraId:63,tocIndex:9},{value:"G6.registerNode(\n  'custom',\n  {\n    // Response the states change\n    setState(name, value, item) {\n      const group = item.getContainer();\n      const shape = group.get('children')[0]; // Find the first graphics shape of the node. It is determined by the order of being added\n      if (name === 'running') {\n        if (value) {\n          shape.animate(\n            {\n              r: 20,\n            },\n            {\n              repeat: true,\n              duration: 1000,\n            },\n          );\n        } else {\n          shape.stopAnimate();\n          shape.attr('r', 10);\n        }\n      }\n    },\n  },\n  'circle',\n);\n\n// Activate 'running' by mouse entering. Turn it of by mouse leaving.\ngraph.on('node:mouseenter', (ev) => {\n  const node = ev.item;\n  graph.setItemState(node, 'running', true);\n});\n\ngraph.on('node:mouseleave', (ev) => {\n  const node = ev.item;\n  graph.setItemState(node, 'running', false);\n});\n",paraId:64,tocIndex:9},{value:"SVG and DOM shape are not supported in V3.3.x.\nDOM node is available only when the ",paraId:65,tocIndex:10},{value:"renderer",paraId:65,tocIndex:10},{value:" of the graph instance is ",paraId:65,tocIndex:10},{value:"'svg'",paraId:65,tocIndex:10},{value:".",paraId:65,tocIndex:10},{value:"⚠️ Attention:",paraId:66,tocIndex:10},{value:"Only support native HTML DOM, but not react or other components;",paraId:67,tocIndex:10},{value:"If you custom a Node type or an Edge type with dom shape, please use the original DOM events instead of events of G6.",paraId:67,tocIndex:10},{value:"In Safari, if you assign ",paraId:67,tocIndex:10},{value:"position:relative",paraId:67,tocIndex:10},{value:" for the a dom node, the rendered position might be unexpected. It is related to the ",paraId:67,tocIndex:10},{value:"foreignObject bug of Safari",paraId:67,tocIndex:10},{value:". ",paraId:67,tocIndex:10},{value:"Issus",paraId:67,tocIndex:10},{value:".",paraId:67,tocIndex:10},{value:"Here, we demonstrate customing a node named ",paraId:68,tocIndex:10},{value:"'dom-node'",paraId:68,tocIndex:10},{value:" with DOM. We add a ",paraId:68,tocIndex:10},{value:"'dom'",paraId:68,tocIndex:10},{value:" type shape with ",paraId:68,tocIndex:10},{value:"group.addShape",paraId:68,tocIndex:10},{value:" in ",paraId:68,tocIndex:10},{value:"draw",paraId:68,tocIndex:10},{value:" function, and set the ",paraId:68,tocIndex:10},{value:"html",paraId:68,tocIndex:10},{value:" of it to be the ",paraId:68,tocIndex:10},{value:"html",paraId:68,tocIndex:10},{value:" value we want.",paraId:68,tocIndex:10},{value:'G6.registerNode(\n  \'dom-node\',\n  {\n    draw: (cfg: ModelConfig, group: Group) => {\n      return group.addShape(\'dom\', {\n        attrs: {\n          width: cfg.size[0],\n          height: cfg.size[1],\n          // DOM\'s html\n          html: `\n        <div style="background-color: #fff; border: 2px solid #5B8FF9; border-radius: 5px; width: ${\n          cfg.size[0] - 5\n        }px; height: ${cfg.size[1] - 5}px; display: flex;">\n          <div style="height: 100%; width: 33%; background-color: #CDDDFD">\n            <img alt="img" style="line-height: 100%; padding-top: 6px; padding-left: 8px;" src="https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*Q_FQT6nwEC8AAAAAAAAAAABkARQnAQ" width="20" height="20" />  \n          </div>\n          <span style="margin:auto; padding:auto; color: #5B8FF9">${cfg.label}</span>\n        </div>\n          `,\n        },\n        name: \'dom-node-keyShape\', // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n        draggable: true,\n      });\n    },\n  },\n  \'single-node\',\n);\n',paraId:69,tocIndex:10},{value:"Now, we have ",paraId:70,tocIndex:10},{value:"'dom-node'",paraId:70,tocIndex:10},{value:" type of node with DOM. Be attention that you should assign ",paraId:70,tocIndex:10},{value:"name",paraId:70,tocIndex:10},{value:" and ",paraId:70,tocIndex:10},{value:"draggable",paraId:70,tocIndex:10},{value:" for the shapes you added after V3.3, where ",paraId:70,tocIndex:10},{value:"name",paraId:70,tocIndex:10},{value:" is an ununique string. The shape is allowed to be dragged when ",paraId:70,tocIndex:10},{value:"draggable",paraId:70,tocIndex:10},{value:" is ",paraId:70,tocIndex:10},{value:"true",paraId:70,tocIndex:10},{value:".",paraId:70,tocIndex:10},{value:"We render the graph with ",paraId:71,tocIndex:10},{value:"'dom-node'",paraId:71,tocIndex:10},{value:" as following:",paraId:71,tocIndex:10},{value:"const data = {\n  nodes: [\n    { id: 'node1', x: 50, y: 100 },\n    { id: 'node2', x: 150, y: 100 },\n  ],\n  edges: [{source: 'node1'}, {target: 'node2'}],\n};\nconst graph = new G6.Graph({\n  container: 'mountNode',\n  width: 500,\n  height: 500,\n  defaultNode: {\n    type: 'dom-node',\n    size: [120, 40],\n  },\n});\ngraph.data(data);\ngraph.render();\n",paraId:72,tocIndex:10},{value:"⚠️ Attention:",paraId:73,tocIndex:10},{value:" DOM Shape in G6 does not support the events on Node and Edge. You can bind events for DOM as the way in HTML. e.g.:",paraId:73,tocIndex:10},{value:'G6.registerNode(\n  \'dom-node\',\n  {\n    draw: (cfg: ModelConfig, group: Group) => {\n      return group.addShape(\'dom\', {\n        attrs: {\n          width: cfg.size[0],\n          height: cfg.size[1],\n          // DOM\'s html with onclick event\n          html: `\n        <div onclick="alert(\'Hi\')" style="background-color: #fff; border: 2px solid #5B8FF9; border-radius: 5px; width: ${\n          cfg.size[0] - 5\n        }px; height: ${cfg.size[1] - 5}px; display: flex;">\n          <div style="height: 100%; width: 33%; background-color: #CDDDFD">\n            <img alt="img" style="line-height: 100%; padding-top: 6px; padding-left: 8px;" src="https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*Q_FQT6nwEC8AAAAAAAAAAABkARQnAQ" width="20" height="20" />  \n          </div>\n          <span style="margin:auto; padding:auto; color: #5B8FF9">${cfg.label}</span>\n        </div>\n          `,\n        },\n        name: \'dom-node-keyShape\', // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n        draggable: true,\n      });\n    },\n  },\n  \'single-node\',\n);\n',paraId:74,tocIndex:10}]},3276:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"The built-in nodes in G6 include circle, rect, ellipse, diamond, triangle, star, image, modelRect, and donut(supported after v4.2.5). ",paraId:0},{value:" ",paraId:0},{value:"In this document, we will briefly introduce the built-in nodes in G6, the common property, and the way to configure the node type. To know more about each type of built-in nodes in G6, please refer to the corresponding documents in this directory.",paraId:1},{value:"The table below shows the built-in nodes and their special properties:",paraId:2,tocIndex:0},{value:"Name",paraId:3,tocIndex:0},{value:"Description",paraId:3,tocIndex:0},{value:"Default",paraId:3,tocIndex:0},{value:"circle",paraId:3,tocIndex:0},{value:"Circle node: ",paraId:3,tocIndex:0},{value:"- ",paraId:3,tocIndex:0},{value:"size",paraId:3,tocIndex:0},{value:" is a number representing the diameter",paraId:3,tocIndex:0},{value:"- The circle is centered at the node position",paraId:3,tocIndex:0},{value:"- ",paraId:3,tocIndex:0},{value:"color",paraId:3,tocIndex:0},{value:" takes effect on the stroke",paraId:3,tocIndex:0},{value:"- The label is placed on the center of the circle by default",paraId:3,tocIndex:0},{value:"- More properties are described in ",paraId:3,tocIndex:0},{value:"circle",paraId:4,tocIndex:0},{value:"rect",paraId:3,tocIndex:0},{value:"Rect node: ",paraId:3,tocIndex:0},{value:"- ",paraId:3,tocIndex:0},{value:"size",paraId:3,tocIndex:0},{value:" is an array, e.g. [100, 50]",paraId:3,tocIndex:0},{value:"- The rect in centered at the node position",paraId:3,tocIndex:0},{value:"- ",paraId:3,tocIndex:0},{value:"color",paraId:3,tocIndex:0},{value:" takes effect on the stroke",paraId:3,tocIndex:0},{value:"- The label is placed on the center of the circle by default",paraId:3,tocIndex:0},{value:"- More properties are described in ",paraId:3,tocIndex:0},{value:"rect",paraId:5,tocIndex:0},{value:"ellipse",paraId:3,tocIndex:0},{value:"Ellipse node: ",paraId:3,tocIndex:0},{value:"- ",paraId:3,tocIndex:0},{value:"size",paraId:3,tocIndex:0},{value:" is an array, representing the lengths of major diameter and minor diameter",paraId:3,tocIndex:0},{value:"- The ellipse is centered at the node position",paraId:3,tocIndex:0},{value:"- ",paraId:3,tocIndex:0},{value:"color",paraId:3,tocIndex:0},{value:" takes effect on the stroke",paraId:3,tocIndex:0},{value:"- The label is placed on the center of the circle by default",paraId:3,tocIndex:0},{value:"- More properties are described in ",paraId:3,tocIndex:0},{value:"ellipse",paraId:6,tocIndex:0},{value:"diamond",paraId:3,tocIndex:0},{value:"Diamond node: ",paraId:3,tocIndex:0},{value:"- ",paraId:3,tocIndex:0},{value:"size",paraId:3,tocIndex:0},{value:" is an array, representing the width and height of the diamond",paraId:3,tocIndex:0},{value:"- The diamond is centered on the node position",paraId:3,tocIndex:0},{value:"- ",paraId:3,tocIndex:0},{value:"color",paraId:3,tocIndex:0},{value:" takes effect on the stroke",paraId:3,tocIndex:0},{value:"- The label is placed on the center of the circle by default",paraId:3,tocIndex:0},{value:"- More properties are described in ",paraId:3,tocIndex:0},{value:"diamond",paraId:7,tocIndex:0},{value:"triangle",paraId:3,tocIndex:0},{value:"Triangle node: ",paraId:3,tocIndex:0},{value:"- ",paraId:3,tocIndex:0},{value:"size",paraId:3,tocIndex:0},{value:" is an array, representing the length of the base and the height of the triangle",paraId:3,tocIndex:0},{value:"- The triangle is centered on the node position",paraId:3,tocIndex:0},{value:"- ",paraId:3,tocIndex:0},{value:"color",paraId:3,tocIndex:0},{value:" takes effect on the stroke",paraId:3,tocIndex:0},{value:"- he label lays on the bottom of the node by default",paraId:3,tocIndex:0},{value:"- More properties are described in ",paraId:3,tocIndex:0},{value:"triangle",paraId:8,tocIndex:0},{value:"star",paraId:3,tocIndex:0},{value:"Star node: ",paraId:3,tocIndex:0},{value:"- ",paraId:3,tocIndex:0},{value:"size",paraId:3,tocIndex:0},{value:" is a number, representing the size of the star",paraId:3,tocIndex:0},{value:"- The star is centered on the node position",paraId:3,tocIndex:0},{value:"- ",paraId:3,tocIndex:0},{value:"color",paraId:3,tocIndex:0},{value:" takes effect on the stroke",paraId:3,tocIndex:0},{value:"- The label is placed on the center of the circle by default",paraId:3,tocIndex:0},{value:"- More properties are described in ",paraId:3,tocIndex:0},{value:"star",paraId:9,tocIndex:0},{value:"image",paraId:3,tocIndex:0},{value:"Image node: ",paraId:3,tocIndex:0},{value:"- ",paraId:3,tocIndex:0},{value:"size",paraId:3,tocIndex:0},{value:" is an array, representing the width and the height of the image",paraId:3,tocIndex:0},{value:"- The image is centered on the node position",paraId:3,tocIndex:0},{value:"- ",paraId:3,tocIndex:0},{value:"img",paraId:3,tocIndex:0},{value:" The url of the image. It can be assigned in ",paraId:3,tocIndex:0},{value:"style",paraId:3,tocIndex:0},{value:" as well",paraId:3,tocIndex:0},{value:"- ",paraId:3,tocIndex:0},{value:"color",paraId:3,tocIndex:0},{value:" does not take effect",paraId:3,tocIndex:0},{value:"- The label lays on the bottom of the node by default",paraId:3,tocIndex:0},{value:"- More properties are described in ",paraId:3,tocIndex:0},{value:"image",paraId:10,tocIndex:0},{value:"modelRect",paraId:3,tocIndex:0},{value:"Card node: ",paraId:3,tocIndex:0},{value:"- ",paraId:3,tocIndex:0},{value:"size",paraId:3,tocIndex:0},{value:" is an array, representing the width and the height of the card",paraId:3,tocIndex:0},{value:"- The modelRect is centered on the node position",paraId:3,tocIndex:0},{value:"- ",paraId:3,tocIndex:0},{value:"color",paraId:3,tocIndex:0},{value:" takes effect on the stroke",paraId:3,tocIndex:0},{value:"- The label is placed on the center of the circle by default",paraId:3,tocIndex:0},{value:"- If ",paraId:3,tocIndex:0},{value:"description",paraId:3,tocIndex:0},{value:" exists, it will lay below the label",paraId:3,tocIndex:0},{value:"- More properties are described in ",paraId:3,tocIndex:0},{value:"modelRect",paraId:11,tocIndex:0},{value:" ",paraId:3,tocIndex:0},{value:"donut",paraId:3,tocIndex:0},{value:"Circle node: ",paraId:3,tocIndex:0},{value:"- ",paraId:3,tocIndex:0},{value:"size",paraId:3,tocIndex:0},{value:" is a number representing the diameter",paraId:3,tocIndex:0},{value:"- The circle is centered at the node position",paraId:3,tocIndex:0},{value:"- ",paraId:3,tocIndex:0},{value:"color",paraId:3,tocIndex:0},{value:" takes effect on the stroke",paraId:3,tocIndex:0},{value:"- The label is placed on the center of the circle by default",paraId:3,tocIndex:0},{value:"- Valid property ",paraId:3,tocIndex:0},{value:"donutAttrs",paraId:3,tocIndex:0},{value:" should be assigned",paraId:3,tocIndex:0},{value:"- More properties are in  ",paraId:3,tocIndex:0},{value:"Donut",paraId:12,tocIndex:0},{value:"Name",paraId:13,tocIndex:1},{value:"Required",paraId:13,tocIndex:1},{value:"Type",paraId:13,tocIndex:1},{value:"Remark",paraId:13,tocIndex:1},{value:"id",paraId:13,tocIndex:1},{value:"true",paraId:13,tocIndex:1},{value:"String",paraId:13,tocIndex:1},{value:"The ID of the node, ",paraId:13,tocIndex:1},{value:"MUST",paraId:13,tocIndex:1},{value:" be a unique string",paraId:13,tocIndex:1},{value:"x",paraId:13,tocIndex:1},{value:"false",paraId:13,tocIndex:1},{value:"Number",paraId:13,tocIndex:1},{value:"x coordinate",paraId:13,tocIndex:1},{value:"y",paraId:13,tocIndex:1},{value:"false",paraId:13,tocIndex:1},{value:"Number",paraId:13,tocIndex:1},{value:"y coordinate",paraId:13,tocIndex:1},{value:"type",paraId:13,tocIndex:1},{value:"false",paraId:13,tocIndex:1},{value:"String",paraId:13,tocIndex:1},{value:"The shape type of the node. It can be the type of built-in Node, or the custom Node. ",paraId:13,tocIndex:1},{value:"'circle'",paraId:13,tocIndex:1},{value:" by default",paraId:13,tocIndex:1},{value:"size",paraId:13,tocIndex:1},{value:"false",paraId:13,tocIndex:1},{value:"Number / Array",paraId:13,tocIndex:1},{value:"The size of the node",paraId:13,tocIndex:1},{value:"anchorPoints",paraId:13,tocIndex:1},{value:"false",paraId:13,tocIndex:1},{value:"Array",paraId:13,tocIndex:1},{value:"The interactions of the node and related edges. It can be null. ",paraId:13,tocIndex:1},{value:"[0, 0]",paraId:13,tocIndex:1},{value:" represents the anchor on the left top; ",paraId:13,tocIndex:1},{value:"[1, 1]",paraId:13,tocIndex:1},{value:"represents the anchor ont he right bottom",paraId:13,tocIndex:1},{value:"style",paraId:13,tocIndex:1},{value:"false",paraId:13,tocIndex:1},{value:"Object",paraId:13,tocIndex:1},{value:"The node style",paraId:13,tocIndex:1},{value:"label",paraId:13,tocIndex:1},{value:"false",paraId:13,tocIndex:1},{value:"String",paraId:13,tocIndex:1},{value:"The label text of the node",paraId:13,tocIndex:1},{value:"labelCfg",paraId:13,tocIndex:1},{value:"false",paraId:13,tocIndex:1},{value:"Object",paraId:13,tocIndex:1},{value:"The configurations of the label",paraId:13,tocIndex:1},{value:"style",paraId:14,tocIndex:2},{value:" is an object to configure the filling color, stroke color, shadow, and so on. Here is the commonly used properties in ",paraId:14,tocIndex:2},{value:"style",paraId:14,tocIndex:2},{value:":",paraId:14,tocIndex:2},{value:"Name",paraId:15,tocIndex:2},{value:"Required",paraId:15,tocIndex:2},{value:"Type",paraId:15,tocIndex:2},{value:"Remark",paraId:15,tocIndex:2},{value:"fill",paraId:15,tocIndex:2},{value:"false",paraId:15,tocIndex:2},{value:"String",paraId:15,tocIndex:2},{value:"The filling color",paraId:15,tocIndex:2},{value:"stroke",paraId:15,tocIndex:2},{value:"false",paraId:15,tocIndex:2},{value:"String",paraId:15,tocIndex:2},{value:"The stroke color",paraId:15,tocIndex:2},{value:"lineWidth",paraId:15,tocIndex:2},{value:"false",paraId:15,tocIndex:2},{value:"Number",paraId:15,tocIndex:2},{value:"The line width of the stroke",paraId:15,tocIndex:2},{value:"lineDash",paraId:15,tocIndex:2},{value:"false",paraId:15,tocIndex:2},{value:"Number[]",paraId:15,tocIndex:2},{value:"The lineDash of the stroke",paraId:15,tocIndex:2},{value:"shadowColor",paraId:15,tocIndex:2},{value:"false",paraId:15,tocIndex:2},{value:"String",paraId:15,tocIndex:2},{value:"The shadow color",paraId:15,tocIndex:2},{value:"shadowBlur",paraId:15,tocIndex:2},{value:"false",paraId:15,tocIndex:2},{value:"Number",paraId:15,tocIndex:2},{value:"The blur of the shadow",paraId:15,tocIndex:2},{value:"shadowOffsetX",paraId:15,tocIndex:2},{value:"false",paraId:15,tocIndex:2},{value:"Number",paraId:15,tocIndex:2},{value:"The x offset of the shadow",paraId:15,tocIndex:2},{value:"shadowOffsetY",paraId:15,tocIndex:2},{value:"false",paraId:15,tocIndex:2},{value:"Number",paraId:15,tocIndex:2},{value:"The y offset of the shadow",paraId:15,tocIndex:2},{value:"opacity",paraId:15,tocIndex:2},{value:"false",paraId:15,tocIndex:2},{value:"Number",paraId:15,tocIndex:2},{value:"The alpha or transparency of the node",paraId:15,tocIndex:2},{value:"fillOpacity",paraId:15,tocIndex:2},{value:"false",paraId:15,tocIndex:2},{value:"Number",paraId:15,tocIndex:2},{value:"The filling alpha or transparency of the node",paraId:15,tocIndex:2},{value:"cursor",paraId:15,tocIndex:2},{value:"false",paraId:15,tocIndex:2},{value:"String",paraId:15,tocIndex:2},{value:"The type of the mouse when hovering the node. The options are the same as ",paraId:15,tocIndex:2},{value:"cursor in CSS",paraId:15,tocIndex:2},{value:"Configure ",paraId:16,tocIndex:2},{value:"style",paraId:16,tocIndex:2},{value:" globally when instantiating the Graph:",paraId:16,tocIndex:2},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultNode: {\n    // ... Other properties for nodes\n    style: {\n      fill: '#steelblue',\n      stroke: '#eaff8f',\n      lineWidth: 5,\n      // ... Other style properties\n    },\n  },\n});\n",paraId:17,tocIndex:2},{value:"label",paraId:18,tocIndex:3},{value:" is a string which indicates the content of the label. ",paraId:18,tocIndex:3},{value:"labelCfg",paraId:18,tocIndex:3},{value:" is an object to configure the label. The commonly used configurations of ",paraId:18,tocIndex:3},{value:"labelCfg",paraId:18,tocIndex:3},{value:":",paraId:18,tocIndex:3},{value:"Name",paraId:19,tocIndex:3},{value:"Required",paraId:19,tocIndex:3},{value:"Type",paraId:19,tocIndex:3},{value:"Remark",paraId:19,tocIndex:3},{value:"position",paraId:19,tocIndex:3},{value:"false",paraId:19,tocIndex:3},{value:"String",paraId:19,tocIndex:3},{value:"The relative positions to the node. Options:  ",paraId:19,tocIndex:3},{value:"'center'",paraId:19,tocIndex:3},{value:", ",paraId:19,tocIndex:3},{value:"'top'",paraId:19,tocIndex:3},{value:", ",paraId:19,tocIndex:3},{value:"'left'",paraId:19,tocIndex:3},{value:", ",paraId:19,tocIndex:3},{value:"'right'",paraId:19,tocIndex:3},{value:", ",paraId:19,tocIndex:3},{value:"'bottom'",paraId:19,tocIndex:3},{value:". ",paraId:19,tocIndex:3},{value:"'center'",paraId:19,tocIndex:3},{value:" by default",paraId:19,tocIndex:3},{value:"offset",paraId:19,tocIndex:3},{value:"false",paraId:19,tocIndex:3},{value:"Number",paraId:19,tocIndex:3},{value:"The offset value of the label. When the ",paraId:19,tocIndex:3},{value:"position",paraId:19,tocIndex:3},{value:" is ",paraId:19,tocIndex:3},{value:"'bottom'",paraId:19,tocIndex:3},{value:", the value is the top offset of the node; When the ",paraId:19,tocIndex:3},{value:"position",paraId:19,tocIndex:3},{value:" is ",paraId:19,tocIndex:3},{value:"'left'",paraId:19,tocIndex:3},{value:", the value is the right offset of the node; it is similar with other ",paraId:19,tocIndex:3},{value:"position",paraId:19,tocIndex:3},{value:".",paraId:19,tocIndex:3},{value:"style",paraId:19,tocIndex:3},{value:"false",paraId:19,tocIndex:3},{value:"Object",paraId:19,tocIndex:3},{value:"The style property of the label",paraId:19,tocIndex:3},{value:"The commonly used configurations for the ",paraId:20,tocIndex:3},{value:"style",paraId:20,tocIndex:3},{value:" in the above table are:",paraId:20,tocIndex:3},{value:"Name",paraId:21,tocIndex:3},{value:"Required",paraId:21,tocIndex:3},{value:"Type",paraId:21,tocIndex:3},{value:"Remark",paraId:21,tocIndex:3},{value:"fill",paraId:21,tocIndex:3},{value:"false",paraId:21,tocIndex:3},{value:"String",paraId:21,tocIndex:3},{value:"The color of the label",paraId:21,tocIndex:3},{value:"stroke",paraId:21,tocIndex:3},{value:"false",paraId:21,tocIndex:3},{value:"String",paraId:21,tocIndex:3},{value:"The stroke color of the label",paraId:21,tocIndex:3},{value:"lineWidth",paraId:21,tocIndex:3},{value:"false",paraId:21,tocIndex:3},{value:"Number",paraId:21,tocIndex:3},{value:"The line width of the label",paraId:21,tocIndex:3},{value:"opacity",paraId:21,tocIndex:3},{value:"false",paraId:21,tocIndex:3},{value:"Number",paraId:21,tocIndex:3},{value:"The opacity of the label",paraId:21,tocIndex:3},{value:"fontFamily",paraId:21,tocIndex:3},{value:"false",paraId:21,tocIndex:3},{value:"String",paraId:21,tocIndex:3},{value:"The font family",paraId:21,tocIndex:3},{value:"fontSize",paraId:21,tocIndex:3},{value:"false",paraId:21,tocIndex:3},{value:"Number",paraId:21,tocIndex:3},{value:"The font size of the label",paraId:21,tocIndex:3},{value:"... The label styles of node and edge are the same, summarized in ",paraId:21,tocIndex:3},{value:"Text Shape API",paraId:22,tocIndex:3},{value:"The following code shows how to configure ",paraId:23,tocIndex:3},{value:"label",paraId:23,tocIndex:3},{value:" and ",paraId:23,tocIndex:3},{value:"labelCfg",paraId:23,tocIndex:3},{value:" globally when instantiating a Graph:",paraId:23,tocIndex:3},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultNode: {\n    // ... Other properties for nodes\n    label: 'node-label',\n    labelCfg: {\n      position: 'bottom',\n      offset: 10,\n      style: {\n        fill: '#666',\n      },\n    },\n  },\n});\n",paraId:24,tocIndex:3},{value:"There are three methods to configure nodes: Configure nodes globally when instantiating a Graph; Configure nodes in their data; Configure nodes by ",paraId:25,tocIndex:4},{value:"graph.node(nodeFn)",paraId:25,tocIndex:4},{value:". Their priorities are:",paraId:25,tocIndex:4},{value:"graph.node(nodeFn)",paraId:26,tocIndex:4},{value:" > Configure in data > Configure globally",paraId:26,tocIndex:4},{value:"That means, if there are same configurations in different ways, the way with higher priority will take effect.",paraId:27,tocIndex:4},{value:"⚠️ Attention:",paraId:28,tocIndex:4},{value:" Expect for ",paraId:28,tocIndex:4},{value:"id",paraId:28,tocIndex:4},{value:", and ",paraId:28,tocIndex:4},{value:"label",paraId:28,tocIndex:4},{value:" which should be assigned to every single node data, the other configurations in ",paraId:28,tocIndex:4},{value:"The Common Property",paraId:29,tocIndex:4},{value:" and in each node type (refer to doc of each node type) support to be assigned by the three ways.",paraId:28,tocIndex:4},{value:"Assign ",paraId:30,tocIndex:5},{value:"defaultNode",paraId:30,tocIndex:5},{value:" to configure all the nodes globally:",paraId:30,tocIndex:5},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultNode: {\n    type: 'circle',\n    // Other properties for all the nodes\n  },\n});\n",paraId:31,tocIndex:5},{value:"To configure different nodes with different properties, you can write the properties into their data individually:",paraId:32,tocIndex:6},{value:"const data = {\n  nodes: [\n    {\n      id: 'node0',\n      size: 100,\n      type: 'rect',\n      // ...    // Other properties for this node\n      style: {\n        // ...  // Style properties for this node. Different styles for different types of nodes can be refered to the subdocuments\n      },\n    },\n    {\n      id: 'node1',\n      size: [50, 100],\n      type: 'ellipse',\n      // ...    // Other properties for this node\n      style: {\n        // ...  // Style properties for this node. Different styles for different types of nodes can be refered to the subdocuments\n      },\n    },\n    // ... // Other nodes\n  ],\n  edges: [\n    // ... // edges\n  ],\n};\n",paraId:33,tocIndex:6},{value:"By this way, we can configure different nodes with different properties.",paraId:34,tocIndex:7},{value:"⚠️Attention:",paraId:35,tocIndex:7},{value:"graph.node(nodeFn)",paraId:36,tocIndex:7},{value:" must be called ",paraId:36,tocIndex:7},{value:"before calling render()",paraId:36,tocIndex:7},{value:". It does not take effect otherwise;",paraId:36,tocIndex:7},{value:"It has the highest priority that will override the same properties configured by other ways;",paraId:36,tocIndex:7},{value:"Each node will be updated when adding or updating items. It will cost a lot when the amount of the data is large.",paraId:36,tocIndex:7},{value:"// const data = ...\n// const graph = ...\ngraph.node((node) => {\n  return {\n    id: node.id,\n    type: 'rect',\n    style: {\n      fill: 'blue',\n    },\n  };\n});\n\ngraph.data(data);\ngraph.render();\n",paraId:37,tocIndex:7},{value:"const data = {\n  nodes: [\n    {\n      x: 100,\n      y: 100,\n      type: 'circle',\n      label: 'circle',\n    },\n    {\n      x: 200,\n      y: 100,\n      type: 'rect',\n      label: 'rect',\n    },\n    {\n      id: 'node-ellipse',\n      x: 330,\n      y: 100,\n      type: 'ellipse',\n      label: 'ellipse',\n    },\n    {\n      id: 'node-diamond',\n      x: 460,\n      y: 100,\n      type: 'diamond',\n      label: 'diamond',\n    },\n    {\n      id: 'node-triangle',\n      x: 560,\n      y: 100,\n      //size: 80,\n      type: 'triangle',\n      label: 'triangle',\n    },\n    {\n      id: 'node-star',\n      x: 660,\n      y: 100,\n      //size: [60, 30],\n      type: 'star',\n      label: 'star',\n    },\n    {\n      x: 760,\n      y: 100,\n      size: 50,\n      type: 'image',\n      img: 'https://gw.alipayobjects.com/zos/rmsportal/XuVpGqBFxXplzvLjJBZB.svg',\n      label: 'image',\n    },\n    {\n      id: 'node-modelRect',\n      x: 900,\n      y: 100,\n      type: 'modelRect',\n      label: 'modelRect',\n    },\n  ],\n};\n\nconst graph = new G6.Graph({\n  container: 'mountNode',\n  width: 1500,\n  height: 300,\n});\ngraph.data(data);\ngraph.render();\n",paraId:38,tocIndex:8},{value:"The result: ",paraId:39,tocIndex:8},{value:" ",paraId:39,tocIndex:8},{value:"The label of the triangle and image node are layed on the bottom, and the others are layed on the center by default.",paraId:40,tocIndex:8},{value:"By writing the properties into the data, we adjust the label position, color, and styles of the node with ",paraId:41,tocIndex:9},{value:"'node-ellipse'",paraId:41,tocIndex:9},{value:" as its id. Replace the following code to the code about ",paraId:41,tocIndex:9},{value:"'node-ellipse'",paraId:41,tocIndex:9},{value:"'s data to obtain the result.",paraId:41,tocIndex:9},{value:"{\n  id: 'node-ellipse',\n  x: 330,\n  y: 100,\n  type: 'ellipse',\n  size: [60, 30],\n  label: 'ellipse',\n  labelCfg: {\n    position: 'bottom',\n    offset: 5\n  },\n  style: {\n    fill: '#fa8c16',\n    stroke: '#000',\n    lineWidth: 2\n  }\n}\n",paraId:42,tocIndex:9},{value:"Then, we add some description for the node with ",paraId:43,tocIndex:9},{value:"'node-modelRect'",paraId:43,tocIndex:9},{value:" as its ",paraId:43,tocIndex:9},{value:"id",paraId:43,tocIndex:9},{value:":",paraId:43,tocIndex:9},{value:"{\n  id: 'node-modelRect',\n  x: 900,\n  y: 100,\n  description: '描述文本xxxxxxxxxxx',\n  type: 'modelRect',\n  label: 'modelRect'\n}\n",paraId:44,tocIndex:9},{value:"State",paraId:45,tocIndex:10},{value:" —— Change the styles during the interaction process.",paraId:46,tocIndex:10}]},16193:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"In G6 V3.7.0 and later version, user are allow to use JSX-like syntax to customize the node by assigning the second parameter of G6.registerNode a string or function that returns a string.",paraId:0},{value:'<[group|shape] [key]="value" style={{ [key]: value }}>\n  <[more tag] /> ...\n  <text>value</text>\n</[group|shape]>\n',paraId:1,tocIndex:0},{value:"The basic syntax is almost the same as the familiar HTML markup language, where you can use shape or group by a tag. At the same time, you need to assign the attributes for defining a shape. Style attributes are grouped to an object, whose items' value can be ",paraId:2,tocIndex:0},{value:"string",paraId:2,tocIndex:0},{value:", ",paraId:2,tocIndex:0},{value:"number",paraId:2,tocIndex:0},{value:", and others supported by JSON (note that it cannot be a function here, which will cause parsing errors).",paraId:2,tocIndex:0},{value:"Reference for the type and style of custom nodes: ",paraId:3,tocIndex:0},{value:"https://g6.antv.antgroup.com/api/shape-properties",paraId:3,tocIndex:0},{value:" Among them, for relative positioning, we newly added ",paraId:3,tocIndex:0},{value:"marginTop",paraId:3,tocIndex:0},{value:" and ",paraId:3,tocIndex:0},{value:"marginLeft",paraId:3,tocIndex:0},{value:" to define the gap between the left and top.",paraId:3,tocIndex:0},{value:"Wrap the group tag on the outermost layer",paraId:4,tocIndex:1},{value:"Use single quotes",paraId:4,tocIndex:1},{value:"Use the template syntax of ${}",paraId:4,tocIndex:1},{value:"Use ",paraId:4,tocIndex:1},{value:"marginTop",paraId:4,tocIndex:1},{value:" and ",paraId:4,tocIndex:1},{value:"marginLeft",paraId:4,tocIndex:1},{value:" for relative position graphics",paraId:4,tocIndex:1},{value:"Using ",paraId:4,tocIndex:1},{value:"next: inline",paraId:4,tocIndex:1},{value:" on last shape let next shape follow on the right",paraId:4,tocIndex:1},{value:"When using JSX-like syntax to customize G6 nodes, the following tags are supported:",paraId:5,tocIndex:2},{value:"<group />",paraId:6,tocIndex:2},{value:"<rect />",paraId:6,tocIndex:2},{value:"<circle />",paraId:6,tocIndex:2},{value:"<text />",paraId:6,tocIndex:2},{value:"<path />",paraId:6,tocIndex:2},{value:"<line />",paraId:6,tocIndex:2},{value:"<points />",paraId:6,tocIndex:2},{value:"<polygon />",paraId:6,tocIndex:2},{value:"<polyline />",paraId:6,tocIndex:2},{value:"<image />",paraId:6,tocIndex:2},{value:"Use tags to customize nodes. All style attributes are written in style. Name, keyShape, etc. are at the same level as style, and the supported attributes are exactly the same as those in addShape.",paraId:7,tocIndex:2},{value:"Special Note",paraId:8,tocIndex:2},{value:": When using JSX-like grammar to customize a G6 node, the attributes in style do not support function. That is, the marker tag is currently not supported.",paraId:8,tocIndex:2},{value:"Using JSX-like syntax to customize a simple rectangle.",paraId:9,tocIndex:3},{value:"G6.registerNode(\n  'rect-xml',\n  (cfg) => `\n  <rect style={{\n    width: 100, height: 20, fill: '#1890ff', stroke: '#1890ff', radius: [6, 6, 0, 0]\n  }} keyshape=\"true\" name=\"test\">\n    <text style={{ \n\t\t\tmarginTop: 2, \n\t\t\tmarginLeft: 50, \n      textAlign: 'center', \n      fontWeight: 'bold', \n      fill: '#fff' }} \n\t\t\tname=\"title\">${cfg.label || cfg.id}</text>\n    <polygon style={{\n      points:[[ 30, 30 ], [ 40, 20 ], [ 30, 50 ], [ 60, 100 ]],\n          fill: 'red'\n    }} />\n        <polyline style={{ points: [[ 30, 30 ], [ 40, 20 ], [ 60, 100 ]] }} />\n        <image style={{ img: 'https://gw.alipayobjects.com/zos/antfincdn/FLrTNDvlna/antv.png', width: 48, height: 48, marginTop: 100 }} />\n  </rect>\n`,\n);\n",paraId:10,tocIndex:3},{value:"Using JSX-like syntax to customize a complicated node.",paraId:11,tocIndex:3},{value:"// Propose the data for a node as following:\nconst data = {\n  nodes: [\n    {\n      id: 'node1',\n      type: 'xml-card', // the custom node's type name\n      metric: 'CPU usage',\n      cpuUsage: 80\n    },\n  ]\n}\n\n// def for the drawing of the percentage bar\nconst percentageBar = ({ width, used, height = 12 }) => `\n  <rect style={{\n    marginLeft: 10,\n    marginTop: 3,\n    width: ${width},\n    height: ${height},\n    fill: '#fff',\n    stroke: '#1890ff'\n  }} name=\"body\" >\n    <rect style={{\n      marginLeft: 10,\n      width: ${(width / 100) * used},\n      height: ${height},\n      fill: '#1890ff',\n      stroke: '#1890ff'\n    }}/>\n  </rect>\n`;\n\n// def for the drawing of the jsx node\nconst textXML = (cfg) => `\n<group>\n  <rect style={{\n    width: 100, height: 20, fill: '#1890ff', stroke: '#1890ff', radius: [6, 6, 0, 0]\n  }}>\n    <text style={{ marginTop: 2, marginLeft: 50, \n\t\t\ttextAlign: 'center',\n\t\t\tfontWeight: 'bold', \n\t\t\tfill: '#fff' }}>${cfg.id}</text>\n  </rect>\n  <rect style={{ width: 100, height: 80, fill: 'rgba(24,144,255,0.15)', \n\t\tradius: [0, 0, 6, 6] }} \n\t\tkeyshape=\"true\" \n\t\tcursor=\"move\">\n    <text style={{marginLeft: 10 ,fill: 'red'}}>FULL</text>\n    <text style={{ marginTop: 5, marginLeft: 10, fill: '#333'}}>${cfg.metric}: </text>\n    <text style={{\n      marginTop: 1,\n      marginLeft: ${cfg.cpuUsage * 0.8},\n      fontSize: 10,\n      fill: '#1890ff',\n    }}>${cfg.cpuUsage}%</text>\n    ${percentageBar({ width: 80, used: cfg.cpuUsage })}\n  </rect>\n</group>\n`;\n\n// register the custom node to G6\nG6.registerNode('test', {\n  jsx: textXML,\n});\n",paraId:12,tocIndex:3},{value:"Results:",paraId:13,tocIndex:3}]},62392:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Customing nodes has long been a problem, and even with the introduction of the jsx solution to simplify it, it's still difficult, so we've introduced ",paraId:0},{value:"@antv/g6-react-node",paraId:0},{value:", a package that makes it easier to define nodes. event animations, etc., to make it easier to use G6.",paraId:0},{value:"First of all, after installing G6, you need to additionally install ",paraId:1,tocIndex:0},{value:"@antv/g6-react-node",paraId:1,tocIndex:0},{value:"npm install @antv/g6-react-node\n// yarn add @antv/g6-react-node\n",paraId:2,tocIndex:0},{value:"As an example of a simple card with definitions, custom events, node data management, etc..",paraId:3,tocIndex:0},{value:"import React from 'react';\nimport G6 from '@antv/g6';\nimport { Rect, Text, Circle, Image, Group, createNodeFromReact } from '@antv/g6-react-node';\n\nconst Tag = ({ text, color }) => (\n  <Rect\n    style={{\n      fill: color,\n      padding: [5, 10],\n      width: 'auto',\n      radius: [4],\n      margin: [0, 8],\n    }}\n  >\n    <Text style={{ fill: '#fff', fontSize: 10 }}>{text}</Text>\n  </Rect>\n);\n\nconst Card = ({ cfg }) => {\n  const { collapsed = false } = cfg;\n\n  return (\n    <Group draggable>\n      <Rect\n        style={{\n          width: 400,\n          height: 'auto',\n          fill: '#fff',\n          stroke: '#ddd',\n          shadowColor: '#eee',\n          shadowBlur: 30,\n          radius: [8],\n          justifyContent: 'center',\n          padding: [18, 0],\n        }}\n        draggable\n      >\n        <Text\n          style={{\n            fill: '#000',\n            margin: [0, 24],\n            fontSize: 16,\n            fontWeight: 'bold',\n          }}\n        >\n          This is a card\n        </Text>\n        <Text style={{ fill: '#ccc', fontSize: 12, margin: [12, 24] }}>\n          I'm loooooooooooooooooooooooooooooooooog\n        </Text>\n        {collapsed && (\n          <Group>\n            <Image\n              style={{\n                img: 'https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg',\n                width: 200,\n                height: 200,\n                margin: [24, 'auto'],\n              }}\n            />\n            <Rect style={{ width: 'auto', flexDirection: 'row', padding: [4, 12] }}>\n              <Tag color=\"#66ccff\" text=\"We\" />\n              <Tag color=\"#66ccff\" text=\"are\" />\n              <Tag color=\"#66ccff\" text=\"many\" />\n              <Tag color=\"#66ccff\" text=\"tags\" />\n            </Rect>\n          </Group>\n        )}\n        <Circle\n          style={{\n            position: 'absolute',\n            x: 380,\n            y: 20,\n            r: 5,\n            fill: collapsed ? 'blue' : 'green',\n          }}\n        >\n          <Text\n            style={{\n              fill: '#fff',\n              fontSize: 10,\n              margin: [-6, -3, 0],\n              cursor: 'pointer',\n            }}\n            onClick={(evt, node, shape, graph) => {\n              graph.updateItem(node, {\n                collapsed: !collapsed,\n              });\n            }}\n          >\n            {collapsed ? '-' : '+'}\n          </Text>\n        </Circle>\n      </Rect>\n    </Group>\n  );\n};\n\nG6.registerNode('test', createNodeFromReact(Card));\n",paraId:4,tocIndex:0},{value:"It results in this",paraId:5,tocIndex:0},{value:"When defining React component nodes, you cannot use any hook or asynchronous fetching logic as node drawing currently needs to be a synchronous process, and it is recommended to put all state as well as data information in the node itself DATA for easier management. In a React component node, all data flow should be: node data -> react component props(cfg) -> node content changes. The component itself needs to be free of any side effects and all changes to the node data should be based on updateItem.",paraId:6,tocIndex:2},{value:"If you don't do any positioning or layout, all layouts will follow the normal document flow, top-down. To give you more freedom of layout, React also has internal support for flex layouts, which you can use by manipulating: ",paraId:7,tocIndex:3},{value:"alignContent",paraId:7,tocIndex:3},{value:",",paraId:7,tocIndex:3},{value:"alignItems",paraId:7,tocIndex:3},{value:",",paraId:7,tocIndex:3},{value:"alignSelf",paraId:7,tocIndex:3},{value:",",paraId:7,tocIndex:3},{value:"display",paraId:7,tocIndex:3},{value:",",paraId:7,tocIndex:3},{value:"flex",paraId:7,tocIndex:3},{value:",",paraId:7,tocIndex:3},{value:"flexBasis",paraId:7,tocIndex:3},{value:",",paraId:7,tocIndex:3},{value:"flexGrow",paraId:7,tocIndex:3},{value:",",paraId:7,tocIndex:3},{value:" flexShrink",paraId:7,tocIndex:3},{value:", ",paraId:7,tocIndex:3},{value:"flexDirection",paraId:7,tocIndex:3},{value:", ",paraId:7,tocIndex:3},{value:"flexWrap",paraId:7,tocIndex:3},{value:", ",paraId:7,tocIndex:3},{value:"height",paraId:7,tocIndex:3},{value:", ",paraId:7,tocIndex:3},{value:"width",paraId:7,tocIndex:3},{value:", ",paraId:7,tocIndex:3},{value:"justifyContent",paraId:7,tocIndex:3},{value:", ",paraId:7,tocIndex:3},{value:"margin",paraId:7,tocIndex:3},{value:", ",paraId:7,tocIndex:3},{value:"padding",paraId:7,tocIndex:3},{value:", ",paraId:7,tocIndex:3},{value:"maxHeight",paraId:7,tocIndex:3},{value:", ",paraId:7,tocIndex:3},{value:"maxWidth",paraId:7,tocIndex:3},{value:", ",paraId:7,tocIndex:3},{value:"minHeight",paraId:7,tocIndex:3},{value:", ",paraId:7,tocIndex:3},{value:" minWidth",paraId:7,tocIndex:3},{value:" which control the internal layout of the node.",paraId:7,tocIndex:3},{value:"To make it easier to control nodes, we support event binding to a graph inside a node (event bubbling will be supported in a later version), these event binding functions have uniform parameters: ",paraId:8,tocIndex:4},{value:"(evt: the event of G6 itself, node: the node where the event occurs, shape: the Shape where the event occurs, graph: the graph where the event is emitted graph)",paraId:8,tocIndex:4},{value:", we currently support most of the G6 events: ",paraId:8,tocIndex:4},{value:"onClick",paraId:8,tocIndex:4},{value:", ",paraId:8,tocIndex:4},{value:"onDBClick",paraId:8,tocIndex:4},{value:", ",paraId:8,tocIndex:4},{value:"onMouseEnter",paraId:8,tocIndex:4},{value:", ",paraId:8,tocIndex:4},{value:"onMouseMove",paraId:8,tocIndex:4},{value:", ",paraId:8,tocIndex:4},{value:"onMouseOut",paraId:8,tocIndex:4},{value:", ",paraId:8,tocIndex:4},{value:"onMouseOver",paraId:8,tocIndex:4},{value:", ",paraId:8,tocIndex:4},{value:"onMouseLeave",paraId:8,tocIndex:4},{value:", ",paraId:8,tocIndex:4},{value:"onMouseDown",paraId:8,tocIndex:4},{value:",",paraId:8,tocIndex:4},{value:"onMouseUp ",paraId:8,tocIndex:4},{value:",",paraId:8,tocIndex:4},{value:"onDragStart ",paraId:8,tocIndex:4},{value:",",paraId:8,tocIndex:4},{value:"onDrag ",paraId:8,tocIndex:4},{value:",",paraId:8,tocIndex:4},{value:"onDragEnd ",paraId:8,tocIndex:4},{value:",",paraId:8,tocIndex:4},{value:"onDragEnter ",paraId:8,tocIndex:4},{value:",",paraId:8,tocIndex:4},{value:"onDragLeave ",paraId:8,tocIndex:4},{value:",",paraId:8,tocIndex:4},{value:"onDragOver ",paraId:8,tocIndex:4},{value:",",paraId:8,tocIndex:4},{value:"onDrop ",paraId:8,tocIndex:4},{value:",",paraId:8,tocIndex:4},{value:"onContextMenu ",paraId:8,tocIndex:4},{value:"⚠️ Note: After using the event, you need to mount the event on the performed pair of graphs using the function ",paraId:9,tocIndex:4},{value:"appenAutoShapeListener(graph)",paraId:9,tocIndex:4},{value:", which can be derived directly from the ",paraId:9,tocIndex:4},{value:"@antv/g6-react-node",paraId:9,tocIndex:4},{value:" package.",paraId:9,tocIndex:4},{value:"In order to make it easier to add animations to nodes, we have built in some simple animations to use, hopefully to satisfy the effects of basic interaction. In the first phase we have only introduced six animations for now, the ",paraId:10,tocIndex:5},{value:"animation",paraId:10,tocIndex:5},{value:" property is animated when it is set, and the property stops animating when it is empty.",paraId:10,tocIndex:5},{value:"For Example:",paraId:11,tocIndex:5},{value:"<Rect\n        style={{\n          width: 400,\n          // ...\n        }}\n        draggable\n        animation={\n          animated && {\n            animate: 'rubber', // 同时支持 'spin','flash','pulse','tada','bounce'\n            repeat: true,\n            duration: 2000,\n          }\n        }\n      >\n",paraId:12,tocIndex:5},{value:"G6 React Node Docs",paraId:13,tocIndex:6}]},52895:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"There are three types of items in a graph in G6: Nodes, Edges and Combos. Each item consists of one or more ",paraId:0},{value:"Shapes",paraId:1},{value:" with its own unique keyShape. Several built-in items are provided by G6, for example, nodes can be circles, rectangles, images, etc. All built-in items in are listed in ",paraId:0},{value:"Built-in Nodes",paraId:2},{value:", ",paraId:0},{value:"Built-in Edges",paraId:3},{value:", ",paraId:0},{value:"Built-in Combos",paraId:4},{value:". In addition to using built-in nodes/edges/combos, G6 also allows user to customize these items by creating and combining shapes, see ",paraId:0},{value:"Custom Nodes",paraId:5},{value:", ",paraId:0},{value:"Custom Edge",paraId:6},{value:", ",paraId:0},{value:"Custom Combo",paraId:7},{value:" for more details.",paraId:0},{value:"The properties of an item can be be divided into two categories:",paraId:8},{value:"Style Property: Corresponds to the style of the keyshape, e.g. ",paraId:9},{value:"fill",paraId:9},{value:", ",paraId:9},{value:"stroke",paraId:9},{value:".When the ",paraId:9},{value:"State",paraId:10},{value:" of an item is changed, the style can be updated.",paraId:9},{value:"Other Property: Such as ",paraId:9},{value:"type",paraId:9},{value:", ",paraId:9},{value:"id",paraId:9},{value:", they are a kind of properties that will not be changed when the State of the item is changed. They need to be updated manually with ",paraId:9},{value:"graph.updateItem",paraId:11},{value:". A complete list of item properties can be found in ",paraId:9},{value:"Item Properties",paraId:12},{value:". In addition to these common properties shared by all items, each kind of item (node/edge/combo) has its unique properties.",paraId:9},{value:"There are ",paraId:13},{value:"common methods",paraId:14},{value:" on item instances for updating, destroying, getting attributes, modifying state, etc. And changes to instances can also be made by calling methods on ",paraId:13},{value:"graph",paraId:15},{value:".",paraId:13},{value:"This chapter provides an overview of the common properties and methods of graph items in G6, different types of items, i.e. nodes, edges and combos, will be described in detail in later chapters.",paraId:16}]},24142:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"   ",paraId:0},{value:"⚠️Attention:",paraId:0},{value:" ",paraId:0},{value:" ",paraId:0},{value:"Graphics Group and ",paraId:0},{value:"Node Combo",paraId:1},{value:" are totally different concepts with the same name Group.",paraId:0},{value:"Graphics Group is the group for ",paraId:2},{value:"Graphics Shape",paraId:3},{value:";",paraId:2},{value:"Node Combo",paraId:4},{value:" is the group for ",paraId:2},{value:"Node",paraId:5},{value:"s, which is related to the hierarchy and groups in the data.",paraId:2},{value:"Graphics Group (hereinafter referred to as Group) in G6 is similar to ",paraId:6,tocIndex:0},{value:" ",paraId:6,tocIndex:0},{value:"<g>",paraId:6,tocIndex:0},{value:" tag in SVG ",paraId:6,tocIndex:0},{value:": Group a container of a group of graphics. The transformations on a Group such as clipping, rotating, zooming, and translating will be applied to all the children of the Group. The properties like color and position will also be inherited by its children. Besides, Group can be nested for complicated objects.",paraId:6,tocIndex:0},{value:"In G6, all the nodes instances in a Graph is grouped by a Group named ",paraId:7,tocIndex:0},{value:"nodeGroup",paraId:7,tocIndex:0},{value:", all the edges instances are grouped by ",paraId:7,tocIndex:0},{value:"edgeGroup",paraId:7,tocIndex:0},{value:". And the visual level (zIndex) of ",paraId:7,tocIndex:0},{value:"nodeGroup",paraId:7,tocIndex:0},{value:" is higher than ",paraId:7,tocIndex:0},{value:"edgeGroup",paraId:7,tocIndex:0},{value:", which means all the nodes will be drawed on the top of all the edges.",paraId:7,tocIndex:0},{value:"As shown in the figure below: The three nodes in (Left) are belong to the ",paraId:8,tocIndex:0},{value:"nodeGroup",paraId:8,tocIndex:0},{value:", the two edges are belong to the ",paraId:8,tocIndex:0},{value:"edgeGroup",paraId:8,tocIndex:0},{value:". The visual level (zIndex) of ",paraId:8,tocIndex:0},{value:"nodeGroup",paraId:8,tocIndex:0},{value:" is higher than ",paraId:8,tocIndex:0},{value:"edgeGroup",paraId:8,tocIndex:0},{value:", so the three nodes are drawed on the top of the two edges. We reduce the opacity of the nodes in (Right) to clearly see the edges are drawed under the nodes.",paraId:8,tocIndex:0},{value:"(Left) Demonstration of the graphics Group of nodes and edges. (Right) Nodes with opacity.",paraId:9,tocIndex:0},{value:"Graphics Group is refered by ",paraId:10,tocIndex:1},{value:"Custom Node",paraId:11,tocIndex:1},{value:" and ",paraId:10,tocIndex:1},{value:"Custom Edge",paraId:12,tocIndex:1},{value:". It is a mechanism to combine and manage the graphis shapes.",paraId:10,tocIndex:1},{value:"For example, there is a node A which has a group contains all the graphics shapes (a circle and a text shape) of A. Node B is a custom node which also has a group contains all the graphics shapes (a circle, a rect, and a text shape) of B.",paraId:13,tocIndex:1},{value:"The functions below will be used in ",paraId:14,tocIndex:2},{value:"Custom Node",paraId:15,tocIndex:2},{value:" and ",paraId:14,tocIndex:2},{value:"Custom Edge",paraId:16,tocIndex:2},{value:".",paraId:14,tocIndex:2},{value:"// Find the graphics group of the item\nconst group = item.getContainer();\n\n// equal to\nconst group = item.get('group');\n",paraId:17,tocIndex:3},{value:"addGroup(cfgs)",paraId:18,tocIndex:4},{value:"Add a new group to the group.",paraId:19,tocIndex:4},{value:"const subGroup = group.addGroup({\n  id: 'rect',\n});\n",paraId:20,tocIndex:4},{value:"addShape(type, cfgs)",paraId:21,tocIndex:4},{value:"Add a shape to the group.",paraId:22,tocIndex:4},{value:"const keyShape = group.addShape('rect', {\n  attrs: {\n    stroke: 'red',\n  },\n  // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n  name: 'rect-shape',\n});\n",paraId:23,tocIndex:4},{value:"Tips:",paraId:24,tocIndex:4},{value:" The ",paraId:24,tocIndex:4},{value:"clip",paraId:24,tocIndex:4},{value:", ",paraId:24,tocIndex:4},{value:"transform",paraId:24,tocIndex:4},{value:", and other operations on a group will affect all the elements in the group.",paraId:24,tocIndex:4}]},54535:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"An item (node/edge) in G6 ",paraId:0},{value:"Consists of One or More",paraId:0},{value:" ",paraId:0},{value:"Graphics Shape",paraId:1},{value:". You can add shapes to a custom item by ",paraId:0},{value:"group.addShape",paraId:0},{value:" in the ",paraId:0},{value:"draw",paraId:0},{value:" function of registering item. The shapes in G6:",paraId:0},{value:"circle",paraId:2},{value:";",paraId:3},{value:"rect",paraId:4},{value:";",paraId:3},{value:"ellipse",paraId:5},{value:";",paraId:3},{value:"polygon",paraId:6},{value:";",paraId:3},{value:"fan",paraId:7},{value:";",paraId:3},{value:"image",paraId:8},{value:";",paraId:3},{value:"marker",paraId:9},{value:";",paraId:3},{value:"path",paraId:10},{value:";",paraId:3},{value:"text",paraId:11},{value:";",paraId:3},{value:"dom(svg)",paraId:12},{value:": DOM (available only when the ",paraId:3},{value:"renderer",paraId:3},{value:" of Graph instance is ",paraId:3},{value:"'svg'",paraId:3},{value:").",paraId:3},{value:"Name",paraId:13,tocIndex:0},{value:"Description",paraId:13,tocIndex:0},{value:"Remark",paraId:13,tocIndex:0},{value:"fill",paraId:13,tocIndex:0},{value:"The color or gradient color for filling.",paraId:13,tocIndex:0},{value:"The corresponding property in canvas is ",paraId:13,tocIndex:0},{value:"fillStyle",paraId:13,tocIndex:0},{value:".",paraId:13,tocIndex:0},{value:"stroke",paraId:13,tocIndex:0},{value:"The color, gradient color, or pattern for stroke.",paraId:13,tocIndex:0},{value:"The corresponding property in canvas is ",paraId:13,tocIndex:0},{value:"strokeStyle",paraId:13,tocIndex:0},{value:".",paraId:13,tocIndex:0},{value:"lineWidth",paraId:13,tocIndex:0},{value:"The width of the stroke",paraId:13,tocIndex:0},{value:"lineDash",paraId:13,tocIndex:0},{value:"The lineDash of the stroke",paraId:13,tocIndex:0},{value:"Number[] are the lengths of the lineDash",paraId:13,tocIndex:0},{value:"shadowColor",paraId:13,tocIndex:0},{value:"The color for shadow.",paraId:13,tocIndex:0},{value:"shadowBlur",paraId:13,tocIndex:0},{value:"The blur level for shadow.",paraId:13,tocIndex:0},{value:"Larger the value, more blur.",paraId:13,tocIndex:0},{value:"shadowOffsetX",paraId:13,tocIndex:0},{value:"The horizontal offset of the shadow.",paraId:13,tocIndex:0},{value:"shadowOffsetY",paraId:13,tocIndex:0},{value:"The vertical offset of the shadow.",paraId:13,tocIndex:0},{value:"opacity",paraId:13,tocIndex:0},{value:"The opacity (alpha value) of the shape.",paraId:13,tocIndex:0},{value:"The corresponding property in canvas is ",paraId:13,tocIndex:0},{value:"globalAlpha",paraId:13,tocIndex:0},{value:".",paraId:13,tocIndex:0},{value:"cursor",paraId:13,tocIndex:0},{value:"The type of the mouse when hovering the node. The options are the same as ",paraId:13,tocIndex:0},{value:"cursor in CSS",paraId:13,tocIndex:0},{value:"group.addShape('rect', {\n  attrs: {\n    fill: 'red',\n    shadowOffsetX: 10,\n    shadowOffsetY: 10,\n    shadowColor: 'blue',\n    shadowBlur: 10,\n    opacity: 0.8,\n  },\n  // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n  name: 'rect-shape',\n});\n",paraId:14,tocIndex:1},{value:"Get or set the shape's attributes.",paraId:15,tocIndex:3},{value:"Get the shape's attribute named ",paraId:16,tocIndex:4},{value:"name",paraId:16,tocIndex:4},{value:".",paraId:16,tocIndex:4},{value:"const width = shape.attr('width');\n",paraId:17,tocIndex:4},{value:"Update the shape's attribute named ",paraId:18,tocIndex:5},{value:"name",paraId:18,tocIndex:5},{value:" with ",paraId:18,tocIndex:5},{value:"value",paraId:18,tocIndex:5},{value:".",paraId:18,tocIndex:5},{value:"Update the shape's multiple attributes.",paraId:19,tocIndex:6},{value:"rect.attr({\n  fill: '#999',\n  stroke: '#666',\n});\n",paraId:20,tocIndex:6},{value:"Name",paraId:21,tocIndex:8},{value:"Description",paraId:21,tocIndex:8},{value:"x",paraId:21,tocIndex:8},{value:"The x coordinate of the center",paraId:21,tocIndex:8},{value:"y",paraId:21,tocIndex:8},{value:"The y coordinate of the center",paraId:21,tocIndex:8},{value:"r",paraId:21,tocIndex:8},{value:"The radius",paraId:21,tocIndex:8},{value:"group.addShape('circle', {\n  attrs: {\n    x: 100,\n    y: 100,\n    r: 50,\n    fill: 'blue',\n  },\n  // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n  name: 'circle-shape',\n});\n",paraId:22,tocIndex:9},{value:"Name",paraId:23,tocIndex:11},{value:"Description",paraId:23,tocIndex:11},{value:"Remark",paraId:23,tocIndex:11},{value:"x",paraId:23,tocIndex:11},{value:"The x coordinate of the left top",paraId:23,tocIndex:11},{value:"y",paraId:23,tocIndex:11},{value:"The y coordinate of the left top",paraId:23,tocIndex:11},{value:"width",paraId:23,tocIndex:11},{value:"The width of the rect",paraId:23,tocIndex:11},{value:"height",paraId:23,tocIndex:11},{value:"The height of the rect",paraId:23,tocIndex:11},{value:"radius",paraId:23,tocIndex:11},{value:"The border radius.",paraId:23,tocIndex:11},{value:"It can be an integer or an array, representing the border radii of lefttop, righttop, rightbottom, leftbotton respectively. ",paraId:23,tocIndex:11},{value:"- ",paraId:23,tocIndex:11},{value:"radius: 1",paraId:23,tocIndex:11},{value:" or ",paraId:23,tocIndex:11},{value:"radius: [ 1 ]",paraId:23,tocIndex:11},{value:" is equal to ",paraId:23,tocIndex:11},{value:"radius: [ 1, 1, 1, 1 ]",paraId:23,tocIndex:11},{value:"- ",paraId:23,tocIndex:11},{value:"radius: [ 1, 2 ]",paraId:23,tocIndex:11},{value:" is equal to ",paraId:23,tocIndex:11},{value:"radius: [ 1, 2, 1, 2 ]",paraId:23,tocIndex:11},{value:"- ",paraId:23,tocIndex:11},{value:"radius: [ 1, 2, 3 ]",paraId:23,tocIndex:11},{value:" is equal to ",paraId:23,tocIndex:11},{value:"radius: [ 1, 2, 3, 2 ]",paraId:23,tocIndex:11},{value:"group.addShape('rect', {\n  attrs: {\n    x: 150,\n    y: 150,\n    width: 150,\n    height: 150,\n    stroke: 'black',\n    radius: [2, 4],\n  },\n  // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n  name: 'rect-shape',\n});\n",paraId:24,tocIndex:12},{value:"Name",paraId:25,tocIndex:14},{value:"Description",paraId:25,tocIndex:14},{value:"x",paraId:25,tocIndex:14},{value:"The x coordinate of the center",paraId:25,tocIndex:14},{value:"y",paraId:25,tocIndex:14},{value:"The y coordinate of the center",paraId:25,tocIndex:14},{value:"rx",paraId:25,tocIndex:14},{value:"The horizontal radius of the ellipse",paraId:25,tocIndex:14},{value:"ry",paraId:25,tocIndex:14},{value:"The vertical radius of the ellipse",paraId:25,tocIndex:14},{value:"group.addShape('ellipse', {\n  attrs: {\n    x: 100,\n    y: 100,\n    rx: 50,\n    ry: 50,\n    fill: 'blue',\n  },\n  // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n  name: 'ellipse-shape',\n});\n",paraId:26,tocIndex:15},{value:"Name",paraId:27,tocIndex:17},{value:"Description",paraId:27,tocIndex:17},{value:"Remark",paraId:27,tocIndex:17},{value:"points",paraId:27,tocIndex:17},{value:"A set of vertexes' coordinates of the polygon",paraId:27,tocIndex:17},{value:"It is an array",paraId:27,tocIndex:17},{value:"group.addShape('polygon', {\n  attrs: {\n    points: [\n      [30, 30],\n      [40, 20],\n      [30, 50],\n      [60, 100],\n    ],\n    fill: 'red',\n  },\n  // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n  name: 'polygon-shape',\n});\n",paraId:28,tocIndex:18},{value:"Name",paraId:29,tocIndex:20},{value:"Description",paraId:29,tocIndex:20},{value:"Remark",paraId:29,tocIndex:20},{value:"x",paraId:29,tocIndex:20},{value:"The x coordinate of the left top of the image",paraId:29,tocIndex:20},{value:"y",paraId:29,tocIndex:20},{value:"The y coordinate of the left top of the image",paraId:29,tocIndex:20},{value:"width",paraId:29,tocIndex:20},{value:"The width of the image",paraId:29,tocIndex:20},{value:"height",paraId:29,tocIndex:20},{value:"The height of the image",paraId:29,tocIndex:20},{value:"img",paraId:29,tocIndex:20},{value:"The source of the image",paraId:29,tocIndex:20},{value:"Supports: url, ImageData, Image, and canvas",paraId:29,tocIndex:20},{value:"group.addShape('image', {\n  attrs: {\n    x: 0,\n    y: 0,\n    img: 'https://g.alicdn.com/cm-design/arms-trace/1.0.155/styles/armsTrace/images/TAIR.png',\n  },\n  // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n  name: 'image-shape',\n});\n",paraId:30,tocIndex:21},{value:"Name",paraId:31,tocIndex:23},{value:"Description",paraId:31,tocIndex:23},{value:"Remark",paraId:31,tocIndex:23},{value:"x",paraId:31,tocIndex:23},{value:"The x coordinate of the center",paraId:31,tocIndex:23},{value:"y",paraId:31,tocIndex:23},{value:"The y coordinate of the center",paraId:31,tocIndex:23},{value:"r",paraId:31,tocIndex:23},{value:"The radius of the marker",paraId:31,tocIndex:23},{value:"symbol",paraId:31,tocIndex:23},{value:"The shape",paraId:31,tocIndex:23},{value:"We built in some commonly used shapes for it: ",paraId:31,tocIndex:23},{value:"circle",paraId:31,tocIndex:23},{value:", ",paraId:31,tocIndex:23},{value:"square",paraId:31,tocIndex:23},{value:", ",paraId:31,tocIndex:23},{value:"diamond",paraId:31,tocIndex:23},{value:", ",paraId:31,tocIndex:23},{value:"triangle",paraId:31,tocIndex:23},{value:", and ",paraId:31,tocIndex:23},{value:"triangle-down",paraId:31,tocIndex:23},{value:". You can customize it by path",paraId:31,tocIndex:23},{value:"group.addShape('marker', {\n  attrs: {\n    x: 10,\n    y: 10,\n    r: 10,\n    symbol: function (x, y, r) {\n      return [['M', x, y], ['L', x + r, y + r], ['L', x + r * 2, y], ['Z']];\n    },\n  },\n  // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n  name: 'marker-shape',\n});\n",paraId:32,tocIndex:24},{value:"   ",paraId:33,tocIndex:25},{value:"⚠️Attention:",paraId:33,tocIndex:25},{value:" ",paraId:33,tocIndex:25},{value:" When the edge is too thin to be hitted by mouse, set ",paraId:33,tocIndex:25},{value:"lineAppendWidth",paraId:33,tocIndex:25},{value:" to enlarge the hitting area.",paraId:33,tocIndex:25},{value:"Name",paraId:34,tocIndex:26},{value:"Description",paraId:34,tocIndex:26},{value:"Remark",paraId:34,tocIndex:26},{value:"path",paraId:34,tocIndex:26},{value:"The path.",paraId:34,tocIndex:26},{value:"It can be a String, or an Array of path",paraId:34,tocIndex:26},{value:"startArrow",paraId:34,tocIndex:26},{value:"The arrow on the start of the path",paraId:34,tocIndex:26},{value:"When ",paraId:34,tocIndex:26},{value:"startArrow",paraId:34,tocIndex:26},{value:" is ",paraId:34,tocIndex:26},{value:"true",paraId:34,tocIndex:26},{value:", show a default arrow on the start of the path. User can customize an arrow by path",paraId:34,tocIndex:26},{value:"endArrow",paraId:34,tocIndex:26},{value:"The arrow on the end of the path",paraId:34,tocIndex:26},{value:"When ",paraId:34,tocIndex:26},{value:"endArrow",paraId:34,tocIndex:26},{value:" is ",paraId:34,tocIndex:26},{value:"true",paraId:34,tocIndex:26},{value:", show a default arrow on the end of the path. User can customize an arrow by path",paraId:34,tocIndex:26},{value:"lineAppendWidth",paraId:34,tocIndex:26},{value:"The hitting area of the path",paraId:34,tocIndex:26},{value:"Enlarge the hitting area by enlarging its value",paraId:34,tocIndex:26},{value:"lineCap",paraId:34,tocIndex:26},{value:"The style of two ends of the path",paraId:34,tocIndex:26},{value:"lineJoin",paraId:34,tocIndex:26},{value:"The style of the intersection of two path",paraId:34,tocIndex:26},{value:"lineWidth",paraId:34,tocIndex:26},{value:"The line width of the current path",paraId:34,tocIndex:26},{value:"miterLimit",paraId:34,tocIndex:26},{value:"The maximum miter length",paraId:34,tocIndex:26},{value:"lineDash",paraId:34,tocIndex:26},{value:"The style of the dash line",paraId:34,tocIndex:26},{value:"It is an array that describes the length of gaps and line segments. If the number of the elements in the array is odd, the elements will be dulplicated. Such as [5, 15, 25] will be regarded as [5, 15, 25, 5, 15, 25]",paraId:34,tocIndex:26},{value:"group.addShape('path', {\n  attrs: {\n    startArrow: {\n      // The custom arrow is a path points at (0, 0), and its tail points to the positive direction of x-axis\n      path: 'M 0,0 L 20,10 L 20,-10 Z',\n      // the offset of the arrow, nagtive value means the arrow is moved alone the positive direction of x-axis\n      // d: -10\n    },\n    endArrow: {\n      // The custom arrow is a path points at (0, 0), and its tail points to the positive direction of x-axis\n      path: 'M 0,0 L 20,10 L 20,-10 Z',\n      // the offset of the arrow, nagtive value means the arrow is moved alone the positive direction of x-axis\n      // d: -10\n    },\n    path: [\n      ['M', 100, 100],\n      ['L', 200, 200],\n    ],\n    stroke: '#000',\n    lineWidth: 8,\n    lineAppendWidth: 5,\n  },\n  // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n  name: 'path-shape',\n});\n",paraId:35,tocIndex:27},{value:"Name",paraId:36,tocIndex:29},{value:"Description",paraId:36,tocIndex:29},{value:"Remark",paraId:36,tocIndex:29},{value:"fill",paraId:36,tocIndex:29},{value:"The color or gradient color for filling.",paraId:36,tocIndex:29},{value:"The corresponding property in Canvas is ",paraId:36,tocIndex:29},{value:"fillStyle",paraId:36,tocIndex:29},{value:".",paraId:36,tocIndex:29},{value:"stroke",paraId:36,tocIndex:29},{value:"The color, gradient color, or pattern for stroke.",paraId:36,tocIndex:29},{value:"The corresponding property in Canvas is ",paraId:36,tocIndex:29},{value:"strokeStyle",paraId:36,tocIndex:29},{value:".",paraId:36,tocIndex:29},{value:"shadowColor",paraId:36,tocIndex:29},{value:"The color for shadow.",paraId:36,tocIndex:29},{value:"shadowBlur",paraId:36,tocIndex:29},{value:"The blur level for shadow.",paraId:36,tocIndex:29},{value:"Larger the value, more blur.",paraId:36,tocIndex:29},{value:"shadowOffsetX",paraId:36,tocIndex:29},{value:"The horizontal offset of the shadow.",paraId:36,tocIndex:29},{value:"shadowOffsetY",paraId:36,tocIndex:29},{value:"The vertical offset of the shadow.",paraId:36,tocIndex:29},{value:"opacity",paraId:36,tocIndex:29},{value:"The opacity (alpha value) of the shape.",paraId:36,tocIndex:29},{value:"The corresponding property in Canvas is ",paraId:36,tocIndex:29},{value:"globalAlpha",paraId:36,tocIndex:29},{value:".",paraId:36,tocIndex:29},{value:"textAlign",paraId:36,tocIndex:29},{value:"The align way of the text.",paraId:36,tocIndex:29},{value:"Options: ",paraId:36,tocIndex:29},{value:"'center'",paraId:36,tocIndex:29},{value:" / ",paraId:36,tocIndex:29},{value:"'end'",paraId:36,tocIndex:29},{value:" / ",paraId:36,tocIndex:29},{value:"'left'",paraId:36,tocIndex:29},{value:" / ",paraId:36,tocIndex:29},{value:"'right'",paraId:36,tocIndex:29},{value:" / ",paraId:36,tocIndex:29},{value:"'start'",paraId:36,tocIndex:29},{value:". ",paraId:36,tocIndex:29},{value:"'start'",paraId:36,tocIndex:29},{value:" by default.",paraId:36,tocIndex:29},{value:"textBaseline",paraId:36,tocIndex:29},{value:"The base line of the text.",paraId:36,tocIndex:29},{value:"Options: ",paraId:36,tocIndex:29},{value:"'top'",paraId:36,tocIndex:29},{value:" / ",paraId:36,tocIndex:29},{value:"'middle'",paraId:36,tocIndex:29},{value:" / ",paraId:36,tocIndex:29},{value:"'bottom'",paraId:36,tocIndex:29},{value:" / ",paraId:36,tocIndex:29},{value:"'alphabetic'",paraId:36,tocIndex:29},{value:" / ",paraId:36,tocIndex:29},{value:"'hanging'",paraId:36,tocIndex:29},{value:". ",paraId:36,tocIndex:29},{value:"'bottom'",paraId:36,tocIndex:29},{value:" by default.",paraId:36,tocIndex:29},{value:"fontStyle",paraId:36,tocIndex:29},{value:"The font style of the text.",paraId:36,tocIndex:29},{value:"The corresponding property in CSS is ",paraId:36,tocIndex:29},{value:"font-style",paraId:36,tocIndex:29},{value:"fontVariant",paraId:36,tocIndex:29},{value:"The font variant of the text.",paraId:36,tocIndex:29},{value:"The corresponding property in CSS is ",paraId:36,tocIndex:29},{value:"font-variant",paraId:36,tocIndex:29},{value:"fontWeight",paraId:36,tocIndex:29},{value:"The font weight of the text.",paraId:36,tocIndex:29},{value:"The corresponding property in CSS is ",paraId:36,tocIndex:29},{value:"font-weight",paraId:36,tocIndex:29},{value:"fontSize",paraId:36,tocIndex:29},{value:"The font size of the text.",paraId:36,tocIndex:29},{value:"The corresponding property in CSS is ",paraId:36,tocIndex:29},{value:"font-size",paraId:36,tocIndex:29},{value:"fontFamily",paraId:36,tocIndex:29},{value:"The font family of the text.",paraId:36,tocIndex:29},{value:"The corresponding property in CSS is ",paraId:36,tocIndex:29},{value:"font-family",paraId:36,tocIndex:29},{value:"lineHeight",paraId:36,tocIndex:29},{value:"Line height of the text",paraId:36,tocIndex:29},{value:"The corresponding property in CSS is ",paraId:36,tocIndex:29},{value:"line-height",paraId:36,tocIndex:29},{value:"group.addShape('text', {\n  attrs: {\n    text: 'test text',\n    fill: 'red',\n    fontWeight: 400,\n    shadowOffsetX: 10,\n    shadowOffsetY: 10,\n    shadowColor: 'blue',\n    shadowBlur: 10,\n  },\n  // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n  name: 'text-shape',\n});\n",paraId:37,tocIndex:30},{value:"This shape is available only when the ",paraId:38,tocIndex:31},{value:"renderer",paraId:38,tocIndex:31},{value:" is assgined to ",paraId:38,tocIndex:31},{value:"'svg'",paraId:38,tocIndex:31},{value:" for graph instance.",paraId:38,tocIndex:31},{value:"⚠️ Attention:",paraId:39,tocIndex:31},{value:"Only support native HTML DOM, but not react or other components;",paraId:40,tocIndex:31},{value:"If you custom a Node type or an Edge type with dom shape, please use the original DOM events instead of events of G6.",paraId:40,tocIndex:31},{value:"In Safari, if you assign ",paraId:40,tocIndex:31},{value:"position:relative",paraId:40,tocIndex:31},{value:" for the a dom node, the rendered position might be unexpected. It is related to the ",paraId:40,tocIndex:31},{value:"foreignObject bug of Safari",paraId:40,tocIndex:31},{value:". ",paraId:40,tocIndex:31},{value:"Issus",paraId:40,tocIndex:31},{value:".",paraId:40,tocIndex:31},{value:"Name",paraId:41,tocIndex:32},{value:"Description",paraId:41,tocIndex:32},{value:"Remark",paraId:41,tocIndex:32},{value:"html",paraId:41,tocIndex:32},{value:"The html value for DOM shape",paraId:41,tocIndex:32},{value:'group.addShape(\'dom\', {\n  attrs: {\n    width: cfg.size[0],\n    height: cfg.size[1],\n    // DOM\'s html\n    html: `\n    <div style="background-color: #fff; border: 2px solid #5B8FF9; border-radius: 5px; width: ${\n      cfg.size[0] - 5\n    }px; height: ${cfg.size[1] - 5}px; display: flex;">\n      <div style="height: 100%; width: 33%; background-color: #CDDDFD">\n        <img alt="img" style="line-height: 100%; padding-top: 6px; padding-left: 8px;" src="https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*Q_FQT6nwEC8AAAAAAAAAAABkARQnAQ" width="20" height="20" />  \n      </div>\n      <span style="margin:auto; padding:auto; color: #5B8FF9">${cfg.label}</span>\n    </div>\n      `,\n  },\n  // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n  name: \'dom-shape\',\n  draggable: true,\n});\n',paraId:42,tocIndex:33}]},21854:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Graphics Shape (hereinafter referred to as Shape) in G6 is the shape of items (nodes/edges/combos), it can be a circle, a rect, path, and so on. ",paraId:0,tocIndex:0},{value:"A node / edge / combo is made up of one or several Shapes. The configurations on a node, an edge, or a label will be writed onto corresponding graphics Shape.",paraId:0,tocIndex:0},{value:"In the figure(Left) below, there is a node with a circle Shape; (Center) a node with a circle Shape and a text Shape; (right) a node with a text Shape and 5 circle Shapes including the main circle and four anchor points. Each node or edge has only one keyShape. The keyShape of each nodes in the figure below is the green circle. ",paraId:1,tocIndex:0},{value:"keyShape",paraId:2,tocIndex:0},{value:" is the Shape that responses interactions and ",paraId:1,tocIndex:0},{value:"State",paraId:3,tocIndex:0},{value:" changing. ",paraId:1,tocIndex:0},{value:"     ",paraId:1,tocIndex:0},{value:"      ",paraId:1,tocIndex:0},{value:"(Left) A node with one circle Shape, the keyShape is the circle. (Center) A node with a text Shape and the circle Shape, the keyShape is the circle. (Right) A node with a text Shape and five circle Shapes including the main circle and four anchors, the keyShape is the green circle.",paraId:4,tocIndex:0},{value:"G6 designs abundant built-in nodes / edges / combos by combing different Shapes. Built-in nodes includes 'circle', 'rect', 'ellipse', ...(Refer to ",paraId:5,tocIndex:0},{value:"Built-in Nodes",paraId:6,tocIndex:0},{value:"); Built-in edges includes 'line', 'polyline', 'cubic', ... (Refer to ",paraId:5,tocIndex:0},{value:"Built-in Edges",paraId:7,tocIndex:0},{value:"); Built-in combos includes 'circle', 'rect' (Refer to ",paraId:5,tocIndex:0},{value:"Built-in Combos",paraId:8,tocIndex:0},{value:").",paraId:5,tocIndex:0},{value:"Besides, G6 allows users to define their own types of item by register a custom node / edge / combo. Refer to ",paraId:9,tocIndex:0},{value:"Custom Node",paraId:10,tocIndex:0},{value:", ",paraId:9,tocIndex:0},{value:"Custom Edge",paraId:11,tocIndex:0},{value:", and ",paraId:9,tocIndex:0},{value:"Custom Combo",paraId:12,tocIndex:0},{value:".",paraId:9,tocIndex:0},{value:"As stated above, there is only one keyShape for each type of item. keyShape is returned by ",paraId:13,tocIndex:1},{value:"draw()",paraId:13,tocIndex:1},{value:" of each type of item. It has two main effcts:",paraId:13,tocIndex:1},{value:"The property ",paraId:14,tocIndex:2},{value:"style",paraId:14,tocIndex:2},{value:" in built-in nodes / edges / combos of G6 is only reponsed by keyShape. And the way to define the styles for different states (",paraId:14,tocIndex:2},{value:"nodeStateStyles",paraId:14,tocIndex:2},{value:" / ",paraId:14,tocIndex:2},{value:"edgeStateStyles",paraId:14,tocIndex:2},{value:" / ",paraId:14,tocIndex:2},{value:"comboStateStyles",paraId:14,tocIndex:2},{value:" on graph or ",paraId:14,tocIndex:2},{value:"stateStyles",paraId:14,tocIndex:2},{value:" of itself) on keyShape and other shapes are different, refer to ",paraId:14,tocIndex:2},{value:"Configure Styles for State",paraId:15,tocIndex:2},{value:" .",paraId:14,tocIndex:2},{value:"To break the rules above and achieve free definations, you can register a type of ",paraId:16,tocIndex:2},{value:"Custom Node",paraId:17,tocIndex:2},{value:", ",paraId:16,tocIndex:2},{value:"Custom Edge",paraId:18,tocIndex:2},{value:", or ",paraId:16,tocIndex:2},{value:"Custom Combo",paraId:19,tocIndex:2},{value:".",paraId:16,tocIndex:2},{value:"We use the built-in rect node in this example. The keyShape of the node is the rect Shape. There are other shapes including four small circle Shapes around and a text Shape for the label. The code below assigns the ",paraId:20,tocIndex:3},{value:"style",paraId:20,tocIndex:3},{value:" for the node. ",paraId:20,tocIndex:3},{value:"style",paraId:20,tocIndex:3},{value:" only takes effect on the keyShape. The styles for other Shapes need to be configured by other properties such as ",paraId:20,tocIndex:3},{value:"linkPoints",paraId:20,tocIndex:3},{value:" and ",paraId:20,tocIndex:3},{value:"labelCfg",paraId:20,tocIndex:3},{value:". We also listen to the mouse enter and mouse leave events to activate/inactivate the hover state, the responsing styles defined in ",paraId:20,tocIndex:3},{value:"nodeStateStyles",paraId:20,tocIndex:3},{value:" only takes effect on keyShape as well.",paraId:20,tocIndex:3},{value:"const data = {\n  nodes: [\n    {\n      x: 100,\n      y: 100,\n      label: 'rect',\n      type: 'rect',\n      style: {\n        // The style for the keyShape\n        fill: 'lightblue',\n        stroke: '#888',\n        lineWidth: 1,\n        radius: 7,\n      },\n      linkPoints: {\n        top: true,\n        bottom: true,\n        left: true,\n        right: true,\n        // ... Styles for linkPoints can be assigned here\n      },\n      // labelCfg: {...} // The style for the label con be assigned here\n    },\n  ],\n};\nconst graph = new G6.Graph({\n  container: 'mountNode',\n  width: 500,\n  height: 300,\n  nodeStateStyles: {\n    // The state styles defined as following will take effect on keyShape only. To define state styles on other shapes, refer to the link Configure Styles for State above\n    hover: {\n      fillOpacity: 0.1,\n      lineWidth: 10,\n    },\n  },\n});\ngraph.data(data);\ngraph.render();\n// Listen to the mouse enter event on node\ngraph.on('node:mouseenter', (evt) => {\n  const node = evt.item;\n  // activate the hover state of the node\n  graph.setItemState(node, 'hover', true);\n});\n// Listen to the mouse leave event on node\ngraph.on('node:mouseleave', (evt) => {\n  const node = evt.item;\n  // inactivate the hover state of the node\n  graph.setItemState(node, 'hover', false);\n});\n",paraId:21,tocIndex:3},{value:"KeyShape is used for ",paraId:22,tocIndex:4},{value:"defining the Bounding Box —— bbox（x, y, width, height)",paraId:22,tocIndex:4},{value:" of the node / combo to do some transformations and calculate the link points. Different keyShape will lead to different result link points.",paraId:22,tocIndex:4},{value:"There is a node with a rect Shape and a circle Shape in transparent filling and grey stroke.",paraId:23,tocIndex:5},{value:"When the keyShape of the node is the circle:",paraId:24,tocIndex:5},{value:"When the keyShape of the node is the rect:",paraId:25,tocIndex:5},{value:"You can skip this part if you are going to use the built-in items. For the users who have the requirements to ",paraId:26,tocIndex:6},{value:"Custom Node",paraId:27,tocIndex:6},{value:", ",paraId:26,tocIndex:6},{value:"Custom Edge",paraId:28,tocIndex:6},{value:", you'd better know the life cycle of Shape, and ",paraId:26,tocIndex:6},{value:"Custom Combo",paraId:29,tocIndex:6},{value:", you'd better know the life cycle of Shape.",paraId:26,tocIndex:6},{value:"The life cycle of Shape:",paraId:30,tocIndex:6},{value:"Initiate and render;",paraId:31,tocIndex:6},{value:"Update;",paraId:31,tocIndex:6},{value:"Manipulate;",paraId:31,tocIndex:6},{value:"Destroy.",paraId:31,tocIndex:6},{value:"'Destroy' can be controlled by the Graph. The other three states should be considered:",paraId:32,tocIndex:6},{value:"Render: Draw a Shape;",paraId:33,tocIndex:6},{value:"Update: Update the Shape when the data changed;",paraId:33,tocIndex:6},{value:"Manipulate: Add some states to the Shape, e.g. selected, active, and so on.",paraId:33,tocIndex:6},{value:"There are three key functions of custom node and edge which should be overrode according to your requirements:",paraId:34,tocIndex:6},{value:"draw(cfg, group)",paraId:35,tocIndex:6},{value:": Draw the Shape with configurations and its container. ",paraId:35,tocIndex:6},{value:"MUST",paraId:35,tocIndex:6},{value:" return a proper shape as the keyShape;",paraId:35,tocIndex:6},{value:"update(cfg, n)",paraId:35,tocIndex:6},{value:": Update the item according to the configurations and the item;",paraId:35,tocIndex:6},{value:"setState(name, value, item)",paraId:35,tocIndex:6},{value:": Response the states change for items.",paraId:35,tocIndex:6},{value:"For more information about custom node and edge, refer to ",paraId:36,tocIndex:6},{value:"Custom Item API",paraId:37,tocIndex:6},{value:".",paraId:36,tocIndex:6}]},14189:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"In G6 3.2 and previous versions, you can transform a shape as below:",paraId:0,tocIndex:0},{value:"Transform a shape with multiple operations. ",paraId:1,tocIndex:1},{value:"ts",paraId:1,tocIndex:1},{value:" is the array of the operations, which will be executed in order.",paraId:1,tocIndex:1},{value:"For example, there is a rect shape:",paraId:2,tocIndex:1},{value:"const rect = group.addShape('rect', {\n  attrs: {\n    width: 100,\n    height: 100,\n    x: 100,\n    y: 100,\n    fill: '#9EC9FF',\n    stroke: '#5B8FF9',\n    lineWidth: 3,\n  },\n  // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n  name: 'rect-shape',\n});\n",paraId:3,tocIndex:1},{value:"Now, we call the transform:",paraId:4,tocIndex:1},{value:"rect.transform([\n  ['t', 10, 10], // translate 10 pixels alone x-axis, and 10 pixels alone y-axis\n  ['s', 0.1, 1.2], // scale 1.2 times\n  ['r', Math.PI / 4], // rotate 45 degree\n]);\n",paraId:5,tocIndex:1},{value:"Translate the shape or group with vector (x, y).",paraId:6,tocIndex:2},{value:"Translate the shape or group with vector (x, y).",paraId:7,tocIndex:3},{value:"Rotate the shape or group with ",paraId:8,tocIndex:4},{value:"radian",paraId:8,tocIndex:4},{value:".",paraId:8,tocIndex:4},{value:"Scale the shape or group to sx times on x-axis and sy times on y-axis.",paraId:9,tocIndex:5},{value:"Clear the matrix to reset all the transformantions on the shape or group.",paraId:10,tocIndex:6},{value:"Get all the transformations of the shape or group.",paraId:11,tocIndex:7},{value:"After G6 3.3, the following transform methods are discarded:",paraId:12,tocIndex:8},{value:"🗑 translate;",paraId:13,tocIndex:8},{value:"🗑 move;",paraId:13,tocIndex:8},{value:"🗑 scale;",paraId:13,tocIndex:8},{value:"🗑 rotate;",paraId:13,tocIndex:8},{value:"🗑 rotateAtStart: rotate the shape or group with center (0, 0)。",paraId:13,tocIndex:8},{value:"To achive some transformation in G6 3.3, you should set the matrix value manually:",paraId:14,tocIndex:8},{value:"Get the current matrix of a shape or a group: getMatrix();",paraId:15,tocIndex:8},{value:"Set the matrix to a shape or a group: setMatrix(matrix) or attr('matrix', matrix);",paraId:15,tocIndex:8},{value:"Reset the matrix: resetMatrix().",paraId:15,tocIndex:8},{value:"We provide the function for transformantion:",paraId:16,tocIndex:8},{value:"import { ext } from '@antv/matrix-util';\n\nconst transform = ext.transform;\n\n// transform a 3*3 matrix\ntransform(m, [\n  ['t', x, y], // translate with vector (x, y)\n  ['r', Math.PI], // rotate\n  ['s', 2, 2], // scale at x-axis and y-axis\n]);\n",paraId:17,tocIndex:8},{value:"The following code registers a custom node with a transfromed rect with: translation with vector ",paraId:18,tocIndex:9},{value:"(100, 50)",paraId:18,tocIndex:9},{value:", rotating with angle ",paraId:18,tocIndex:9},{value:"Math.PI / 4",paraId:18,tocIndex:9},{value:", magnifying 2 times on x-axis and 0.5 times on y-axis:",paraId:18,tocIndex:9},{value:"import { ext } from '@antv/matrix-util';\n\nconst transform = ext.transform;\n\nG6.registerNode('example', {\n  drawShape: (cfg, group) => {\n    const rect = group.addShape('rect', {\n      attrs: {\n        width: 100,\n        height: 100,\n        x: 100,\n        y: 100,\n        fill: '#9EC9FF',\n        stroke: '#5B8FF9',\n        lineWidth: 3,\n      },\n      // must be assigned in G6 3.3 and later versions. it can be any string you want, but should be unique in a custom item type\n      name: 'rect-shape',\n    });\n    let matrix = rect.getMatrix();\n\n    // the init matrix for a shape or a group is null, initiate it with unit matrix\n    if (!matrix) matrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n    // transform a 3*3 matrix\n    const newMatrix = transform(matrix, [\n      ['t', 100, 50], // translate\n      ['r', Math.PI / 4], // rotate\n      ['s', 2, 0.5], // scale\n    ]);\n\n    rect.setMatrix(newMatrix);\n  },\n});\n",paraId:19,tocIndex:9}]},71708:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:'"Graph" means graphics, images, figures in the traditional cognitive. The "Graph" in graph theory and visuzliation has specific definition: it is make up of objects and their relationships. It might not a visual graph, but a relational data.',paraId:0,tocIndex:0},{value:"Graph is the carrier of G6. All the operations about events, behaviors, items are mounted on the instance of Graph.",paraId:1,tocIndex:0},{value:"The life cycle of an instance of Graph is:",paraId:2,tocIndex:0},{value:"Initialize -> Load data -> Render -> Update -> Destroy.",paraId:3,tocIndex:0},{value:"In ",paraId:4,tocIndex:0},{value:"Getting Started",paraId:5,tocIndex:0},{value:", we introduce the process of initialization, data loading, graph rendering. In this document, we will introduce the initialization/instantiating process in detail.",paraId:4,tocIndex:0},{value:"The code for interpretation of this chapter will base on the following JavaScript code embedded in HTML. By defining the data, instantiating the graph, loading the data, and rendering the graph, the code below results in the graph in the figure:",paraId:6,tocIndex:1},{value:" ",paraId:6,tocIndex:1},{value:"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Tutorial Demo</title>\n  </head>\n  <body>\n    /* The container of the graph */\n    <div id=\"mountNode\"></div>\n    /* Import G6 */\n    <script src=\"https://gw.alipayobjects.com/os/lib/antv/g6/4.3.11/dist/g6.min.js\"><\/script>\n    <script>\n      // Define the source data\n      const data = {\n        // The array of nodes\n        nodes: [\n          {\n            id: 'node1',\n            x: 100,\n            y: 200,\n          },\n          {\n            id: 'node2',\n            x: 300,\n            y: 200,\n          },\n        ],\n        // The array of edges\n        edges: [\n          // It is an edge link node1 to node2\n          {\n            source: 'node1',\n            target: 'node2',\n          },\n        ],\n      };\n\n      // Create an instance of G6.Graph\n      const graph = new G6.Graph({\n        container: 'mountNode', // Assign the id of the graph container\n        // The width and the height of the graph\n        width: 800,\n        height: 500,\n      });\n      // Load data\n      graph.data(data);\n      // Render the graph\n      graph.render();\n    <\/script>\n  </body>\n</html>\n",paraId:7,tocIndex:1},{value:"Instantiate a Graph by ",paraId:8,tocIndex:2},{value:"new G6.Graph(config)",paraId:8,tocIndex:2},{value:", where the parameter ",paraId:8,tocIndex:2},{value:"config",paraId:8,tocIndex:2},{value:" is an object of graph configurations. Most global configurations are assigned here. As shown in [Prerequisite Code](#Prerequisite Code), we instantiate a Graph:",paraId:8,tocIndex:2},{value:"const graph = new G6.Graph({\n  container: 'mountNode', // Assign the id of the graph container\n  // The width and the height of the graph\n  width: 800,\n  height: 500,\n});\n",paraId:9,tocIndex:2},{value:"There are three required configurations when instantiating a Graph:",paraId:10,tocIndex:3},{value:"container",paraId:11,tocIndex:3},{value:"Type: String | Object. The DOM container of the graph. It can be a string for the ",paraId:12,tocIndex:3},{value:"id",paraId:12,tocIndex:3},{value:" of the DOM container, or an object for the DOM object.",paraId:12,tocIndex:3},{value:"width",paraId:13,tocIndex:3},{value:" and ",paraId:13,tocIndex:3},{value:"height",paraId:13,tocIndex:3},{value:"Type: Number. THe width and the height of the graph.",paraId:14,tocIndex:3},{value:"There are some commonly used configurations. For complete configurations, please refer to ",paraId:15,tocIndex:4},{value:"Graph API",paraId:16,tocIndex:4},{value:".",paraId:15,tocIndex:4},{value:"renderer",paraId:17,tocIndex:5},{value:"Type: String; Default: 'canvas', the value could be 'canvas' or 'svg'. Render the graph with Canvas or SVG. ",paraId:18,tocIndex:5},{value:"It is supported expecting V3.3.x.",paraId:18,tocIndex:5},{value:" SVG rendering in G6 supports all the functions in Canvas rendering. We all known that the performance of SVG is not good as canvas. So use Canvas rendering in the case of large data instead. Expect for default nodes and edges and graphics shapes used in custom node and edge as Canvas version, SVG also supports ",paraId:18,tocIndex:5},{value:"'dom'",paraId:18,tocIndex:5},{value:" shape when customing node or edge. Detials are in ",paraId:18,tocIndex:5},{value:"Custom Node with Dom",paraId:19,tocIndex:5},{value:".",paraId:18,tocIndex:5},{value:"fitView",paraId:20,tocIndex:6},{value:"Type: Boolean; Default: 'false'. Whether to fit the canvas to the view port automatically.",paraId:21,tocIndex:6},{value:"fitViewPadding",paraId:22,tocIndex:6},{value:"Type: Number | Array; Default: 0. It is the padding between canvas and the border of view port. Takes effect only when ",paraId:23,tocIndex:6},{value:"fitView: true",paraId:23,tocIndex:6},{value:".",paraId:23,tocIndex:6},{value:"fitCenter",paraId:24,tocIndex:6},{value:"Type: Boolean; Default: 'false'. Whether to translate the graph to align its center with the canvas. ",paraId:25,tocIndex:6},{value:"Supported by v3.5.1.",paraId:25,tocIndex:6},{value:"defaultNode",paraId:26,tocIndex:7},{value:"Type: Object. The global configuration for all the nodes in the graph in default state. It includes the style properties and other properties of nodes. Refer to ",paraId:27,tocIndex:7},{value:"Built-in Nodes",paraId:28,tocIndex:7},{value:".",paraId:27,tocIndex:7},{value:"defaultEdge",paraId:29,tocIndex:7},{value:"Type: Object. The global configuration for all the edges in the graph in default state. It includes the style properties and other properties of edges. Refer to ",paraId:30,tocIndex:7},{value:"Built-in Edges",paraId:31,tocIndex:7},{value:".",paraId:30,tocIndex:7},{value:"nodeStateStyles",paraId:32,tocIndex:7},{value:"Type: Object. The style properties of nodes in different states expect for default state. Refer to ",paraId:33,tocIndex:7},{value:"State",paraId:34,tocIndex:7},{value:".",paraId:33,tocIndex:7},{value:"edgeStateStyles",paraId:35,tocIndex:7},{value:"Type: Object. The style properties of edges in different states expect for default state. Refer to ",paraId:36,tocIndex:7},{value:"State",paraId:37,tocIndex:7},{value:".",paraId:36,tocIndex:7},{value:"layout",paraId:38,tocIndex:8},{value:"Type: Object. If there is no position information in data, Random Layout will take effect by default. The layout options and their configurations can be found in ",paraId:39,tocIndex:8},{value:"Layout",paraId:40,tocIndex:8},{value:"，",paraId:39,tocIndex:8},{value:"Graph Layout API",paraId:41,tocIndex:8},{value:" or ",paraId:39,tocIndex:8},{value:"TreeGraph Layout API",paraId:42,tocIndex:8},{value:".",paraId:39,tocIndex:8},{value:"modes",paraId:43,tocIndex:9},{value:"Type: Array. It is the set of interactions modes. One mode is made up of one or more interaction events. Refer to ",paraId:44,tocIndex:9},{value:"Mode",paraId:45,tocIndex:9},{value:".",paraId:44,tocIndex:9},{value:"animate",paraId:46,tocIndex:10},{value:"Type: Boolean; Default: 'false'. Whether to activate the global animation. If it is ",paraId:47,tocIndex:10},{value:"true",paraId:47,tocIndex:10},{value:", the positions of nodes will be changed animatively when the layout is changed.",paraId:47,tocIndex:10},{value:"animateCfg",paraId:48,tocIndex:10},{value:"Type: Object. The configurations for global animation, includes easing functions, duration, and so on. Refer to ",paraId:49,tocIndex:10},{value:"Animation",paraId:50,tocIndex:10},{value:".",paraId:49,tocIndex:10},{value:"plugins",paraId:51,tocIndex:11},{value:"Type: Array. The plugins to assist the anaysis. Refer to ",paraId:52,tocIndex:11},{value:"Plugins and Tools",paraId:53,tocIndex:11},{value:".",paraId:52,tocIndex:11},{value:"There are two required functions in the code of [Prerequisite Code](#Prerequisite Code):",paraId:54,tocIndex:12},{value:"// Load the data\ngraph.data(data);\n// Render the graph\ngraph.render();\n",paraId:55,tocIndex:12},{value:"data(data)",paraId:56,tocIndex:12},{value:": Load the source ",paraId:56,tocIndex:12},{value:"data",paraId:56,tocIndex:12},{value:" to the instance ",paraId:56,tocIndex:12},{value:"graph",paraId:56,tocIndex:12},{value:".",paraId:56,tocIndex:12},{value:"render(): render the graph.",paraId:56,tocIndex:12},{value:"For complete functions for Graph, refer to ",paraId:57,tocIndex:12},{value:"Graph API",paraId:58,tocIndex:12},{value:".",paraId:57,tocIndex:12}]},5747:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"In an application of graph visualization, how to choose a suitable layout so that the data queried every time can be clearly displayed is a big challenge. Although we can allow user to switch the layout and their configuration like Gephi, but it is obviousely inefficient. And the users might not able to choose a perfect layout. In order to completely solve the problem, G6 provides intelligent layout prediction capabilities. The prediction engine will recommend the most suitable layout based on the data.",paraId:0,tocIndex:0},{value:"Intelligent layout refers to modeling in combination with neural networks and training output prediction models through a large amount of labeled data (label layout classification). In business scenarios, the real graph data is predicted through the model, so as to recommend the most suitable data layout classification method.",paraId:1,tocIndex:1},{value:"@antv/vis-predict-engine is positioned as a prediction engine for visualization, which is mainly used for classification prediction of graph layout in the short term. Generally speaking, the prediction engine will support layout configuration parameter prediction, node category prediction, chart category prediction, etc.",paraId:2,tocIndex:2},{value:"The overall process of G6 map layout prediction is shown in the following figure:",paraId:3,tocIndex:2},{value:"The AntV team encapsulated the ability of graph layout prediction into the NPM package @antv/vis-predict-engine, and used the predict method to predict the layout of the provided data. The basic usage is as follows:",paraId:4,tocIndex:3},{value:"import G6 from '@antv/g6'\nimport { GraphLayoutPredict } from '@antv/vis-predict-engine'\nconst data = {\n    nodes: [],\n  edges: []\n}\n// predictLayout indicates the predicted layout type, such as 'force' or 'radial'\n// 'confidence' is the confidence of the prediction\nconst { predictLayout, confidence } = await GraphLayoutPredict.predict(data);\nconst graph = new G6.Graph({\n    ... // other configurations\n    layout: {\n    type: predictLayout\n  }\n})\n",paraId:5,tocIndex:3},{value:'As shown in the figure below, in a medical and health map, the layout effect of "force" obtained by the intelligent layout prediction engine is the best, and the comparison experiment also meets expectations.',paraId:6,tocIndex:4},{value:"AI Layout Prediction DEMO",paraId:7}]},20778:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"G6 provides abundant commonly used built-in layouts for Graph and TreeGraph respectively. The usage can be found in: ",paraId:0},{value:"Graph Layout",paraId:1},{value:", ",paraId:0},{value:"Tree Layout",paraId:2},{value:", ",paraId:0},{value:"Graph Layout API",paraId:3},{value:" or ",paraId:0},{value:"TreeGraph Layout API",paraId:4},{value:". Custom layout mechanism of G6 allows the users to design their own type of layout to meet their special requirements.",paraId:0},{value:"   ",paraId:5},{value:"⚠️Attention:",paraId:5},{value:" ",paraId:5},{value:" The TreeGraph does not support custom layout temporarily.",paraId:5},{value:"In this document, we will introduce the custom layout by registering a layout for Bigraph.",paraId:6},{value:"/**\n * Register a Layout\n * @param {string} type The layout type is must assigned to an unique string\n * @param {object} layout The layout method\n */\nLayout.registerLayout = function(type, {\n  /**\n   * The default configurations of the custom layout. It will be mixed by the configurations from users\n   */\n  getDefaultCfg() {\n    return {};\n  },\n  /**\n   * Initialize\n   * @param {object} data data\n   */\n  init(data) {},\n  /**\n   * Execute the layout\n   */\n  execute() {},\n  /**\n   * Layout with the data\n   * @param {object} data 数据\n   */\n  layout(data) {},\n  /**\n   * Update the layout configurations, but do not execute the layout\n   * @param {object} cfg The new configurations\n   */\n  updateCfg(cfg) {},\n  /**\n   * Destroy\n   */\n  destroy() {},\n});\n",paraId:7,tocIndex:0},{value:"Now, we are going to register a layout for Bigraph. Bigraph is the graph with nodes divided into two parts. There will be no edges between the nodes which are belong to the same part. In the custom layout, we sort the nodes according to their topology to reduce the edge crossings.",paraId:8,tocIndex:1},{value:"The data of the Bigraph is shown below, where the nodes are divided into ",paraId:9,tocIndex:1},{value:"'part1'",paraId:9,tocIndex:1},{value:" and ",paraId:9,tocIndex:1},{value:"'part2'",paraId:9,tocIndex:1},{value:" by the property ",paraId:9,tocIndex:1},{value:"cluster",paraId:9,tocIndex:1},{value:".",paraId:9,tocIndex:1},{value:"const data = {\n  nodes: [\n    { id: '0', label: 'A', cluster: 'part1' },\n    { id: '1', label: 'B', cluster: 'part1' },\n    { id: '2', label: 'C', cluster: 'part1' },\n    { id: '3', label: 'D', cluster: 'part1' },\n    { id: '4', label: 'E', cluster: 'part1' },\n    { id: '5', label: 'F', cluster: 'part1' },\n    { id: '6', label: 'a', cluster: 'part2' },\n    { id: '7', label: 'b', cluster: 'part2' },\n    { id: '8', label: 'c', cluster: 'part2' },\n    { id: '9', label: 'd', cluster: 'part2' },\n  ],\n  edges: [\n    { source: '0', target: '6' },\n    { source: '0', target: '7' },\n    { source: '0', target: '9' },\n    { source: '1', target: '6' },\n    { source: '1', target: '9' },\n    { source: '1', target: '7' },\n    { source: '2', target: '8' },\n    { source: '2', target: '9' },\n    { source: '2', target: '6' },\n    { source: '3', target: '8' },\n    { source: '4', target: '6' },\n    { source: '4', target: '7' },\n    { source: '5', target: '9' },\n  ],\n};\n",paraId:10,tocIndex:1},{value:"To reduce the edge crossings, we sort the nodes in ",paraId:11,tocIndex:2},{value:"part1",paraId:11,tocIndex:2},{value:" and ",paraId:11,tocIndex:2},{value:"part2",paraId:11,tocIndex:2},{value:" respectively. The process is:",paraId:11,tocIndex:2},{value:"Step 1: Assign the index from 0 randomly for the nodes in ",paraId:12,tocIndex:2},{value:"'part1'",paraId:12,tocIndex:2},{value:" and ",paraId:12,tocIndex:2},{value:"'part2'",paraId:12,tocIndex:2},{value:" respectively;",paraId:12,tocIndex:2},{value:"Step 2: Traverse the nodes in ",paraId:12,tocIndex:2},{value:"'part1'",paraId:12,tocIndex:2},{value:". For each node A:\n",paraId:12,tocIndex:2},{value:"Find the set of related nodes of A (connect to A directly) in ",paraId:13,tocIndex:2},{value:"'part2'",paraId:13,tocIndex:2},{value:" ",paraId:13,tocIndex:2},{value:". Sum up the indexes of the nodes in ",paraId:13,tocIndex:2},{value:", and divided it by the number of elements in ",paraId:13,tocIndex:2},{value:". Replace the index of A by the result: ",paraId:13,tocIndex:2},{value:"Step 3: Tranverse the nodes in ",paraId:12,tocIndex:2},{value:"'part2'",paraId:12,tocIndex:2},{value:". For each node A(Similar to the Step 2):\n",paraId:12,tocIndex:2},{value:"Find the set of related nodes of B (connect to B directly) in ",paraId:14,tocIndex:2},{value:"'part1'",paraId:14,tocIndex:2},{value:" ",paraId:14,tocIndex:2},{value:". Sum up the indexes of the nodes in ",paraId:14,tocIndex:2},{value:", and divided it by the number of elements in ",paraId:14,tocIndex:2},{value:". Replace the index of A by the result: ",paraId:14,tocIndex:2},{value:"Step 4: Sort the nodes in ",paraId:12,tocIndex:2},{value:"part1",paraId:12,tocIndex:2},{value:" and ",paraId:12,tocIndex:2},{value:"part2",paraId:12,tocIndex:2},{value:" respectively according to their indexed. The result order determine the postions of the nodes in the final layout.",paraId:12,tocIndex:2},{value:"The following code below register a layout named ",paraId:15,tocIndex:3},{value:"'bigraph-layout'",paraId:15,tocIndex:3},{value:" for Bigraph. The complete code can be found in: ",paraId:15,tocIndex:3},{value:"Cusom Layout-Bigraph",paraId:15,tocIndex:3},{value:". The usage of custom layout is the same as built-in layouts: configure the ",paraId:15,tocIndex:3},{value:"layout",paraId:15,tocIndex:3},{value:" to the graph when instantiating. Refer to: ",paraId:15,tocIndex:3},{value:"Graph Layout",paraId:16,tocIndex:3},{value:".",paraId:15,tocIndex:3},{value:"G6.registerLayout('bigraph-layout', {\n  // Default configurations\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      center: [0, 0], // The center of the layout\n      biSep: 100, // The separation of these two parts\n      nodeSep: 20, // The separation between nodes in the same part\n      direction: 'horizontal', // The direction of the two parts\n      nodeSize: 20, // The node size\n    };\n  },\n  // Execute the layout\n  execute: function execute() {\n    var self = this;\n    var center = self.center;\n    var biSep = self.biSep;\n    var nodeSep = self.nodeSep;\n    var nodeSize = self.nodeSize;\n    var part1Pos = 0,\n      part2Pos = 0;\n    // Layout the graph in horizontally\n    if (self.direction === 'horizontal') {\n      part1Pos = center[0] - biSep / 2;\n      part2Pos = center[0] + biSep / 2;\n    }\n    var nodes = self.nodes;\n    var edges = self.edges;\n    var part1Nodes = [];\n    var part2Nodes = [];\n    var part1NodeMap = new Map();\n    var part2NodeMap = new Map();\n    // Separate the nodes and init the positions\n    nodes.forEach(function (node, i) {\n      if (node.cluster === 'part1') {\n        part1Nodes.push(node);\n        part1NodeMap.set(node.id, i);\n      } else {\n        part2Nodes.push(node);\n        part2NodeMap.set(node.id, i);\n      }\n    });\n\n    // Sort the nodes in part1\n    part1Nodes.forEach(function (p1n) {\n      var index = 0;\n      var adjCount = 0;\n      edges.forEach(function (edge) {\n        var sourceId = edge.source;\n        var targetId = edge.target;\n        if (sourceId === p1n.id) {\n          index += part2NodeMap.get(targetId);\n          adjCount++;\n        } else if (targetId === p1n.id) {\n          index += part2NodeMap.get(sourceId);\n          adjCount++;\n        }\n      });\n      index /= adjCount;\n      p1n.index = index;\n    });\n    part1Nodes.sort(function (a, b) {\n      return a.index - b.index;\n    });\n\n    // Sort the nodes in part2\n    part2Nodes.forEach(function (p2n) {\n      var index = 0;\n      var adjCount = 0;\n      edges.forEach(function (edge) {\n        var sourceId = edge.source;\n        var targetId = edge.target;\n        if (sourceId === p2n.id) {\n          index += part1NodeMap.get(targetId);\n          adjCount++;\n        } else if (targetId === p2n.id) {\n          index += part1NodeMap.get(sourceId);\n          adjCount++;\n        }\n      });\n      index /= adjCount;\n      p2n.index = index;\n    });\n    part2Nodes.sort(function (a, b) {\n      return a.index - b.index;\n    });\n\n    // Place the ndoes\n    var hLength = part1Nodes.length > part2Nodes.length ? part1Nodes.length : part2Nodes.length;\n    var height = hLength * (nodeSep + nodeSize);\n    var begin = center[1] - height / 2;\n    if (self.direction === 'vertical') {\n      begin = center[0] - height / 2;\n    }\n    part1Nodes.forEach(function (p1n, i) {\n      if (self.direction === 'horizontal') {\n        p1n.x = part1Pos;\n        p1n.y = begin + i * (nodeSep + nodeSize);\n      } else {\n        p1n.x = begin + i * (nodeSep + nodeSize);\n        p1n.y = part1Pos;\n      }\n    });\n    part2Nodes.forEach(function (p2n, i) {\n      if (self.direction === 'horizontal') {\n        p2n.x = part2Pos;\n        p2n.y = begin + i * (nodeSep + nodeSize);\n      } else {\n        p2n.x = begin + i * (nodeSep + nodeSize);\n        p2n.y = part2Pos;\n      }\n    });\n  },\n});\n",paraId:17,tocIndex:3}]},2788:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Graph layouts are the algorithms arranging the node positions to obtain a understandable visualizaiton. According to the differences of data strucutre, the layouts can be categorized into: general graph layout and tree graph layout. There are several layout algorithms for them respectively. By utilizing the built-in layouts, ",paraId:0,tocIndex:0},{value:"Translating the layouts and their configurations, translating the data",paraId:1,tocIndex:0},{value:" can be achieved. Besides, G6 provides the ",paraId:0,tocIndex:0},{value:"Web-Worker",paraId:2,tocIndex:0},{value:" for general graph layout in case layout calculation takes too long to block page interaction.",paraId:0,tocIndex:0},{value:"Besides, G6 supports ",paraId:3,tocIndex:0},{value:"Custom Layout",paraId:4,tocIndex:0},{value:" mechanism for users to design their own layout algorithm.",paraId:3,tocIndex:0},{value:"In fact, 'layout' is a free mechanism in G6. The built-in layouts only calculate and manipulate the ",paraId:5,tocIndex:0},{value:"x",paraId:5,tocIndex:0},{value:" and ",paraId:5,tocIndex:0},{value:"y",paraId:5,tocIndex:0},{value:" in node data. In other word, users can assign ",paraId:5,tocIndex:0},{value:"x",paraId:5,tocIndex:0},{value:" and ",paraId:5,tocIndex:0},{value:"y",paraId:5,tocIndex:0},{value:" to nodes by any other ways including the algorithms from the third-party libraries. Once G6 find the ",paraId:5,tocIndex:0},{value:"x",paraId:5,tocIndex:0},{value:" and ",paraId:5,tocIndex:0},{value:"y",paraId:5,tocIndex:0},{value:" information on data, it will render the graph according to it.",paraId:5,tocIndex:0},{value:"In this ducoment, we will introduce the layout algorithms in detail.",paraId:6,tocIndex:0},{value:"Random Layout",paraId:7,tocIndex:1},{value:": Randomizes the node postions;",paraId:8,tocIndex:1},{value:"Force2 Layout",paraId:9,tocIndex:1},{value:": Force-directed layout comes from graphin-force, but with better performance;",paraId:8,tocIndex:1},{value:"GForce Layout",paraId:10,tocIndex:1},{value:": Classical force-directed layout supports GPU parallel computing, supported by G6 4.0;",paraId:8,tocIndex:1},{value:"Force Layout",paraId:11,tocIndex:1},{value:": Classical force-directed layout imported from d3;",paraId:8,tocIndex:1},{value:"Fruchterman Layout",paraId:12,tocIndex:1},{value:": A kind of force-directed layout;",paraId:8,tocIndex:1},{value:"Circular Layout",paraId:13,tocIndex:1},{value:": Arranges the nodes on a circle;",paraId:8,tocIndex:1},{value:"Radial Layout",paraId:14,tocIndex:1},{value:": Arranges the nodes around a focus node radially;",paraId:8,tocIndex:1},{value:"MDS Layout",paraId:15,tocIndex:1},{value:": Multidemensional Scaling;",paraId:8,tocIndex:1},{value:"Dagre Layout",paraId:16,tocIndex:1},{value:": Arranges the nodes hierarchically;",paraId:8,tocIndex:1},{value:"Concentric Layout",paraId:17,tocIndex:1},{value:": Arranges the nodes on concentric circles;",paraId:8,tocIndex:1},{value:"Grid Layout",paraId:18,tocIndex:1},{value:": Arranges the nodes on grid.",paraId:8,tocIndex:1},{value:"Combo Force Layout",paraId:19,tocIndex:1},{value:"：",paraId:8,tocIndex:1},{value:"New feature of V3.5",paraId:8,tocIndex:1},{value:" Designed for graph with combos.",paraId:8,tocIndex:1},{value:"Configure ",paraId:20,tocIndex:2},{value:"layout",paraId:20,tocIndex:2},{value:" to the Graph instance to assign the layout methods and their configurations. The following code assigns the layout with ",paraId:20,tocIndex:2},{value:"type: 'force'",paraId:20,tocIndex:2},{value:", which means the classical force-directed layout algorithm. The configurations ",paraId:20,tocIndex:2},{value:"preventOverlap: true",paraId:20,tocIndex:2},{value:" and ",paraId:20,tocIndex:2},{value:"nodeSize: 30",paraId:20,tocIndex:2},{value:" are assigned to prevent node overlappings, where the ",paraId:20,tocIndex:2},{value:"nodeSize",paraId:20,tocIndex:2},{value:" is used for collide detection. More layout configurations can be found in the following sections.",paraId:20,tocIndex:2},{value:"const graph = new G6.Graph({\n  // ...                      // Other configurations for the graph\n  layout: {\n    // Object, the layout configuration. Random layout by default\n    type: 'force',\n    preventOverlap: true,\n    nodeSize: 30,\n    // workerEnabled: true, // Whether enable webworker\n    // gpuEnabled: true // Whether enable GPU version. supported by G6 4.0, and only support gForce and fruchterman layout\n    // ...                    // Other configurations for the layout\n  },\n});\n",paraId:21,tocIndex:2},{value:"Different layout algorithms have different configurations. For all the general graph layout algorithms in G6, you can enable the web-worker by configure ",paraId:22,tocIndex:2},{value:"workerEnabled: true",paraId:22,tocIndex:2},{value:" in the ",paraId:22,tocIndex:2},{value:"layout",paraId:22,tocIndex:2},{value:" configuration above. With web-worker, layout algorithms performed on large data with high cost will not block the web page.",paraId:22,tocIndex:2},{value:"When the ",paraId:23,tocIndex:2},{value:"layout",paraId:23,tocIndex:2},{value:" is not assigned:",paraId:23,tocIndex:2},{value:"If there is position information with ",paraId:24,tocIndex:2},{value:"x",paraId:24,tocIndex:2},{value:" and ",paraId:24,tocIndex:2},{value:"y",paraId:24,tocIndex:2},{value:" in node data, G6 renders the graph with them;",paraId:24,tocIndex:2},{value:"If the position information does not exist in the node data, Random Layout will take effect by default.",paraId:24,tocIndex:2},{value:"General graph layout API: ",paraId:25,tocIndex:3},{value:"General Graph Layout API",paraId:26,tocIndex:3},{value:".",paraId:25,tocIndex:3},{value:"Description",paraId:27,tocIndex:4},{value:": Randomizes the node positions. ",paraId:27,tocIndex:4},{value:"API",paraId:27,tocIndex:4},{value:": ",paraId:27,tocIndex:4},{value:"Random API",paraId:28,tocIndex:4},{value:" ",paraId:27,tocIndex:4},{value:"Configuration",paraId:27,tocIndex:4},{value:":",paraId:27,tocIndex:4},{value:"Name",paraId:29,tocIndex:4},{value:"Type",paraId:29,tocIndex:4},{value:"Example",paraId:29,tocIndex:4},{value:"Default",paraId:29,tocIndex:4},{value:"Description",paraId:29,tocIndex:4},{value:"center",paraId:29,tocIndex:4},{value:"Array",paraId:29,tocIndex:4},{value:"[ 0, 0 ]",paraId:29,tocIndex:4},{value:"The center of the graph",paraId:29,tocIndex:4},{value:"The center of the layout",paraId:29,tocIndex:4},{value:"width",paraId:29,tocIndex:4},{value:"Number",paraId:29,tocIndex:4},{value:"300",paraId:29,tocIndex:4},{value:"The width of the graph",paraId:29,tocIndex:4},{value:"height",paraId:29,tocIndex:4},{value:"Number",paraId:29,tocIndex:4},{value:"300",paraId:29,tocIndex:4},{value:"The height of the graph",paraId:29,tocIndex:4},{value:"workerEnabled",paraId:29,tocIndex:4},{value:"Boolean",paraId:29,tocIndex:4},{value:"true / false",paraId:29,tocIndex:4},{value:"false",paraId:29,tocIndex:4},{value:"Whether to enable the web-worker in case layout calculation takes too long to block page interaction",paraId:29,tocIndex:4},{value:" ",paraId:30,tocIndex:5},{value:"Description",paraId:30,tocIndex:5},{value:": Force2 implements the force-directed layout algorithm by G6 4.7.0, comes from graphin-force. It supports assign different masses and center gravities for different nodes freedomly. Comparing to graphin-force, it has much better performance. If you want to fix the positions for some nodes during calculation, assign ",paraId:30,tocIndex:5},{value:"fx",paraId:30,tocIndex:5},{value:" and ",paraId:30,tocIndex:5},{value:"fy",paraId:30,tocIndex:5},{value:" for the nodes as fixing positions. ",paraId:30,tocIndex:5},{value:"Demo for fixing node",paraId:31,tocIndex:5},{value:".\n",paraId:30,tocIndex:5},{value:" ",paraId:30,tocIndex:5},{value:"API",paraId:30,tocIndex:5},{value:": ",paraId:30,tocIndex:5},{value:"GForce API",paraId:32,tocIndex:5},{value:" ",paraId:30,tocIndex:5},{value:"Configuration",paraId:30,tocIndex:5},{value:":",paraId:30,tocIndex:5},{value:"Name",paraId:33,tocIndex:5},{value:"Type",paraId:33,tocIndex:5},{value:"Example",paraId:33,tocIndex:5},{value:"Default",paraId:33,tocIndex:5},{value:"Description",paraId:33,tocIndex:5},{value:"center",paraId:33,tocIndex:5},{value:"Array",paraId:33,tocIndex:5},{value:"[ 0, 0 ]",paraId:33,tocIndex:5},{value:"The center of the graph",paraId:33,tocIndex:5},{value:"The center of the layout",paraId:33,tocIndex:5},{value:"animate",paraId:33,tocIndex:5},{value:"boolean",paraId:33,tocIndex:5},{value:"false",paraId:33,tocIndex:5},{value:"false",paraId:33,tocIndex:5},{value:"Whether refresh the node positions on the canvas each iteration. If it is ",paraId:33,tocIndex:5},{value:"true",paraId:33,tocIndex:5},{value:", the nodes on the canvas will looks like animating with forces",paraId:33,tocIndex:5},{value:"linkDistance",paraId:33,tocIndex:5},{value:"Number / Function",paraId:33,tocIndex:5},{value:"Example 1: ",paraId:33,tocIndex:5},{value:"50",paraId:33,tocIndex:5},{value:" ",paraId:33,tocIndex:5},{value:"Example 2:",paraId:33,tocIndex:5},{value:"d => {",paraId:33,tocIndex:5},{value:"  // d is an edge",paraId:33,tocIndex:5},{value:"  if (d.id === 'edge1') {",paraId:33,tocIndex:5},{value:"    return 100;",paraId:33,tocIndex:5},{value:"  }",paraId:33,tocIndex:5},{value:"  return 50;",paraId:33,tocIndex:5},{value:"}",paraId:33,tocIndex:5},{value:"1",paraId:33,tocIndex:5},{value:"The edge length. It can be a function to define the different edge lengths for different edges (Example 2)",paraId:33,tocIndex:5},{value:"nodeStrength",paraId:33,tocIndex:5},{value:"Number / Function",paraId:33,tocIndex:5},{value:"Exmaple 1: -30 ",paraId:33,tocIndex:5},{value:"Exmaple 2:",paraId:33,tocIndex:5},{value:"d => {",paraId:33,tocIndex:5},{value:"  // d is a node",paraId:33,tocIndex:5},{value:"  if (d.id === 'node1') {",paraId:33,tocIndex:5},{value:"    return -100;",paraId:33,tocIndex:5},{value:"  }",paraId:33,tocIndex:5},{value:"  return -30;",paraId:33,tocIndex:5},{value:"} / 1000",paraId:33,tocIndex:5},{value:"1000",paraId:33,tocIndex:5},{value:"The strength of node force. Positive value means repulsive force, negative value means attractive force (it is different from 'force')(As example 2)",paraId:33,tocIndex:5},{value:"edgeStrength",paraId:33,tocIndex:5},{value:"Number / Function",paraId:33,tocIndex:5},{value:"Example 1: 1 ",paraId:33,tocIndex:5},{value:"Example 2:",paraId:33,tocIndex:5},{value:"d => {",paraId:33,tocIndex:5},{value:"  // d is a node",paraId:33,tocIndex:5},{value:"  if (d.id === 'node1') {",paraId:33,tocIndex:5},{value:"    return 10;",paraId:33,tocIndex:5},{value:"  }",paraId:33,tocIndex:5},{value:"  return 1;",paraId:33,tocIndex:5},{value:"}",paraId:33,tocIndex:5},{value:"200",paraId:33,tocIndex:5},{value:"The strength of edge force. Calculated according to the degree of nodes by default (As Example 2)",paraId:33,tocIndex:5},{value:"preventOverlap",paraId:33,tocIndex:5},{value:"Boolean",paraId:33,tocIndex:5},{value:"false",paraId:33,tocIndex:5},{value:"false",paraId:33,tocIndex:5},{value:"Whether to prevent node overlappings. To activate preventing node overlappings, ",paraId:33,tocIndex:5},{value:"nodeSize",paraId:33,tocIndex:5},{value:" is required, which is used for collide detection. The size in the node data will take effect if ",paraId:33,tocIndex:5},{value:"nodeSize",paraId:33,tocIndex:5},{value:" is not assigned",paraId:33,tocIndex:5},{value:"nodeSize",paraId:33,tocIndex:5},{value:"Array / Number",paraId:33,tocIndex:5},{value:"20",paraId:33,tocIndex:5},{value:"undefined",paraId:33,tocIndex:5},{value:"The diameter of the node. It is used for preventing node overlappings. If ",paraId:33,tocIndex:5},{value:"nodeSize",paraId:33,tocIndex:5},{value:" is not assigned, the size property in node data will take effect. If the size in node data does not exist either, ",paraId:33,tocIndex:5},{value:"nodeSize",paraId:33,tocIndex:5},{value:" is assigned to 10 by default",paraId:33,tocIndex:5},{value:"nodeSpacing",paraId:33,tocIndex:5},{value:"Number / Function",paraId:33,tocIndex:5},{value:"Example 1 : 10",paraId:33,tocIndex:5},{value:"Example 2 : ",paraId:33,tocIndex:5},{value:"d => {",paraId:33,tocIndex:5},{value:"  // d is a node",paraId:33,tocIndex:5},{value:"  if (d.id === 'node1') {",paraId:33,tocIndex:5},{value:"    return 100;",paraId:33,tocIndex:5},{value:"  }",paraId:33,tocIndex:5},{value:"  return 10;",paraId:33,tocIndex:5},{value:"}",paraId:33,tocIndex:5},{value:"0",paraId:33,tocIndex:5},{value:"Takes effect when ",paraId:33,tocIndex:5},{value:"preventOverlap",paraId:33,tocIndex:5},{value:" is ",paraId:33,tocIndex:5},{value:"true",paraId:33,tocIndex:5},{value:". It is the minimum distance between nodes to prevent node overlappings. It can be a function to define different distances for different nodes (example 2)",paraId:33,tocIndex:5},{value:"minMovement",paraId:33,tocIndex:5},{value:"Number",paraId:33,tocIndex:5},{value:"0.1",paraId:33,tocIndex:5},{value:"0.5",paraId:33,tocIndex:5},{value:"When the average/minimum/maximum (according to ",paraId:33,tocIndex:5},{value:"distanceThresholdMode",paraId:33,tocIndex:5},{value:") movement of nodes in one iteration is smaller than ",paraId:33,tocIndex:5},{value:"minMovement",paraId:33,tocIndex:5},{value:", terminate the layout",paraId:33,tocIndex:5},{value:"distanceThresholdMode",paraId:33,tocIndex:5},{value:"'mean' / 'max' / 'min'",paraId:33,tocIndex:5},{value:"'mean'",paraId:33,tocIndex:5},{value:"'mean'",paraId:33,tocIndex:5},{value:"The condition to judge with ",paraId:33,tocIndex:5},{value:"minMovement",paraId:33,tocIndex:5},{value:", ",paraId:33,tocIndex:5},{value:"'mean'",paraId:33,tocIndex:5},{value:" means the layout stops while the nodes' average movement is smaller than ",paraId:33,tocIndex:5},{value:"minMovement",paraId:33,tocIndex:5},{value:", ",paraId:33,tocIndex:5},{value:"'max'",paraId:33,tocIndex:5},{value:" / ",paraId:33,tocIndex:5},{value:"'min'",paraId:33,tocIndex:5},{value:" means the layout stops while the nodes' maximum/minimum movement is smaller than ",paraId:33,tocIndex:5},{value:"minMovement",paraId:33,tocIndex:5},{value:". ",paraId:33,tocIndex:5},{value:"'mean'",paraId:33,tocIndex:5},{value:" by default",paraId:33,tocIndex:5},{value:"maxIteration",paraId:33,tocIndex:5},{value:"Number",paraId:33,tocIndex:5},{value:"500",paraId:33,tocIndex:5},{value:"1000",paraId:33,tocIndex:5},{value:"The max number of iterations. If the average movement do not reach ",paraId:33,tocIndex:5},{value:"minMovement",paraId:33,tocIndex:5},{value:" but the iteration number is over ",paraId:33,tocIndex:5},{value:"maxIteration",paraId:33,tocIndex:5},{value:", terminate the layout",paraId:33,tocIndex:5},{value:"damping",paraId:33,tocIndex:5},{value:"Number",paraId:33,tocIndex:5},{value:"0.99",paraId:33,tocIndex:5},{value:"0.9",paraId:33,tocIndex:5},{value:"Range [0, 1], affect the speed of decreasing node moving speed. Large the number, slower the decreasing",paraId:33,tocIndex:5},{value:"interval",paraId:33,tocIndex:5},{value:"number",paraId:33,tocIndex:5},{value:"0.05",paraId:33,tocIndex:5},{value:"0.02",paraId:33,tocIndex:5},{value:"controls the speed of the nodes' movement in each iteration",paraId:33,tocIndex:5},{value:"factor",paraId:33,tocIndex:5},{value:"number",paraId:33,tocIndex:5},{value:"1",paraId:33,tocIndex:5},{value:"1",paraId:33,tocIndex:5},{value:"Coefficient for the repulsive force. Larger the number, larger the repulsive force",paraId:33,tocIndex:5},{value:"maxSpeed",paraId:33,tocIndex:5},{value:"Number",paraId:33,tocIndex:5},{value:"10",paraId:33,tocIndex:5},{value:"1000",paraId:33,tocIndex:5},{value:"The max speed in each iteration",paraId:33,tocIndex:5},{value:"coulombDisScale",paraId:33,tocIndex:5},{value:"Number",paraId:33,tocIndex:5},{value:"0.003",paraId:33,tocIndex:5},{value:"0.005",paraId:33,tocIndex:5},{value:"A parameter for repulsive force between nodes. Large the number, larger the repulsion",paraId:33,tocIndex:5},{value:"getMass",paraId:33,tocIndex:5},{value:"Function",paraId:33,tocIndex:5},{value:"d => {",paraId:33,tocIndex:5},{value:"  // d is a node",paraId:33,tocIndex:5},{value:"  if (d.id === 'node1') {",paraId:33,tocIndex:5},{value:"    return 100;",paraId:33,tocIndex:5},{value:"  }",paraId:33,tocIndex:5},{value:"  return 10;",paraId:33,tocIndex:5},{value:"}",paraId:33,tocIndex:5},{value:"undefined",paraId:33,tocIndex:5},{value:"It is a callback returns the mass of each node. If it is not assigned, the degree of each node will take effect. The usage is similar to ",paraId:33,tocIndex:5},{value:"nodeSpacing",paraId:33,tocIndex:5},{value:"getCenter",paraId:33,tocIndex:5},{value:"Function",paraId:33,tocIndex:5},{value:"(d, degree) => {",paraId:33,tocIndex:5},{value:"  // d is a node, degree is the degree of the node",paraId:33,tocIndex:5},{value:"  if (d.degree === 0') {",paraId:33,tocIndex:5},{value:"    return [100, 100, 10]; // x, y, strength",paraId:33,tocIndex:5},{value:"  }",paraId:33,tocIndex:5},{value:"  return [210, 150, 5]; // x, y, strength",paraId:33,tocIndex:5},{value:"}",paraId:33,tocIndex:5},{value:"undefined",paraId:33,tocIndex:5},{value:"It is a callback returns gravity center and the gravity strength for each node",paraId:33,tocIndex:5},{value:"gravity",paraId:33,tocIndex:5},{value:"Number",paraId:33,tocIndex:5},{value:"20",paraId:33,tocIndex:5},{value:"10",paraId:33,tocIndex:5},{value:"The gravity strength to the ",paraId:33,tocIndex:5},{value:"center",paraId:33,tocIndex:5},{value:" for all the nodes. Larger the number, more compact the nodes",paraId:33,tocIndex:5},{value:"centripetalOptions",paraId:33,tocIndex:5},{value:"CentripetalOptions",paraId:33,tocIndex:5},{value:"refers to below",paraId:33,tocIndex:5},{value:"refers to below",paraId:33,tocIndex:5},{value:"Configurations for the center forces, including the center coordinates and the force strengths for leaf nodes, discrete nodes, and other nodes",paraId:33,tocIndex:5},{value:"leafCluster",paraId:33,tocIndex:5},{value:"boolean",paraId:33,tocIndex:5},{value:"false",paraId:33,tocIndex:5},{value:"false",paraId:33,tocIndex:5},{value:"Whether to cluster the leaf nodes. If it is ",paraId:33,tocIndex:5},{value:"true",paraId:33,tocIndex:5},{value:", the value of  ",paraId:33,tocIndex:5},{value:"centripetalOptions.single",paraId:33,tocIndex:5},{value:" will be set to 100; The returned value of ",paraId:33,tocIndex:5},{value:"getClusterNodeStrength",paraId:33,tocIndex:5},{value:" will be used for ",paraId:33,tocIndex:5},{value:"centripetalOptions.leaf",paraId:33,tocIndex:5},{value:"; ",paraId:33,tocIndex:5},{value:"getClusterNodeStrength.center",paraId:33,tocIndex:5},{value:" will take the average center for all the leaf nodes in current iteration",paraId:33,tocIndex:5},{value:"clustering",paraId:33,tocIndex:5},{value:"boolean",paraId:33,tocIndex:5},{value:"false",paraId:33,tocIndex:5},{value:"false",paraId:33,tocIndex:5},{value:"Whehter cluster all the nodes according to ",paraId:33,tocIndex:5},{value:"nodeClusterBy",paraId:33,tocIndex:5},{value:". If it is ",paraId:33,tocIndex:5},{value:"true",paraId:33,tocIndex:5},{value:", the returned value of ",paraId:33,tocIndex:5},{value:"getClusterNodeStrength",paraId:33,tocIndex:5},{value:" will be used for ",paraId:33,tocIndex:5},{value:"centripetalOptions.single",paraId:33,tocIndex:5},{value:", ",paraId:33,tocIndex:5},{value:"centripetalOptions.leaf",paraId:33,tocIndex:5},{value:", and ",paraId:33,tocIndex:5},{value:"centripetalOptions.others",paraId:33,tocIndex:5},{value:"; ",paraId:33,tocIndex:5},{value:"centripetalOptions.center",paraId:33,tocIndex:5},{value:" will take the average center of all the nodes in the same cluster",paraId:33,tocIndex:5},{value:"nodeClusterBy",paraId:33,tocIndex:5},{value:"string",paraId:33,tocIndex:5},{value:"undefined",paraId:33,tocIndex:5},{value:"undefined",paraId:33,tocIndex:5},{value:"The field name in the node data to cluster the nodes. Takes effect when ",paraId:33,tocIndex:5},{value:"clustering",paraId:33,tocIndex:5},{value:" is ",paraId:33,tocIndex:5},{value:"true",paraId:33,tocIndex:5},{value:", and the ",paraId:33,tocIndex:5},{value:"centripetalOptions",paraId:33,tocIndex:5},{value:" will be generated automatically. You could configure the strengths for different nodes with ",paraId:33,tocIndex:5},{value:"clusterNodeStrength",paraId:33,tocIndex:5},{value:"clusterNodeStrength",paraId:33,tocIndex:5},{value:"number / Function",paraId:33,tocIndex:5},{value:"node => node.weight",paraId:33,tocIndex:5},{value:"20",paraId:33,tocIndex:5},{value:"The clustering center force strengths for different nodes, takes effect with ",paraId:33,tocIndex:5},{value:"clustering",paraId:33,tocIndex:5},{value:" and ",paraId:33,tocIndex:5},{value:"nodeClusterBy",paraId:33,tocIndex:5},{value:"monitor",paraId:33,tocIndex:5},{value:"(params:{ energy: number, nodes: NodeData[], edges: EdgeData[], iterations: number }) => void",paraId:33,tocIndex:5},{value:"undefined",paraId:33,tocIndex:5},{value:"undefined",paraId:33,tocIndex:5},{value:"The callback function for each iteration, the parameters including the energy of the layout, all the nodes' data, all the edges' data, and the current iteration number. Note that the calculation for energy will take extra cost. If the ",paraId:33,tocIndex:5},{value:"monitor",paraId:33,tocIndex:5},{value:" is not configured, the calculation will be ignore.",paraId:33,tocIndex:5},{value:"onTick",paraId:33,tocIndex:5},{value:"Function",paraId:33,tocIndex:5},{value:"undefined",paraId:33,tocIndex:5},{value:"The callback function of each iteration",paraId:33,tocIndex:5},{value:"onLayoutEnd",paraId:33,tocIndex:5},{value:"Function",paraId:33,tocIndex:5},{value:"undefined",paraId:33,tocIndex:5},{value:"The callback function after layout",paraId:33,tocIndex:5},{value:"workerEnabled",paraId:33,tocIndex:5},{value:"Boolean",paraId:33,tocIndex:5},{value:"true / false",paraId:33,tocIndex:5},{value:"false",paraId:33,tocIndex:5},{value:"Whether to enable the web-worker in case layout calculation takes too long to block page interaction",paraId:33,tocIndex:5},{value:"gpuEnabled",paraId:33,tocIndex:5},{value:"Boolean",paraId:33,tocIndex:5},{value:"true / false",paraId:33,tocIndex:5},{value:"false",paraId:33,tocIndex:5},{value:"Whether to enable the GPU parallel computing, supported by G6 4.0. If the machine or browser does not support GPU computing, it will be degraded to CPU computing automatically.",paraId:33,tocIndex:5},{value:"Type ",paraId:34,tocIndex:5},{value:"CentripetalOptions",paraId:34,tocIndex:5},{value:":",paraId:34,tocIndex:5},{value:"Parameter",paraId:35,tocIndex:5},{value:"Type",paraId:35,tocIndex:5},{value:"Example",paraId:35,tocIndex:5},{value:"Default",paraId:35,tocIndex:5},{value:"Description",paraId:35,tocIndex:5},{value:"single",paraId:35,tocIndex:5},{value:"number / Function",paraId:35,tocIndex:5},{value:"2",paraId:35,tocIndex:5},{value:"2,",paraId:35,tocIndex:5},{value:"the center force strength for discrete nodes (with 0 degree)",paraId:35,tocIndex:5},{value:"leaf",paraId:35,tocIndex:5},{value:"number / Function",paraId:35,tocIndex:5},{value:"2",paraId:35,tocIndex:5},{value:"2",paraId:35,tocIndex:5},{value:"the center force strength for leaf nodes (with 1 degree)",paraId:35,tocIndex:5},{value:"others",paraId:35,tocIndex:5},{value:"number / Function",paraId:35,tocIndex:5},{value:"1",paraId:35,tocIndex:5},{value:"1",paraId:35,tocIndex:5},{value:"the center force strength for other nodes beside leaf and discrete nodes",paraId:35,tocIndex:5},{value:"center",paraId:35,tocIndex:5},{value:"Function",paraId:35,tocIndex:5},{value:"(node, nodes, edges) => ({ x: 10, y: 10 })",paraId:35,tocIndex:5},{value:"center of the graph",paraId:35,tocIndex:5},{value:"the center force's coordinate. You can return different values for different nodes",paraId:35,tocIndex:5},{value:"Example for ",paraId:36,tocIndex:5},{value:"centripetalOptions",paraId:36,tocIndex:5},{value:":",paraId:36,tocIndex:5},{value:"centripetalOptions: {\n  // single, leaf, and others support function configuration, the parameters are the current node data, all the nodes' data, all the edges' data\n  single: (node, nodes, edges) => node.field1 || 1,\n  leaf: (node, nodes, edges) => node.field2 || 1,\n  others: (node, nodes, edges) => node.field3|| 1,\n  // the parameters are current node data, all the nodes' data, all the edges' data, width of the graph, height of the graph\n  center: (node, nodes, edges, width, height) => {\n    if (node.field4) return { x: width / 2, y: height / 2 };\n    if (node.field5) return { x: node.field6, y: node.field7 };\n    // ...\n  }\n}\n",paraId:37,tocIndex:5},{value:" ",paraId:38,tocIndex:6},{value:"Description",paraId:38,tocIndex:6},{value:": GForce implements the classical force-directed layout algorithm by G6 4.0. It supports assign different masses and center gravities for different nodes freedomly. More importantly, it supports GPU parallel acceleration. If you want to fix the positions for some nodes during calculation, assign ",paraId:38,tocIndex:6},{value:"fx",paraId:38,tocIndex:6},{value:" and ",paraId:38,tocIndex:6},{value:"fy",paraId:38,tocIndex:6},{value:" for the nodes as fixing positions. ",paraId:38,tocIndex:6},{value:"Demo for fixing node",paraId:39,tocIndex:6},{value:".\n",paraId:38,tocIndex:6},{value:" ",paraId:38,tocIndex:6},{value:"API",paraId:38,tocIndex:6},{value:": ",paraId:38,tocIndex:6},{value:"GForce API",paraId:40,tocIndex:6},{value:" ",paraId:38,tocIndex:6},{value:"Configuration",paraId:38,tocIndex:6},{value:":",paraId:38,tocIndex:6},{value:"Name",paraId:41,tocIndex:6},{value:"Type",paraId:41,tocIndex:6},{value:"Example",paraId:41,tocIndex:6},{value:"Default",paraId:41,tocIndex:6},{value:"Description",paraId:41,tocIndex:6},{value:"center",paraId:41,tocIndex:6},{value:"Array",paraId:41,tocIndex:6},{value:"[ 0, 0 ]",paraId:41,tocIndex:6},{value:"The center of the graph",paraId:41,tocIndex:6},{value:"The center of the layout",paraId:41,tocIndex:6},{value:"linkDistance",paraId:41,tocIndex:6},{value:"Number / Function",paraId:41,tocIndex:6},{value:"Example 1: ",paraId:41,tocIndex:6},{value:"50",paraId:41,tocIndex:6},{value:" ",paraId:41,tocIndex:6},{value:"Example 2:",paraId:41,tocIndex:6},{value:"d => {",paraId:41,tocIndex:6},{value:"  // d is an edge",paraId:41,tocIndex:6},{value:"  if (d.id === 'edge1') {",paraId:41,tocIndex:6},{value:"    return 100;",paraId:41,tocIndex:6},{value:"  }",paraId:41,tocIndex:6},{value:"  return 50;",paraId:41,tocIndex:6},{value:"}",paraId:41,tocIndex:6},{value:"1",paraId:41,tocIndex:6},{value:"The edge length. It can be a function to define the different edge lengths for different edges (Example 2)",paraId:41,tocIndex:6},{value:"nodeStrength",paraId:41,tocIndex:6},{value:"Number / Function",paraId:41,tocIndex:6},{value:"Exmaple 1: -30 ",paraId:41,tocIndex:6},{value:"Exmaple 2:",paraId:41,tocIndex:6},{value:"d => {",paraId:41,tocIndex:6},{value:"  // d is a node",paraId:41,tocIndex:6},{value:"  if (d.id === 'node1') {",paraId:41,tocIndex:6},{value:"    return -100;",paraId:41,tocIndex:6},{value:"  }",paraId:41,tocIndex:6},{value:"  return -30;",paraId:41,tocIndex:6},{value:"} / 1000",paraId:41,tocIndex:6},{value:"1000",paraId:41,tocIndex:6},{value:"The strength of node force. Positive value means repulsive force, negative value means attractive force (it is different from 'force')(As example 2)",paraId:41,tocIndex:6},{value:"edgeStrength",paraId:41,tocIndex:6},{value:"Number / Function",paraId:41,tocIndex:6},{value:"Example 1: 1 ",paraId:41,tocIndex:6},{value:"Example 2:",paraId:41,tocIndex:6},{value:"d => {",paraId:41,tocIndex:6},{value:"  // d is a node",paraId:41,tocIndex:6},{value:"  if (d.id === 'node1') {",paraId:41,tocIndex:6},{value:"    return 10;",paraId:41,tocIndex:6},{value:"  }",paraId:41,tocIndex:6},{value:"  return 1;",paraId:41,tocIndex:6},{value:"}",paraId:41,tocIndex:6},{value:"200",paraId:41,tocIndex:6},{value:"The strength of edge force. Calculated according to the degree of nodes by default (As Example 2)",paraId:41,tocIndex:6},{value:"preventOverlap",paraId:41,tocIndex:6},{value:"Boolean",paraId:41,tocIndex:6},{value:"false",paraId:41,tocIndex:6},{value:"false",paraId:41,tocIndex:6},{value:"Whether to prevent node overlappings. To activate preventing node overlappings, ",paraId:41,tocIndex:6},{value:"nodeSize",paraId:41,tocIndex:6},{value:" is required, which is used for collide detection. The size in the node data will take effect if ",paraId:41,tocIndex:6},{value:"nodeSize",paraId:41,tocIndex:6},{value:" is not assigned",paraId:41,tocIndex:6},{value:"nodeSize",paraId:41,tocIndex:6},{value:"Array / Number",paraId:41,tocIndex:6},{value:"20",paraId:41,tocIndex:6},{value:"undefined",paraId:41,tocIndex:6},{value:"The diameter of the node. It is used for preventing node overlappings. If ",paraId:41,tocIndex:6},{value:"nodeSize",paraId:41,tocIndex:6},{value:" is not assigned, the size property in node data will take effect. If the size in node data does not exist either, ",paraId:41,tocIndex:6},{value:"nodeSize",paraId:41,tocIndex:6},{value:" is assigned to 10 by default",paraId:41,tocIndex:6},{value:"nodeSpacing",paraId:41,tocIndex:6},{value:"Number / Function",paraId:41,tocIndex:6},{value:"Example 1 : 10",paraId:41,tocIndex:6},{value:"Example 2 : ",paraId:41,tocIndex:6},{value:"d => {",paraId:41,tocIndex:6},{value:"  // d is a node",paraId:41,tocIndex:6},{value:"  if (d.id === 'node1') {",paraId:41,tocIndex:6},{value:"    return 100;",paraId:41,tocIndex:6},{value:"  }",paraId:41,tocIndex:6},{value:"  return 10;",paraId:41,tocIndex:6},{value:"}",paraId:41,tocIndex:6},{value:"0",paraId:41,tocIndex:6},{value:"Takes effect when ",paraId:41,tocIndex:6},{value:"preventOverlap",paraId:41,tocIndex:6},{value:" is ",paraId:41,tocIndex:6},{value:"true",paraId:41,tocIndex:6},{value:". It is the minimum distance between nodes to prevent node overlappings. It can be a function to define different distances for different nodes (example 2)",paraId:41,tocIndex:6},{value:"minMovement",paraId:41,tocIndex:6},{value:"Number",paraId:41,tocIndex:6},{value:"0.1",paraId:41,tocIndex:6},{value:"0.5",paraId:41,tocIndex:6},{value:"When the average movement of nodes in one iteration is smaller than ",paraId:41,tocIndex:6},{value:"minMovement",paraId:41,tocIndex:6},{value:", terminate the layout",paraId:41,tocIndex:6},{value:"maxIteration",paraId:41,tocIndex:6},{value:"Number",paraId:41,tocIndex:6},{value:"500",paraId:41,tocIndex:6},{value:"1000",paraId:41,tocIndex:6},{value:"The max number of iterations. If the average movement do not reach ",paraId:41,tocIndex:6},{value:"minMovement",paraId:41,tocIndex:6},{value:" but the iteration number is over ",paraId:41,tocIndex:6},{value:"maxIteration",paraId:41,tocIndex:6},{value:", terminate the layout",paraId:41,tocIndex:6},{value:"damping",paraId:41,tocIndex:6},{value:"Number",paraId:41,tocIndex:6},{value:"0.99",paraId:41,tocIndex:6},{value:"0.9",paraId:41,tocIndex:6},{value:"Range [0, 1], affect the speed of decreasing node moving speed. Large the number, slower the decreasing",paraId:41,tocIndex:6},{value:"maxSpeed",paraId:41,tocIndex:6},{value:"Number",paraId:41,tocIndex:6},{value:"10",paraId:41,tocIndex:6},{value:"1000",paraId:41,tocIndex:6},{value:"The max speed in each iteration",paraId:41,tocIndex:6},{value:"coulombDisScale",paraId:41,tocIndex:6},{value:"Number",paraId:41,tocIndex:6},{value:"0.003",paraId:41,tocIndex:6},{value:"0.005",paraId:41,tocIndex:6},{value:"A parameter for repulsive force between nodes. Large the number, larger the repulsion",paraId:41,tocIndex:6},{value:"getMass",paraId:41,tocIndex:6},{value:"Function",paraId:41,tocIndex:6},{value:"d => {",paraId:41,tocIndex:6},{value:"  // d is a node",paraId:41,tocIndex:6},{value:"  if (d.id === 'node1') {",paraId:41,tocIndex:6},{value:"    return 100;",paraId:41,tocIndex:6},{value:"  }",paraId:41,tocIndex:6},{value:"  return 10;",paraId:41,tocIndex:6},{value:"}",paraId:41,tocIndex:6},{value:"undefined",paraId:41,tocIndex:6},{value:"It is a callback returns the mass of each node. If it is not assigned, the degree of each node will take effect. The usage is similar to ",paraId:41,tocIndex:6},{value:"nodeSpacing",paraId:41,tocIndex:6},{value:"getCenter",paraId:41,tocIndex:6},{value:"Function",paraId:41,tocIndex:6},{value:"(d, degree) => {",paraId:41,tocIndex:6},{value:"  // d is a node, degree is the degree of the node",paraId:41,tocIndex:6},{value:"  if (d.degree === 0') {",paraId:41,tocIndex:6},{value:"    return [100, 100, 10]; // x, y, strength",paraId:41,tocIndex:6},{value:"  }",paraId:41,tocIndex:6},{value:"  return [210, 150, 5]; // x, y, strength",paraId:41,tocIndex:6},{value:"}",paraId:41,tocIndex:6},{value:"undefined",paraId:41,tocIndex:6},{value:"It is a callback returns gravity center and the gravity strength for each node",paraId:41,tocIndex:6},{value:"gravity",paraId:41,tocIndex:6},{value:"Number",paraId:41,tocIndex:6},{value:"20",paraId:41,tocIndex:6},{value:"10",paraId:41,tocIndex:6},{value:"The gravity strength to the ",paraId:41,tocIndex:6},{value:"center",paraId:41,tocIndex:6},{value:" for all the nodes. Larger the number, more compact the nodes",paraId:41,tocIndex:6},{value:"onTick",paraId:41,tocIndex:6},{value:"Function",paraId:41,tocIndex:6},{value:"undefined",paraId:41,tocIndex:6},{value:"The callback function of each iteration",paraId:41,tocIndex:6},{value:"onLayoutEnd",paraId:41,tocIndex:6},{value:"Function",paraId:41,tocIndex:6},{value:"undefined",paraId:41,tocIndex:6},{value:"The callback function after layout",paraId:41,tocIndex:6},{value:"workerEnabled",paraId:41,tocIndex:6},{value:"Boolean",paraId:41,tocIndex:6},{value:"true / false",paraId:41,tocIndex:6},{value:"false",paraId:41,tocIndex:6},{value:"Whether to enable the web-worker in case layout calculation takes too long to block page interaction",paraId:41,tocIndex:6},{value:"gpuEnabled",paraId:41,tocIndex:6},{value:"Boolean",paraId:41,tocIndex:6},{value:"true / false",paraId:41,tocIndex:6},{value:"false",paraId:41,tocIndex:6},{value:"Whether to enable the GPU parallel computing, supported by G6 4.0. If the machine or browser does not support GPU computing, it will be degraded to CPU computing automatically.",paraId:41,tocIndex:6},{value:"graphLayout/guide",paraId:42,tocIndex:7},{value:" ",paraId:43,tocIndex:7},{value:"Description",paraId:43,tocIndex:7},{value:": Classical force-directed layout algorithm. If you want to fix the positions for some nodes during calculation, assign ",paraId:43,tocIndex:7},{value:"fx",paraId:43,tocIndex:7},{value:" and ",paraId:43,tocIndex:7},{value:"fy",paraId:43,tocIndex:7},{value:" for the nodes as fixing positions. ",paraId:43,tocIndex:7},{value:"Demo for fixing the dragged node with force layout",paraId:44,tocIndex:7},{value:".\n",paraId:43,tocIndex:7},{value:" ",paraId:43,tocIndex:7},{value:"API",paraId:43,tocIndex:7},{value:": ",paraId:43,tocIndex:7},{value:"Force API",paraId:45,tocIndex:7},{value:" ",paraId:43,tocIndex:7},{value:"Configuration",paraId:43,tocIndex:7},{value:": Corresponds to the configurations in force-directed algorithm in d3.js",paraId:43,tocIndex:7},{value:"Name",paraId:46,tocIndex:7},{value:"Type",paraId:46,tocIndex:7},{value:"Example",paraId:46,tocIndex:7},{value:"Default",paraId:46,tocIndex:7},{value:"Description",paraId:46,tocIndex:7},{value:"center",paraId:46,tocIndex:7},{value:"Array",paraId:46,tocIndex:7},{value:"[ 0, 0 ]",paraId:46,tocIndex:7},{value:"The center of the graph",paraId:46,tocIndex:7},{value:"The center of the layout",paraId:46,tocIndex:7},{value:"linkDistance",paraId:46,tocIndex:7},{value:"Number / Function",paraId:46,tocIndex:7},{value:"Example 1: ",paraId:46,tocIndex:7},{value:"50",paraId:46,tocIndex:7},{value:" ",paraId:46,tocIndex:7},{value:"Example 2:",paraId:46,tocIndex:7},{value:"d => {",paraId:46,tocIndex:7},{value:"  // d is an edge",paraId:46,tocIndex:7},{value:"  if (d.id === 'edge1') {",paraId:46,tocIndex:7},{value:"    return 100;",paraId:46,tocIndex:7},{value:"  }",paraId:46,tocIndex:7},{value:"  return 50;",paraId:46,tocIndex:7},{value:"}",paraId:46,tocIndex:7},{value:"50",paraId:46,tocIndex:7},{value:"The edge length. It can be a function to define the different edge lengths for different edges (Example 2)",paraId:46,tocIndex:7},{value:"nodeStrength",paraId:46,tocIndex:7},{value:"Number / Function",paraId:46,tocIndex:7},{value:"Example 1: ",paraId:46,tocIndex:7},{value:"-30",paraId:46,tocIndex:7},{value:" ",paraId:46,tocIndex:7},{value:"Example 2:",paraId:46,tocIndex:7},{value:"d => {",paraId:46,tocIndex:7},{value:"  // d is a node",paraId:46,tocIndex:7},{value:"  if (d.id === 'node1') {",paraId:46,tocIndex:7},{value:"    return -100;",paraId:46,tocIndex:7},{value:"  }",paraId:46,tocIndex:7},{value:"  return -30;",paraId:46,tocIndex:7},{value:"}",paraId:46,tocIndex:7},{value:"null",paraId:46,tocIndex:7},{value:"The strength of node force. Positive value means attractive force, negative value means repulsive force (Example 2)",paraId:46,tocIndex:7},{value:"edgeStrength",paraId:46,tocIndex:7},{value:"Number",paraId:46,tocIndex:7},{value:"Example 1: 1 ",paraId:46,tocIndex:7},{value:"Example 2:",paraId:46,tocIndex:7},{value:"d => {",paraId:46,tocIndex:7},{value:"  // d is a node",paraId:46,tocIndex:7},{value:"  if (d.id === 'node1') {",paraId:46,tocIndex:7},{value:"    return 10;",paraId:46,tocIndex:7},{value:"  }",paraId:46,tocIndex:7},{value:"  return 1;",paraId:46,tocIndex:7},{value:"}",paraId:46,tocIndex:7},{value:"null",paraId:46,tocIndex:7},{value:"The strength of edge force, ranges from 0 to 1. Calculated according to the degree of nodes by default (Example 2)",paraId:46,tocIndex:7},{value:"preventOverlap",paraId:46,tocIndex:7},{value:"Boolean",paraId:46,tocIndex:7},{value:"false",paraId:46,tocIndex:7},{value:"false",paraId:46,tocIndex:7},{value:"Whether to prevent node overlappings. To activate preventing node overlappings, ",paraId:46,tocIndex:7},{value:"nodeSize",paraId:46,tocIndex:7},{value:" is required, which is used for collide detection. The size in the node data will take effect if ",paraId:46,tocIndex:7},{value:"nodeSize",paraId:46,tocIndex:7},{value:" is not assigned. If the ",paraId:46,tocIndex:7},{value:"nodeSize",paraId:46,tocIndex:7},{value:" and size in data are both undefiend, ",paraId:46,tocIndex:7},{value:"nodeSize",paraId:46,tocIndex:7},{value:" will be assigned to 10 by default",paraId:46,tocIndex:7},{value:"nodeSize",paraId:46,tocIndex:7},{value:"Array / Number",paraId:46,tocIndex:7},{value:"20",paraId:46,tocIndex:7},{value:"undefined",paraId:46,tocIndex:7},{value:"The diameter of the node. It is used for preventing node overlappings. If ",paraId:46,tocIndex:7},{value:"nodeSize",paraId:46,tocIndex:7},{value:" is not assigned, the size property in node data will take effect. If the size in node data does not exist either, ",paraId:46,tocIndex:7},{value:"nodeSize",paraId:46,tocIndex:7},{value:" is assigned to 10 by default",paraId:46,tocIndex:7},{value:"nodeSpacing",paraId:46,tocIndex:7},{value:"Number / Function",paraId:46,tocIndex:7},{value:"Example 1: 10",paraId:46,tocIndex:7},{value:"Example 2:  ",paraId:46,tocIndex:7},{value:"d => {",paraId:46,tocIndex:7},{value:"  // d is a node",paraId:46,tocIndex:7},{value:"  if (d.id === 'node1') {",paraId:46,tocIndex:7},{value:"    return 100;",paraId:46,tocIndex:7},{value:"  }",paraId:46,tocIndex:7},{value:"  return 10;",paraId:46,tocIndex:7},{value:"}",paraId:46,tocIndex:7},{value:"0",paraId:46,tocIndex:7},{value:"Takes effect when ",paraId:46,tocIndex:7},{value:"preventOverlap",paraId:46,tocIndex:7},{value:" is ",paraId:46,tocIndex:7},{value:"true",paraId:46,tocIndex:7},{value:". It is the minimum distance between nodes to prevent node overlappings. It can be a function to define different distances for different nodes (example 2)",paraId:46,tocIndex:7},{value:"alphaDecay",paraId:46,tocIndex:7},{value:"Number",paraId:46,tocIndex:7},{value:"0.03",paraId:46,tocIndex:7},{value:"0.028",paraId:46,tocIndex:7},{value:"The decay ratio of alpha for convergence. THe range is [0, 1]. 0.028 corresponds to 300 times iteration",paraId:46,tocIndex:7},{value:"alphaMin",paraId:46,tocIndex:7},{value:"Number",paraId:46,tocIndex:7},{value:"0.03",paraId:46,tocIndex:7},{value:"0.001",paraId:46,tocIndex:7},{value:"The threshold to stop the iteration",paraId:46,tocIndex:7},{value:"alpha",paraId:46,tocIndex:7},{value:"Number",paraId:46,tocIndex:7},{value:"0.1",paraId:46,tocIndex:7},{value:"0.3",paraId:46,tocIndex:7},{value:"The current alpha of convergence",paraId:46,tocIndex:7},{value:"collideStrength",paraId:46,tocIndex:7},{value:"Number",paraId:46,tocIndex:7},{value:"0.8",paraId:46,tocIndex:7},{value:"1",paraId:46,tocIndex:7},{value:"The strength of force for preventing node overlappings. The range is [0, 1]",paraId:46,tocIndex:7},{value:"clustering",paraId:46,tocIndex:7},{value:"Boolean",paraId:46,tocIndex:7},{value:"false",paraId:46,tocIndex:7},{value:"false",paraId:46,tocIndex:7},{value:"Whether run the force layout with clustering",paraId:46,tocIndex:7},{value:"clusterNodeStrength",paraId:46,tocIndex:7},{value:"Number",paraId:46,tocIndex:7},{value:"-1",paraId:46,tocIndex:7},{value:"-0.8",paraId:46,tocIndex:7},{value:"The force between nodes. It will be repulsive force while it is negative",paraId:46,tocIndex:7},{value:"clusterEdgeStrength",paraId:46,tocIndex:7},{value:"Number",paraId:46,tocIndex:7},{value:"0.1",paraId:46,tocIndex:7},{value:"0.2",paraId:46,tocIndex:7},{value:"The force along the edge",paraId:46,tocIndex:7},{value:"clusterEdgeDistance",paraId:46,tocIndex:7},{value:"Number",paraId:46,tocIndex:7},{value:"100",paraId:46,tocIndex:7},{value:"50",paraId:46,tocIndex:7},{value:"The edge length between the clusters",paraId:46,tocIndex:7},{value:"clusterNodeSize",paraId:46,tocIndex:7},{value:"Number",paraId:46,tocIndex:7},{value:"10",paraId:46,tocIndex:7},{value:"15",paraId:46,tocIndex:7},{value:"The node size(diameter) for clustering",paraId:46,tocIndex:7},{value:"clusterFociStrength",paraId:46,tocIndex:7},{value:"Number",paraId:46,tocIndex:7},{value:"0.8",paraId:46,tocIndex:7},{value:"0.5",paraId:46,tocIndex:7},{value:"The force for the clustering foci",paraId:46,tocIndex:7},{value:"forceSimulation",paraId:46,tocIndex:7},{value:"Object",paraId:46,tocIndex:7},{value:"null",paraId:46,tocIndex:7},{value:"Customed force simulation. If it is not assigned, the force simulation of d3.js will take effect",paraId:46,tocIndex:7},{value:"onTick",paraId:46,tocIndex:7},{value:"Function",paraId:46,tocIndex:7},{value:"{}",paraId:46,tocIndex:7},{value:"The callback function of each iteration",paraId:46,tocIndex:7},{value:"onLayoutEnd",paraId:46,tocIndex:7},{value:"Function",paraId:46,tocIndex:7},{value:"{}",paraId:46,tocIndex:7},{value:"The callback function after layout",paraId:46,tocIndex:7},{value:"workerEnabled",paraId:46,tocIndex:7},{value:"Boolean",paraId:46,tocIndex:7},{value:"true / false",paraId:46,tocIndex:7},{value:"false",paraId:46,tocIndex:7},{value:"Whether to enable the web-worker in case layout calculation takes too long to block page interaction",paraId:46,tocIndex:7},{value:"Description",paraId:47,tocIndex:8},{value:": Fruchterman is a kind of force-directed layout. If you want to fix the positions for some nodes during calculation, assign ",paraId:47,tocIndex:8},{value:"fx",paraId:47,tocIndex:8},{value:" and ",paraId:47,tocIndex:8},{value:"fy",paraId:47,tocIndex:8},{value:" for the nodes as fixing positions. ",paraId:47,tocIndex:8},{value:"Demo for fixing node",paraId:48,tocIndex:8},{value:".\n",paraId:47,tocIndex:8},{value:"API",paraId:47,tocIndex:8},{value:": ",paraId:47,tocIndex:8},{value:"Fruchterman API",paraId:49,tocIndex:8},{value:"Configuration",paraId:47,tocIndex:8},{value:":",paraId:47,tocIndex:8},{value:"Name",paraId:50,tocIndex:8},{value:"Type",paraId:50,tocIndex:8},{value:"Example",paraId:50,tocIndex:8},{value:"Default",paraId:50,tocIndex:8},{value:"Description",paraId:50,tocIndex:8},{value:"center",paraId:50,tocIndex:8},{value:"Array",paraId:50,tocIndex:8},{value:"[ 0, 0 ]",paraId:50,tocIndex:8},{value:"The center of the graph",paraId:50,tocIndex:8},{value:"The center of the layout",paraId:50,tocIndex:8},{value:"maxIteration",paraId:50,tocIndex:8},{value:"Number",paraId:50,tocIndex:8},{value:"1000",paraId:50,tocIndex:8},{value:"1000",paraId:50,tocIndex:8},{value:"The maximum interation number",paraId:50,tocIndex:8},{value:"gravity",paraId:50,tocIndex:8},{value:"Number",paraId:50,tocIndex:8},{value:"10",paraId:50,tocIndex:8},{value:"10",paraId:50,tocIndex:8},{value:"The gravity, which affects the compactness of the layout",paraId:50,tocIndex:8},{value:"speed",paraId:50,tocIndex:8},{value:"Number",paraId:50,tocIndex:8},{value:"1",paraId:50,tocIndex:8},{value:"1",paraId:50,tocIndex:8},{value:"The moving speed in each iteration. Large value might lead to violent swing",paraId:50,tocIndex:8},{value:"clustering",paraId:50,tocIndex:8},{value:"Boolean",paraId:50,tocIndex:8},{value:"false",paraId:50,tocIndex:8},{value:"false",paraId:50,tocIndex:8},{value:"Whether to layout by clustering",paraId:50,tocIndex:8},{value:"clusterGravity",paraId:50,tocIndex:8},{value:"Number",paraId:50,tocIndex:8},{value:"30",paraId:50,tocIndex:8},{value:"10",paraId:50,tocIndex:8},{value:"The gravity of each clusterm which affects the compactness of each cluster",paraId:50,tocIndex:8},{value:"workerEnabled",paraId:50,tocIndex:8},{value:"Boolean",paraId:50,tocIndex:8},{value:"true / false",paraId:50,tocIndex:8},{value:"false",paraId:50,tocIndex:8},{value:"Whether to enable the web-worker in case layout calculation takes too long to block page interaction",paraId:50,tocIndex:8},{value:"gpuEnabled",paraId:50,tocIndex:8},{value:"Boolean",paraId:50,tocIndex:8},{value:"true / false",paraId:50,tocIndex:8},{value:"false",paraId:50,tocIndex:8},{value:"Whether to enable the GPU parallel computing, supported by G6 4.0",paraId:50,tocIndex:8},{value:"Description",paraId:51,tocIndex:9},{value:": Arranges the nodes on a circle. ",paraId:51,tocIndex:9},{value:"API",paraId:51,tocIndex:9},{value:": ",paraId:51,tocIndex:9},{value:"Circular API",paraId:52,tocIndex:9},{value:" ",paraId:51,tocIndex:9},{value:"Configuration",paraId:51,tocIndex:9},{value:":",paraId:51,tocIndex:9},{value:"Name",paraId:53,tocIndex:9},{value:"Type",paraId:53,tocIndex:9},{value:"Example/Options",paraId:53,tocIndex:9},{value:"Default",paraId:53,tocIndex:9},{value:"Description",paraId:53,tocIndex:9},{value:"center",paraId:53,tocIndex:9},{value:"Array",paraId:53,tocIndex:9},{value:"[ 0, 0 ]",paraId:53,tocIndex:9},{value:"The center of the graph",paraId:53,tocIndex:9},{value:"The center of the layout",paraId:53,tocIndex:9},{value:"radius",paraId:53,tocIndex:9},{value:"Number",paraId:53,tocIndex:9},{value:"50",paraId:53,tocIndex:9},{value:"null",paraId:53,tocIndex:9},{value:"The radius of the circle. If the ",paraId:53,tocIndex:9},{value:"raidus",paraId:53,tocIndex:9},{value:" exists, ",paraId:53,tocIndex:9},{value:"startRadius",paraId:53,tocIndex:9},{value:" and ",paraId:53,tocIndex:9},{value:"endRadius",paraId:53,tocIndex:9},{value:" do not take effect.",paraId:53,tocIndex:9},{value:"startRadius",paraId:53,tocIndex:9},{value:"Number",paraId:53,tocIndex:9},{value:"10",paraId:53,tocIndex:9},{value:"null",paraId:53,tocIndex:9},{value:"The start radius of spiral layout",paraId:53,tocIndex:9},{value:"endRadius",paraId:53,tocIndex:9},{value:"Number",paraId:53,tocIndex:9},{value:"100",paraId:53,tocIndex:9},{value:"null",paraId:53,tocIndex:9},{value:"The end radius of spiral layout",paraId:53,tocIndex:9},{value:"clockwise",paraId:53,tocIndex:9},{value:"Boolean",paraId:53,tocIndex:9},{value:"true",paraId:53,tocIndex:9},{value:"true",paraId:53,tocIndex:9},{value:"Whether to layout clockwisely",paraId:53,tocIndex:9},{value:"divisions",paraId:53,tocIndex:9},{value:"Number",paraId:53,tocIndex:9},{value:"3",paraId:53,tocIndex:9},{value:"1",paraId:53,tocIndex:9},{value:"The division number of the nodes on the circle. Takes effect when ",paraId:53,tocIndex:9},{value:"endRadius - startRadius !== 0",paraId:53,tocIndex:9},{value:"ordering",paraId:53,tocIndex:9},{value:"String",paraId:53,tocIndex:9},{value:"null",paraId:53,tocIndex:9},{value:"'topology'",paraId:53,tocIndex:9},{value:"'degree'",paraId:53,tocIndex:9},{value:"angleRatio",paraId:53,tocIndex:9},{value:"Number",paraId:53,tocIndex:9},{value:"1",paraId:53,tocIndex:9},{value:"1",paraId:53,tocIndex:9},{value:"How many 2*PIs Between the first node and the last node",paraId:53,tocIndex:9},{value:"workerEnabled",paraId:53,tocIndex:9},{value:"Boolean",paraId:53,tocIndex:9},{value:"true / false",paraId:53,tocIndex:9},{value:"false",paraId:53,tocIndex:9},{value:"Whether to enable the web-worker in case layout calculation takes too long to block page interaction",paraId:53,tocIndex:9},{value:"Description",paraId:54,tocIndex:10},{value:": Arranges the nodes to concentrics centered at a focus node according to their shortest path length to the focus node. ",paraId:54,tocIndex:10},{value:"API",paraId:54,tocIndex:10},{value:": ",paraId:54,tocIndex:10},{value:"Radial API",paraId:55,tocIndex:10},{value:" ",paraId:54,tocIndex:10},{value:"Configuration",paraId:54,tocIndex:10},{value:":",paraId:54,tocIndex:10},{value:"Name",paraId:56,tocIndex:10},{value:"Type",paraId:56,tocIndex:10},{value:"Example",paraId:56,tocIndex:10},{value:"Default",paraId:56,tocIndex:10},{value:"Description",paraId:56,tocIndex:10},{value:"center",paraId:56,tocIndex:10},{value:"Array",paraId:56,tocIndex:10},{value:"[ 0, 0 ]",paraId:56,tocIndex:10},{value:"The center of the graph",paraId:56,tocIndex:10},{value:"The center of the layout",paraId:56,tocIndex:10},{value:"linkDistance",paraId:56,tocIndex:10},{value:"Number",paraId:56,tocIndex:10},{value:"50",paraId:56,tocIndex:10},{value:"50",paraId:56,tocIndex:10},{value:"The edge length",paraId:56,tocIndex:10},{value:"maxIteration",paraId:56,tocIndex:10},{value:"Number",paraId:56,tocIndex:10},{value:"1000",paraId:56,tocIndex:10},{value:"1000",paraId:56,tocIndex:10},{value:"The max iteration number.",paraId:56,tocIndex:10},{value:"focusNode",paraId:56,tocIndex:10},{value:"String / Object",paraId:56,tocIndex:10},{value:"'node1'",paraId:56,tocIndex:10},{value:"null",paraId:56,tocIndex:10},{value:"The focus node of the radial layout. The first node of the data is the default value. It can be the id of a node or the node item.",paraId:56,tocIndex:10},{value:"unitRadius",paraId:56,tocIndex:10},{value:"Number",paraId:56,tocIndex:10},{value:"10",paraId:56,tocIndex:10},{value:"100",paraId:56,tocIndex:10},{value:"The separation between adjacent circles. If ",paraId:56,tocIndex:10},{value:"unitRadius",paraId:56,tocIndex:10},{value:" is not assigned, the layout will fill the canvas automatically.",paraId:56,tocIndex:10},{value:"preventOverlap",paraId:56,tocIndex:10},{value:"Boolean",paraId:56,tocIndex:10},{value:"false",paraId:56,tocIndex:10},{value:"false",paraId:56,tocIndex:10},{value:"Whether to prevent node overlappings. To activate preventing node overlappings, ",paraId:56,tocIndex:10},{value:"nodeSize",paraId:56,tocIndex:10},{value:" is required, which is used for collide detection. The size in the node data will take effect if ",paraId:56,tocIndex:10},{value:"nodeSize",paraId:56,tocIndex:10},{value:" is not assigned.",paraId:56,tocIndex:10},{value:"maxPreventOverlapIteration",paraId:56,tocIndex:10},{value:"Number",paraId:56,tocIndex:10},{value:"500",paraId:56,tocIndex:10},{value:"200",paraId:56,tocIndex:10},{value:"The maximum iteration number of preventing node overlappings",paraId:56,tocIndex:10},{value:"nodeSize",paraId:56,tocIndex:10},{value:"Number",paraId:56,tocIndex:10},{value:"10",paraId:56,tocIndex:10},{value:"10",paraId:56,tocIndex:10},{value:"The diameter of the node. It is used for preventing node overlappings. ",paraId:56,tocIndex:10},{value:": ",paraId:56,tocIndex:10},{value:"The size in the node data will take effect if ",paraId:56,tocIndex:10},{value:"nodeSize",paraId:56,tocIndex:10},{value:" is not assigned. If the size in node data does not exist either, ",paraId:56,tocIndex:10},{value:"nodeSize",paraId:56,tocIndex:10},{value:" is assigned to 10 by default",paraId:56,tocIndex:10},{value:"nodeSpacing",paraId:56,tocIndex:10},{value:"Number / Function",paraId:56,tocIndex:10},{value:"Example 1: 10",paraId:56,tocIndex:10},{value:"Example 2:  ",paraId:56,tocIndex:10},{value:"d => {",paraId:56,tocIndex:10},{value:"  // d is a node",paraId:56,tocIndex:10},{value:"  if (d.id === 'node1') {",paraId:56,tocIndex:10},{value:"    return 100;",paraId:56,tocIndex:10},{value:"  }",paraId:56,tocIndex:10},{value:"  return 10;",paraId:56,tocIndex:10},{value:"}",paraId:56,tocIndex:10},{value:"0",paraId:56,tocIndex:10},{value:"Takes effect when ",paraId:56,tocIndex:10},{value:"preventOverlap",paraId:56,tocIndex:10},{value:" is ",paraId:56,tocIndex:10},{value:"true",paraId:56,tocIndex:10},{value:". It is the minimum distance between nodes to prevent node overlappings. It can be a function to define different distances for different nodes (example 2)",paraId:56,tocIndex:10},{value:"strictRadial",paraId:56,tocIndex:10},{value:"Boolean",paraId:56,tocIndex:10},{value:"true",paraId:56,tocIndex:10},{value:"false",paraId:56,tocIndex:10},{value:"Whether to layout the graph as strict radial, which means the nodes will be arranged on each circle strictly. Takes effect only when ",paraId:56,tocIndex:10},{value:"preventOverlap",paraId:56,tocIndex:10},{value:" is ",paraId:56,tocIndex:10},{value:"true",paraId:56,tocIndex:10},{value:". Refer to ",paraId:56,tocIndex:10},{value:"Radial-strictRadial API",paraId:57,tocIndex:10},{value:"- When ",paraId:56,tocIndex:10},{value:"preventOverlap",paraId:56,tocIndex:10},{value:" is ",paraId:56,tocIndex:10},{value:"true",paraId:56,tocIndex:10},{value:", and ",paraId:56,tocIndex:10},{value:"strictRadial",paraId:56,tocIndex:10},{value:" is ",paraId:56,tocIndex:10},{value:"false",paraId:56,tocIndex:10},{value:", the overlapped nodes are arranged along their circles strictly. But for the situation that there are too many nodes on a circle to be arranged, the overlappings might not be eliminated completely ",paraId:56,tocIndex:10},{value:"- When ",paraId:56,tocIndex:10},{value:"preventOverlap",paraId:56,tocIndex:10},{value:" is ",paraId:56,tocIndex:10},{value:"true",paraId:56,tocIndex:10},{value:", and ",paraId:56,tocIndex:10},{value:"strictRadial",paraId:56,tocIndex:10},{value:" is ",paraId:56,tocIndex:10},{value:"true",paraId:56,tocIndex:10},{value:" , the overlapped nodes can be arranged around their circle with small offsets.",paraId:56,tocIndex:10},{value:"sortBy",paraId:56,tocIndex:10},{value:"String",paraId:56,tocIndex:10},{value:"'data' / 'cluster'",paraId:56,tocIndex:10},{value:"undefined",paraId:56,tocIndex:10},{value:"Sort the nodes of the same level. ",paraId:56,tocIndex:10},{value:"undefined",paraId:56,tocIndex:10},{value:" by default, which means place the nodes with connections as close as possible; ",paraId:56,tocIndex:10},{value:"'data'",paraId:56,tocIndex:10},{value:" means place the node according to the ordering in data, the closer the nodes in data ordering, the closer the nodes will be placed. ",paraId:56,tocIndex:10},{value:"sortBy",paraId:56,tocIndex:10},{value:" also can be assigned to any name of property in nodes data, such as ",paraId:56,tocIndex:10},{value:"'cluster'",paraId:56,tocIndex:10},{value:", ",paraId:56,tocIndex:10},{value:"'name'",paraId:56,tocIndex:10},{value:" and so on (make sure the property exists in the data)",paraId:56,tocIndex:10},{value:"sortStrength",paraId:56,tocIndex:10},{value:"Number",paraId:56,tocIndex:10},{value:"10",paraId:56,tocIndex:10},{value:"10",paraId:56,tocIndex:10},{value:"The strength to sort the nodes in the same circle. Larger number means place the nodes with smaller distance of ",paraId:56,tocIndex:10},{value:"sortBy",paraId:56,tocIndex:10},{value:" more closely. Takes effect only when ",paraId:56,tocIndex:10},{value:"sortBy",paraId:56,tocIndex:10},{value:" is not ",paraId:56,tocIndex:10},{value:"undefined",paraId:56,tocIndex:10},{value:"workerEnabled",paraId:56,tocIndex:10},{value:"Boolean",paraId:56,tocIndex:10},{value:"true / false",paraId:56,tocIndex:10},{value:"false",paraId:56,tocIndex:10},{value:"Whether to enable the web-worker in case layout calculation takes too long to block page interaction",paraId:56,tocIndex:10},{value:"Description",paraId:58,tocIndex:11},{value:": MDS (Multidimensional scaling) is used for project high dimensional data onto low dimensional space.",paraId:58,tocIndex:11},{value:"API",paraId:58,tocIndex:11},{value:": ",paraId:58,tocIndex:11},{value:"MDS API",paraId:59,tocIndex:11},{value:"Configuration",paraId:58,tocIndex:11},{value:":",paraId:58,tocIndex:11},{value:"Name",paraId:60,tocIndex:11},{value:"Type",paraId:60,tocIndex:11},{value:"Example",paraId:60,tocIndex:11},{value:"Default",paraId:60,tocIndex:11},{value:"Description",paraId:60,tocIndex:11},{value:"center",paraId:60,tocIndex:11},{value:"Array",paraId:60,tocIndex:11},{value:"[ 0, 0 ]",paraId:60,tocIndex:11},{value:"The center of the graph",paraId:60,tocIndex:11},{value:"The center of the layout",paraId:60,tocIndex:11},{value:"linkDistance",paraId:60,tocIndex:11},{value:"Number",paraId:60,tocIndex:11},{value:"50",paraId:60,tocIndex:11},{value:"50",paraId:60,tocIndex:11},{value:"The edge length",paraId:60,tocIndex:11},{value:"workerEnabled",paraId:60,tocIndex:11},{value:"Boolean",paraId:60,tocIndex:11},{value:"true / false",paraId:60,tocIndex:11},{value:"false",paraId:60,tocIndex:11},{value:"Whether to enable the web-worker in case layout calculation takes too long to block page interaction",paraId:60,tocIndex:11},{value:"Description",paraId:61,tocIndex:12},{value:": An hierarchical layout.",paraId:61,tocIndex:12},{value:"API",paraId:61,tocIndex:12},{value:": ",paraId:61,tocIndex:12},{value:"Dagre API",paraId:62,tocIndex:12},{value:"Configuration",paraId:61,tocIndex:12},{value:":",paraId:61,tocIndex:12},{value:"Name",paraId:63,tocIndex:12},{value:"Type",paraId:63,tocIndex:12},{value:"Example/Options",paraId:63,tocIndex:12},{value:"Default",paraId:63,tocIndex:12},{value:"Description",paraId:63,tocIndex:12},{value:"rankdir",paraId:63,tocIndex:12},{value:"String",paraId:63,tocIndex:12},{value:"'TB' / 'BT' / 'LR' / 'RL'",paraId:63,tocIndex:12},{value:"'TB'",paraId:63,tocIndex:12},{value:"The layout direction. T: top; B: bottom; L: left; R: right",paraId:63,tocIndex:12},{value:"align",paraId:63,tocIndex:12},{value:"String",paraId:63,tocIndex:12},{value:"'UL' / 'UR' / 'DL' / 'DR' / undefined",paraId:63,tocIndex:12},{value:"undefined",paraId:63,tocIndex:12},{value:"The alignment of the nodes. ",paraId:63,tocIndex:12},{value:"undefined",paraId:63,tocIndex:12},{value:" by default, align to the center. U: upper; D: down; L: left; R: right",paraId:63,tocIndex:12},{value:"nodesep",paraId:63,tocIndex:12},{value:"Number",paraId:63,tocIndex:12},{value:"40",paraId:63,tocIndex:12},{value:"50",paraId:63,tocIndex:12},{value:"The separation between nodes with unit px. When ",paraId:63,tocIndex:12},{value:"rankdir",paraId:63,tocIndex:12},{value:" is ",paraId:63,tocIndex:12},{value:"'TB'",paraId:63,tocIndex:12},{value:" or ",paraId:63,tocIndex:12},{value:"'BT'",paraId:63,tocIndex:12},{value:", ",paraId:63,tocIndex:12},{value:"nodesep",paraId:63,tocIndex:12},{value:" represents the horizontal separations between nodes; When ",paraId:63,tocIndex:12},{value:"rankdir",paraId:63,tocIndex:12},{value:" is ",paraId:63,tocIndex:12},{value:"'LR'",paraId:63,tocIndex:12},{value:" or ",paraId:63,tocIndex:12},{value:"'RL'",paraId:63,tocIndex:12},{value:", ",paraId:63,tocIndex:12},{value:"nodesep",paraId:63,tocIndex:12},{value:" represents the vertical separations between nodes",paraId:63,tocIndex:12},{value:"ranksep",paraId:63,tocIndex:12},{value:"Number",paraId:63,tocIndex:12},{value:"40",paraId:63,tocIndex:12},{value:"50",paraId:63,tocIndex:12},{value:"The separations between adjacent levels with unit px. When ",paraId:63,tocIndex:12},{value:"rankdir",paraId:63,tocIndex:12},{value:" is ",paraId:63,tocIndex:12},{value:"'TB'",paraId:63,tocIndex:12},{value:" or ",paraId:63,tocIndex:12},{value:"'BT'",paraId:63,tocIndex:12},{value:", ",paraId:63,tocIndex:12},{value:"ranksep",paraId:63,tocIndex:12},{value:" represents the vertical separations between adjacent levels; when ",paraId:63,tocIndex:12},{value:"rankdir",paraId:63,tocIndex:12},{value:" is ",paraId:63,tocIndex:12},{value:"'LR'",paraId:63,tocIndex:12},{value:" or ",paraId:63,tocIndex:12},{value:"'RL'",paraId:63,tocIndex:12},{value:", ",paraId:63,tocIndex:12},{value:"rankdir",paraId:63,tocIndex:12},{value:" represents the horizontal separations between adjacent levels",paraId:63,tocIndex:12},{value:"nodesepFunc",paraId:63,tocIndex:12},{value:"Function",paraId:63,tocIndex:12},{value:"d => {",paraId:63,tocIndex:12},{value:"  // d is a node",paraId:63,tocIndex:12},{value:"  if (d.id === 'node1') {",paraId:63,tocIndex:12},{value:"    return 100;",paraId:63,tocIndex:12},{value:"  }",paraId:63,tocIndex:12},{value:"  return 10;",paraId:63,tocIndex:12},{value:"}",paraId:63,tocIndex:12},{value:"undefined",paraId:63,tocIndex:12},{value:"The function for node separation with unit px. You can adjust the separations between different node pairs by using this function instead of ",paraId:63,tocIndex:12},{value:"nodesep",paraId:63,tocIndex:12},{value:". When ",paraId:63,tocIndex:12},{value:"rankdir",paraId:63,tocIndex:12},{value:" is ",paraId:63,tocIndex:12},{value:"'LR'",paraId:63,tocIndex:12},{value:" or ",paraId:63,tocIndex:12},{value:"'RL'",paraId:63,tocIndex:12},{value:", ",paraId:63,tocIndex:12},{value:"nodesep",paraId:63,tocIndex:12},{value:" represents the vertical separations between nodes. The priority of ",paraId:63,tocIndex:12},{value:"nodesepFunc",paraId:63,tocIndex:12},{value:" is higher than ",paraId:63,tocIndex:12},{value:"nodesep",paraId:63,tocIndex:12},{value:", which means if ",paraId:63,tocIndex:12},{value:"nodesepFunc",paraId:63,tocIndex:12},{value:" is assigned, the ",paraId:63,tocIndex:12},{value:"nodesep",paraId:63,tocIndex:12},{value:" will not take effect",paraId:63,tocIndex:12},{value:"ranksepFunc",paraId:63,tocIndex:12},{value:"Function",paraId:63,tocIndex:12},{value:"d => {",paraId:63,tocIndex:12},{value:"  // d is a node",paraId:63,tocIndex:12},{value:"  if (d.id === 'node1') {",paraId:63,tocIndex:12},{value:"    return 100;",paraId:63,tocIndex:12},{value:"  }",paraId:63,tocIndex:12},{value:"  return 10;",paraId:63,tocIndex:12},{value:"}",paraId:63,tocIndex:12},{value:"undefined",paraId:63,tocIndex:12},{value:"The function for level separation with unit px. You can adjust the separations between different adjacent levels by using this function instead of ",paraId:63,tocIndex:12},{value:"ranksep",paraId:63,tocIndex:12},{value:". When ",paraId:63,tocIndex:12},{value:"rankdir",paraId:63,tocIndex:12},{value:" is ",paraId:63,tocIndex:12},{value:"'TB'",paraId:63,tocIndex:12},{value:" or ",paraId:63,tocIndex:12},{value:"'BT'",paraId:63,tocIndex:12},{value:", ",paraId:63,tocIndex:12},{value:"ranksep",paraId:63,tocIndex:12},{value:" represents the vertical separations between adjacent levels; when ",paraId:63,tocIndex:12},{value:"rankdir",paraId:63,tocIndex:12},{value:" is ",paraId:63,tocIndex:12},{value:"'LR'",paraId:63,tocIndex:12},{value:" or ",paraId:63,tocIndex:12},{value:"'RL'",paraId:63,tocIndex:12},{value:", ",paraId:63,tocIndex:12},{value:"rankdir",paraId:63,tocIndex:12},{value:" represents the horizontal separations between adjacent levels. The priority of ",paraId:63,tocIndex:12},{value:"ranksepFunc",paraId:63,tocIndex:12},{value:" is higher than ",paraId:63,tocIndex:12},{value:"ranksep",paraId:63,tocIndex:12},{value:", which means if ",paraId:63,tocIndex:12},{value:"ranksepFunc",paraId:63,tocIndex:12},{value:" is assigned, the ",paraId:63,tocIndex:12},{value:"ranksep",paraId:63,tocIndex:12},{value:" will not take effect",paraId:63,tocIndex:12},{value:"controlPoints",paraId:63,tocIndex:12},{value:"Boolean",paraId:63,tocIndex:12},{value:"true",paraId:63,tocIndex:12},{value:"true",paraId:63,tocIndex:12},{value:"Whether to keep the control points of layout",paraId:63,tocIndex:12},{value:"workerEnabled",paraId:63,tocIndex:12},{value:"Boolean",paraId:63,tocIndex:12},{value:"true / false",paraId:63,tocIndex:12},{value:"false",paraId:63,tocIndex:12},{value:"Whether to enable the web-worker in case layout calculation takes too long to block page interaction",paraId:63,tocIndex:12},{value:"sortByCombo",paraId:63,tocIndex:12},{value:"Boolean",paraId:63,tocIndex:12},{value:"true / false",paraId:63,tocIndex:12},{value:"false",paraId:63,tocIndex:12},{value:"Whether to sort the nodes in a level according to the ",paraId:63,tocIndex:12},{value:"comboId",paraId:63,tocIndex:12},{value:" in their data. Enable ",paraId:63,tocIndex:12},{value:"sortByCombo",paraId:63,tocIndex:12},{value:" to avoid combo overlappings",paraId:63,tocIndex:12},{value:"Tips: Concentric layout in G6 refers to ",paraId:64,tocIndex:13},{value:"cytoscape.js",paraId:64,tocIndex:13},{value:", we obey the MIT license ",paraId:64,tocIndex:13},{value:"Description",paraId:64,tocIndex:13},{value:": Arranges the nodes on several concentric circles.",paraId:64,tocIndex:13},{value:"API",paraId:64,tocIndex:13},{value:": ",paraId:64,tocIndex:13},{value:"Concentric API",paraId:65,tocIndex:13},{value:"Configuration",paraId:64,tocIndex:13},{value:":",paraId:64,tocIndex:13},{value:"Name",paraId:66,tocIndex:13},{value:"Type",paraId:66,tocIndex:13},{value:"Example/Options",paraId:66,tocIndex:13},{value:"Default",paraId:66,tocIndex:13},{value:"Description",paraId:66,tocIndex:13},{value:"center",paraId:66,tocIndex:13},{value:"Array",paraId:66,tocIndex:13},{value:"[ 0, 0 ]",paraId:66,tocIndex:13},{value:"The center of the graph",paraId:66,tocIndex:13},{value:"The center of the layout",paraId:66,tocIndex:13},{value:"nodeSize",paraId:66,tocIndex:13},{value:"Number",paraId:66,tocIndex:13},{value:"30",paraId:66,tocIndex:13},{value:"30",paraId:66,tocIndex:13},{value:"The diameter of the node. It is used for preventing node overlappings",paraId:66,tocIndex:13},{value:"nodeSpacing",paraId:66,tocIndex:13},{value:"Number",paraId:66,tocIndex:13},{value:"10",paraId:66,tocIndex:13},{value:"10",paraId:66,tocIndex:13},{value:"The minimum separation between adjacent circles",paraId:66,tocIndex:13},{value:"preventOverlap",paraId:66,tocIndex:13},{value:"Boolean",paraId:66,tocIndex:13},{value:"false",paraId:66,tocIndex:13},{value:"false",paraId:66,tocIndex:13},{value:"Whether to prevent node overlappings. To activate preventing node overlappings, ",paraId:66,tocIndex:13},{value:"nodeSize",paraId:66,tocIndex:13},{value:" is required, which is used for collide detection. The size in the node data will take effect if ",paraId:66,tocIndex:13},{value:"nodeSize",paraId:66,tocIndex:13},{value:" is not assigned. If the size in node data does not exist either, ",paraId:66,tocIndex:13},{value:"nodeSize",paraId:66,tocIndex:13},{value:" is assigned to 30 by default",paraId:66,tocIndex:13},{value:"sweep",paraId:66,tocIndex:13},{value:"Number",paraId:66,tocIndex:13},{value:"Math.PI",paraId:66,tocIndex:13},{value:"undefined",paraId:66,tocIndex:13},{value:"How many radians should be between the first and last node (defaults to full circle). If it is undefined, 2 _ Math.PI _ (1 - 1 /",paraId:66,tocIndex:13},{value:"equidistant",paraId:66,tocIndex:13},{value:"Boolean",paraId:66,tocIndex:13},{value:"false",paraId:66,tocIndex:13},{value:"false",paraId:66,tocIndex:13},{value:"Whether levels have an equal radial distance between them, may cause bounding box overflow",paraId:66,tocIndex:13},{value:"startAngle",paraId:66,tocIndex:13},{value:"Number",paraId:66,tocIndex:13},{value:"3.14",paraId:66,tocIndex:13},{value:"3 / 2 * Math.PI",paraId:66,tocIndex:13},{value:"Where nodes start in radians",paraId:66,tocIndex:13},{value:"clockwise",paraId:66,tocIndex:13},{value:"Boolean",paraId:66,tocIndex:13},{value:"false",paraId:66,tocIndex:13},{value:"false",paraId:66,tocIndex:13},{value:"Place the nodes in clockwise or not",paraId:66,tocIndex:13},{value:"maxLevelDiff",paraId:66,tocIndex:13},{value:"Number",paraId:66,tocIndex:13},{value:"0.5",paraId:66,tocIndex:13},{value:"undefined",paraId:66,tocIndex:13},{value:"The sum of concentric values in each level. If it is undefined, maxValue / 4 will take place, where maxValue is the max value of ordering properties. For example, if ",paraId:66,tocIndex:13},{value:"sortBy='degree'",paraId:66,tocIndex:13},{value:", maxValue is the max degree value of all the nodes",paraId:66,tocIndex:13},{value:"sortBy",paraId:66,tocIndex:13},{value:"String",paraId:66,tocIndex:13},{value:"'property1' / 'weight' / ...",paraId:66,tocIndex:13},{value:"undefined",paraId:66,tocIndex:13},{value:"Order the nodes according to this parameter. It is the property's name of node. The node with higher value will be placed to the center. If it is undefined, the algorithm will order the nodes by their degree",paraId:66,tocIndex:13},{value:"workerEnabled",paraId:66,tocIndex:13},{value:"Boolean",paraId:66,tocIndex:13},{value:"true / false",paraId:66,tocIndex:13},{value:"false",paraId:66,tocIndex:13},{value:"Whether to enable the web-worker in case layout calculation takes too long to block page interaction",paraId:66,tocIndex:13},{value:"Tips: Concentric layout in G6 refers to ",paraId:67,tocIndex:14},{value:"cytoscape.js",paraId:67,tocIndex:14},{value:", we obey the MIT license.",paraId:67,tocIndex:14},{value:"Description",paraId:67,tocIndex:14},{value:": Orders the nodes according to the configurations and arranged them onto grid.",paraId:67,tocIndex:14},{value:"API",paraId:67,tocIndex:14},{value:": ",paraId:67,tocIndex:14},{value:"Grid API",paraId:68,tocIndex:14},{value:"Configuration",paraId:67,tocIndex:14},{value:":",paraId:67,tocIndex:14},{value:"Name",paraId:69,tocIndex:14},{value:"Type",paraId:69,tocIndex:14},{value:"Example/Options",paraId:69,tocIndex:14},{value:"Default",paraId:69,tocIndex:14},{value:"Description",paraId:69,tocIndex:14},{value:"begin",paraId:69,tocIndex:14},{value:"Array",paraId:69,tocIndex:14},{value:"[ 0, 0 ]",paraId:69,tocIndex:14},{value:"[ 0, 0 ]",paraId:69,tocIndex:14},{value:"网格开始位置(左上角)",paraId:69,tocIndex:14},{value:"preventOverlap",paraId:69,tocIndex:14},{value:"Boolean",paraId:69,tocIndex:14},{value:"false",paraId:69,tocIndex:14},{value:"false",paraId:69,tocIndex:14},{value:"Whether to prevent node overlappings. To activate preventing node overlappings, ",paraId:69,tocIndex:14},{value:"nodeSize",paraId:69,tocIndex:14},{value:" is required, which is used for collide detection. The size in the node data will take effect if ",paraId:69,tocIndex:14},{value:"nodeSize",paraId:69,tocIndex:14},{value:" is not assigned. If the size in node data does not exist either, ",paraId:69,tocIndex:14},{value:"nodeSize",paraId:69,tocIndex:14},{value:" is assigned to 30 by default",paraId:69,tocIndex:14},{value:"preventOverlapPadding",paraId:69,tocIndex:14},{value:"Number",paraId:69,tocIndex:14},{value:"10",paraId:69,tocIndex:14},{value:"10",paraId:69,tocIndex:14},{value:"The minimum padding between nodes to prevent node overlappings. Takes effect when ",paraId:69,tocIndex:14},{value:"preventOverlap",paraId:69,tocIndex:14},{value:" is ",paraId:69,tocIndex:14},{value:"true",paraId:69,tocIndex:14},{value:"nodeSize",paraId:69,tocIndex:14},{value:"Number",paraId:69,tocIndex:14},{value:"30",paraId:69,tocIndex:14},{value:"30",paraId:69,tocIndex:14},{value:"The diameter of the node. It is used for preventing node overlappings.",paraId:69,tocIndex:14},{value:"condense",paraId:69,tocIndex:14},{value:"Boolean",paraId:69,tocIndex:14},{value:"false",paraId:69,tocIndex:14},{value:"false",paraId:69,tocIndex:14},{value:"Wheter to utilize the minimum space of the canvas. ",paraId:69,tocIndex:14},{value:"false",paraId:69,tocIndex:14},{value:" means utilizing the full space, ",paraId:69,tocIndex:14},{value:"true",paraId:69,tocIndex:14},{value:" means utilizing the minimum space.",paraId:69,tocIndex:14},{value:"rows",paraId:69,tocIndex:14},{value:"Number",paraId:69,tocIndex:14},{value:"5",paraId:69,tocIndex:14},{value:"undefined",paraId:69,tocIndex:14},{value:"The row number of the grid. If ",paraId:69,tocIndex:14},{value:"rows",paraId:69,tocIndex:14},{value:" is undefined, the algorithm will calculate it according to the space and node numbers automatically",paraId:69,tocIndex:14},{value:"cols",paraId:69,tocIndex:14},{value:"Number",paraId:69,tocIndex:14},{value:"5",paraId:69,tocIndex:14},{value:"undefined",paraId:69,tocIndex:14},{value:"The column number of the grid. If ",paraId:69,tocIndex:14},{value:"cols",paraId:69,tocIndex:14},{value:" is undefined, the algorithm will calculate it according to the space and node numbers automatically",paraId:69,tocIndex:14},{value:"sortBy",paraId:69,tocIndex:14},{value:"String",paraId:69,tocIndex:14},{value:"'property1' / 'weight' / ...",paraId:69,tocIndex:14},{value:"'degree'",paraId:69,tocIndex:14},{value:"The ordering method for nodes. Smaller the index in the ordered array, more center the node will be placed. If ",paraId:69,tocIndex:14},{value:"sortBy",paraId:69,tocIndex:14},{value:" is undefined, the algorithm order the nodes according to their degrees",paraId:69,tocIndex:14},{value:"workerEnabled",paraId:69,tocIndex:14},{value:"Boolean",paraId:69,tocIndex:14},{value:"true / false",paraId:69,tocIndex:14},{value:"false",paraId:69,tocIndex:14},{value:"Whether to enable the web-worker in case layout calculation takes too long to block page interaction",paraId:69,tocIndex:14},{value:"API",paraId:70,tocIndex:15},{value:"：",paraId:70,tocIndex:15},{value:"Combo Force API",paraId:71,tocIndex:15},{value:"Parameters",paraId:70,tocIndex:15},{value:"：",paraId:70,tocIndex:15},{value:"Name",paraId:72,tocIndex:15},{value:"Type",paraId:72,tocIndex:15},{value:"Example/Options",paraId:72,tocIndex:15},{value:"Default",paraId:72,tocIndex:15},{value:"Description",paraId:72,tocIndex:15},{value:"center",paraId:72,tocIndex:15},{value:"Array",paraId:72,tocIndex:15},{value:"[ 0, 0 ]",paraId:72,tocIndex:15},{value:"The center of the graph",paraId:72,tocIndex:15},{value:"The center of the layout",paraId:72,tocIndex:15},{value:"maxIteration",paraId:72,tocIndex:15},{value:"Number",paraId:72,tocIndex:15},{value:"100",paraId:72,tocIndex:15},{value:"100",paraId:72,tocIndex:15},{value:"The maximum iteration number",paraId:72,tocIndex:15},{value:"linkDistance",paraId:72,tocIndex:15},{value:"Number / Function",paraId:72,tocIndex:15},{value:"e.g. 1: 50 ",paraId:72,tocIndex:15},{value:"e.g. 2:",paraId:72,tocIndex:15},{value:"d => {",paraId:72,tocIndex:15},{value:"  // d is an edge",paraId:72,tocIndex:15},{value:"  if (d.id === 'edge1') {",paraId:72,tocIndex:15},{value:"    return 100;",paraId:72,tocIndex:15},{value:"  }",paraId:72,tocIndex:15},{value:"  return 50;",paraId:72,tocIndex:15},{value:"}",paraId:72,tocIndex:15},{value:"10",paraId:72,tocIndex:15},{value:"The edge length",paraId:72,tocIndex:15},{value:"nodeStrength",paraId:72,tocIndex:15},{value:"Number / Function",paraId:72,tocIndex:15},{value:"e.g. 1: 10 ",paraId:72,tocIndex:15},{value:"e.g. 2:",paraId:72,tocIndex:15},{value:"d => {",paraId:72,tocIndex:15},{value:"  // d is a node",paraId:72,tocIndex:15},{value:"  if (d.id === 'node1') {",paraId:72,tocIndex:15},{value:"    return 10;",paraId:72,tocIndex:15},{value:"  }",paraId:72,tocIndex:15},{value:"  return 30;",paraId:72,tocIndex:15},{value:"} / null",paraId:72,tocIndex:15},{value:"30",paraId:72,tocIndex:15},{value:"The strength of node force",paraId:72,tocIndex:15},{value:"edgeStrength",paraId:72,tocIndex:15},{value:"Number / Function",paraId:72,tocIndex:15},{value:"e.g. 1: 1 ",paraId:72,tocIndex:15},{value:"e.g. 2:",paraId:72,tocIndex:15},{value:"d => {",paraId:72,tocIndex:15},{value:"  // d is a node",paraId:72,tocIndex:15},{value:"  if (d.id === 'node1') {",paraId:72,tocIndex:15},{value:"    return 10;",paraId:72,tocIndex:15},{value:"  }",paraId:72,tocIndex:15},{value:"  return 1;",paraId:72,tocIndex:15},{value:"}",paraId:72,tocIndex:15},{value:"0.2",paraId:72,tocIndex:15},{value:"The strength of edge force",paraId:72,tocIndex:15},{value:"preventOverlap",paraId:72,tocIndex:15},{value:"Boolean",paraId:72,tocIndex:15},{value:"false",paraId:72,tocIndex:15},{value:"false",paraId:72,tocIndex:15},{value:"Whether to prevent node overlappings and combo overlappings. If it is assign ",paraId:72,tocIndex:15},{value:"true",paraId:72,tocIndex:15},{value:", ",paraId:72,tocIndex:15},{value:"preventNodeOverlap",paraId:72,tocIndex:15},{value:" and ",paraId:72,tocIndex:15},{value:"preventComboOverlap",paraId:72,tocIndex:15},{value:" will be set to ",paraId:72,tocIndex:15},{value:"true",paraId:72,tocIndex:15},{value:". See the API of ",paraId:72,tocIndex:15},{value:"preventNodeOverlap",paraId:72,tocIndex:15},{value:" and ",paraId:72,tocIndex:15},{value:"preventComboOverlap",paraId:72,tocIndex:15},{value:" for more detail",paraId:72,tocIndex:15},{value:"preventNodeOverlap",paraId:72,tocIndex:15},{value:"Boolean",paraId:72,tocIndex:15},{value:"false",paraId:72,tocIndex:15},{value:"true",paraId:72,tocIndex:15},{value:"Whether to prevent node overlappings. To activate preventing node overlappings, ",paraId:72,tocIndex:15},{value:"nodeSize",paraId:72,tocIndex:15},{value:" is required, which is used for collide detection. The size in the node data will take effect if ",paraId:72,tocIndex:15},{value:"nodeSize",paraId:72,tocIndex:15},{value:" is not assigned",paraId:72,tocIndex:15},{value:"preventComboOverlap",paraId:72,tocIndex:15},{value:"Boolean",paraId:72,tocIndex:15},{value:"false",paraId:72,tocIndex:15},{value:"true",paraId:72,tocIndex:15},{value:"Whether to prevent combo overlappings",paraId:72,tocIndex:15},{value:"collideStrength",paraId:72,tocIndex:15},{value:"Number",paraId:72,tocIndex:15},{value:"0.1",paraId:72,tocIndex:15},{value:"undefined",paraId:72,tocIndex:15},{value:"The unified strength of force for preventing node overlappings and combo overlappings. The range is [0, 1]. If it is not undefined, the ",paraId:72,tocIndex:15},{value:"nodeCollideStrength",paraId:72,tocIndex:15},{value:" and ",paraId:72,tocIndex:15},{value:"comboCollideStrength",paraId:72,tocIndex:15},{value:" will be set to the same value",paraId:72,tocIndex:15},{value:"nodeCollideStrength",paraId:72,tocIndex:15},{value:"Number",paraId:72,tocIndex:15},{value:"0.4",paraId:72,tocIndex:15},{value:"0.5",paraId:72,tocIndex:15},{value:"The strength of force for preventing node overlappings. The range is [0, 1]",paraId:72,tocIndex:15},{value:"comboCollideStrength",paraId:72,tocIndex:15},{value:"Number",paraId:72,tocIndex:15},{value:"0.4",paraId:72,tocIndex:15},{value:"0.5",paraId:72,tocIndex:15},{value:"The strength of force for preventing combo overlappings. The range is [0, 1]",paraId:72,tocIndex:15},{value:"nodeSize",paraId:72,tocIndex:15},{value:"Array / Number",paraId:72,tocIndex:15},{value:"10",paraId:72,tocIndex:15},{value:"10",paraId:72,tocIndex:15},{value:"The diameter of the node. It is used for preventing node overlappings. If ",paraId:72,tocIndex:15},{value:"nodeSize",paraId:72,tocIndex:15},{value:" is not assigned, the size property in node data will take effect. If the size in node data does not exist either, ",paraId:72,tocIndex:15},{value:"nodeSize",paraId:72,tocIndex:15},{value:" is assigned to 10 by default",paraId:72,tocIndex:15},{value:"nodeSpacing",paraId:72,tocIndex:15},{value:"Number / Function",paraId:72,tocIndex:15},{value:"e.g. 1 : 10",paraId:72,tocIndex:15},{value:"e.g. 2 : ",paraId:72,tocIndex:15},{value:"d => {",paraId:72,tocIndex:15},{value:"  // d is a node",paraId:72,tocIndex:15},{value:"  if (d.id === 'node1') {",paraId:72,tocIndex:15},{value:"    return 100;",paraId:72,tocIndex:15},{value:"  }",paraId:72,tocIndex:15},{value:"  return 10;",paraId:72,tocIndex:15},{value:"}",paraId:72,tocIndex:15},{value:"0",paraId:72,tocIndex:15},{value:"Takes effect when ",paraId:72,tocIndex:15},{value:"preventNodeOverlap",paraId:72,tocIndex:15},{value:" or ",paraId:72,tocIndex:15},{value:"preventOverlap",paraId:72,tocIndex:15},{value:" is ",paraId:72,tocIndex:15},{value:"true",paraId:72,tocIndex:15},{value:". It is the minimum distance between nodes to prevent node overlappings. It can be a function to define different distances for different nodes (example 2)",paraId:72,tocIndex:15},{value:"comboSpacing",paraId:72,tocIndex:15},{value:"Number / Function",paraId:72,tocIndex:15},{value:"e.g. 1 : 10",paraId:72,tocIndex:15},{value:"e.g. 2 : ",paraId:72,tocIndex:15},{value:"d => {",paraId:72,tocIndex:15},{value:"  // d is a node",paraId:72,tocIndex:15},{value:"  if (d.id === 'node1') {",paraId:72,tocIndex:15},{value:"    return 100;",paraId:72,tocIndex:15},{value:"  }",paraId:72,tocIndex:15},{value:"  return 10;",paraId:72,tocIndex:15},{value:"}",paraId:72,tocIndex:15},{value:"0",paraId:72,tocIndex:15},{value:"Takes effect when ",paraId:72,tocIndex:15},{value:"preventComboOverlap",paraId:72,tocIndex:15},{value:" or ",paraId:72,tocIndex:15},{value:"preventOverlap",paraId:72,tocIndex:15},{value:" is ",paraId:72,tocIndex:15},{value:"true",paraId:72,tocIndex:15},{value:". It is the minimum distance between combos to prevent combo overlappings. It can be a function to define different distances for different combos (example 2)",paraId:72,tocIndex:15},{value:"comboPadding",paraId:72,tocIndex:15},{value:"Number / Function",paraId:72,tocIndex:15},{value:"e.g. 1 : 10",paraId:72,tocIndex:15},{value:"e.g. 2 : ",paraId:72,tocIndex:15},{value:"d => {",paraId:72,tocIndex:15},{value:"  // d is a node",paraId:72,tocIndex:15},{value:"  if (d.id === 'node1') {",paraId:72,tocIndex:15},{value:"    return 100;",paraId:72,tocIndex:15},{value:"  }",paraId:72,tocIndex:15},{value:"  return 10;",paraId:72,tocIndex:15},{value:"}",paraId:72,tocIndex:15},{value:"0",paraId:72,tocIndex:15},{value:"The padding value inside each combo. It is not about rendering, only used for force calculation",paraId:72,tocIndex:15},{value:"alphaDecay",paraId:72,tocIndex:15},{value:"Number",paraId:72,tocIndex:15},{value:"0.03",paraId:72,tocIndex:15},{value:"0.028",paraId:72,tocIndex:15},{value:"The decay ratio of alpha for convergence. The range is [0, 1]. 0.028 corresponds to 300 iterations",paraId:72,tocIndex:15},{value:"alphaMin",paraId:72,tocIndex:15},{value:"Number",paraId:72,tocIndex:15},{value:"0.03",paraId:72,tocIndex:15},{value:"0.001",paraId:72,tocIndex:15},{value:"The threshold to stop the iteration",paraId:72,tocIndex:15},{value:"alpha",paraId:72,tocIndex:15},{value:"Number",paraId:72,tocIndex:15},{value:"0.1",paraId:72,tocIndex:15},{value:"1",paraId:72,tocIndex:15},{value:"The current alpha of convergence",paraId:72,tocIndex:15},{value:"onTick",paraId:72,tocIndex:15},{value:"Function",paraId:72,tocIndex:15},{value:"{}",paraId:72,tocIndex:15},{value:"The callback function of each iteration",paraId:72,tocIndex:15},{value:"onLayoutEnd",paraId:72,tocIndex:15},{value:"Function",paraId:72,tocIndex:15},{value:"{}",paraId:72,tocIndex:15},{value:"The callback function after layout",paraId:72,tocIndex:15},{value:"gravity",paraId:72,tocIndex:15},{value:"Number",paraId:72,tocIndex:15},{value:"10",paraId:72,tocIndex:15},{value:"The gravity, which will affect the compactness of the layout",paraId:72,tocIndex:15},{value:"comboGravity",paraId:72,tocIndex:15},{value:"Number",paraId:72,tocIndex:15},{value:"30",paraId:72,tocIndex:15},{value:"The gravity of each combo, which will affect the compactness of each combo",paraId:72,tocIndex:15},{value:"optimizeRangeFactor",paraId:72,tocIndex:15},{value:"Number",paraId:72,tocIndex:15},{value:"1",paraId:72,tocIndex:15},{value:"When the distance between two nodes is larger than ",paraId:72,tocIndex:15},{value:"optimizeRangeFactor * width",paraId:72,tocIndex:15},{value:", the forces between them will not be calculated any more. A proper value for ",paraId:72,tocIndex:15},{value:"optimizeRangeFactor",paraId:72,tocIndex:15},{value:" will lead to less calculation to optimize the performance of the layout",paraId:72,tocIndex:15},{value:"depthAttractiveForceScale",paraId:72,tocIndex:15},{value:"Number",paraId:72,tocIndex:15},{value:"0.5",paraId:72,tocIndex:15},{value:"The scale for adjusting the strength of attractive force between nodes with different depths. The range is [0, 1]. Lager the depth difference, smaller the attractive force strength",paraId:72,tocIndex:15},{value:"depthRepulsiveForceScale",paraId:72,tocIndex:15},{value:"Number",paraId:72,tocIndex:15},{value:"2",paraId:72,tocIndex:15},{value:"The scale for adjusting the strength of repulsive force between nodes with different depths. The range is [1, Infinity]. Lager the depth difference, larger the attractive force strength",paraId:72,tocIndex:15},{value:"velocityDecay",paraId:72,tocIndex:15},{value:"Number",paraId:72,tocIndex:15},{value:"0.2",paraId:72,tocIndex:15},{value:"0.6",paraId:72,tocIndex:15},{value:"The decay speed of the moving velocity of nodes for each iteration",paraId:72,tocIndex:15},{value:"workerEnabled",paraId:72,tocIndex:15},{value:"Boolean",paraId:72,tocIndex:15},{value:"true / false",paraId:72,tocIndex:15},{value:"false",paraId:72,tocIndex:15},{value:"Whether to enable the web-worker in case layout calculation takes too long to block page interaction",paraId:72,tocIndex:15},{value:"API",paraId:73,tocIndex:16},{value:"：",paraId:73,tocIndex:16},{value:"Combo Combined API",paraId:74,tocIndex:16},{value:"Parameters",paraId:73,tocIndex:16},{value:"：",paraId:73,tocIndex:16},{value:"Name",paraId:75,tocIndex:16},{value:"Type",paraId:75,tocIndex:16},{value:"Example/Options",paraId:75,tocIndex:16},{value:"Default",paraId:75,tocIndex:16},{value:"Description",paraId:75,tocIndex:16},{value:"center",paraId:75,tocIndex:16},{value:"Array",paraId:75,tocIndex:16},{value:"[ 0, 0 ]",paraId:75,tocIndex:16},{value:"The center of the graph",paraId:75,tocIndex:16},{value:"The center of the layout",paraId:75,tocIndex:16},{value:"nodeSize",paraId:75,tocIndex:16},{value:"Array / Number",paraId:75,tocIndex:16},{value:"10",paraId:75,tocIndex:16},{value:"10",paraId:75,tocIndex:16},{value:"The diameter of the node. It is used for preventing node overlappings. If ",paraId:75,tocIndex:16},{value:"nodeSize",paraId:75,tocIndex:16},{value:" is not assigned, the size property in node data will take effect. If the size in node data does not exist either, ",paraId:75,tocIndex:16},{value:"nodeSize",paraId:75,tocIndex:16},{value:" is assigned to 10 by default",paraId:75,tocIndex:16},{value:"spacing",paraId:75,tocIndex:16},{value:"Number / Function",paraId:75,tocIndex:16},{value:"10",paraId:75,tocIndex:16},{value:"0",paraId:75,tocIndex:16},{value:"Takes effect when the ",paraId:75,tocIndex:16},{value:"preventNodeOverlap",paraId:75,tocIndex:16},{value:" or ",paraId:75,tocIndex:16},{value:"preventOverlap",paraId:75,tocIndex:16},{value:" is ",paraId:75,tocIndex:16},{value:"true",paraId:75,tocIndex:16},{value:". The minimum distances between nodes and combos to prevent overlappings. It can be a function to assign different values for different items",paraId:75,tocIndex:16},{value:"comboPadding",paraId:75,tocIndex:16},{value:"Number / Function",paraId:75,tocIndex:16},{value:"10",paraId:75,tocIndex:16},{value:"10",paraId:75,tocIndex:16},{value:"The padding inside a Combo, not for rendering but for force calculation. We suggest to assign the corresponding values to the graph config",paraId:75,tocIndex:16},{value:"outerLayout",paraId:75,tocIndex:16},{value:"Object",paraId:75,tocIndex:16},{value:"GForce instance",paraId:75,tocIndex:16},{value:"ForceAtlas2 instance",paraId:75,tocIndex:16},{value:"The layout instance for the outer combos. gForce by default. For the parameters, please refer to the corresponding layout docs",paraId:75,tocIndex:16},{value:"innerLayout",paraId:75,tocIndex:16},{value:"Object",paraId:75,tocIndex:16},{value:"Concentric instance",paraId:75,tocIndex:16},{value:"Grid instance",paraId:75,tocIndex:16},{value:"The inner layout inside combos. Concentric by default. It should be synchronous algorithm. For the parameters, please refer to the corresponding layout docs",paraId:75,tocIndex:16},{value:"workerEnabled",paraId:75,tocIndex:16},{value:"Boolean",paraId:75,tocIndex:16},{value:"true / false",paraId:75,tocIndex:16},{value:"false",paraId:75,tocIndex:16},{value:"Whether to enable the web-worker in case layout calculation takes too long to block page interaction",paraId:75,tocIndex:16}]},98657:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"G6 provides two layout transformations:",paraId:0},{value:"updateLayout(params)",paraId:1},{value:": Layout methods and configurations transformation;",paraId:1},{value:"changeData()",paraId:1},{value:": Data transformation.",paraId:1},{value:"Interface Definition:",paraId:2,tocIndex:0},{value:"/**\n * Change the layout or its configurations\n * @param {String | object} cfg New layout configurations\n * If the cfg is a String or an object with the property type, and the type is different from the current layout method, the layout method will be changed into the new one;\n * Only change the configurations for the current layout otherwise\n */\nupdateLayout(cfg);\n",paraId:3,tocIndex:0},{value:"Change the Layout Method:",paraId:4,tocIndex:0},{value:" ",paraId:4,tocIndex:0},{value:"If the ",paraId:4,tocIndex:0},{value:"cfg",paraId:4,tocIndex:0},{value:" is a ",paraId:4,tocIndex:0},{value:"String",paraId:4,tocIndex:0},{value:" or an object with property ",paraId:4,tocIndex:0},{value:"type",paraId:4,tocIndex:0},{value:", and the type is different from the current layout method, the layout method will be changed into the new one;",paraId:4,tocIndex:0},{value:"Change the Configurations Only:",paraId:5,tocIndex:0},{value:" ",paraId:5,tocIndex:0},{value:"If the ",paraId:5,tocIndex:0},{value:"cfg",paraId:5,tocIndex:0},{value:" is an object without property ",paraId:5,tocIndex:0},{value:"type",paraId:5,tocIndex:0},{value:", or the ",paraId:5,tocIndex:0},{value:"type",paraId:5,tocIndex:0},{value:" is the same as the current layout method, only the configurations for the current layout will be changed.",paraId:5,tocIndex:0},{value:"Interface Definition:",paraId:6,tocIndex:1},{value:"/**\n * Change the source data, render the graph with new data\n * @param {object} data source data\n * @return {object} this\n */\nchangeData(data);\n",paraId:7,tocIndex:1},{value:"In the first stage, the graph is arranged by random layout. Transform to force layout with node overlappings after 2000ms, force layout without node overlappings after 4000ms, change data to ",paraId:8,tocIndex:3},{value:"data2",paraId:8,tocIndex:3},{value:" after 6000ms.",paraId:8,tocIndex:3},{value:"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Tutorial Layout Demo</title>\n  </head>\n  <body>\n    <div id=\"mountNode\"></div>\n    <script src=\"https://gw.alipayobjects.com/os/lib/antv/g6/4.3.11/dist/g6.min.js\"><\/script>\n    <script src=\"https://gw.alipayobjects.com/os/antv/assets/lib/jquery-3.2.1.min.js\"><\/script>\n    <script>\n      const data = {\n        nodes: [\n          { id: '0', label: '0' },\n          { id: '1', label: '1' },\n          { id: '2', label: '2' },\n          { id: '3', label: '3' },\n          { id: '4', label: '4' },\n        ],\n        edges: [\n          { source: '0', target: '1' },\n          { source: '0', target: '2' },\n          { source: '0', target: '3' },\n          { source: '0', target: '4' },\n          { source: '1', target: '2' },\n          { source: '1', target: '3' },\n        ],\n      };\n\n      const data2 = {\n        nodes: [\n          { id: '0', label: '0' },\n          { id: '1', label: '1' },\n          { id: '2', label: '2' },\n        ],\n        edges: [\n          { source: '0', target: '1' },\n          { source: '0', target: '2' },\n        ],\n      };\n\n      const graph = new G6.Graph({\n        container: 'mountNode', // String | HTMLElement, Required, the id of the container or the container object\n        width: 300, // Number, Required, The width of the graph\n        height: 300, // Number, Required, The height of the graph\n        animate: true, // Boolean, whether to activate the animation while changing the layout\n      });\n\n      // Load data and render\n      graph.data(data);\n      graph.render();\n\n      // Transform to force layout with node overlappings in 2000 ms\n      setTimeout(() => {\n        graph.updateLayout('force');\n      }, 8000);\n\n      // Transform to force layout without node overlappings in 4000 ms\n      setTimeout(() => {\n        graph.updateLayout({\n          type: 'force', // Layout name\n          preventOverlap: true, // Whether to prevent the node overlappings\n          nodeSize: 40, // The node size for collide detection\n          linkDistance: 100, // The edge length\n        });\n      }, 10000);\n\n      // Change the data to data2 in 6000 ms\n      setTimeout(() => {\n        graph.changeData(data2);\n      }, 12000);\n    <\/script>\n  </body>\n</html>\n",paraId:9,tocIndex:4}]},3821:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Supports by v4.3.0 and latter versions",paraId:0,tocIndex:0},{value:". Sublayout pipeline supports several sublayouts on different subgraphs by configuring ",paraId:0,tocIndex:0},{value:"Graph.layout",paraId:0,tocIndex:0},{value:".",paraId:0,tocIndex:0},{value:"You can configure ",paraId:1,tocIndex:1},{value:"layout.pipes",paraId:1,tocIndex:1},{value:" array when initializing the graph instance. Each item in the array is a sublayout pipe, and it contains the infomation about the layout type(",paraId:1,tocIndex:1},{value:"type",paraId:1,tocIndex:1},{value:"), configurations for this layout type, and node filtering function (",paraId:1,tocIndex:1},{value:"nodesFilter",paraId:1,tocIndex:1},{value:"). NOTICE that, if some nodes belong to several sublayouts in the same time, the result positions of these nodes will follow the last sublayout.",paraId:1,tocIndex:1},{value:"The format of the ",paraId:2,tocIndex:1},{value:"layout.pipes",paraId:2,tocIndex:1},{value:":",paraId:2,tocIndex:1},{value:"type Pipes =\n  {\n    // the name of the layout method for this subgraph\n    type: 'random' | 'radial' | 'mds' | 'circular' | 'fruchterman' | 'force' | 'gForce' | 'dagre' | 'concentric' | 'grid' | 'forceAtlas2',\n    // node filtering function, the parameter is the node data, and it returns a boolean to indicate if the node belongs to this subgraph\n    nodesFilter: (node: NodeData) => boolean;\n    ... // the configurations for this layout method, refer to the docs for different layout method pls\n  }[];\n",paraId:3,tocIndex:1},{value:"Usage demo:",paraId:4,tocIndex:1},{value:"// configure the layout.pipes when initializing the graph instance\nconst graph = new G6.Graph({\n  // ...       // other graph configurations\n  layout: {\n    pipes: [\n      {\n        // the name of the layout method for this subgraph\n        type: 'circular',\n        // indicate if the node belongs to the subgraph\n        nodesFilter: (node) => node.subGraphId === '1',\n        // ... other configurations for this layout method\n      },\n      {\n        type: 'grid',\n        nodesFilter: (node) => node.subGraphId === '2',\n        // other configurations for this layout method\n        begin: [100, 0],\n      }\n    ]\n  },\n});\n",paraId:5,tocIndex:1}]},83933:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"At present, the subgraph layout mechanism is independent to the graph layout. You can instantiate the layout method and load the data of subgraph onto the layout instance. This mechanism allows users to utilize G6's layout algorithms to calculate the node positions, and render the graph with another rendering engine.",paraId:0,tocIndex:0},{value:"v4.3.0 newly support subgraph layout pipeline",paraId:1,tocIndex:0},{value:", which allows several subgraph layouts executed in pipeline configured on Graph.layout. Refer to",paraId:1,tocIndex:0},{value:"Subgraph Layout Piepeline",paraId:2,tocIndex:0},{value:".",paraId:1,tocIndex:0},{value:"// Instantiate the Layout\nconst subgraphLayout = new G6.Layout['force']({\n  center: [500, 450],\n});\n\n// Initialize the layout with sugbraph data\nsubgraphLayout.init({\n  nodes: subGraphNodes,\n  edges: subGraphEdges,\n});\n\n// Execute the layout\nsubgraphLayout.execute();\n\n// Update the node positions after subgraph layout\ngraph.positionsAnimate();\n",paraId:3,tocIndex:1}]},49529:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Graph layouts are the algorithms arranging the node positions to obtain a understandable visualizaiton. According to the differences of data strucutre, the layouts can be categorized into: general graph layout and tree graph layout. There are several layout algorithms for them respectively. By utilizing the built-in layouts, ",paraId:0,tocIndex:0},{value:"Translating the layouts and their configurations, translating the data",paraId:1,tocIndex:0},{value:" can be achieved. Besides, G6 provides the ",paraId:0,tocIndex:0},{value:"Web-Worker",paraId:2,tocIndex:0},{value:" for general graph layout in case layout calculation takes too long to block page interaction.",paraId:0,tocIndex:0},{value:"Besides, G6 supports ",paraId:3,tocIndex:0},{value:"Custom Layout",paraId:4,tocIndex:0},{value:" mechanism for users to design their own layout algorithm.",paraId:3,tocIndex:0},{value:"In fact, 'layout' is a free mechanism in G6. The built-in layouts only calculate and manipulate the ",paraId:5,tocIndex:0},{value:"x",paraId:5,tocIndex:0},{value:" and ",paraId:5,tocIndex:0},{value:"y",paraId:5,tocIndex:0},{value:" in node data. In other word, users can assign ",paraId:5,tocIndex:0},{value:"x",paraId:5,tocIndex:0},{value:" and ",paraId:5,tocIndex:0},{value:"y",paraId:5,tocIndex:0},{value:" to nodes by any other ways including the algorithms from the third-party libraries. Once G6 find the ",paraId:5,tocIndex:0},{value:"x",paraId:5,tocIndex:0},{value:" and ",paraId:5,tocIndex:0},{value:"y",paraId:5,tocIndex:0},{value:" information on data, it will render the graph according to it.",paraId:5,tocIndex:0},{value:"In order to handle the tree data structure, G6 extends Graph to TreeGraph. Refer to: ",paraId:6,tocIndex:0},{value:"TreeGraph API",paraId:7,tocIndex:0},{value:". TreeGraph is appropriate for visualizing hierarchy data. In this ducoment, we will introduce the TreeGraph layout algorithms in detail.",paraId:6,tocIndex:0},{value:"CompactBox Layout",paraId:8,tocIndex:1},{value:";",paraId:9,tocIndex:1},{value:"Dendrogram Layout",paraId:10,tocIndex:1},{value:": Arrange the leaves on the same level;",paraId:9,tocIndex:1},{value:"Indented Layout",paraId:11,tocIndex:1},{value:";",paraId:9,tocIndex:1},{value:"Mindmap Layout",paraId:12,tocIndex:1},{value:".",paraId:9,tocIndex:1},{value:"Similar to Graph, assign ",paraId:13,tocIndex:2},{value:"layout",paraId:13,tocIndex:2},{value:" to Graph instance to set the layout for a TreeGraph. The ",paraId:13,tocIndex:2},{value:"Expand/Collapse",paraId:14,tocIndex:2},{value:" behavior can be assigned to the TreeGraph by ",paraId:13,tocIndex:2},{value:"modes",paraId:13,tocIndex:2},{value:".",paraId:13,tocIndex:2},{value:"const graph = new G6.TreeGraph({\n  container: 'mountNode',\n  modes: {\n    default: [\n      {\n        // Assign the collapse/expand behavior\n        type: 'collapse-expand',\n      },\n      'drag-canvas',\n    ],\n  },\n  // Assign the layout\n  layout: {\n    type: 'dendrogram', // Layout type\n    direction: 'LR', // Layout direction is from the left to the right. Options: 'H' / 'V' / 'LR' / 'RL' / 'TB' / 'BT'\n    nodeSep: 50, // The distance between nodes\n    rankSep: 100, // The distance between adjacent levels\n    excludeInvisibles: true, // Whether to exclude the hidden nodes, *Supported by v4.8.8.* \n  },\n});\n",paraId:15,tocIndex:2},{value:"Description",paraId:16,tocIndex:4},{value:": CompactBox is the default layout for TreeGraph. It will consider the bounding box of each node when layout.",paraId:16,tocIndex:4},{value:"API",paraId:16,tocIndex:4},{value:": ",paraId:16,tocIndex:4},{value:"CompactBox API",paraId:17,tocIndex:4},{value:"Configuration",paraId:16,tocIndex:4},{value:":",paraId:16,tocIndex:4},{value:"Name",paraId:18,tocIndex:4},{value:"Type",paraId:18,tocIndex:4},{value:"Example/Options",paraId:18,tocIndex:4},{value:"Default",paraId:18,tocIndex:4},{value:"Description",paraId:18,tocIndex:4},{value:"direction",paraId:18,tocIndex:4},{value:"String",paraId:18,tocIndex:4},{value:"'TB' / 'BT' / 'LR' / 'RL' / 'H' / 'V'",paraId:18,tocIndex:4},{value:"'LR'",paraId:18,tocIndex:4},{value:"The direction of layout. ",paraId:18,tocIndex:4},{value:"- TB —— Root is on the top, layout from the top to the bottom",paraId:18,tocIndex:4},{value:"- BT —— Root is on the bottom, layout from the bottom to the top",paraId:18,tocIndex:4},{value:"     ",paraId:18,tocIndex:4},{value:"(Left)TB. (Right)BT.",paraId:18,tocIndex:4},{value:"- LR —— Root is on the left, layout from the left to the right",paraId:18,tocIndex:4},{value:"- RL —— Root is on the right, layout from the right to the left",paraId:18,tocIndex:4},{value:"             ",paraId:18,tocIndex:4},{value:" ",paraId:18,tocIndex:4},{value:"(Left)LR. (Right)RL. ",paraId:18,tocIndex:4},{value:"- H —— Root is on the middle, layout in horizontal symmetry.",paraId:18,tocIndex:4},{value:"- V —— Root is on the middle, layout in vertical symmetry.",paraId:18,tocIndex:4},{value:"          ",paraId:18,tocIndex:4},{value:"> (Left)H. (Right)V.",paraId:18,tocIndex:4},{value:"getId",paraId:18,tocIndex:4},{value:"Function",paraId:18,tocIndex:4},{value:"(d) => {",paraId:18,tocIndex:4},{value:"  // d is a node",paraId:18,tocIndex:4},{value:"  return d.id + 'node';",paraId:18,tocIndex:4},{value:"}",paraId:18,tocIndex:4},{value:"undefined",paraId:18,tocIndex:4},{value:"Sets the id for each node",paraId:18,tocIndex:4},{value:"getHeight",paraId:18,tocIndex:4},{value:"Function",paraId:18,tocIndex:4},{value:"(d) => {",paraId:18,tocIndex:4},{value:"  // d is a node",paraId:18,tocIndex:4},{value:"  return 10;",paraId:18,tocIndex:4},{value:"}",paraId:18,tocIndex:4},{value:"undefined",paraId:18,tocIndex:4},{value:"The height of each node",paraId:18,tocIndex:4},{value:"getWidth",paraId:18,tocIndex:4},{value:"Function",paraId:18,tocIndex:4},{value:"(d) => {",paraId:18,tocIndex:4},{value:"  // d is a node",paraId:18,tocIndex:4},{value:"  return 20;",paraId:18,tocIndex:4},{value:"}",paraId:18,tocIndex:4},{value:"undefined",paraId:18,tocIndex:4},{value:"he width of each node",paraId:18,tocIndex:4},{value:"getVGap",paraId:18,tocIndex:4},{value:"Function",paraId:18,tocIndex:4},{value:"(d) => {",paraId:18,tocIndex:4},{value:"  // d is a node",paraId:18,tocIndex:4},{value:"  return 100;",paraId:18,tocIndex:4},{value:"}",paraId:18,tocIndex:4},{value:"undefined",paraId:18,tocIndex:4},{value:"The vertical separation of nodes",paraId:18,tocIndex:4},{value:"getHGap",paraId:18,tocIndex:4},{value:"Function",paraId:18,tocIndex:4},{value:"(d) => {",paraId:18,tocIndex:4},{value:"// d is a node",paraId:18,tocIndex:4},{value:"  return 50;",paraId:18,tocIndex:4},{value:"}",paraId:18,tocIndex:4},{value:"undefined",paraId:18,tocIndex:4},{value:"The horizontal separation of nodes",paraId:18,tocIndex:4},{value:"radial",paraId:18,tocIndex:4},{value:"Boolean",paraId:18,tocIndex:4},{value:"true",paraId:18,tocIndex:4},{value:"false",paraId:18,tocIndex:4},{value:"If layout the graph in radial style. If ",paraId:18,tocIndex:4},{value:"radial",paraId:18,tocIndex:4},{value:" is ",paraId:18,tocIndex:4},{value:"true",paraId:18,tocIndex:4},{value:", we recommend to set ",paraId:18,tocIndex:4},{value:"direction",paraId:18,tocIndex:4},{value:" to ",paraId:18,tocIndex:4},{value:"'LR'",paraId:18,tocIndex:4},{value:" or ",paraId:18,tocIndex:4},{value:"'RL'",paraId:18,tocIndex:4},{value:": ",paraId:18,tocIndex:4},{value:"Description",paraId:19,tocIndex:5},{value:": Arranges all the leaves on the same level. It is appropriate for hierarchical clustering. It does not consider the node size, which will be regarded as 1 px.",paraId:19,tocIndex:5},{value:"API",paraId:19,tocIndex:5},{value:": ",paraId:19,tocIndex:5},{value:"Dendrogram API",paraId:20,tocIndex:5},{value:"Configuration",paraId:19,tocIndex:5},{value:":",paraId:19,tocIndex:5},{value:"Name",paraId:21,tocIndex:5},{value:"Type",paraId:21,tocIndex:5},{value:"Example/Options",paraId:21,tocIndex:5},{value:"Default",paraId:21,tocIndex:5},{value:"Description",paraId:21,tocIndex:5},{value:"direction",paraId:21,tocIndex:5},{value:"String",paraId:21,tocIndex:5},{value:"'TB' / 'BT' / 'LR' / 'RL' / 'H' / 'V'",paraId:21,tocIndex:5},{value:"'LR'",paraId:21,tocIndex:5},{value:"The direction of layout. ",paraId:21,tocIndex:5},{value:"- TB —— Root is on the top, layout from the top to the bottom",paraId:21,tocIndex:5},{value:"- BT —— Root is on the bottom, layout from the bottom to the top",paraId:21,tocIndex:5},{value:"> (Left)TB. (Right)BT. ",paraId:21,tocIndex:5},{value:"- LR —— Root is on the left, layout from the left to the right",paraId:21,tocIndex:5},{value:"- RL —— Root is on the right, layout from the right to the left",paraId:21,tocIndex:5},{value:"> (Left)LR. (Right)RL. ",paraId:21,tocIndex:5},{value:"- H —— Root is on the middle, layout in horizontal symmetry.",paraId:21,tocIndex:5},{value:"- V —— Root is on the middle, layout in vertical symmetry.",paraId:21,tocIndex:5},{value:"> (Left)H. (Right)V.",paraId:21,tocIndex:5},{value:"nodeSep",paraId:21,tocIndex:5},{value:"Number",paraId:21,tocIndex:5},{value:"50",paraId:21,tocIndex:5},{value:"0",paraId:21,tocIndex:5},{value:"Node separation",paraId:21,tocIndex:5},{value:"rankSep",paraId:21,tocIndex:5},{value:"Number",paraId:21,tocIndex:5},{value:"100",paraId:21,tocIndex:5},{value:"0",paraId:21,tocIndex:5},{value:"Level separation",paraId:21,tocIndex:5},{value:"radial",paraId:21,tocIndex:5},{value:"Boolean",paraId:21,tocIndex:5},{value:"true",paraId:21,tocIndex:5},{value:"false",paraId:21,tocIndex:5},{value:"Wheter layout the graph in radial style. If ",paraId:21,tocIndex:5},{value:"radial",paraId:21,tocIndex:5},{value:" is ",paraId:21,tocIndex:5},{value:"true",paraId:21,tocIndex:5},{value:", we recommend to set ",paraId:21,tocIndex:5},{value:"direction",paraId:21,tocIndex:5},{value:" to ",paraId:21,tocIndex:5},{value:"'LR'",paraId:21,tocIndex:5},{value:" or ",paraId:21,tocIndex:5},{value:"'RL'",paraId:21,tocIndex:5},{value:": ",paraId:21,tocIndex:5},{value:"Description",paraId:22,tocIndex:6},{value:": Indented layout represents the hierarchy by indent between them. Each node will take a row/column. It is appropriate for file directory.",paraId:22,tocIndex:6},{value:"API",paraId:23,tocIndex:6},{value:": ",paraId:23,tocIndex:6},{value:"Indented API",paraId:24,tocIndex:6},{value:"Configuration",paraId:23,tocIndex:6},{value:":",paraId:23,tocIndex:6},{value:"Name",paraId:25,tocIndex:6},{value:"Type",paraId:25,tocIndex:6},{value:"Example/Options",paraId:25,tocIndex:6},{value:"Default",paraId:25,tocIndex:6},{value:"Description",paraId:25,tocIndex:6},{value:"direction",paraId:25,tocIndex:6},{value:"String",paraId:25,tocIndex:6},{value:"'LR' / 'RL' / 'H'",paraId:25,tocIndex:6},{value:"'LR'",paraId:25,tocIndex:6},{value:"layout direction",paraId:25,tocIndex:6},{value:"'LR' —— Root is on the left, layout from the left to the right(left image below)",paraId:25,tocIndex:6},{value:"'RL' —— Root is on the right, layout from the right to the left(center image below)",paraId:25,tocIndex:6},{value:"'H' —— Root is on the middle, layout in horizontal symmetry(right image below)",paraId:25,tocIndex:6},{value:"indent",paraId:25,tocIndex:6},{value:"Number",paraId:25,tocIndex:6},{value:"80",paraId:25,tocIndex:6},{value:"20",paraId:25,tocIndex:6},{value:"Colunm separation",paraId:25,tocIndex:6},{value:"getHeight",paraId:25,tocIndex:6},{value:"Function",paraId:25,tocIndex:6},{value:"(d) => {",paraId:25,tocIndex:6},{value:"  // d is a node",paraId:25,tocIndex:6},{value:"  return 10;",paraId:25,tocIndex:6},{value:"}",paraId:25,tocIndex:6},{value:"undefined",paraId:25,tocIndex:6},{value:"The height of each node",paraId:25,tocIndex:6},{value:"getWidth",paraId:25,tocIndex:6},{value:"Function",paraId:25,tocIndex:6},{value:"(d) => {",paraId:25,tocIndex:6},{value:"  // d is a node",paraId:25,tocIndex:6},{value:"  return 20;",paraId:25,tocIndex:6},{value:"}",paraId:25,tocIndex:6},{value:"undefined",paraId:25,tocIndex:6},{value:"The width of each node",paraId:25,tocIndex:6},{value:"getSide",paraId:25,tocIndex:6},{value:"Function",paraId:25,tocIndex:6},{value:"(d) => {",paraId:25,tocIndex:6},{value:"  // d is a node",paraId:25,tocIndex:6},{value:"  return 'left';",paraId:25,tocIndex:6},{value:"}",paraId:25,tocIndex:6},{value:"undefined",paraId:25,tocIndex:6},{value:"The callback function of node position(left or right of root node). Only affects the nodes which are connected to the root node directly. And the descendant nodes will be placed according to it",paraId:25,tocIndex:6},{value:"align",paraId:25,tocIndex:6},{value:"'center' / undefined",paraId:25,tocIndex:6},{value:"'center'",paraId:25,tocIndex:6},{value:"undefined",paraId:25,tocIndex:6},{value:"Tell the layout whether the nodes drawing aligned at the center or the left-top. Built-in nodes are all aligned at the center, e.g. built-in 'circle' type node has circle type keyShape, and the circle shape's x and y are assigned with 0, which means the origin of this node's coordinate system is aligned at the circle's center; built-in 'rect' type node has rect type keyShape, and the rect shape's x and y are assigned with ",paraId:25,tocIndex:6},{value:"width / 2",paraId:25,tocIndex:6},{value:" and ",paraId:25,tocIndex:6},{value:"height / 2",paraId:25,tocIndex:6},{value:" respectively, which means the origin of this node's coordinate system is aligned at the center of the rect shape. But user customed node type with rect keyShape usually has [0, 0] for x and y, which means the origin is aligned at the left-top of the rect. Tell layout this info and correct ",paraId:25,tocIndex:6},{value:"getWidth",paraId:25,tocIndex:6},{value:", ",paraId:25,tocIndex:6},{value:"getHeight",paraId:25,tocIndex:6},{value:" in the same time will make the coordinate calculation more precise.",paraId:25,tocIndex:6},{value:"Description",paraId:26,tocIndex:7},{value:": Mindmap arranged the nodes with same depth on the same level. Different from compactBox, it does not consider the size of nodes while doing layout.",paraId:26,tocIndex:7},{value:"API",paraId:26,tocIndex:7},{value:": ",paraId:26,tocIndex:7},{value:"Mindmap API",paraId:27,tocIndex:7},{value:"Configuration",paraId:26,tocIndex:7},{value:":",paraId:26,tocIndex:7},{value:"Name",paraId:28,tocIndex:7},{value:"Type",paraId:28,tocIndex:7},{value:"Example/Options",paraId:28,tocIndex:7},{value:"Default",paraId:28,tocIndex:7},{value:"Description",paraId:28,tocIndex:7},{value:"direction",paraId:28,tocIndex:7},{value:"String",paraId:28,tocIndex:7},{value:"'H' / 'V'",paraId:28,tocIndex:7},{value:"'H'",paraId:28,tocIndex:7},{value:"layout direction",paraId:28,tocIndex:7},{value:"- H: Root is on the middle, layout in horizontal symmetry.",paraId:28,tocIndex:7},{value:"- V: Root is on the middle, layout in vertical symmetry.",paraId:28,tocIndex:7},{value:"getHeight",paraId:28,tocIndex:7},{value:"Function",paraId:28,tocIndex:7},{value:"(d) => {",paraId:28,tocIndex:7},{value:"  // d is a node",paraId:28,tocIndex:7},{value:"  return 10;",paraId:28,tocIndex:7},{value:"}",paraId:28,tocIndex:7},{value:"undefined",paraId:28,tocIndex:7},{value:"The height of each node",paraId:28,tocIndex:7},{value:"getWidth",paraId:28,tocIndex:7},{value:"Function",paraId:28,tocIndex:7},{value:"(d) => {",paraId:28,tocIndex:7},{value:"  // d is a node",paraId:28,tocIndex:7},{value:"  return 20;",paraId:28,tocIndex:7},{value:"}",paraId:28,tocIndex:7},{value:"undefined",paraId:28,tocIndex:7},{value:"The width of each node",paraId:28,tocIndex:7},{value:"getVGap",paraId:28,tocIndex:7},{value:"Function",paraId:28,tocIndex:7},{value:"(d) => {",paraId:28,tocIndex:7},{value:"  // d is a node",paraId:28,tocIndex:7},{value:"  return 100;",paraId:28,tocIndex:7},{value:"}",paraId:28,tocIndex:7},{value:"18",paraId:28,tocIndex:7},{value:"The vertical separation of nodes",paraId:28,tocIndex:7},{value:"getHGap",paraId:28,tocIndex:7},{value:"Function",paraId:28,tocIndex:7},{value:"(d) => {",paraId:28,tocIndex:7},{value:"  // d is a node",paraId:28,tocIndex:7},{value:"  return 50;",paraId:28,tocIndex:7},{value:"}",paraId:28,tocIndex:7},{value:"18",paraId:28,tocIndex:7},{value:"The horizontal separation of nodes",paraId:28,tocIndex:7},{value:"getSide",paraId:28,tocIndex:7},{value:"String",paraId:28,tocIndex:7},{value:"Function",paraId:28,tocIndex:7},{value:"(d) => {",paraId:28,tocIndex:7},{value:"  // d is a node",paraId:28,tocIndex:7},{value:"  return 'left';",paraId:28,tocIndex:7},{value:"} / 'right'",paraId:28,tocIndex:7},{value:"The callback function of node position(left or right of root node). Only affects the nodes which are connected to the root node directly. And the descendant nodes will be placed according to it",paraId:28,tocIndex:7}]},9149:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"The layout algorithm costs a lot in large scale graph visualization. If you config the layout for a graph, the layout algorithm must be done before rendering. In some web applications, this process will block the page and the end users will not able to interact with other components of the page. To address this issue, G6 provids the Web-Worker for ",paraId:0},{value:"General Graph",paraId:0},{value:". You only need to assign ",paraId:0},{value:"workerEnabled",paraId:0},{value:" to ",paraId:0},{value:"true",paraId:0},{value:" when configuring the layout. For example:",paraId:0},{value:"const graph = new G6.Graph({\n  ...                      // Other configurations for graph\n  layout: {                // Object, layout methods and its configurations\n  \ttype: 'fruchterman',\n    workerEnabled: true,   // enable Web-Worker\n    // ...                 // other configurations for the layout\n  }\n});\n",paraId:1},{value:"Note:",paraId:2},{value:"TreeGraph layouts do not support Web-Worker;",paraId:3},{value:"Sub-Graph layout mechanism do not support Web-Worker;",paraId:3},{value:"Worker will visit the latest online version of @antv/layout. If your application cannot reach the online resource, download and save the ",paraId:3},{value:"layout script",paraId:3},{value:", and put it on an address which is visitable for your application. And then config ",paraId:3},{value:"workerScriptURL",paraId:3},{value:" with the address in ",paraId:3},{value:"layout",paraId:3},{value:".",paraId:3}]},39189:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Initialize",paraId:0,tocIndex:0},{value:"Shape properties",paraId:1,tocIndex:1},{value:"Shape & Key Shape",paraId:1,tocIndex:1},{value:"Graphics Group",paraId:1,tocIndex:1},{value:"Shape and Group Transformation",paraId:1,tocIndex:1},{value:"Node\n",paraId:2,tocIndex:2},{value:"Built-in Node",paraId:3,tocIndex:2},{value:"Custom Node",paraId:3,tocIndex:2},{value:"AnchorPoints",paraId:3,tocIndex:2},{value:"Edge\n",paraId:2,tocIndex:2},{value:"Built-in Edge",paraId:4,tocIndex:2},{value:"Custom Edge",paraId:4,tocIndex:2},{value:"Combo\n",paraId:2,tocIndex:2},{value:"Combo Overview",paraId:5,tocIndex:2},{value:"Built-in Combo",paraId:5,tocIndex:2},{value:"Custom Combo",paraId:5,tocIndex:2},{value:"Advanced Style\n",paraId:2,tocIndex:2},{value:"Background of the label",paraId:6,tocIndex:2},{value:"Gradient color",paraId:6,tocIndex:2},{value:"Fill with Texture",paraId:6,tocIndex:2},{value:"Update Label",paraId:6,tocIndex:2},{value:"Advanced Operation\n",paraId:2,tocIndex:2},{value:"Update node or edge style",paraId:7,tocIndex:2},{value:"Level adjustment",paraId:7,tocIndex:2},{value:"Show/hide",paraId:7,tocIndex:2},{value:"Lock/unlock",paraId:7,tocIndex:2},{value:"Built-in layout",paraId:8,tocIndex:3},{value:"Custom layout",paraId:8,tocIndex:3},{value:"Monitoring and binding events",paraId:9,tocIndex:4},{value:"Built-in interactive behavior",paraId:9,tocIndex:4},{value:"Custom interaction behavior (optional reading)",paraId:9,tocIndex:4},{value:"Interactive Mode",paraId:9,tocIndex:4},{value:"Global animation",paraId:10,tocIndex:5},{value:"Element animation",paraId:10,tocIndex:5}]},99492:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"There are several plugins in G6 which can be used for G6's graph or other applications.",paraId:0},{value:"Legend",paraId:1},{value:" ",paraId:2},{value:"supported by v4.3.0 and later versions",paraId:2},{value:"SnapLine",paraId:3},{value:" ",paraId:2},{value:"supported by v4.3.0 and later versions",paraId:2},{value:"Grid",paraId:4},{value:"Minimap",paraId:5},{value:"Edge Bundling",paraId:6},{value:"Menu",paraId:7},{value:"ToolBar",paraId:8},{value:"TimeBar",paraId:9},{value:"Tooltip",paraId:10},{value:"Fisheye",paraId:11},{value:"EdgeFilterLens",paraId:12},{value:"Instantiate the plugin and configure the minimap onto the instance of Graph:",paraId:13,tocIndex:0},{value:"// Instantialize the Grid plugin\nconst grid = new G6.Grid();\n// Instantialize the Minimap plugin\nconst minimap = new G6.Minimap();\nconst graph = new G6.Graph({\n  //... Other configurations\n  plugins: [grid, minimap], // Configure Grid and Minimap to the graph\n});\n",paraId:14,tocIndex:0},{value:"Legend is a built-in legend plugin for G6. It is useful for npde/edge type demonstration, and the end-users are able to interact with the legend to highlight and filter the items on the graph. ",paraId:15,tocIndex:1},{value:"supported by v4.3.0 and later versions",paraId:15,tocIndex:1},{value:".",paraId:15,tocIndex:1},{value:"Name",paraId:16,tocIndex:2},{value:"Type",paraId:16,tocIndex:2},{value:"Description",paraId:16,tocIndex:2},{value:"data",paraId:16,tocIndex:2},{value:"GraphData",paraId:16,tocIndex:2},{value:"The data for the legend, not related to the data of the graph. The legend for nodes currently supports ",paraId:16,tocIndex:2},{value:"'circle'",paraId:16,tocIndex:2},{value:", ",paraId:16,tocIndex:2},{value:"'rect'",paraId:16,tocIndex:2},{value:", and ",paraId:16,tocIndex:2},{value:"'ellipse'",paraId:16,tocIndex:2},{value:". The legend for edges currently supports ",paraId:16,tocIndex:2},{value:"'line'",paraId:16,tocIndex:2},{value:", ",paraId:16,tocIndex:2},{value:"'cubic'",paraId:16,tocIndex:2},{value:", and ",paraId:16,tocIndex:2},{value:"'quadratic'",paraId:16,tocIndex:2},{value:". ",paraId:16,tocIndex:2},{value:"type",paraId:16,tocIndex:2},{value:" for each data means the type of the legend item, and the ",paraId:16,tocIndex:2},{value:"order",paraId:16,tocIndex:2},{value:" could be assigned to each node/edge data for ordering in a legend group",paraId:16,tocIndex:2},{value:"position",paraId:16,tocIndex:2},{value:"'top' / 'top-left' / 'top-right' / 'right' / 'right-top' / 'right-bottom' / 'left' / 'left-top' / 'left-bottom' / 'bottom' / 'bottom-left' / 'bottom-right'",paraId:16,tocIndex:2},{value:"The relative of the position to the canvas. ",paraId:16,tocIndex:2},{value:"'top'",paraId:16,tocIndex:2},{value:" by default, which means the legend area is on the top of the canvas",paraId:16,tocIndex:2},{value:"padding",paraId:16,tocIndex:2},{value:"number / number[]",paraId:16,tocIndex:2},{value:"The inner distance between the content of the legend to the border of the legend area. Array with four numbers means the padding to the top, right, bottom, and left responsively",paraId:16,tocIndex:2},{value:"margin",paraId:16,tocIndex:2},{value:"number / number[]",paraId:16,tocIndex:2},{value:"The outer distance between the legend area to the border of the canvas. Array with four numbers means the distance to the top, right, bottom, and left responsively. Only the top distance takes effect when  ",paraId:16,tocIndex:2},{value:"position:'top'",paraId:16,tocIndex:2},{value:", situations for other ",paraId:16,tocIndex:2},{value:"position",paraId:16,tocIndex:2},{value:" configurations are similar to it",paraId:16,tocIndex:2},{value:"offsetX",paraId:16,tocIndex:2},{value:"number",paraId:16,tocIndex:2},{value:"The x-axis offset for the legend area, it is useful when you want to adjust the position of the lenged slightly",paraId:16,tocIndex:2},{value:"offsetY",paraId:16,tocIndex:2},{value:"number",paraId:16,tocIndex:2},{value:"The y-axis offset for the legend area, it is useful when you want to adjust the position of the lenged slightly",paraId:16,tocIndex:2},{value:"containerStyle",paraId:16,tocIndex:2},{value:"ShapeStyle",paraId:16,tocIndex:2},{value:"The style for the background rect, the format is similar as ",paraId:16,tocIndex:2},{value:"rect shape style",paraId:17,tocIndex:2},{value:"horiSep",paraId:16,tocIndex:2},{value:"number",paraId:16,tocIndex:2},{value:"The horizontal seperation of the legend items",paraId:16,tocIndex:2},{value:"vertiSep",paraId:16,tocIndex:2},{value:"number",paraId:16,tocIndex:2},{value:"The vertical seperation of the legend items",paraId:16,tocIndex:2},{value:"layout",paraId:16,tocIndex:2},{value:"'vertical' / 'horizontal'",paraId:16,tocIndex:2},{value:"The layout of the legend items. ",paraId:16,tocIndex:2},{value:"'horizontal'",paraId:16,tocIndex:2},{value:" by default",paraId:16,tocIndex:2},{value:"align",paraId:16,tocIndex:2},{value:"'center' / 'right' / 'left'",paraId:16,tocIndex:2},{value:"The alignment of the legend items.  ",paraId:16,tocIndex:2},{value:"'center'",paraId:16,tocIndex:2},{value:" by default",paraId:16,tocIndex:2},{value:"title",paraId:16,tocIndex:2},{value:"string",paraId:16,tocIndex:2},{value:"The title string for the legend, the style of the title could be configured by ",paraId:16,tocIndex:2},{value:"titleConfig",paraId:16,tocIndex:2},{value:"titleConfig",paraId:16,tocIndex:2},{value:"object",paraId:16,tocIndex:2},{value:"The style of the legend title, detail configurations are shown in following lines",paraId:16,tocIndex:2},{value:"titleConfig.position",paraId:16,tocIndex:2},{value:"'center' / 'right' / 'left'",paraId:16,tocIndex:2},{value:"The alignment of the title to the legend content. ",paraId:16,tocIndex:2},{value:"'center'",paraId:16,tocIndex:2},{value:" by default",paraId:16,tocIndex:2},{value:"titleConfig.offsetX",paraId:16,tocIndex:2},{value:"number",paraId:16,tocIndex:2},{value:"The x-axis offset for the legend title, it is useful when you want to adjust the position of the title slightly",paraId:16,tocIndex:2},{value:"titleConfig.offsetY",paraId:16,tocIndex:2},{value:"number",paraId:16,tocIndex:2},{value:"The y-axis offset for the legend title, it is useful when you want to adjust the position of the title slightly",paraId:16,tocIndex:2},{value:"titleConfig[key]",paraId:16,tocIndex:2},{value:"ShapeStyle",paraId:16,tocIndex:2},{value:"Other styles for the text, configurations are same as ",paraId:16,tocIndex:2},{value:"text shape style",paraId:18,tocIndex:2},{value:"filter",paraId:16,tocIndex:2},{value:"object",paraId:16,tocIndex:2},{value:"Configurations for the graph item filtering while the end-user interacting with the legend items. Detials are shown in the following lines",paraId:16,tocIndex:2},{value:"filter.enable",paraId:16,tocIndex:2},{value:"boolean",paraId:16,tocIndex:2},{value:"Whether allow filtering the items in the main graph while the end-user interaction with the legend items. ",paraId:16,tocIndex:2},{value:"false",paraId:16,tocIndex:2},{value:" by default",paraId:16,tocIndex:2},{value:"filter.multiple",paraId:16,tocIndex:2},{value:"boolean",paraId:16,tocIndex:2},{value:"Whether support active multiple types of legend items, ",paraId:16,tocIndex:2},{value:"false",paraId:16,tocIndex:2},{value:" by default, which means only one type of legend item will be activated in the same time. If it is ",paraId:16,tocIndex:2},{value:"true",paraId:16,tocIndex:2},{value:", multiple items could be activated only when the ",paraId:16,tocIndex:2},{value:"filter.trigger",paraId:16,tocIndex:2},{value:" is ",paraId:16,tocIndex:2},{value:"'click'",paraId:16,tocIndex:2},{value:"filter.trigger",paraId:16,tocIndex:2},{value:"'click' / 'mouseenter'",paraId:16,tocIndex:2},{value:"The interaction way to the legend items. ",paraId:16,tocIndex:2},{value:"click",paraId:16,tocIndex:2},{value:" by default, which means while the end-user clicking a legend item, the legend item and corresponding filtered items on the main graph will be activated",paraId:16,tocIndex:2},{value:"filter.legendStateStyles",paraId:16,tocIndex:2},{value:"{ active?: ShapeStyle, inactive?: ShapeStyle",paraId:16,tocIndex:2},{value:"The state styles for the legend items while filtering, inluding ",paraId:16,tocIndex:2},{value:"filter.legendStateStyles.active",paraId:16,tocIndex:2},{value:" and ",paraId:16,tocIndex:2},{value:"filter.legendStateStyles.inactive",paraId:16,tocIndex:2},{value:". The type of each one is ",paraId:16,tocIndex:2},{value:"ShapeStyle",paraId:16,tocIndex:2},{value:". Similar to the ",paraId:16,tocIndex:2},{value:"nodeStateStyles",paraId:16,tocIndex:2},{value:" of Graph",paraId:16,tocIndex:2},{value:"filter.graphActiveState",paraId:16,tocIndex:2},{value:"string",paraId:16,tocIndex:2},{value:"The activate state name for the items on the main graph. When a lenged item is activated, the corresponding items of the main graph will be set to ",paraId:16,tocIndex:2},{value:"filter.graphActiveState",paraId:16,tocIndex:2},{value:", ",paraId:16,tocIndex:2},{value:"'active'",paraId:16,tocIndex:2},{value:" by default. And you should assign the state style for this state name on Graph",paraId:16,tocIndex:2},{value:"filter.graphInactiveState",paraId:16,tocIndex:2},{value:"string",paraId:16,tocIndex:2},{value:"The inactivate state name for the items on the main graph. When a lenged item is inactivated, the corresponding items of the main graph will be set to ",paraId:16,tocIndex:2},{value:"filter.graphInactiveState",paraId:16,tocIndex:2},{value:", ",paraId:16,tocIndex:2},{value:"'inactive'",paraId:16,tocIndex:2},{value:" by default. And you should assign the state style for this state name on Graph",paraId:16,tocIndex:2},{value:"filter.filterFunctions",paraId:16,tocIndex:2},{value:"{ [key: string]: (d) => boolean; }",paraId:16,tocIndex:2},{value:"Since the data of the legend is not related to the main graph, you should configure filtering functions for each legend item type. The ",paraId:16,tocIndex:2},{value:"key",paraId:16,tocIndex:2},{value:" is corresponding to the ",paraId:16,tocIndex:2},{value:"type",paraId:16,tocIndex:2},{value:" of the legend item, and the value is a function. For the function, the parameter is the item data of the main graph, and the return value is a boolean which means whether the item of the main graph should be activated",paraId:16,tocIndex:2},{value:"SnapLine is a built-in components in G6. ",paraId:19,tocIndex:3},{value:"supported by v4.3.0 and later versions",paraId:19,tocIndex:3},{value:".",paraId:19,tocIndex:3},{value:"Name",paraId:20,tocIndex:4},{value:"Type",paraId:20,tocIndex:4},{value:"Required",paraId:20,tocIndex:4},{value:"Description",paraId:20,tocIndex:4},{value:"line",paraId:20,tocIndex:4},{value:"ShapeStyle",paraId:20,tocIndex:4},{value:"false",paraId:20,tocIndex:4},{value:"the style of SnapLine",paraId:20,tocIndex:4},{value:"itemAlignType",paraId:20,tocIndex:4},{value:"boolean、'horizontal' 、'vertical'、'center';",paraId:20,tocIndex:4},{value:"false",paraId:20,tocIndex:4},{value:"the type of SnapLine",paraId:20,tocIndex:4},{value:"Grid plugin draws grids on the canvas.",paraId:21,tocIndex:5},{value:"Use the code in ",paraId:22,tocIndex:5},{value:"Configure to Graph",paraId:23,tocIndex:5},{value:" to instantiate grid plugin with the following configurations.",paraId:22,tocIndex:5},{value:"Name",paraId:24,tocIndex:6},{value:"Type",paraId:24,tocIndex:6},{value:"Required",paraId:24,tocIndex:6},{value:"Description",paraId:24,tocIndex:6},{value:"img",paraId:24,tocIndex:6},{value:"Srting",paraId:24,tocIndex:6},{value:"false",paraId:24,tocIndex:6},{value:"base64 formatted string for the grid image",paraId:24,tocIndex:6},{value:"Minimap is a tool for quick preview and exploration on large graph.",paraId:25,tocIndex:7},{value:"It can be configured to adjust the styles and functions.",paraId:26,tocIndex:7},{value:"Name",paraId:27,tocIndex:8},{value:"Type",paraId:27,tocIndex:8},{value:"Required",paraId:27,tocIndex:8},{value:"Description",paraId:27,tocIndex:8},{value:"container",paraId:27,tocIndex:8},{value:"Object",paraId:27,tocIndex:8},{value:"false",paraId:27,tocIndex:8},{value:"The DOM container of Minimap. The plugin will generate a new one if ",paraId:27,tocIndex:8},{value:"container",paraId:27,tocIndex:8},{value:" is not defined",paraId:27,tocIndex:8},{value:"className",paraId:27,tocIndex:8},{value:"String",paraId:27,tocIndex:8},{value:"false",paraId:27,tocIndex:8},{value:"The className of the DOM element of the Minimap",paraId:27,tocIndex:8},{value:"viewportClassName",paraId:27,tocIndex:8},{value:"String",paraId:27,tocIndex:8},{value:"false",paraId:27,tocIndex:8},{value:"The className of the DOM element of the view port on the Minimap",paraId:27,tocIndex:8},{value:"type",paraId:27,tocIndex:8},{value:"String",paraId:27,tocIndex:8},{value:"false",paraId:27,tocIndex:8},{value:"Render type. Options: ",paraId:27,tocIndex:8},{value:"'default'",paraId:27,tocIndex:8},{value:": Render all the graphics shapes on the graph; ",paraId:27,tocIndex:8},{value:"'keyShape'",paraId:27,tocIndex:8},{value:": Only render the keyShape of the items on the graph to reach better performance; ",paraId:27,tocIndex:8},{value:"'delegate'",paraId:27,tocIndex:8},{value:": Only render the delegate of the items on the graph to reach better performance. Performance: ",paraId:27,tocIndex:8},{value:"'default'",paraId:27,tocIndex:8},{value:" < ",paraId:27,tocIndex:8},{value:"'keyShape'",paraId:27,tocIndex:8},{value:" < ",paraId:27,tocIndex:8},{value:"'delegate'",paraId:27,tocIndex:8},{value:". ",paraId:27,tocIndex:8},{value:"'default'",paraId:27,tocIndex:8},{value:" by default",paraId:27,tocIndex:8},{value:"size",paraId:27,tocIndex:8},{value:"Array",paraId:27,tocIndex:8},{value:"false",paraId:27,tocIndex:8},{value:"The size of the Minimap",paraId:27,tocIndex:8},{value:"delegateStyle",paraId:27,tocIndex:8},{value:"Object",paraId:27,tocIndex:8},{value:"false",paraId:27,tocIndex:8},{value:"Takes effect when ",paraId:27,tocIndex:8},{value:"type",paraId:27,tocIndex:8},{value:" is ",paraId:27,tocIndex:8},{value:"'delegate'",paraId:27,tocIndex:8},{value:". The style of the delegate of the items on the graph",paraId:27,tocIndex:8},{value:"hideEdge",paraId:27,tocIndex:8},{value:"Boolean",paraId:27,tocIndex:8},{value:"false",paraId:27,tocIndex:8},{value:"Supported by v4.7.16",paraId:27,tocIndex:8},{value:" Whether to hide the edges on minimap to enhance the performance",paraId:27,tocIndex:8},{value:"The ",paraId:28,tocIndex:8},{value:"delegateStyle",paraId:28,tocIndex:8},{value:" has the properties:",paraId:28,tocIndex:8},{value:"Name",paraId:29,tocIndex:8},{value:"Type",paraId:29,tocIndex:8},{value:"Required",paraId:29,tocIndex:8},{value:"Description",paraId:29,tocIndex:8},{value:"fill",paraId:29,tocIndex:8},{value:"String",paraId:29,tocIndex:8},{value:"false",paraId:29,tocIndex:8},{value:"Filling color",paraId:29,tocIndex:8},{value:"stroke",paraId:29,tocIndex:8},{value:"String",paraId:29,tocIndex:8},{value:"false",paraId:29,tocIndex:8},{value:"Stroke color",paraId:29,tocIndex:8},{value:"lineWidth",paraId:29,tocIndex:8},{value:"Number",paraId:29,tocIndex:8},{value:"false",paraId:29,tocIndex:8},{value:"The width of the stroke",paraId:29,tocIndex:8},{value:"opacity",paraId:29,tocIndex:8},{value:"Number",paraId:29,tocIndex:8},{value:"false",paraId:29,tocIndex:8},{value:"Opacity",paraId:29,tocIndex:8},{value:"fillOpacity",paraId:29,tocIndex:8},{value:"Number",paraId:29,tocIndex:8},{value:"false",paraId:29,tocIndex:8},{value:"Filling opacity",paraId:29,tocIndex:8},{value:"In complex graph with large number of edges, edge bundling can help you to improve the visual clutter.",paraId:30,tocIndex:9},{value:"Edge bundling on American airline graph. ",paraId:31,tocIndex:9},{value:"Demo Link",paraId:31,tocIndex:9},{value:". ",paraId:31,tocIndex:9},{value:"Demo Document",paraId:31,tocIndex:9},{value:".",paraId:31,tocIndex:9},{value:"The edge bundling plugin can be configured to adjust the styles and functions.",paraId:32,tocIndex:9},{value:"Name",paraId:33,tocIndex:10},{value:"Type",paraId:33,tocIndex:10},{value:"Required",paraId:33,tocIndex:10},{value:"Default",paraId:33,tocIndex:10},{value:"Description",paraId:33,tocIndex:10},{value:"K",paraId:33,tocIndex:10},{value:"Number",paraId:33,tocIndex:10},{value:"false",paraId:33,tocIndex:10},{value:"0.1",paraId:33,tocIndex:10},{value:"The strength of the bundling",paraId:33,tocIndex:10},{value:"lambda",paraId:33,tocIndex:10},{value:"Number",paraId:33,tocIndex:10},{value:"false",paraId:33,tocIndex:10},{value:"0.1",paraId:33,tocIndex:10},{value:"The initial step length",paraId:33,tocIndex:10},{value:"divisions",paraId:33,tocIndex:10},{value:"Number",paraId:33,tocIndex:10},{value:"false",paraId:33,tocIndex:10},{value:"1",paraId:33,tocIndex:10},{value:"The initial number of division on each edge. It will be multipled by ",paraId:33,tocIndex:10},{value:"divRate",paraId:33,tocIndex:10},{value:" in each cycle",paraId:33,tocIndex:10},{value:"divRate",paraId:33,tocIndex:10},{value:"Number",paraId:33,tocIndex:10},{value:"false",paraId:33,tocIndex:10},{value:"2",paraId:33,tocIndex:10},{value:"The rate of the divisions increasement. Large number means smoother result, but the performance will be worse when the number is too large",paraId:33,tocIndex:10},{value:"cycles",paraId:33,tocIndex:10},{value:"Number",paraId:33,tocIndex:10},{value:"false",paraId:33,tocIndex:10},{value:"6",paraId:33,tocIndex:10},{value:"The number of outer interations",paraId:33,tocIndex:10},{value:"iterations",paraId:33,tocIndex:10},{value:"Number",paraId:33,tocIndex:10},{value:"false",paraId:33,tocIndex:10},{value:"90",paraId:33,tocIndex:10},{value:"The initial number of inner interations. It will be multiplied by ",paraId:33,tocIndex:10},{value:"iterRate",paraId:33,tocIndex:10},{value:" in each cycle",paraId:33,tocIndex:10},{value:"iterRate",paraId:33,tocIndex:10},{value:"Number",paraId:33,tocIndex:10},{value:"false",paraId:33,tocIndex:10},{value:"0.6666667",paraId:33,tocIndex:10},{value:"The rate of the iterations decreasement",paraId:33,tocIndex:10},{value:"bundleThreshold",paraId:33,tocIndex:10},{value:"Number",paraId:33,tocIndex:10},{value:"false",paraId:33,tocIndex:10},{value:"0.6",paraId:33,tocIndex:10},{value:"The edge similarity threshold for bundling. Large number means the edges in one bundle have smaller similarity, in other words, more edges in one bundle",paraId:33,tocIndex:10},{value:"Menu is used to configure the right-click menu on the node.",paraId:34,tocIndex:11},{value:"Name",paraId:35,tocIndex:12},{value:"Type",paraId:35,tocIndex:12},{value:"Required",paraId:35,tocIndex:12},{value:"Description",paraId:35,tocIndex:12},{value:"className",paraId:35,tocIndex:12},{value:"string",paraId:35,tocIndex:12},{value:"null",paraId:35,tocIndex:12},{value:"the class name of the menu dom",paraId:35,tocIndex:12},{value:"getContent",paraId:35,tocIndex:12},{value:"(evt?: IG6GraphEvent, graph?: IGraph) => HTMLDivElement / string",paraId:35,tocIndex:12},{value:"the menu content，supports DOM or string",paraId:35,tocIndex:12},{value:"handleMenuClick",paraId:35,tocIndex:12},{value:"(target: HTMLElement, item: Item, graph?: IGraph) => void",paraId:35,tocIndex:12},{value:"undefined",paraId:35,tocIndex:12},{value:"the callback function when click the menu",paraId:35,tocIndex:12},{value:"shouldBegin",paraId:35,tocIndex:12},{value:"(evt: G6Event) => boolean",paraId:35,tocIndex:12},{value:"undefined",paraId:35,tocIndex:12},{value:"Whether allow the tooltip show up. You can return true or false according to the content of the ",paraId:35,tocIndex:12},{value:"evt.item",paraId:35,tocIndex:12},{value:" (current item of the event) or ",paraId:35,tocIndex:12},{value:"evt.target",paraId:35,tocIndex:12},{value:" (current shape of the event)",paraId:35,tocIndex:12},{value:"offsetX",paraId:35,tocIndex:12},{value:"number",paraId:35,tocIndex:12},{value:"6",paraId:35,tocIndex:12},{value:"the offset of tooltip along x axis, the padding of the parent container should be take into consider",paraId:35,tocIndex:12},{value:"offsetY",paraId:35,tocIndex:12},{value:"number",paraId:35,tocIndex:12},{value:"6",paraId:35,tocIndex:12},{value:"the offset of tooltip along y axis, the padding of the parent container should be take into consider",paraId:35,tocIndex:12},{value:"itemTypes",paraId:35,tocIndex:12},{value:"string[]",paraId:35,tocIndex:12},{value:"['node', 'edge', 'combo']",paraId:35,tocIndex:12},{value:"the item types that allow the tooltip show up. e.g. if you only want the node tooltip, set the ",paraId:35,tocIndex:12},{value:"itemTypes",paraId:35,tocIndex:12},{value:" to be ['node']",paraId:35,tocIndex:12},{value:"trigger",paraId:35,tocIndex:12},{value:"'click' / 'contextmenu'",paraId:35,tocIndex:12},{value:"'contextmenu'",paraId:35,tocIndex:12},{value:"the trigger for the menu, ",paraId:35,tocIndex:12},{value:"'contextmenu'",paraId:35,tocIndex:12},{value:" by default, which means the menu will show up when the end user right click on some item. ",paraId:35,tocIndex:12},{value:"'click'",paraId:35,tocIndex:12},{value:" means left click. ",paraId:35,tocIndex:12},{value:"'click' is supported by v4.3.2 and later versions",paraId:35,tocIndex:12},{value:"Use G6 build-in menu by default.",paraId:36,tocIndex:13},{value:"// Instantiate Menu plugin\nconst menu = new G6.Menu();\nconst graph = new G6.Graph({\n  //... other Configuration\n  plugins: [menu],\n});\n",paraId:37,tocIndex:13},{value:"const menu = new G6.Menu({\n  offsetX: 10,\n  offsetY: 20,\n  itemTypes: ['node'],\n  getContent(e, graph) {\n    const outDiv = document.createElement('div');\n    outDiv.style.width = '180px';\n    outDiv.innerHTML = `<ul>\n        <li>menu01</li>\n        <li>menu01</li>\n        <li>menu01</li>\n        <li>menu01</li>\n        <li>menu01</li>\n      </ul>`\n    return outDiv\n  },\n  handleMenuClick(target, item, graph) {\n    console.log(target, item, graph)\n  },\n});\n\nconst graph = new G6.Graph({\n  //... other Configuration\n  plugins: [menu], // the Menu plugin\n});\n",paraId:38,tocIndex:14},{value:"const menu = new G6.Menu({\n  getContent(e) {\n    return `<ul>\n      <li title='1'>menu02</li>\n      <li title='2'>menu02</li>\n      <li>menu02</li>\n      <li>menu02</li>\n      <li>menu02</li>\n    </ul>`;\n  },\n  handleMenuClick(target, item) {\n    console.log(target, item)\n  },\n});\n\nconst graph = new G6.Graph({\n  //... other Configuration\n  plugins: [menu], // The Menu plugin\n});\n",paraId:39,tocIndex:15},{value:"ToolBar has the following operations by default:",paraId:40,tocIndex:16},{value:"Undo;",paraId:41,tocIndex:16},{value:"Redo;",paraId:41,tocIndex:16},{value:"Zoom-in;",paraId:41,tocIndex:16},{value:"Zoom-out;",paraId:41,tocIndex:16},{value:"Fit the View;",paraId:41,tocIndex:16},{value:"Actual Size.",paraId:41,tocIndex:16},{value:"Name",paraId:42,tocIndex:17},{value:"Type",paraId:42,tocIndex:17},{value:"Default",paraId:42,tocIndex:17},{value:"Description",paraId:42,tocIndex:17},{value:"container",paraId:42,tocIndex:17},{value:"HTMLDivElement",paraId:42,tocIndex:17},{value:"null",paraId:42,tocIndex:17},{value:"The container of the ToolBar. It will take use the DOM of the canvas by default",paraId:42,tocIndex:17},{value:"className",paraId:42,tocIndex:17},{value:"string",paraId:42,tocIndex:17},{value:"null",paraId:42,tocIndex:17},{value:"The class name of the sub DOM nodes of the ToolBar",paraId:42,tocIndex:17},{value:"getContent",paraId:42,tocIndex:17},{value:"(graph?: IGraph) => HTMLDivElement / string",paraId:42,tocIndex:17},{value:"The content of the ToolBar",paraId:42,tocIndex:17},{value:"handleClick",paraId:42,tocIndex:17},{value:"(code: string, graph: IGraph) => void",paraId:42,tocIndex:17},{value:"undefined",paraId:42,tocIndex:17},{value:"The callback functions for the icons of the ToolBar",paraId:42,tocIndex:17},{value:"position",paraId:42,tocIndex:17},{value:"Point",paraId:42,tocIndex:17},{value:"null",paraId:42,tocIndex:17},{value:"The position of the ToolBar",paraId:42,tocIndex:17},{value:"ToolBar provides some default operations above.",paraId:43,tocIndex:19},{value:"const toolbar = new G6.ToolBar();\n\nconst graph = new G6.Graph({\n  //... Other configurations\n  plugins: [toolbar], // Use the ToolBar plugin\n});\n",paraId:44,tocIndex:19},{value:"const tc = document.createElement('div');\ntc.id = 'toolbarContainer';\ndocument.body.appendChild(tc);\n\nconst toolbar = new G6.ToolBar({\n  container: tc,\n  getContent: () => {\n    return `\n      <ul>\n        <li code='add'>Add Node</li>\n        <li code='undo'>Undo</li>\n      </ul>\n    `\n  },\n  handleClick: (code, graph) => {\n    if (code === 'add') {\n      graph.addItem('node', {\n        id: 'node2',\n        label: 'node2',\n        x: 300,\n        y: 150\n      })\n    } else if (code === 'undo') {\n      toolbar.undo()\n    }\n  }\n});\n\nconst graph = new G6.Graph({\n  //... Other configurations\n  plugins: [toolbar], // Use the ToolBar plugin\n});\n",paraId:45,tocIndex:20},{value:"const toolbar = new G6.ToolBar({\n  getContent: () => {\n    const outDiv = document.createElement('div');\n    outDiv.style.width = '180px';\n    outDiv.innerHTML = `<ul>\n        <li>example 01</li>\n        <li>example 02</li>\n        <li>example 03</li>\n        <li>example 04</li>\n        <li>example 05</li>\n      </ul>`\n    return outDiv\n  },\n  handleClick: (code, graph) => {\n\n  }\n});\n\nconst graph = new G6.Graph({\n  //... Other configurations\n  plugins: [toolbar], // Use the ToolBar plugin\n});\n",paraId:46,tocIndex:21},{value:"ToolTip helps user to explore detail infomations on the node and edge. Do note that, This Tooltip Plugins will replace the tooltip in the built-in behavior after G6 4.0.",paraId:47,tocIndex:22},{value:"Name",paraId:48,tocIndex:23},{value:"Type",paraId:48,tocIndex:23},{value:"Default",paraId:48,tocIndex:23},{value:"Description",paraId:48,tocIndex:23},{value:"className",paraId:48,tocIndex:23},{value:"string",paraId:48,tocIndex:23},{value:"null",paraId:48,tocIndex:23},{value:"Tge class name of the tooltip's container",paraId:48,tocIndex:23},{value:"container",paraId:48,tocIndex:23},{value:"HTMLDivElement",paraId:48,tocIndex:23},{value:"null",paraId:48,tocIndex:23},{value:"The container of the Tooltip. The canvas DOM will be used by default",paraId:48,tocIndex:23},{value:"getContent",paraId:48,tocIndex:23},{value:"(evt?: IG6GraphEvent) => HTMLDivElement / string",paraId:48,tocIndex:23},{value:"The content of the Tooltip",paraId:48,tocIndex:23},{value:"shouldBegin",paraId:48,tocIndex:23},{value:"(evt: G6Event) => boolean",paraId:48,tocIndex:23},{value:"undefined",paraId:48,tocIndex:23},{value:"Whether allow the tooltip show up. You can return true or false according to the content of the ",paraId:48,tocIndex:23},{value:"evt.item",paraId:48,tocIndex:23},{value:" (current item of the event) or ",paraId:48,tocIndex:23},{value:"evt.target",paraId:48,tocIndex:23},{value:" (current shape of the event)",paraId:48,tocIndex:23},{value:"offsetX",paraId:48,tocIndex:23},{value:"number",paraId:48,tocIndex:23},{value:"6",paraId:48,tocIndex:23},{value:"the offset of tooltip along x axis, the padding of the parent container should be take into consider",paraId:48,tocIndex:23},{value:"offsetY",paraId:48,tocIndex:23},{value:"number",paraId:48,tocIndex:23},{value:"6",paraId:48,tocIndex:23},{value:"the offset of tooltip along y axis, the padding of the parent container should be take into consider",paraId:48,tocIndex:23},{value:"itemTypes",paraId:48,tocIndex:23},{value:"string[]",paraId:48,tocIndex:23},{value:"['node', 'edge', 'combo']",paraId:48,tocIndex:23},{value:"the item types that allow the tooltip show up. e.g. if you only want the node tooltip, set the ",paraId:48,tocIndex:23},{value:"itemTypes",paraId:48,tocIndex:23},{value:" to be ['node']",paraId:48,tocIndex:23},{value:"The content of the Tooltip is the type and id of the item by default. Users are free to custom the content of the Tooltip by configuring ",paraId:49,tocIndex:24},{value:"getContent",paraId:49,tocIndex:24},{value:":",paraId:49,tocIndex:24},{value:"const tooltip = new G6.Tooltip({\n  offsetX: 10,\n  offsetY: 20,\n  getContent(e) {\n    const outDiv = document.createElement('div');\n    outDiv.style.width = '180px';\n    outDiv.innerHTML = `\n      <h4>自定义tooltip</h4>\n      <ul>\n        <li>Label: ${e.item.getModel().label || e.item.getModel().id}</li>\n      </ul>`\n    return outDiv\n  },\n  itemTypes: ['node']\n});\n\n\nconst graph = new G6.Graph({\n  //... Other configurations\n  plugins: [tooltip], // Use Tooltip plugin\n});\n",paraId:50,tocIndex:25},{value:"const tooltip = new G6.Tooltip({\n  getContent(e) {\n    return `<div style='width: 180px;'>\n      <ul id='menu'>\n        <li title='1'>example 01</li>\n        <li title='2'>example 02</li>\n        <li>example 03</li>\n        <li>example 04</li>\n        <li>example 05</li>\n      </ul>\n    </div>`;\n  },\n});\n\nconst graph = new G6.Graph({\n  //... Other configurations\n  plugins: [tooltip], // Use Tooltip plugin\n});\n",paraId:51,tocIndex:26},{value:"Fisheye is designed for focus_context exploration, it keeps the context and the relationships between context and the focus while magnifing the focus area.",paraId:52,tocIndex:27},{value:"Name",paraId:53,tocIndex:28},{value:"Type",paraId:53,tocIndex:28},{value:"Required",paraId:53,tocIndex:28},{value:"Default",paraId:53,tocIndex:28},{value:"Description",paraId:53,tocIndex:28},{value:"trigger",paraId:53,tocIndex:28},{value:"'drag' / 'mousemove' / 'click'",paraId:53,tocIndex:28},{value:"false",paraId:53,tocIndex:28},{value:"'mousemove'",paraId:53,tocIndex:28},{value:"The trigger for the lens",paraId:53,tocIndex:28},{value:"d",paraId:53,tocIndex:28},{value:"Number",paraId:53,tocIndex:28},{value:"false",paraId:53,tocIndex:28},{value:"1.5",paraId:53,tocIndex:28},{value:"Magnify coefficient. Larger the value, larger the focus area will be magnified",paraId:53,tocIndex:28},{value:"r",paraId:53,tocIndex:28},{value:"Number",paraId:53,tocIndex:28},{value:"false",paraId:53,tocIndex:28},{value:"300",paraId:53,tocIndex:28},{value:"The radius of the focus area",paraId:53,tocIndex:28},{value:"delegateStyle",paraId:53,tocIndex:28},{value:"Object",paraId:53,tocIndex:28},{value:"false",paraId:53,tocIndex:28},{value:"{ stroke: '#000', strokeOpacity: 0.8, lineWidth: 2, fillOpacity: 0.1, fill: '#ccc' }",paraId:53,tocIndex:28},{value:"The style of the lens's delegate",paraId:53,tocIndex:28},{value:"showLabel",paraId:53,tocIndex:28},{value:"Boolean",paraId:53,tocIndex:28},{value:"false",paraId:53,tocIndex:28},{value:"false",paraId:53,tocIndex:28},{value:"If the label is hidden, whether to show the label of nodes inside the focus area",paraId:53,tocIndex:28},{value:"maxR",paraId:53,tocIndex:28},{value:"Number",paraId:53,tocIndex:28},{value:"The height of the graph",paraId:53,tocIndex:28},{value:"The maximum radius scaled by the wheel",paraId:53,tocIndex:28},{value:"minR",paraId:53,tocIndex:28},{value:"Number",paraId:53,tocIndex:28},{value:"0.05 * The height of the graph",paraId:53,tocIndex:28},{value:"The minimum radius scaled by the wheel",paraId:53,tocIndex:28},{value:"maxD",paraId:53,tocIndex:28},{value:"Number",paraId:53,tocIndex:28},{value:"5",paraId:53,tocIndex:28},{value:"when ",paraId:53,tocIndex:28},{value:"trigger",paraId:53,tocIndex:28},{value:" is ",paraId:53,tocIndex:28},{value:"'mousemove'",paraId:53,tocIndex:28},{value:" or ",paraId:53,tocIndex:28},{value:"'click'",paraId:53,tocIndex:28},{value:", minimap allow users to adjust the magnifying coefficient ",paraId:53,tocIndex:28},{value:"d",paraId:53,tocIndex:28},{value:" by dragging left / right on the lens. ",paraId:53,tocIndex:28},{value:"maxD",paraId:53,tocIndex:28},{value:" is the maximum magnifying coefficient that limits this interaction. The suggested range for ",paraId:53,tocIndex:28},{value:"maxD",paraId:53,tocIndex:28},{value:" is [0, 5]. Note that updating the configurations by ",paraId:53,tocIndex:28},{value:"minimap.updateParam",paraId:53,tocIndex:28},{value:" will not be limited by ",paraId:53,tocIndex:28},{value:"maxD",paraId:53,tocIndex:28},{value:"minD",paraId:53,tocIndex:28},{value:"Number",paraId:53,tocIndex:28},{value:"0",paraId:53,tocIndex:28},{value:"when ",paraId:53,tocIndex:28},{value:"trigger",paraId:53,tocIndex:28},{value:" is ",paraId:53,tocIndex:28},{value:"'mousemove'",paraId:53,tocIndex:28},{value:" or ",paraId:53,tocIndex:28},{value:"'click'",paraId:53,tocIndex:28},{value:", minimap allow users to adjust the magnifying coefficient ",paraId:53,tocIndex:28},{value:"d",paraId:53,tocIndex:28},{value:" by dragging left / right on the lens. ",paraId:53,tocIndex:28},{value:"minD",paraId:53,tocIndex:28},{value:" is the minimum magnifying coefficient that limits this interaction. The suggested range for ",paraId:53,tocIndex:28},{value:"minD",paraId:53,tocIndex:28},{value:" is [0, 5]. Note that updating the configurations by ",paraId:53,tocIndex:28},{value:"fisheye.updateParams",paraId:53,tocIndex:28},{value:" will not be limited by ",paraId:53,tocIndex:28},{value:"minD",paraId:53,tocIndex:28},{value:"scaleRBy",paraId:53,tocIndex:28},{value:"'wheel'/'drag'/'unset'/undefined",paraId:53,tocIndex:28},{value:"false",paraId:53,tocIndex:28},{value:"'unset'",paraId:53,tocIndex:28},{value:"The trigger for end users to scale the range of the lens",paraId:53,tocIndex:28},{value:"scaleDBy",paraId:53,tocIndex:28},{value:"'wheel'/'drag'/'unset'/undefined",paraId:53,tocIndex:28},{value:"false",paraId:53,tocIndex:28},{value:"'unset'",paraId:53,tocIndex:28},{value:"The trigger for end users to scale the magnification factor of the lens",paraId:53,tocIndex:28},{value:"showDPercent",paraId:53,tocIndex:28},{value:"Boolean",paraId:53,tocIndex:28},{value:"false",paraId:53,tocIndex:28},{value:"true",paraId:53,tocIndex:28},{value:"Whether show the percent of current magnification factor on the bottom of the lens, where the percent is about the D, minD, and maxD",paraId:53,tocIndex:28},{value:"Update partial of the configurations of the fisheye instance, including ",paraId:54,tocIndex:30},{value:"trigger",paraId:54,tocIndex:30},{value:", ",paraId:54,tocIndex:30},{value:"d",paraId:54,tocIndex:30},{value:", ",paraId:54,tocIndex:30},{value:"r",paraId:54,tocIndex:30},{value:", ",paraId:54,tocIndex:30},{value:"maxR",paraId:54,tocIndex:30},{value:", ",paraId:54,tocIndex:30},{value:"minR",paraId:54,tocIndex:30},{value:", ",paraId:54,tocIndex:30},{value:"maxD",paraId:54,tocIndex:30},{value:", ",paraId:54,tocIndex:30},{value:"minD",paraId:54,tocIndex:30},{value:", ",paraId:54,tocIndex:30},{value:"scaleDBy",paraId:54,tocIndex:30},{value:", and ",paraId:54,tocIndex:30},{value:"scaleRBy",paraId:54,tocIndex:30},{value:". E.g.",paraId:54,tocIndex:30},{value:"const fisheye = new G6.Fisheye({\n  trigger: 'mousemove'\n});\n\n... // Other operations\n\nfisheye.updateParams({\n  d: 2,\n  r: 500,\n  // ...\n})\n",paraId:55,tocIndex:30},{value:"const fisheye = new G6.Fisheye({\n  trigger: 'mousemove',\n  d: 1.5,\n  r: 300,\n  delegateStyle: clone(lensDelegateStyle),\n  showLabel: false\n});\n\nconst graph = new G6.Graph({\n  //... Other graph configurations\n  plugins: [fisheye], // configuring fisheye plugin\n});\n",paraId:56,tocIndex:31},{value:"Edge Filter Lens is designed for edge filtering, the desired edges will be kept inside the lens while the others will be hidden.",paraId:57,tocIndex:32},{value:"Name",paraId:58,tocIndex:33},{value:"Type",paraId:58,tocIndex:33},{value:"Required",paraId:58,tocIndex:33},{value:"Default",paraId:58,tocIndex:33},{value:"Description",paraId:58,tocIndex:33},{value:"trigger",paraId:58,tocIndex:33},{value:"'drag' / 'mousemove' / 'click'",paraId:58,tocIndex:33},{value:"false",paraId:58,tocIndex:33},{value:"'mousemove'",paraId:58,tocIndex:33},{value:"The trigger for the lens",paraId:58,tocIndex:33},{value:"type",paraId:58,tocIndex:33},{value:"'one' / 'both' / 'only-source' / 'only-target'",paraId:58,tocIndex:33},{value:"false",paraId:58,tocIndex:33},{value:"'both'",paraId:58,tocIndex:33},{value:"Simple filtering conditions related to the end nodes. ",paraId:58,tocIndex:33},{value:"'one'",paraId:58,tocIndex:33},{value:": show the edge whose one or more end nodes are inside the filter lens; ",paraId:58,tocIndex:33},{value:"'both'",paraId:58,tocIndex:33},{value:": show the edge whose both end nodes are inside the lens; ",paraId:58,tocIndex:33},{value:"'only-source'",paraId:58,tocIndex:33},{value:": show the edge whose source node is inside the lens and target node is not; ",paraId:58,tocIndex:33},{value:"'only-target'",paraId:58,tocIndex:33},{value:": show the edge whose target node is inside the lens and source node is not. More complicated conditions can be defined by the ",paraId:58,tocIndex:33},{value:"shouldShow",paraId:58,tocIndex:33},{value:"shouldShow",paraId:58,tocIndex:33},{value:"(d?: unknown) => boolean",paraId:58,tocIndex:33},{value:"false",paraId:58,tocIndex:33},{value:"undefined",paraId:58,tocIndex:33},{value:"The custom conditions for filtering. The parameter ",paraId:58,tocIndex:33},{value:"d",paraId:58,tocIndex:33},{value:" is the data of each edge, you can return boolean value according to the data, where ",paraId:58,tocIndex:33},{value:"true",paraId:58,tocIndex:33},{value:" means show.",paraId:58,tocIndex:33},{value:"r",paraId:58,tocIndex:33},{value:"Number",paraId:58,tocIndex:33},{value:"false",paraId:58,tocIndex:33},{value:"60",paraId:58,tocIndex:33},{value:"The radius of the filter area",paraId:58,tocIndex:33},{value:"delegateStyle",paraId:58,tocIndex:33},{value:"Object",paraId:58,tocIndex:33},{value:"false",paraId:58,tocIndex:33},{value:"{ stroke: '#000', strokeOpacity: 0.8, lineWidth: 2, fillOpacity: 0.1, fill: '#ccc' }",paraId:58,tocIndex:33},{value:"The style of the lens's delegate",paraId:58,tocIndex:33},{value:"showLabel",paraId:58,tocIndex:33},{value:"'edge' / 'node' / 'both'",paraId:58,tocIndex:33},{value:"false",paraId:58,tocIndex:33},{value:"'edge'",paraId:58,tocIndex:33},{value:"If the label is hidden, whether to show the label of nodes inside the focus area",paraId:58,tocIndex:33},{value:"maxR",paraId:58,tocIndex:33},{value:"Number",paraId:58,tocIndex:33},{value:"The height of the graph",paraId:58,tocIndex:33},{value:"The maximum radius scaled by the wheel",paraId:58,tocIndex:33},{value:"minR",paraId:58,tocIndex:33},{value:"Number",paraId:58,tocIndex:33},{value:"0.05 * The height of the graph",paraId:58,tocIndex:33},{value:"The minimum radius scaled by the wheel",paraId:58,tocIndex:33},{value:"scaleRBy",paraId:58,tocIndex:33},{value:"'wheel'/'drag'/'unset'/undefined",paraId:58,tocIndex:33},{value:"false",paraId:58,tocIndex:33},{value:"'unset'",paraId:58,tocIndex:33},{value:"The trigger for end users to scale the range of the lens",paraId:58,tocIndex:33},{value:"Update partial of the configurations of the filter lens instance, including ",paraId:59,tocIndex:35},{value:"trigger",paraId:59,tocIndex:35},{value:", ",paraId:59,tocIndex:35},{value:"type",paraId:59,tocIndex:35},{value:", ",paraId:59,tocIndex:35},{value:"r",paraId:59,tocIndex:35},{value:", ",paraId:59,tocIndex:35},{value:"maxR",paraId:59,tocIndex:35},{value:", ",paraId:59,tocIndex:35},{value:"minR",paraId:59,tocIndex:35},{value:", ",paraId:59,tocIndex:35},{value:"shouldShow",paraId:59,tocIndex:35},{value:", ",paraId:59,tocIndex:35},{value:"showLabel",paraId:59,tocIndex:35},{value:", and ",paraId:59,tocIndex:35},{value:"scaleRBy",paraId:59,tocIndex:35},{value:". E.g.",paraId:59,tocIndex:35},{value:"const filterLens = new G6.EdgeFilterLens({\n  trigger: 'drag'\n});\n\n... // Other operations\n\nfilterLens.updateParams({\n  r: 500,\n  // ...\n})\n",paraId:60,tocIndex:35},{value:"const filterLens = new G6.EdgeFilterLens({\n  trigger: 'mousemove',\n  r: 300,\n  shouldShow: d => {\n    return d.size > 10;\n  }\n});\n\nconst graph = new G6.Graph({\n  //... Other graph configurations\n  plugins: [filterLens], // configuring edge filter lens plugin\n});\n",paraId:61,tocIndex:36},{value:"There are three types of built-in TimeBar in G6:",paraId:62,tocIndex:37},{value:"Time bar with a line chart as background;",paraId:63,tocIndex:37},{value:"Simple time bar;",paraId:63,tocIndex:37},{value:"Time bar with descrete ticks.",paraId:63,tocIndex:37},{value:"All the three types of timebar supports play, fast forward, and fast backward.",paraId:64,tocIndex:37},{value:"Time bar with a line chart as background",paraId:65},{value:"Simple time bar",paraId:65},{value:"Time bar with descrete ticks",paraId:65},{value:"Refer to the demos ",paraId:66,tocIndex:37},{value:"HERE",paraId:66,tocIndex:37},{value:"Same to other plugins of G6, the users can initiate the TimeBar and assign it to the graph as:",paraId:67,tocIndex:38},{value:"import G6 from '@antv/g6';\n\nconst timebar = new G6.TimeBar({\n  width: 500,\n  height: 150,\n  padding: 10,\n  type: 'trend',\n  trend: {\n    data: timeBarData,\n  },\n});\n\nconst graph = new G6.Graph({\n  container: 'container',\n  width,\n  height,\n  plugins: [timebar],\n});\n",paraId:68,tocIndex:38},{value:"If you want to use the TimeBar with line chart, assign the ",paraId:69,tocIndex:38},{value:"type",paraId:69,tocIndex:38},{value:" to be ",paraId:69,tocIndex:38},{value:"trend",paraId:69,tocIndex:38},{value:" when instantiating the TimeBar, which results in:",paraId:69,tocIndex:38},{value:"Assigning the ",paraId:70,tocIndex:38},{value:"type",paraId:70,tocIndex:38},{value:" to be ",paraId:70,tocIndex:38},{value:"simple",paraId:70,tocIndex:38},{value:" results in:",paraId:70,tocIndex:38},{value:"And assigning the ",paraId:71,tocIndex:38},{value:"type",paraId:71,tocIndex:38},{value:" to be ",paraId:71,tocIndex:38},{value:"tick",paraId:71,tocIndex:38},{value:" results in a TimeBar with descrete ticks. Note that it is different from the above two types of TimeBar, **The TimeBar with decrete ticks is configured with the ",paraId:71,tocIndex:38},{value:"tick",paraId:71,tocIndex:38},{value:" object but not the ",paraId:71,tocIndex:38},{value:"trend",paraId:71,tocIndex:38},{value:" object.",paraId:71,tocIndex:38},{value:"const timebar = new G6.TimeBar({\n  width,\n  height: 150,\n  type: 'tick',\n  tick: {\n    data: timeBarData,\n    width,\n    height: 42,\n    tickLabelFormatter: d => {\n      const dateStr = `${d.date}`;\n      if ((count - 1) % 10 === 0) {\n        return `${dateStr.substr(0, 4)}-${dateStr.substr(4, 2)}-${dateStr.substr(6, 2)}`;\n      }\n      return false;\n    },\n    tooltipFomatter: d => {\n      const dateStr = `${d}`;\n      return `${dateStr.substr(0, 4)}-${dateStr.substr(4, 2)}-${dateStr.substr(6, 2)}`;\n    },\n  },\n});\n",paraId:72,tocIndex:38},{value:"TimeBar Plugin exposes several timing events. They could be listened by ",paraId:73,tocIndex:39},{value:"graph.on('eventname', e => {})",paraId:73,tocIndex:39},{value:".",paraId:73,tocIndex:39},{value:"Event Name",paraId:74,tocIndex:39},{value:"Description",paraId:74,tocIndex:39},{value:"valuechange",paraId:74,tocIndex:39},{value:"Emitted when the value range of the timebar is chaged.",paraId:74,tocIndex:39},{value:"timebarstartplay",paraId:74,tocIndex:39},{value:"Emitted when the timeline starts to play.",paraId:74,tocIndex:39},{value:"timebarendplay",paraId:74,tocIndex:39},{value:"Emitted when the timeline ends playing.",paraId:74,tocIndex:39},{value:"The complete interfaces for the TimeBar is shown below:",paraId:75,tocIndex:41},{value:"interface TimeBarConfig extends IPluginBaseConfig {\n  // position size\n  readonly x?: number;\n  readonly y?: number;\n  readonly width?: number;\n  readonly height?: number;\n  readonly padding?: number;\n\n  readonly type?: 'trend' | 'simple' | 'tick';\n  // the configuration for the TimeBar with line chart and simple TimeBar, takes effect whtn the type is 'trend' or 'simple'\n  readonly trend?: TrendConfig;\n\n  // the configurations for the two sliders\n  readonly slider?: SliderOption;\n\n  // when the type is 'tick', it is the configuration for the TimeBar with descrete ticks\n  // when the type is 'trend' or 'simpe', it is the configuration for the time tick labels under the timeBar\n  readonly tick?: TimeBarSliceOption | TickCfg;\n\n  // the buttons for play, fast forward, and back forward\n  readonly controllerCfg?: ControllerCfg;\n\n  // [Supported from v4.5.1] the CSS style for the DOM container of the timebar\n  readonly containerCSS?: Object;\n\n  // [Supported from v4.5.1] the item types that will be filtered by the timebar. e.g. ['node', 'edge']. The default value is ['node']\n  readonly filterItemTypes?: string[];\n\n  // [Deprecated from v4.5.1, replaced by filterItemTypes] whether to consider the edge filtering. If it is false, only filter the nodes and the edges whose end nodes are filtered out while the selected range of the timeBar is changed. If it is true, there should be `date` properties on the edges data, and the timeBar will filter the edges which is not in the selected range in the same time\n  readonly filterEdge?: boolean;\n\n  // [Supported from v4.5.1] whether filter the nodes and edges on the graph by graph.changeData, which means the data of the graph will be changed by the timebar. If it is false, the graph.hideItem and graph.showItem will be called to hide/show the nodes and edges instead of changeData\n  readonly changeData?: boolean;\n\n  // the callback function after the time range is changed. When it is not assigned, the graph elements will be filtered after the time range is changed\n  rangeChange?: (graph: IGraph, minValue: string, maxValue: string) => void;\n\n  // [Supported from v4.5.1] user returns the date value according to the data of a node or an edge\n  getDate?: (d: any) => number;\n\n  // [Supported from v4.5.1] user returns the value according to the data of a node or an edge. The value is used to draw the trend line for timebar with type 'trend'\n  getValue?: (d: any) => number;\n\n  // [Supported from v4.5.1] user returns true or false to decide whether to ignore the node or the edge while filtering. If it is true, the item with data model will be ignored. Or the item will be filtered according to the min and max date value\n  shouldIgnore?: (itemType: 'node' | 'edge', model: any, dateRage: { min: number, max: number }) => boolean;\n}\n",paraId:76,tocIndex:41},{value:"Name",paraId:77,tocIndex:42},{value:"Type",paraId:77,tocIndex:42},{value:"Default Value",paraId:77,tocIndex:42},{value:"Description",paraId:77,tocIndex:42},{value:"container",paraId:77,tocIndex:42},{value:"HTMLDivElement",paraId:77,tocIndex:42},{value:"null",paraId:77,tocIndex:42},{value:"The DOM container of the TimeBar. By default, the plugin will create a container DOM with 'g6-component-timebar' as className",paraId:77,tocIndex:42},{value:"x",paraId:77,tocIndex:42},{value:"number",paraId:77,tocIndex:42},{value:"0",paraId:77,tocIndex:42},{value:"The beginning x position of the TimeBar plugin",paraId:77,tocIndex:42},{value:"y",paraId:77,tocIndex:42},{value:"number",paraId:77,tocIndex:42},{value:"0",paraId:77,tocIndex:42},{value:"The beginning y position of the TimeBar plugin",paraId:77,tocIndex:42},{value:"width",paraId:77,tocIndex:42},{value:"number",paraId:77,tocIndex:42},{value:"Requred",paraId:77,tocIndex:42},{value:", the width of the TimeBar",paraId:77,tocIndex:42},{value:"height",paraId:77,tocIndex:42},{value:"number",paraId:77,tocIndex:42},{value:"Requred",paraId:77,tocIndex:42},{value:", the height of the TimeBar",paraId:77,tocIndex:42},{value:"padding",paraId:77,tocIndex:42},{value:"number/number[]",paraId:77,tocIndex:42},{value:"10",paraId:77,tocIndex:42},{value:"The padding of the container of the TimeBar",paraId:77,tocIndex:42},{value:"type",paraId:77,tocIndex:42},{value:"'trend' / 'simple' / 'tick'",paraId:77,tocIndex:42},{value:"trend",paraId:77,tocIndex:42},{value:"The type of the TimeBar, 'trend' by default",paraId:77,tocIndex:42},{value:"trend",paraId:77,tocIndex:42},{value:"TrendConfig",paraId:77,tocIndex:42},{value:"null",paraId:77,tocIndex:42},{value:"The configuration for the TimeBar with line chart and simple TimeBar, takes effect whtn the type is 'trend' or 'simple'",paraId:77,tocIndex:42},{value:"slider",paraId:77,tocIndex:42},{value:"SliderOption",paraId:77,tocIndex:42},{value:"null",paraId:77,tocIndex:42},{value:"The configurations for the two sliders",paraId:77,tocIndex:42},{value:"tick",paraId:77,tocIndex:42},{value:"TimeBarSliceOption / TickCfg",paraId:77,tocIndex:42},{value:"null",paraId:77,tocIndex:42},{value:"If the type is 'tick', it is the configuration for the TimeBar with descrete ticks. If it the type is 'trend' or 'simple', it is the configuration for the time tick labels under the timeBar",paraId:77,tocIndex:42},{value:"controllerCfg",paraId:77,tocIndex:42},{value:"ControllerCfg",paraId:77,tocIndex:42},{value:"null",paraId:77,tocIndex:42},{value:"The buttons for play, fast forward, and back forward",paraId:77,tocIndex:42},{value:"containerCSS",paraId:77,tocIndex:42},{value:"Object",paraId:77,tocIndex:42},{value:"null",paraId:77,tocIndex:42},{value:"[Supported from v4.5.1] The CSS style for the DOM container of the timebar",paraId:77,tocIndex:42},{value:"filterItemTypes",paraId:77,tocIndex:42},{value:"string[]",paraId:77,tocIndex:42},{value:"null",paraId:77,tocIndex:42},{value:"[Supported from v4.5.1] The item types that will be filtered by the timebar. e.g. ['node', 'edge']. The default value is ['node']",paraId:77,tocIndex:42},{value:"filterEdge",paraId:77,tocIndex:42},{value:"boolean",paraId:77,tocIndex:42},{value:"false",paraId:77,tocIndex:42},{value:"[Deprecated from v4.5.1, replaced by filterItemTypes] Whether to consider the edge filtering. If it is false, only filter the nodes and the edges whose end nodes are filtered out while the selected range of the timeBar is changed. If it is true, there should be ",paraId:77,tocIndex:42},{value:"date",paraId:77,tocIndex:42},{value:" properties on the edges data, and the timeBar will filter the edges which is not in the selected range in the same time",paraId:77,tocIndex:42},{value:"changeData",paraId:77,tocIndex:42},{value:"boolean",paraId:77,tocIndex:42},{value:"null",paraId:77,tocIndex:42},{value:"[Supported from v4.5.1] Whether filter the nodes and edges on the graph by graph.changeData, which means the data of the graph will be changed by the timebar. If it is false, the graph.hideItem and graph.showItem will be called to hide/show the nodes and edges instead of changeData",paraId:77,tocIndex:42},{value:"rangeChange",paraId:77,tocIndex:42},{value:"Function",paraId:77,tocIndex:42},{value:"null",paraId:77,tocIndex:42},{value:"The callback function after the time range is changed. When it is not assigned, the graph elements will be filtered after the time range is changed",paraId:77,tocIndex:42},{value:"getDate",paraId:77,tocIndex:42},{value:"(d: any) => number",paraId:77,tocIndex:42},{value:"null",paraId:77,tocIndex:42},{value:"[Supported from v4.5.1] User returns the date value according to the data of a node or an edge",paraId:77,tocIndex:42},{value:"getValue",paraId:77,tocIndex:42},{value:"(d: any) => number",paraId:77,tocIndex:42},{value:"null",paraId:77,tocIndex:42},{value:"[Supported from v4.5.1] User returns the value according to the data of a node or an edge. The value is used to draw the trend line for timebar with type 'trend'",paraId:77,tocIndex:42},{value:"shouldIgnore",paraId:77,tocIndex:42},{value:"(itemType: 'node'",paraId:77,tocIndex:42},{value:"'edge', model: any, dateRage: { min: number, max: number }) => boolean",paraId:77,tocIndex:42},{value:"null",paraId:77,tocIndex:42},{value:"Does not support the configurations for the style of the tick labels.",paraId:78,tocIndex:43},{value:"interface TrendConfig {\n  // The data\n  readonly data: {\n    date: string;\n    value: string;\n  }[];\n  // The position and size\n  readonly x?: number;\n  readonly y?: number;\n  readonly width?: number;\n  readonly height?: number;\n  // The styles\n  readonly smooth?: boolean;\n  readonly isArea?: boolean;\n  readonly lineStyle?: ShapeStyle;\n  readonly areaStyle?: ShapeStyle;\n  readonly interval?: Interval;\n}\n",paraId:79,tocIndex:43},{value:"Name",paraId:80,tocIndex:44},{value:"Type",paraId:80,tocIndex:44},{value:"Default Value",paraId:80,tocIndex:44},{value:"Description",paraId:80,tocIndex:44},{value:"x",paraId:80,tocIndex:44},{value:"number",paraId:80,tocIndex:44},{value:"0",paraId:80,tocIndex:44},{value:"The beginning x position of the trend line chart",paraId:80,tocIndex:44},{value:"y",paraId:80,tocIndex:44},{value:"number",paraId:80,tocIndex:44},{value:"0",paraId:80,tocIndex:44},{value:"The beginning y position of the trend line chart",paraId:80,tocIndex:44},{value:"width",paraId:80,tocIndex:44},{value:"number",paraId:80,tocIndex:44},{value:"The width of the TimeBar",paraId:80,tocIndex:44},{value:"The width of the trend line chart of the TimeBar, we suggest to use the default value. If you wanna custom it, please assign the ",paraId:80,tocIndex:44},{value:"width",paraId:80,tocIndex:44},{value:" of the slider in the same time",paraId:80,tocIndex:44},{value:"height",paraId:80,tocIndex:44},{value:"number",paraId:80,tocIndex:44},{value:"28 when type='trend'",paraId:80,tocIndex:44},{value:"8 when type='simple'",paraId:80,tocIndex:44},{value:"The height of the TimeBar",paraId:80,tocIndex:44},{value:"smooth",paraId:80,tocIndex:44},{value:"boolean",paraId:80,tocIndex:44},{value:"false",paraId:80,tocIndex:44},{value:"Whether to show a smooth line on the trend line chart",paraId:80,tocIndex:44},{value:"isArea",paraId:80,tocIndex:44},{value:"boolean",paraId:80,tocIndex:44},{value:"false",paraId:80,tocIndex:44},{value:"Whether to show a area chart instead",paraId:80,tocIndex:44},{value:"lineStyle",paraId:80,tocIndex:44},{value:"ShapeStyle",paraId:80,tocIndex:44},{value:"null",paraId:80,tocIndex:44},{value:"The configurations for the style of the line in the line chart",paraId:80,tocIndex:44},{value:"areaStyle",paraId:80,tocIndex:44},{value:"ShapeStyle",paraId:80,tocIndex:44},{value:"null",paraId:80,tocIndex:44},{value:"The configuration for the style of the area in the chart when ",paraId:80,tocIndex:44},{value:"isArea",paraId:80,tocIndex:44},{value:" is ",paraId:80,tocIndex:44},{value:"true",paraId:80,tocIndex:44},{value:"interval",paraId:80,tocIndex:44},{value:"Interval",paraId:80,tocIndex:44},{value:"null",paraId:80,tocIndex:44},{value:"The configuration for the style of the bars in the chart. When it is assigned, a mixed trend chart will take place. ",paraId:80,tocIndex:44},{value:"Interval = { data: number[], style: ShapeStyle }",paraId:80,tocIndex:44},{value:". Except the configurations in ",paraId:80,tocIndex:44},{value:"ShapeStyle",paraId:80,tocIndex:44},{value:" for the style of the shapes in the bar charts, ",paraId:80,tocIndex:44},{value:"barWidth",paraId:80,tocIndex:44},{value:" for the width of one bar is also configurable for ",paraId:80,tocIndex:44},{value:"style",paraId:80,tocIndex:44},{value:"export type SliderOption = Partial<{\n  readonly width?: number;\n  readonly height?: number;\n  readonly backgroundStyle?: ShapeStyle;\n  readonly foregroundStyle?: ShapeStyle;\n  // The style of the sliders\n  readonly handlerStyle?: {\n    width?: number;\n    height?: number;\n    style?: ShapeStyle;\n  };\n  readonly textStyle?: ShapeStyle;\n  // The start and end position for the sliders, which indicate the data range for the filtering. Ranges from 0 to 1\n  readonly start: number;\n  readonly end: number;\n  // The labels for the sliders\n  readonly minText: string;\n  readonly maxText: string;\n}>;\n",paraId:81,tocIndex:45},{value:"Name",paraId:82,tocIndex:46},{value:"Type",paraId:82,tocIndex:46},{value:"Default Value",paraId:82,tocIndex:46},{value:"Description",paraId:82,tocIndex:46},{value:"width",paraId:82,tocIndex:46},{value:"number",paraId:82,tocIndex:46},{value:"The width of the container of the TimeBar - 2 * padding",paraId:82,tocIndex:46},{value:"The width of the background trend chart. We suggest to use the default value. If you wanna custom it, assign it the the ",paraId:82,tocIndex:46},{value:"width",paraId:82,tocIndex:46},{value:" in the ",paraId:82,tocIndex:46},{value:"trend",paraId:82,tocIndex:46},{value:" in the same time",paraId:82,tocIndex:46},{value:"height",paraId:82,tocIndex:46},{value:"number",paraId:82,tocIndex:46},{value:"28 when type='trend'",paraId:82,tocIndex:46},{value:"8 when type='simple'",paraId:82,tocIndex:46},{value:"The height of the background trend chart. We suggest to use the default value. If you wanna custom it, assign it the the ",paraId:82,tocIndex:46},{value:"height",paraId:82,tocIndex:46},{value:" in the ",paraId:82,tocIndex:46},{value:"trend",paraId:82,tocIndex:46},{value:" in the same time",paraId:82,tocIndex:46},{value:"backgroundStyle",paraId:82,tocIndex:46},{value:"ShapeStyle",paraId:82,tocIndex:46},{value:"null",paraId:82,tocIndex:46},{value:"The configuration for the style of the background",paraId:82,tocIndex:46},{value:"foregroundStyle",paraId:82,tocIndex:46},{value:"ShapeStyle",paraId:82,tocIndex:46},{value:"null",paraId:82,tocIndex:46},{value:"The configuration for the style of the forground",paraId:82,tocIndex:46},{value:"handlerStyle",paraId:82,tocIndex:46},{value:"ShapeStyle",paraId:82,tocIndex:46},{value:"null",paraId:82,tocIndex:46},{value:"The configuration for the style of the two sliders",paraId:82,tocIndex:46},{value:"textStyle",paraId:82,tocIndex:46},{value:"ShapeStyle",paraId:82,tocIndex:46},{value:"null",paraId:82,tocIndex:46},{value:"The configuration for the style of the labels on the two sliders",paraId:82,tocIndex:46},{value:"start",paraId:82,tocIndex:46},{value:"number",paraId:82,tocIndex:46},{value:"0.1",paraId:82,tocIndex:46},{value:"The start position for the sliders, which indicate the start of the data range for the filtering. Ranges from 0 to ",paraId:82,tocIndex:46},{value:"end",paraId:82,tocIndex:46},{value:"end",paraId:82,tocIndex:46},{value:"number",paraId:82,tocIndex:46},{value:"0.9",paraId:82,tocIndex:46},{value:"The end position for the sliders, which indicate the end of the data range for the filtering. Ranges from ",paraId:82,tocIndex:46},{value:"start",paraId:82,tocIndex:46},{value:" to 1",paraId:82,tocIndex:46},{value:"minText",paraId:82,tocIndex:46},{value:"string",paraId:82,tocIndex:46},{value:"min",paraId:82,tocIndex:46},{value:"The label for the left slider",paraId:82,tocIndex:46},{value:"maxText",paraId:82,tocIndex:46},{value:"string",paraId:82,tocIndex:46},{value:"max",paraId:82,tocIndex:46},{value:"The label for the right slider",paraId:82,tocIndex:46},{value:"export interface TimeBarSliceOption {\n  // position size\n  readonly x?: number;\n  readonly y?: number;\n  readonly width?: number;\n  readonly height?: number;\n  readonly padding?: number;\n\n  // styles\n  readonly selectedTickStyle?: TickStyle;\n  readonly unselectedTickStyle?: TickStyle\n  readonly tooltipBackgroundColor?: string;\n\n  readonly start?: number;\n  readonly end?: number;\n\n  // data\n  readonly data: {\n    date: string;\n    value: string;\n  }[];\n\n  // custom the formatter function for the tick labels\n  readonly tickLabelFormatter?: (d: any) => string | boolean;\n  // custom the formatter function for the tooltip\n  readonly tooltipFomatter?: (d: any) => string;\n}\n",paraId:83,tocIndex:47},{value:"Name",paraId:84,tocIndex:48},{value:"Type",paraId:84,tocIndex:48},{value:"Default Value",paraId:84,tocIndex:48},{value:"Description",paraId:84,tocIndex:48},{value:"x",paraId:84,tocIndex:48},{value:"number",paraId:84,tocIndex:48},{value:"0",paraId:84,tocIndex:48},{value:"The beginning x position for the TimeBar",paraId:84,tocIndex:48},{value:"y",paraId:84,tocIndex:48},{value:"number",paraId:84,tocIndex:48},{value:"0",paraId:84,tocIndex:48},{value:"The beginning y position for the TimeBar",paraId:84,tocIndex:48},{value:"width",paraId:84,tocIndex:48},{value:"number",paraId:84,tocIndex:48},{value:"Requred",paraId:84,tocIndex:48},{value:", the width of the TimeBar",paraId:84,tocIndex:48},{value:"height",paraId:84,tocIndex:48},{value:"number",paraId:84,tocIndex:48},{value:"Requred",paraId:84,tocIndex:48},{value:", the height of the TimeBar",paraId:84,tocIndex:48},{value:"padding",paraId:84,tocIndex:48},{value:"number / number[]",paraId:84,tocIndex:48},{value:"0",paraId:84,tocIndex:48},{value:"The padding of the container of the TimeBar",paraId:84,tocIndex:48},{value:"selectedTickStyle",paraId:84,tocIndex:48},{value:"ShapeStyle",paraId:84,tocIndex:48},{value:"null",paraId:84,tocIndex:48},{value:"The style of the tick(s) which is(are) selected",paraId:84,tocIndex:48},{value:"unselectedTickStyle",paraId:84,tocIndex:48},{value:"ShapeStyle",paraId:84,tocIndex:48},{value:"null",paraId:84,tocIndex:48},{value:"The style of the tick(s) which is(are) unselected",paraId:84,tocIndex:48},{value:"tooltipBackgroundColor",paraId:84,tocIndex:48},{value:"ShapeStyle",paraId:84,tocIndex:48},{value:"null",paraId:84,tocIndex:48},{value:"The background style for the tooltip",paraId:84,tocIndex:48},{value:"start",paraId:84,tocIndex:48},{value:"number",paraId:84,tocIndex:48},{value:"0.1",paraId:84,tocIndex:48},{value:"The start position for the sliders, which indicate the start of the data range for the filtering. Ranges from 0 to ",paraId:84,tocIndex:48},{value:"end",paraId:84,tocIndex:48},{value:"end",paraId:84,tocIndex:48},{value:"number",paraId:84,tocIndex:48},{value:"0.9",paraId:84,tocIndex:48},{value:"The end position for the sliders, which indicate the end of the data range for the filtering. Ranges from ",paraId:84,tocIndex:48},{value:"start",paraId:84,tocIndex:48},{value:" to 1",paraId:84,tocIndex:48},{value:"data",paraId:84,tocIndex:48},{value:"any[]",paraId:84,tocIndex:48},{value:"[]",paraId:84,tocIndex:48},{value:"Requred",paraId:84,tocIndex:48},{value:", the data for the ticks",paraId:84,tocIndex:48},{value:"tickLabelFormatter",paraId:84,tocIndex:48},{value:"Function",paraId:84,tocIndex:48},{value:"null",paraId:84,tocIndex:48},{value:"The formatter function for customing the labels of the ticks",paraId:84,tocIndex:48},{value:"tooltipFomatter",paraId:84,tocIndex:48},{value:"Function",paraId:84,tocIndex:48},{value:"null",paraId:84,tocIndex:48},{value:"The formatter function for customing the tooltip",paraId:84,tocIndex:48},{value:"export interface TickCfg {\n  // the fomatter for the time tick labels\n  readonly tickLabelFormatter?: (d: any) => string | undefined;\n  // the shape style for the time tick labels. [Supported from v4.5.1] tickLabelStyle.rotate can be configured to controll the rotate of the tick label to avoid overlappings\n  readonly tickLabelStyle?: ShapeStyle;\n  // the shape style for the short vertical lines uppon the time tick labels\n  readonly tickLineStyle?: ShapeStyle;\n}\n",paraId:85,tocIndex:49},{value:"Name",paraId:86,tocIndex:50},{value:"Type",paraId:86,tocIndex:50},{value:"Default Value",paraId:86,tocIndex:50},{value:"Description",paraId:86,tocIndex:50},{value:"tickLabelFormatter",paraId:86,tocIndex:50},{value:"Function",paraId:86,tocIndex:50},{value:"null",paraId:86,tocIndex:50},{value:"The formatter function for customing the labels of the ticks",paraId:86,tocIndex:50},{value:"tickLabelStyle",paraId:86,tocIndex:50},{value:"ShapeStyle",paraId:86,tocIndex:50},{value:"{}",paraId:86,tocIndex:50},{value:"The shape style for the time tick labels. [Supported from v4.5.1] tickLabelStyle.rotate can be configured to controll the rotate of the tick label to avoid overlappings",paraId:86,tocIndex:50},{value:"tickLineStyle",paraId:86,tocIndex:50},{value:"ShapeStyle",paraId:86,tocIndex:50},{value:"{}",paraId:86,tocIndex:50},{value:"The shape style for the short vertical lines uppon the time tick labels",paraId:86,tocIndex:50},{value:"Does not support for now",paraId:87,tocIndex:51},{value:"Does not support the style configuration for controller buttons",paraId:88,tocIndex:51},{value:"Does not support loop play",paraId:89,tocIndex:51},{value:"type ControllerCfg = Partial<{\n  /** the begining position and the size of the controller, the width and height will not scale the sub-controllers but only affects the positions of them. To change the size of the sub-controllers, try ControllerCfg.scale or the scale in the style of sub-controller */\n  readonly x?: number;\n  readonly y?: number;\n  readonly width: number;\n  readonly height: number;\n  /** the scale of the whole controller */\n  readonly scale?: number;\n  /** the fill and stroke color of the background */\n  readonly fill?: string;\n  readonly stroke?: string;\n  /** the font family for the whole controller, whose priority is lower than the fontFamily in the text style of each sub-controller */\n  readonly fontFamily?: string;\n\n  /** the play spped, means the playing time for 1 tick */\n  readonly speed?: number;\n  /** whether play in loop */\n  readonly loop?: boolean;\n  /** whether hide the 'time type controller' on the right-bottom */\n  readonly hideTimeTypeController: boolean;\n\n  /** style of the backward button. scale, offsetX, offsetY are also can be assigned to it to controll the size and position of the backward button */\n  readonly preBtnStyle?: ShapeStyle;\n\n  /** style of the forward button. scale, offsetX, offsetY are also can be assigned to it to controll the size and position of the forward button */\n  readonly nextBtnStyle?: ShapeStyle;\n\n  /** style of the play button. scale, offsetX, offsetY are also can be assigned to it to controll the size and position of the paly button */\n  readonly playBtnStyle?: ShapeStyle;\n\n  /** style of the 'speed controller'. scale, offsetX, offsetY are also can be assigned to it and each sub-styles to controll the size and position of the speed controller and sub-shapes*/\n  readonly speedControllerStyle?: {\n    offsetX?: number,\n    offsetY?: number;\n    scale?: number\n    pointer?: ShapeStyle,\n    scroller?: ShapeStyle,\n    text?: ShapeStyle\n  };\n\n  /** style of the 'time type controller'. scale, offsetX, offsetY  are also can be assigned to it and each sub-styles to controll the size and position of the speed controller and sub-shapes */\n  readonly timeTypeControllerStyle?: {\n    offsetX?: number,\n    offsetY?: number;\n    scale?: number\n    check?: ShapeStyle,\n    box?: ShapeStyle,\n    text?: ShapeStyle\n  };\n  /** [Supported from v4.5.1] The style of the background rect of the controller */\n  readonly containerStyle?: ExtendedShapeStyle;\n  /** the text for the right-bottom switch controlling play with single time point or time range */\n  readonly timePointControllerText?: string;\n  readonly timeRangeControllerText?: string\n}>\n",paraId:90,tocIndex:51},{value:"Name",paraId:91,tocIndex:52},{value:"Type",paraId:91,tocIndex:52},{value:"Default Value",paraId:91,tocIndex:52},{value:"Description",paraId:91,tocIndex:52},{value:"x",paraId:91,tocIndex:52},{value:"number",paraId:91,tocIndex:52},{value:"0",paraId:91,tocIndex:52},{value:"The beginning x position for the buttons group of the TimeBar",paraId:91,tocIndex:52},{value:"y",paraId:91,tocIndex:52},{value:"number",paraId:91,tocIndex:52},{value:"0",paraId:91,tocIndex:52},{value:"The beginning y position for the buttons group of the TimeBar",paraId:91,tocIndex:52},{value:"width",paraId:91,tocIndex:52},{value:"number",paraId:91,tocIndex:52},{value:"The width of the TimeBar",paraId:91,tocIndex:52},{value:"The width of the buttons group of the TimeBar, do not scale the sub-controllers but only affects the positions of them",paraId:91,tocIndex:52},{value:"height",paraId:91,tocIndex:52},{value:"number",paraId:91,tocIndex:52},{value:"40",paraId:91,tocIndex:52},{value:"The width of the buttons group of the TimeBar, do not scale the sub-controllers but only affects the positions of them",paraId:91,tocIndex:52},{value:"scale",paraId:91,tocIndex:52},{value:"number",paraId:91,tocIndex:52},{value:"1",paraId:91,tocIndex:52},{value:"The scale of the whole controller",paraId:91,tocIndex:52},{value:"speed",paraId:91,tocIndex:52},{value:"number",paraId:91,tocIndex:52},{value:"1",paraId:91,tocIndex:52},{value:"The play speed",paraId:91,tocIndex:52},{value:"loop",paraId:91,tocIndex:52},{value:"boolean",paraId:91,tocIndex:52},{value:"false",paraId:91,tocIndex:52},{value:"Does not support for now",paraId:91,tocIndex:52},{value:", whether play in loop",paraId:91,tocIndex:52},{value:"hideTimeTypeController",paraId:91,tocIndex:52},{value:"boolean",paraId:91,tocIndex:52},{value:"true",paraId:91,tocIndex:52},{value:"Whther hide the time type controller on the right bottom",paraId:91,tocIndex:52},{value:"fill",paraId:91,tocIndex:52},{value:"string",paraId:91,tocIndex:52},{value:"The fillling color for the background of the controller",paraId:91,tocIndex:52},{value:"stroke",paraId:91,tocIndex:52},{value:"string",paraId:91,tocIndex:52},{value:"The stroke color for the background of the buttons group",paraId:91,tocIndex:52},{value:"preBtnStyle",paraId:91,tocIndex:52},{value:"ShapeStyle",paraId:91,tocIndex:52},{value:"null",paraId:91,tocIndex:52},{value:"The style of the backward button. ",paraId:91,tocIndex:52},{value:"scale",paraId:91,tocIndex:52},{value:", ",paraId:91,tocIndex:52},{value:"offsetX",paraId:91,tocIndex:52},{value:", ",paraId:91,tocIndex:52},{value:"offsetY",paraId:91,tocIndex:52},{value:" are also can be assigned to it to controll the size and position of the backward button",paraId:91,tocIndex:52},{value:"nextBtnStyle",paraId:91,tocIndex:52},{value:"ShapeStyle",paraId:91,tocIndex:52},{value:"null",paraId:91,tocIndex:52},{value:"The style of the forward button. ",paraId:91,tocIndex:52},{value:"scale",paraId:91,tocIndex:52},{value:", ",paraId:91,tocIndex:52},{value:"offsetX",paraId:91,tocIndex:52},{value:", ",paraId:91,tocIndex:52},{value:"offsetY",paraId:91,tocIndex:52},{value:" are also can be assigned to it to controll the size and position of the forward button",paraId:91,tocIndex:52},{value:"playBtnStyle",paraId:91,tocIndex:52},{value:"ShapeStyle",paraId:91,tocIndex:52},{value:"null",paraId:91,tocIndex:52},{value:"The style of the play button. ",paraId:91,tocIndex:52},{value:"scale",paraId:91,tocIndex:52},{value:", ",paraId:91,tocIndex:52},{value:"offsetX",paraId:91,tocIndex:52},{value:", ",paraId:91,tocIndex:52},{value:"offsetY",paraId:91,tocIndex:52},{value:" are also can be assigned to it to controll the size and position of the paly button",paraId:91,tocIndex:52},{value:"speedControllerStyle",paraId:91,tocIndex:52},{value:"{ offsetX?: number, offsetY?: number, scale?: number, pointer?: ShapeStyle, text?: ShapeStyle, scroller?: ShapeStyle}",paraId:91,tocIndex:52},{value:"null",paraId:91,tocIndex:52},{value:"The style of the 'speed controller'. ",paraId:91,tocIndex:52},{value:"scale",paraId:91,tocIndex:52},{value:", ",paraId:91,tocIndex:52},{value:"offsetX",paraId:91,tocIndex:52},{value:", ",paraId:91,tocIndex:52},{value:"offsetY",paraId:91,tocIndex:52},{value:" are also can be assigned to it and each sub-styles to controll the size and position of the speed controller and sub-shapes",paraId:91,tocIndex:52},{value:"timeTypeControllerStyle",paraId:91,tocIndex:52},{value:"{ offsetX?: number, offsetY?: number, scale?: number, box?: ShapeStyle, check?: ShapeStyle, text?: ShapeStyle }",paraId:91,tocIndex:52},{value:"null",paraId:91,tocIndex:52},{value:"The style of the 'time type controller'. ",paraId:91,tocIndex:52},{value:"scale",paraId:91,tocIndex:52},{value:", ",paraId:91,tocIndex:52},{value:"offsetX",paraId:91,tocIndex:52},{value:", ",paraId:91,tocIndex:52},{value:"offsetY",paraId:91,tocIndex:52},{value:" are also can be assigned to it and each sub-styles to controll the size and position of the speed controller and sub-shapes",paraId:91,tocIndex:52},{value:"containerStyle ｜ ShapeStyle",paraId:91,tocIndex:52},{value:"{}",paraId:91,tocIndex:52},{value:"[Supported from v4.5.1] The style of the background rect of the controller",paraId:91,tocIndex:52},{value:"timePointControllerText",paraId:91,tocIndex:52},{value:"string",paraId:91,tocIndex:52},{value:'"单一时间"',paraId:91,tocIndex:52},{value:"The text for the right-bottom switch controlling play with single time point or time range",paraId:91,tocIndex:52},{value:"timeRangeControllerText",paraId:91,tocIndex:52},{value:"string",paraId:91,tocIndex:52},{value:'"时间范围"',paraId:91,tocIndex:52},{value:"The text for the right-bottom switch controlling play with single time point or time range",paraId:91,tocIndex:52}]},6485:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"When zooming the canvas, sometimes we hope that the Tooltip, ContextMenu and other components will also automatically follow the canvas zoom. In actual business requirements, we also encounter such a demand：",paraId:0},{value:"https://github.com/antvis/G6/issues/2111",paraId:0},{value:"。",paraId:0},{value:"In G6, zooming the canvas is achieved through zoom-canvas Behavior. The wheelzoom event will be triggered during zooming. Therefore, we only need to listen to this event to allow Tooltip to zoom automatically.",paraId:1,tocIndex:0},{value:"graph.on('wheelzoom', (e) => {\n  e.stopPropagation();\n  // className g6-component-tooltip by default\n  const tooltips = Array.from(document.getElementsByClassName('g6-component-tooltip'));\n  tooltips.forEach((tooltip) => {\n    if (tooltip && tooltip.style) {\n      tooltip.style.transform = `scale(${graph.getZoom()})`;\n    }\n  });\n});\n",paraId:2,tocIndex:0},{value:"Please refer to ",paraId:3,tocIndex:0},{value:"here",paraId:3,tocIndex:0},{value:" for the complete example.",paraId:3,tocIndex:0},{value:"When the canvas is zoomed, the automatic zooming of ContextMenu is implemented in exactly the same way as Tooltip. You only need to modify the className of the Tooltip container to the className of the ContextMenu container.",paraId:4,tocIndex:1}]},25142:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"G6 manages events by combining the ",paraId:0},{value:"Behavior",paraId:1},{value:" and ",paraId:0},{value:"Mode",paraId:2},{value:". Besides, G6 provides lots of listeners for single events and timing, which monitor the canvas/nodes/edges and the timing of function call. For more information about the events in G6, please refer to ",paraId:0},{value:"Event API",paraId:3},{value:". ",paraId:0},{value:"All the events are mounted on the graph.",paraId:0},{value:" These events can be categorized into the following six levels:",paraId:0},{value:"Global Events",paraId:4},{value:"The global events will be triggered when it happens on the canvas DOM scope, e.g. ",paraId:5},{value:"mousedown",paraId:5},{value:", ",paraId:5},{value:"mouseup",paraId:5},{value:", ",paraId:5},{value:"click",paraId:5},{value:", ",paraId:5},{value:"mouseenter",paraId:5},{value:", ",paraId:5},{value:"mouseleave",paraId:5},{value:", and so on;",paraId:5},{value:"graph.on('click', (ev) => {\n  const shape = ev.target;\n  const item = ev.item;\n  if (item) {\n    const type = item.getType();\n  }\n});\n",paraId:6},{value:"Canvas Events",paraId:7},{value:"The canvas events will be triggered when it is happens on the blank area on the canvas, e.g. ",paraId:8},{value:"canvas:mousedown",paraId:8},{value:", ",paraId:8},{value:"canvas:click",paraId:8},{value:", and so on;",paraId:8},{value:"graph.on('canvas:click', (ev) => {\n  const shape = ev.target;\n  const item = ev.item;\n  if (item) {\n    const type = item.getType();\n  }\n});\n",paraId:9},{value:"Item Events",paraId:10},{value:"The events on nodes/edges/combos, e.g. ",paraId:11},{value:"node:mousedown",paraId:11},{value:", ",paraId:11},{value:"edge:click",paraId:11},{value:", ",paraId:11},{value:"combo:click",paraId:11},{value:", and so on. It is named as ",paraId:11},{value:"type:eventName",paraId:11},{value:".",paraId:11},{value:"graph.on('node:click', (ev) => {\n  const node = ev.item; // clicked node\n  const shape = ev.target; // clicked shape, you could do different things for different shapes to achieve local response on an item\n  // ... do sth\n});\n\ngraph.on('edge:click', (ev) => {\n  const edge = ev.item; // clicked edge\n  const shape = ev.target; // clicked shape, you could do different things for different shapes to achieve local response on an item\n  // ... do sth\n});\n\ngraph.on('combo:click', (ev) => {\n  const combo = ev.item; // clicked combo\n  const shape = ev.target; // clicked shape, you could do different things for different shapes to achieve local response on an item\n  // ... do sth\n});\n",paraId:12},{value:"Shape Events",paraId:13},{value:"The events on rendering shapes of Node/Ede/Combo item, e.g. ",paraId:14},{value:"circle-shape:mousedown",paraId:14},{value:", ",paraId:14},{value:"circle-shape:click",paraId:14},{value:" and so on. It is named as ",paraId:14},{value:"shapeName:eventName",paraId:14},{value:". It can be used for local response, similar to response according to the ",paraId:14},{value:"target",paraId:14},{value:" in ",paraId:14},{value:"graph.on('node:click', fn)",paraId:14},{value:".",paraId:14},{value:"About the shape's 'name':",paraId:15},{value:"For buit-in Node/Edge/Combo type, you could know the ",paraId:16},{value:"name",paraId:16},{value:" value by ",paraId:16},{value:"graph.on('node:click', (ev) => console.log(ev.target.get('name')))",paraId:16},{value:" during developping.",paraId:16},{value:"For custom Node/Edge/Combo type, assign ",paraId:16},{value:"name",paraId:16},{value:" which is in the same level of ",paraId:16},{value:"attrs",paraId:16},{value:" for ",paraId:16},{value:"addShape",paraId:16},{value:" when custom items. ",paraId:16},{value:"The value of ",paraId:16},{value:"name",paraId:16},{value:" must be unique in a Node/Edge/Combo type.",paraId:16},{value:"The following demo binds click event listener for all the shapes named ",paraId:17},{value:"circle-shape",paraId:17},{value:":",paraId:17},{value:"graph.on('circle-shape:click', (ev) => {\n  const shape = ev.target; // clicked shape\n  // ... do sth\n});\n",paraId:18},{value:"Timing Events",paraId:19},{value:"Timing Events are those happens before and after rendering, viewport changing, item adding/modifying/removing, data changing and so on. All the timing events are listed in ",paraId:20},{value:"The Timing Events in G6",paraId:21},{value:". E.g. ",paraId:20},{value:"beforeadditem",paraId:20},{value:",",paraId:20},{value:"afteradditem",paraId:20},{value:" and so on:",paraId:20},{value:"Before and node/edge/combo state changing: ",paraId:22},{value:"beforerefreshitem",paraId:22},{value:" 与 ",paraId:22},{value:"afterrefreshitem",paraId:22},{value:";",paraId:22},{value:"Before and after layout: ",paraId:22},{value:"beforelayout",paraId:22},{value:" and ",paraId:22},{value:"afterlayout",paraId:22},{value:".",paraId:22},{value:"The following demo binds a listener to handle layout finished. Notice that the listeners for events like ",paraId:23},{value:"'afterlayout'",paraId:23},{value:" or ",paraId:23},{value:"'afterrender'",paraId:23},{value:" should be binded before ",paraId:23},{value:"graph.render()",paraId:23},{value:" or ",paraId:23},{value:"graph.read()",paraId:23},{value:" to catch the events happen at first rendering.",paraId:23},{value:"graph.on('afterrender', (ev) => {\n  // ... do sth\n});\n",paraId:24},{value:"Custom Events",paraId:25},{value:"G6 allows user to emit and handle any custom events, whichi is emiited by ",paraId:26},{value:"graph.emit(customEventName: string, event: IG6GraphEvent)",paraId:26},{value:" anywhere. The first parameter is the custom event name, which can be any string. Before calling ",paraId:26},{value:"emit",paraId:26},{value:", bind listener for it ",paraId:26},{value:"graph.on(customEventName: string, callback: Function)",paraId:26},{value:". For example:",paraId:26},{value:"graph.on('some-custom-event-name', (ev) => {\n  // ... do sth\n});\ngraph.emit('some-custom-event-name', {\n  // some params\n})\n",paraId:27}]},18419:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"G6 provides abundant ",paraId:0},{value:"Built-in Behavior",paraId:1},{value:". Besides, you can custom your type of behaviors to satisfy the special requirements.",paraId:0},{value:"In G6, we mainly take three scenarios into consideration:",paraId:2},{value:"Demonstrating the relational data;",paraId:3},{value:"Modeling the visualization;",paraId:3},{value:"Analyzing the graph.",paraId:3},{value:"It is necessary to incorporate the interactions when the information is too complex to be understand in one glance:",paraId:4},{value:"Zooming a large graph;",paraId:5},{value:"Utilizing the ttoltip to show the detail information of a node;",paraId:5},{value:"Adding/removing/modifying/querying a graph item.",paraId:5},{value:"Due to the complex and the diversity of the interactions in different scenarios and bussiness, we did not build all the interactions into G6:",paraId:6},{value:"Some systems require to add nodes by clicking a tool bar, some require toe add by dragging from a panel;",paraId:7},{value:"Some scenarios add edges by dragging from an anchor point, some add by clicking the end nodes;",paraId:7},{value:"Some edges are allowed to link to any node, some only can be linked to specific anchor points;",paraId:7},{value:"Some users require to custom the process of activating and endding.",paraId:7},{value:"...",paraId:7},{value:"We found the interactions are sundry and versatile. And the conflicts and configurations will make the users and developers collapse. Thus, G6 designs a set of simple and flexible implemention of interaction behavior.",paraId:8},{value:"To customize a Behavior, it is important to comprehend the life cycle of Behavior. Interaction Behaviors are related to the events from users, including the processes:",paraId:9,tocIndex:0},{value:"Bind the event;",paraId:10,tocIndex:0},{value:"Activate the event;",paraId:10,tocIndex:0},{value:"Keep the event;",paraId:10,tocIndex:0},{value:"End the event;",paraId:10,tocIndex:0},{value:"Remove the event.",paraId:10,tocIndex:0},{value:"You can customize a Behavior by ",paraId:11,tocIndex:1},{value:"G6.registerBehavior",paraId:11,tocIndex:1},{value:". The following code implements a custom Behavior named ",paraId:11,tocIndex:1},{value:"'activate-node'",paraId:11,tocIndex:1},{value:", which changes the state ",paraId:11,tocIndex:1},{value:"active",paraId:11,tocIndex:1},{value:" of the clicked node to be ",paraId:11,tocIndex:1},{value:"true",paraId:11,tocIndex:1},{value:", and restores the state ",paraId:11,tocIndex:1},{value:"active",paraId:11,tocIndex:1},{value:" to be ",paraId:11,tocIndex:1},{value:"false",paraId:11,tocIndex:1},{value:" when the user clicking the node again or clicking the canvas.",paraId:11,tocIndex:1},{value:"   ⚠️",paraId:12,tocIndex:1},{value:"Attension:",paraId:12,tocIndex:1},{value:" ",paraId:12,tocIndex:1},{value:"The following code set the states for different behaviors, but does not assign the state styles for manipulated nodes. To change the styles when the states changed, refer to ",paraId:13,tocIndex:1},{value:"State Styles",paraId:14,tocIndex:1},{value:".",paraId:13,tocIndex:1},{value:"The configurations of customizing Behavior are introduced in ",paraId:13,tocIndex:1},{value:"Behavior API",paraId:15,tocIndex:1},{value:"；",paraId:13,tocIndex:1},{value:"getEvent",paraId:13,tocIndex:1},{value:" returns the events which are listened by the Behavior. The events in G6 are introduced in ",paraId:13,tocIndex:1},{value:"Event API",paraId:16,tocIndex:1},{value:".",paraId:13,tocIndex:1},{value:"G6.registerBehavior('activate-node', {\n  getDefaultCfg() {\n    return {\n      multiple: true\n    };\n  },\n  getEvents() {\n    return {\n      'node:click': 'onNodeClick',\n      'canvas:click': 'onCanvasClick'\n    };\n  }\n  onNodeClick(e) {\n    const graph = this.graph;\n    const item = e.item;\n    if (item.hasState('active')) {\n      graph.setItemState(item, 'active', false);\n      return;\n    }\n    // Get the configurations by this. If you do not allow multiple nodes to be 'active', cancel the 'active' state for other nodes\n    if (!this.multiple) {\n      this.removeNodesState();\n    }\n    // Set the 'active' state of the clicked node to be true\n    graph.setItemState(item, 'active', true);\n  },\n  onCanvasClick(e) {\n    // shouldUpdate can be overrode by users. Returning true means turning the 'active' to be false for all the nodes\n    if (this.shouldUpdate(e, self)) {\n      removeNodesState();\n    }\n  },\n  removeNodesState() {\n    graph.findAllByState('node', 'active').forEach(node => {\n        graph.setItemState(node, 'active', false);\n      });\n  }\n});\n",paraId:17,tocIndex:1},{value:"Now, you have a type of Behavior named ",paraId:18,tocIndex:2},{value:"'activate-node'",paraId:18,tocIndex:2},{value:". To use it, configure it into a mode of ",paraId:18,tocIndex:2},{value:"modes",paraId:18,tocIndex:2},{value:" when instantiating a Graph. ",paraId:18,tocIndex:2},{value:"Mode",paraId:19,tocIndex:2},{value:". The following code configure the ",paraId:18,tocIndex:2},{value:"'activate-node'",paraId:18,tocIndex:2},{value:" into the default mode, which means the ",paraId:18,tocIndex:2},{value:"'activate-node'",paraId:18,tocIndex:2},{value:" Behavior will take effect in the default mode.",paraId:18,tocIndex:2},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 500,\n  height: 500,\n  modes: {\n    // Configure the custom Behavior here to use it\n    default: ['activate-node'],\n  },\n});\n",paraId:20,tocIndex:2}]},12105:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Behavior is the interaction mechanism in G6. It is used with ",paraId:0,tocIndex:0},{value:"Interaction Mode",paraId:1,tocIndex:0},{value:". This document introduces the Built-in behaviors in G6. Besides, you can register a type of ",paraId:0,tocIndex:0},{value:"Custom Behavior",paraId:2,tocIndex:0},{value:". The document ",paraId:0,tocIndex:0},{value:"Interaction Mode",paraId:3,tocIndex:0},{value:" introduces how to configure the Behaviors onto the graph.",paraId:0,tocIndex:0},{value:"All the basic graphics Shapes, Items(nodes/edges) can be interacted by events. To achieve it with versatility, there are 14 built-in Behaviors in G6.",paraId:4,tocIndex:1},{value:"Supported by V3.5 or later versions.",paraId:5,tocIndex:2},{value:"Description: Allows users to drag combo;",paraId:6,tocIndex:2},{value:"Configurations:\n",paraId:6,tocIndex:2},{value:"type: 'drag-combo'",paraId:7,tocIndex:2},{value:";",paraId:7,tocIndex:2},{value:"enableDelegate",paraId:7,tocIndex:2},{value:": Whether activate ",paraId:7,tocIndex:2},{value:"delegate",paraId:7,tocIndex:2},{value:" when dragging combos, which means whether to use a virtual rect moved with the dragging mouse instead of the combo. The effect is shown in the figures below. ",paraId:7,tocIndex:2},{value:"false",paraId:7,tocIndex:2},{value:" by default;",paraId:7,tocIndex:2},{value:"delegateStyle",paraId:7,tocIndex:2},{value:": The style of the ",paraId:7,tocIndex:2},{value:"delegate",paraId:7,tocIndex:2},{value:" when dragging the combo with delegate;",paraId:7,tocIndex:2},{value:"onlyChangeComboSize",paraId:7,tocIndex:2},{value:": Supported by V3.5 or later vertions. Only Change the size of the prarent combo whose child combo to be dragged, which means do not change the hierarchy structures of combos and nodes. ",paraId:7,tocIndex:2},{value:"false",paraId:7,tocIndex:2},{value:" by default;",paraId:7,tocIndex:2},{value:"activeState",paraId:7,tocIndex:2},{value:": The state's name(string) of the entered combo to be dragged over, coordinating with the configuration in ",paraId:7,tocIndex:2},{value:"comboStateStyles",paraId:7,tocIndex:2},{value:" to define the state styles when instantiating a graph. It is empty by default;",paraId:7,tocIndex:2},{value:"selectedState",paraId:7,tocIndex:2},{value:": The state's name(string) when combo is selected, ",paraId:7,tocIndex:2},{value:"'selected'",paraId:7,tocIndex:2},{value:" by default;",paraId:7,tocIndex:2},{value:"shouldUpdate(e, self)",paraId:7,tocIndex:2},{value:": Whether allow the behavior happens on the current item (e.item), see the example below for detail. ",paraId:7,tocIndex:2},{value:"Supported after v4.7.16",paraId:7,tocIndex:2},{value:" The last parameter is the behavior instance, which will be convenient to get it in arrow function formatted ",paraId:7,tocIndex:2},{value:"shouldUpdate",paraId:7,tocIndex:2},{value:";",paraId:7,tocIndex:2},{value:"shouldEnd(e, newParent, self)",paraId:7,tocIndex:2},{value:":  ",paraId:7,tocIndex:2},{value:"Supported after v4.3.8.",paraId:7,tocIndex:2},{value:" Whether allow the behavior ends with current item (e.item) and the new parent combo. the second parameter is the detected new parent when drop. If it is dropped on the canvas, ",paraId:7,tocIndex:2},{value:"newParent",paraId:7,tocIndex:2},{value:" is ",paraId:7,tocIndex:2},{value:"undefined",paraId:7,tocIndex:2},{value:", see the example below for detail. ",paraId:7,tocIndex:2},{value:"Supported after v4.7.16",paraId:7,tocIndex:2},{value:" The last parameter is the behavior instance, which will be convenient to get it in arrow function formatted ",paraId:7,tocIndex:2},{value:"shouldEnd",paraId:7,tocIndex:2},{value:".",paraId:7,tocIndex:2},{value:"Using Default Configuration",paraId:8,tocIndex:2},{value:"const graph = new G6.Graph({\n  modes: {\n    default: ['drag-combo'],\n  },\n});\n",paraId:9,tocIndex:2},{value:"Configure the styles for enableDelegate or activeState:",paraId:10,tocIndex:2},{value:"const graph = new G6.Graph({\n  modes: {\n    default: [\n      {\n        type: 'drag-combo',\n        enableDelegate: true,\n        activeState: 'actived',\n        shouldUpdate: (e, self) => {\n          // Do not allow the combo with id 'combo1' be dragged\n          if (e.item && e.item.getModel().id === 'combo1') return false;\n          return true;\n        },\n        // shouldEnd【supported by v4.3.8 and later versions】\n        shouldEnd: (e, newParent, self) => {\n          // The combos are not allow to be drop on the combo with id combo1\n          if (newParent && newParent.getModel().id === 'combo1') return false;\n          return true;\n        }\n      },\n    ],\n  },\n  comboStateStyles: {\n    actived: {\n      stroke: 'red',\n      lineWidth: 3,\n    },\n  },\n});\n",paraId:11,tocIndex:2},{value:"Supported by V3.5 or later.",paraId:12,tocIndex:3},{value:"Description: collapse or expand Combo. If the graph has layout configuration, this behavior will trigger re-layout. If you do not want re-layout the graph after collapsing or expanding a combo, use combo's click listener and ",paraId:13,tocIndex:3},{value:"graph.collapseExpandCombo API",paraId:14,tocIndex:3},{value:" instead;",paraId:13,tocIndex:3},{value:"Configurations:\n",paraId:13,tocIndex:3},{value:"type: 'collapse-expand-combo'",paraId:15,tocIndex:3},{value:";",paraId:15,tocIndex:3},{value:"trigger",paraId:15,tocIndex:3},{value:": Specify the trigger for collapsing and expanding a combo. ",paraId:15,tocIndex:3},{value:"dblclick",paraId:15,tocIndex:3},{value:" by default. Options: ",paraId:15,tocIndex:3},{value:"'click'",paraId:15,tocIndex:3},{value:", ",paraId:15,tocIndex:3},{value:"'dblclick'",paraId:15,tocIndex:3},{value:";",paraId:15,tocIndex:3},{value:"relayout",paraId:15,tocIndex:3},{value:": Whether relayout the graph after collapsing or expanding, ",paraId:15,tocIndex:3},{value:"true",paraId:15,tocIndex:3},{value:" by default.",paraId:15,tocIndex:3},{value:"Using Default Configuration",paraId:16,tocIndex:3},{value:"const graph = new G6.Graph({\n  modes: {\n    default: ['collapse-expand-combo'],\n  },\n});\n",paraId:17,tocIndex:3},{value:"Configure the trigger to be 'click':",paraId:18,tocIndex:3},{value:"const graph = new G6.Graph({\n  modes: {\n    default: [\n      {\n        type: 'collapse-expand-combo',\n        trigger: 'click',\n        relayout: false, // do not relayout after collapsing or expanding\n      },\n    ],\n  },\n});\n",paraId:19,tocIndex:3},{value:"Description: Allows users drag canvas;",paraId:20,tocIndex:4},{value:"Configurations:",paraId:21,tocIndex:4},{value:"type: 'drag-canvas'",paraId:22,tocIndex:4},{value:";",paraId:22,tocIndex:4},{value:"direction",paraId:22,tocIndex:4},{value:": The direction of dragging that is allowed. Options: ",paraId:22,tocIndex:4},{value:"'x'",paraId:22,tocIndex:4},{value:", ",paraId:22,tocIndex:4},{value:"'y'",paraId:22,tocIndex:4},{value:", ",paraId:22,tocIndex:4},{value:"'both'",paraId:22,tocIndex:4},{value:". ",paraId:22,tocIndex:4},{value:"'both'",paraId:22,tocIndex:4},{value:" by default;",paraId:22,tocIndex:4},{value:"enableOptimize",paraId:22,tocIndex:4},{value:": whether enable optimization, ",paraId:22,tocIndex:4},{value:"false",paraId:22,tocIndex:4},{value:" by default. ",paraId:22,tocIndex:4},{value:"enableOptimize: true",paraId:22,tocIndex:4},{value:" means hiding all edges and the shapes beside keyShapes of nodes while dragging canvas;",paraId:22,tocIndex:4},{value:"shouldBegin(e, self)",paraId:22,tocIndex:4},{value:": Whether allow the behavior happen on the current item (e.item). ",paraId:22,tocIndex:4},{value:"Supported after v4.7.16",paraId:22,tocIndex:4},{value:" The last parameter is the behavior instance, which will be convenient to get it in arrow function formatted ",paraId:22,tocIndex:4},{value:"shouldBegin",paraId:22,tocIndex:4},{value:";",paraId:22,tocIndex:4},{value:"scalableRange",paraId:22,tocIndex:4},{value:": scalable range when drag canvas, ",paraId:22,tocIndex:4},{value:"zero",paraId:22,tocIndex:4},{value:" by default. -1 to 1 means the scalable percentage of the viewport; the image bellow illustrate the situation when it is smaller than -1 or bigger than 1:",paraId:22,tocIndex:4},{value:"allowDragOnItem",paraId:23,tocIndex:4},{value:": whether response when the users drag on items(node/edge/combo), ",paraId:23,tocIndex:4},{value:"false",paraId:23,tocIndex:4},{value:" by default. ",paraId:23,tocIndex:4},{value:"Supported by 4.8.4",paraId:23,tocIndex:4},{value:" Allow object config with type ",paraId:23,tocIndex:4},{value:"{ node?: boolean, edge?: boolean, combo?: boolean }",paraId:23,tocIndex:4},{value:" to control draggable on different item types;",paraId:23,tocIndex:4},{value:"Related timing events:",paraId:24,tocIndex:4},{value:"canvas:dragstart",paraId:25,tocIndex:4},{value:": Triggered when drag start. Listened by ",paraId:25,tocIndex:4},{value:"graph.on('canvas:dragstart', e => {...})",paraId:25,tocIndex:4},{value:";",paraId:25,tocIndex:4},{value:"canvas:drag",paraId:25,tocIndex:4},{value:": Triggered when dragging. Listened by ",paraId:25,tocIndex:4},{value:"graph.on('canvas:drag', e => {...})",paraId:25,tocIndex:4},{value:";",paraId:25,tocIndex:4},{value:"canvas:dragend",paraId:25,tocIndex:4},{value:": Triggered when drag end. Listened by ",paraId:25,tocIndex:4},{value:"graph.on('canvas:dragend', e => {...})",paraId:25,tocIndex:4},{value:".",paraId:25,tocIndex:4},{value:"Using Default Configuration",paraId:26,tocIndex:4},{value:"const graph = new G6.Graph({\n  modes: {\n    default: ['drag-canvas'],\n  },\n});\n",paraId:27,tocIndex:4},{value:"By default, the x and y directions are both allowed.",paraId:28,tocIndex:4},{value:"Using Customized Configuration",paraId:29,tocIndex:4},{value:"const graph = new G6.Graph({\n  modes: {\n    default: [\n      {\n        type: 'drag-canvas',\n        direction: 'x',\n      },\n    ],\n  },\n});\n",paraId:30,tocIndex:4},{value:"The canvas can be dragged along x direction only.",paraId:31,tocIndex:4},{value:"Description: Scroll the canvas by wheeling, ",paraId:32,tocIndex:5},{value:"supported after v4.2.6",paraId:32,tocIndex:5},{value:";",paraId:32,tocIndex:5},{value:"Configurations:",paraId:33,tocIndex:5},{value:"type: 'scroll-canvas'",paraId:34,tocIndex:5},{value:";",paraId:34,tocIndex:5},{value:"direction",paraId:34,tocIndex:5},{value:": The direction of dragging that is allowed. Options: ",paraId:34,tocIndex:5},{value:"'x'",paraId:34,tocIndex:5},{value:", ",paraId:34,tocIndex:5},{value:"'y'",paraId:34,tocIndex:5},{value:", ",paraId:34,tocIndex:5},{value:"'both'",paraId:34,tocIndex:5},{value:". ",paraId:34,tocIndex:5},{value:"'both'",paraId:34,tocIndex:5},{value:" by default;",paraId:34,tocIndex:5},{value:"enableOptimize",paraId:34,tocIndex:5},{value:": whether enable optimization, ",paraId:34,tocIndex:5},{value:"false",paraId:34,tocIndex:5},{value:" by default. ",paraId:34,tocIndex:5},{value:"enableOptimize: true",paraId:34,tocIndex:5},{value:" means hiding all edges and the shapes beside keyShapes of nodes while dragging canvas;",paraId:34,tocIndex:5},{value:"zoomKey",paraId:34,tocIndex:5},{value:": switch to zooming while pressing the key and wheeling. Options: ",paraId:34,tocIndex:5},{value:"'shift'",paraId:34,tocIndex:5},{value:", ",paraId:34,tocIndex:5},{value:"'ctrl'",paraId:34,tocIndex:5},{value:", ",paraId:34,tocIndex:5},{value:"'alt'",paraId:34,tocIndex:5},{value:", ",paraId:34,tocIndex:5},{value:"'control'",paraId:34,tocIndex:5},{value:", ",paraId:34,tocIndex:5},{value:"'meta'",paraId:34,tocIndex:5},{value:", using an array of these options allows any of these keys to trigger zooming;",paraId:34,tocIndex:5},{value:"scalableRange",paraId:34,tocIndex:5},{value:": scalable range when drag canvas, ",paraId:34,tocIndex:5},{value:"zero",paraId:34,tocIndex:5},{value:" by default. -1 to 1 means the scalable percentage of the viewport; the image bellow illustrate the situation when it is smaller than -1 or bigger than 1:",paraId:34,tocIndex:5},{value:"allowDragOnItem",paraId:34,tocIndex:5},{value:": whether response when the users drag on items(node/edge/combo), ",paraId:34,tocIndex:5},{value:"false",paraId:34,tocIndex:5},{value:" by default. ",paraId:34,tocIndex:5},{value:"Supported after 4.8.4",paraId:34,tocIndex:5},{value:" allows object config with type ",paraId:34,tocIndex:5},{value:"{ node?: boolean, edge?: boolean, combo?: boolean }",paraId:34,tocIndex:5},{value:" to control draggable on different item types;",paraId:34,tocIndex:5},{value:"Related timing events:",paraId:35,tocIndex:5},{value:"wheel",paraId:36,tocIndex:5},{value:": Triggered when wheeling. Listened by ",paraId:36,tocIndex:5},{value:"graph.on('wheel', e => {...})",paraId:36,tocIndex:5},{value:".",paraId:36,tocIndex:5},{value:"Using Default Configuration",paraId:37,tocIndex:5},{value:"const graph = new G6.Graph({\n  modes: {\n    default: ['drag-canvas'],\n  },\n});\n",paraId:38,tocIndex:5},{value:"By default, the x and y directions are both allowed.",paraId:39,tocIndex:5},{value:"Using Customized Configuration",paraId:40,tocIndex:5},{value:"const graph = new G6.Graph({\n  modes: {\n    default: [\n      {\n        type: 'drag-canvas',\n        direction: 'x',\n      },\n    ],\n  },\n});\n",paraId:41,tocIndex:5},{value:"The canvas can be dragged along x direction only.",paraId:42,tocIndex:5},{value:"Description: Zoom the canvas;",paraId:43,tocIndex:6},{value:"Configurations:\n",paraId:43,tocIndex:6},{value:"type: 'zoom-canvas'",paraId:44,tocIndex:6},{value:";",paraId:44,tocIndex:6},{value:"sensitivity",paraId:44,tocIndex:6},{value:": The sensitivity of the zooming, range from 1 to 10. ",paraId:44,tocIndex:6},{value:"5",paraId:44,tocIndex:6},{value:" by default;",paraId:44,tocIndex:6},{value:"minZoom",paraId:44,tocIndex:6},{value:": minimum zoom ratio;",paraId:44,tocIndex:6},{value:"maxZoom",paraId:44,tocIndex:6},{value:": maximum zoom ratio;",paraId:44,tocIndex:6},{value:"enableOptimize",paraId:44,tocIndex:6},{value:": whether enable the optimization, false by default. If it is assigned to true, the shapes except keyShape will be hide when the ratio is smaller thant ",paraId:44,tocIndex:6},{value:"optimizeZoom",paraId:44,tocIndex:6},{value:";",paraId:44,tocIndex:6},{value:"optimizeZoom",paraId:44,tocIndex:6},{value:": Takes effect when ",paraId:44,tocIndex:6},{value:"enableOptimize",paraId:44,tocIndex:6},{value:" is ",paraId:44,tocIndex:6},{value:"true",paraId:44,tocIndex:6},{value:". ",paraId:44,tocIndex:6},{value:"0.7",paraId:44,tocIndex:6},{value:" by default. See ",paraId:44,tocIndex:6},{value:"enableOptimize",paraId:44,tocIndex:6},{value:" upon.",paraId:44,tocIndex:6},{value:"shouldUpdate(e, self)",paraId:44,tocIndex:6},{value:": Whether allow the behavior happen. ",paraId:44,tocIndex:6},{value:"Supported after v4.7.16",paraId:44,tocIndex:6},{value:" The last parameter is the behavior instance, which will be convenient to get it in arrow function formatted ",paraId:44,tocIndex:6},{value:"shouldUpdate",paraId:44,tocIndex:6},{value:".",paraId:44,tocIndex:6},{value:"fixSelectedItems",paraId:44,tocIndex:6},{value:": Fix the line width, fontSize, or overall size of some items while zooming out the canvas. ",paraId:44,tocIndex:6},{value:"fixSelectedItems",paraId:44,tocIndex:6},{value:" is an object with:\n",paraId:44,tocIndex:6},{value:"fixSelectedItems.fixState",paraId:45,tocIndex:6},{value:": The state of the items to be fixed. Set the item state to be the value to make it fix while zooming out. ",paraId:45,tocIndex:6},{value:"'selected'",paraId:45,tocIndex:6},{value:" by default;",paraId:45,tocIndex:6},{value:"fixSelectedItems.fixAll",paraId:45,tocIndex:6},{value:": Fix the overall size of the selected items. ",paraId:45,tocIndex:6},{value:"fixAll",paraId:45,tocIndex:6},{value:" has higher priority than ",paraId:45,tocIndex:6},{value:"fixSelectedItems.fixLineWidth",paraId:45,tocIndex:6},{value:" and ",paraId:45,tocIndex:6},{value:"fixSelectedItems.fixLabel",paraId:45,tocIndex:6},{value:";",paraId:45,tocIndex:6},{value:"fixSelectedItems.fixLineWidth",paraId:45,tocIndex:6},{value:": Fix the lineWidth of the keyShape of the fix item;",paraId:45,tocIndex:6},{value:"fixSelectedItems.fixLabel",paraId:45,tocIndex:6},{value:": Fix the fontSize of the item.",paraId:45,tocIndex:6},{value:"Related timing events:\n",paraId:43,tocIndex:6},{value:"wheelzoom(e)",paraId:46,tocIndex:6},{value:": Triggered when user zoom the graph. Listened by ",paraId:46,tocIndex:6},{value:"graph.on('wheelzoom', e => {...})",paraId:46,tocIndex:6},{value:".",paraId:46,tocIndex:6},{value:"Tips: Assign values for ",paraId:47,tocIndex:6},{value:"minZoom",paraId:47,tocIndex:6},{value:" and  ",paraId:47,tocIndex:6},{value:"maxZoom",paraId:47,tocIndex:6},{value:" on the graph to limit the zooming ratio.",paraId:47,tocIndex:6},{value:"Description: Allows users drag nodes;",paraId:48,tocIndex:7},{value:"Configurations:\n",paraId:48,tocIndex:7},{value:"type: 'drag-node'",paraId:49,tocIndex:7},{value:";",paraId:49,tocIndex:7},{value:"delegateStyle",paraId:49,tocIndex:7},{value:": The drawing properties when the nodes are dragged. ",paraId:49,tocIndex:7},{value:"{ strokeOpacity: 0.6, fillOpacity: 0.6 }",paraId:49,tocIndex:7},{value:" by default;",paraId:49,tocIndex:7},{value:"updateEdge",paraId:49,tocIndex:7},{value:": Whether to update all connected edges when dragging nodes. ",paraId:49,tocIndex:7},{value:"true",paraId:49,tocIndex:7},{value:" by default.",paraId:49,tocIndex:7},{value:"enableDelegate",paraId:49,tocIndex:7},{value:": Whether activate ",paraId:49,tocIndex:7},{value:"delegate",paraId:49,tocIndex:7},{value:" when dragging nodes, which means whether to use a virtual rect moved with the dragging mouse instead of the node. The effect is shown in the figures below. ",paraId:49,tocIndex:7},{value:"false",paraId:49,tocIndex:7},{value:" by default;",paraId:49,tocIndex:7},{value:"enableDebounce",paraId:49,tocIndex:7},{value:": Whether enable updating with debounce while dragging to avoid the frequent calculation. It is a boolean and will be useful for graph with polyline edges. ",paraId:49,tocIndex:7},{value:"false",paraId:49,tocIndex:7},{value:" by default;",paraId:49,tocIndex:7},{value:"enableOptimize",paraId:49,tocIndex:7},{value:": Whether to hide the related edges to avoid calculation while dragging nodes. It is a boolean and will be useful for graph with polyline edges. ",paraId:49,tocIndex:7},{value:"false",paraId:49,tocIndex:7},{value:" by default;",paraId:49,tocIndex:7},{value:"onlyChangeComboSize",paraId:49,tocIndex:7},{value:":Supported by V3.5 or later vertions. Only Change the size of the prarent combo whose child node to be dragged, which means do not change the hierarchy structures of combos and nodes. ",paraId:49,tocIndex:7},{value:"false",paraId:49,tocIndex:7},{value:" by default;",paraId:49,tocIndex:7},{value:"comboActiveState",paraId:49,tocIndex:7},{value:": Supported by V3.5 or later vertions. The state's name(string) of the entered combo to be dragged over, coordinating with the configuration in ",paraId:49,tocIndex:7},{value:"comboStateStyles",paraId:49,tocIndex:7},{value:" to define the state styles when instantiating a graph. It is empty by default;",paraId:49,tocIndex:7},{value:"selectedState",paraId:49,tocIndex:7},{value:": Supported by V3.5 or later vertions. The state's name(string) when combo is selected, ",paraId:49,tocIndex:7},{value:"'selected'",paraId:49,tocIndex:7},{value:" by default;",paraId:49,tocIndex:7},{value:"enableStack",paraId:49,tocIndex:7},{value:": Whether push the operations into undo/redo stack, assign it to false to avoid pushing;",paraId:49,tocIndex:7},{value:"shouldBegin(e, self)",paraId:49,tocIndex:7},{value:": Whether allow the behavior happen. ",paraId:49,tocIndex:7},{value:"Supported after v4.7.16",paraId:49,tocIndex:7},{value:" The last parameter is the behavior instance, which will be convenient to get it in arrow function formatted ",paraId:49,tocIndex:7},{value:"shouldBegin",paraId:49,tocIndex:7},{value:";",paraId:49,tocIndex:7},{value:"shouldUpdate(e, self)",paraId:49,tocIndex:7},{value:": Whether allow update the node/ delegate's position while dragging. ",paraId:49,tocIndex:7},{value:"Supported after v4.7.16",paraId:49,tocIndex:7},{value:" The last parameter is the behavior instance, which will be convenient to get it in arrow function formatted ",paraId:49,tocIndex:7},{value:"shouldUpdate",paraId:49,tocIndex:7},{value:";",paraId:49,tocIndex:7},{value:"shouldEnd(e, targetItem: Item, self)",paraId:49,tocIndex:7},{value:": Whether allow update the node/ delegate's position after drag end. ",paraId:49,tocIndex:7},{value:"Supported after v4.7.16",paraId:49,tocIndex:7},{value:" The last parameter is the behavior instance, which will be convenient to get it in arrow function formatted ",paraId:49,tocIndex:7},{value:"shouldEnd",paraId:49,tocIndex:7},{value:".",paraId:49,tocIndex:7},{value:"Using Default Configuration",paraId:50,tocIndex:7},{value:"const graph = new G6.Graph({\n  modes: {\n    default: ['drag-node'],\n  },\n});\n",paraId:51,tocIndex:7},{value:"Activate",paraId:52,tocIndex:7},{value:" ",paraId:52,tocIndex:7},{value:"delegate",paraId:52,tocIndex:7},{value:"const graph = new G6.Graph({\n  modes: {\n    default: [\n      {\n        type: 'drag-node',\n        enableDelegate: true,\n        shouldBegin: (e, self) => {\n          // Do not allow the node with id 'node1' to be dragged\n          if (e.item && e.item.getModel().id === 'node1') return false;\n          return true;\n        },\n      },\n    ],\n  },\n});\n",paraId:53,tocIndex:7},{value:"Description: Select a node by clicking. Cancel the selected state by clicking the node agian or clicking the canvas;",paraId:54,tocIndex:8},{value:"Configurations:\n",paraId:54,tocIndex:8},{value:"type: 'click-select'",paraId:55,tocIndex:8},{value:";",paraId:55,tocIndex:8},{value:"multiple",paraId:55,tocIndex:8},{value:": Whether to allow multiple selection. ",paraId:55,tocIndex:8},{value:"true",paraId:55,tocIndex:8},{value:" by default. ",paraId:55,tocIndex:8},{value:"false",paraId:55,tocIndex:8},{value:" means multiple selection is not allowed, and the ",paraId:55,tocIndex:8},{value:"trigger",paraId:55,tocIndex:8},{value:" will not take effect.",paraId:55,tocIndex:8},{value:"trigger",paraId:55,tocIndex:8},{value:": Specify which trigger for multiple selection. ",paraId:55,tocIndex:8},{value:"shift",paraId:55,tocIndex:8},{value:" by default, which means multiple selection is activated when the shift button is pressed. Options: ",paraId:55,tocIndex:8},{value:"'shift'",paraId:55,tocIndex:8},{value:", ",paraId:55,tocIndex:8},{value:"'ctrl'",paraId:55,tocIndex:8},{value:", ",paraId:55,tocIndex:8},{value:"'alt'",paraId:55,tocIndex:8},{value:", and so on;",paraId:55,tocIndex:8},{value:"selectedState",paraId:55,tocIndex:8},{value:": The state name for an item which is selected by this behaivor, ",paraId:55,tocIndex:8},{value:"'selected'",paraId:55,tocIndex:8},{value:" by default;",paraId:55,tocIndex:8},{value:"selectNode",paraId:55,tocIndex:8},{value:": Whether allow selecting node by this behavior, ",paraId:55,tocIndex:8},{value:"true",paraId:55,tocIndex:8},{value:" by default;",paraId:55,tocIndex:8},{value:"selectEdge",paraId:55,tocIndex:8},{value:": Whether allow selecting edge by this behavior, ",paraId:55,tocIndex:8},{value:"false",paraId:55,tocIndex:8},{value:" by default;",paraId:55,tocIndex:8},{value:"selectCombo",paraId:55,tocIndex:8},{value:": Whether allow selecting combo by this behaivor, ",paraId:55,tocIndex:8},{value:"true",paraId:55,tocIndex:8},{value:" by default;",paraId:55,tocIndex:8},{value:"shouldBegin(e, self)",paraId:55,tocIndex:8},{value:": Whether allow the behavior happen on the current item (e.item), see the example below. ",paraId:55,tocIndex:8},{value:"Supported after v4.7.16",paraId:55,tocIndex:8},{value:" The last parameter is the behavior instance, which will be convenient to get it in arrow function formatted ",paraId:55,tocIndex:8},{value:"shouldBegin",paraId:55,tocIndex:8},{value:";",paraId:55,tocIndex:8},{value:"shouldUpdate(e, self)",paraId:55,tocIndex:8},{value:": Whether allow the behavior changes the state and state style of the on the current item (e.item), see the example below. ",paraId:55,tocIndex:8},{value:"Supported after v4.7.16",paraId:55,tocIndex:8},{value:" The last parameter is the behavior instance, which will be convenient to get it in arrow function formatted ",paraId:55,tocIndex:8},{value:"shouldUpdate",paraId:55,tocIndex:8},{value:";",paraId:55,tocIndex:8},{value:"Related timing events:\n",paraId:54,tocIndex:8},{value:"'nodeselectchange'",paraId:56,tocIndex:8},{value:": Triggered when the set of selected items changed. Listened by ",paraId:56,tocIndex:8},{value:"graph.on('nodeselectchange', e => {...})",paraId:56,tocIndex:8},{value:". The fields of the parameter ",paraId:56,tocIndex:8},{value:"e",paraId:56,tocIndex:8},{value:" are:\n",paraId:56,tocIndex:8},{value:"e.target",paraId:57,tocIndex:8},{value:": The current manipulated item;",paraId:57,tocIndex:8},{value:"e.selectedItems",paraId:57,tocIndex:8},{value:": The set of selected items after this operation;",paraId:57,tocIndex:8},{value:"e.select",paraId:57,tocIndex:8},{value:": A boolean tag to distinguish if the current operation is select(",paraId:57,tocIndex:8},{value:"true",paraId:57,tocIndex:8},{value:") or deselect (",paraId:57,tocIndex:8},{value:"false",paraId:57,tocIndex:8},{value:").",paraId:57,tocIndex:8},{value:"Using Default Configuration",paraId:58,tocIndex:8},{value:"const graph = new G6.Graph({\n  modes: {\n    default: ['click-select'],\n  },\n});\n\n// Triggered when the set of selected items changed\ngraph.on('nodeselectchange', (e) => {\n  // The current manipulated item\n  console.log(e.target);\n  // The set of selected items after this operation\n  console.log(e.selectedItems);\n  // A boolean tag to distinguish if the current operation is select(`true`) or deselect (`false`)\n  console.log(e.select);\n});\n",paraId:59,tocIndex:8},{value:"Press ",paraId:60,tocIndex:8},{value:"Shift",paraId:60,tocIndex:8},{value:" button to select more items.",paraId:60,tocIndex:8},{value:"Using Customized Configuration",paraId:61,tocIndex:8},{value:"const graph = new G6.Graph({\n  modes: {\n    default: [\n      {\n        type: 'click-select',\n        trigger: 'ctrl',\n      },\n      // Whether allow the behavior happen on the item. If it returns false, the current manipulated item will not be selected and the timing event 'nodeselectchange' will not be triggered as well\n      shouldBegin: (e, self) => {\n        // Do not allow the behavior happen when the clicked shape has name 'text-shape'\n        if (e.target.get('name') === 'text-shape') return false;\n        // Do not allow the behavior happen when the clicked item has id 'text-shape'\n        if (e.item.getModel().id === 'id1') return false;\n        return true;\n      },\n      // Whehter allow the behavior change the state or state styles of the current manipulated item. If it returns false, the state and state styles of the current item will not be changed. But the timing event 'nodeselectchange' will still be triggered\n      shouldUpdate: (e, self) => {\n        // The item's state and state style will not be changed if its id is 'id2'\n        if (e.item.getModel().id === 'id2') return false;\n        return true;\n      }\n    ],\n  },\n});\n\n// Triggered when the set of selected items changed\ngraph.on('nodeselectchange', e => {\n  // The current manipulated item\n  console.log(e.target);\n  // The set of selected items after this operation\n  console.log(e.selectedItems);\n  // A boolean tag to distinguish if the current operation is select(`true`) or deselect (`false`)\n  console.log(e.select);\n});\n",paraId:62,tocIndex:8},{value:"With the configuration above, users are allowed to select more than one nodes when pressing ",paraId:63,tocIndex:8},{value:"Ctrl",paraId:63,tocIndex:8},{value:". You can also assign ",paraId:63,tocIndex:8},{value:"Alt",paraId:63,tocIndex:8},{value:" for it. But the multiple selection is turned off when ",paraId:63,tocIndex:8},{value:"multiple",paraId:63,tocIndex:8},{value:" is ",paraId:63,tocIndex:8},{value:"false",paraId:63,tocIndex:8},{value:", and the ",paraId:63,tocIndex:8},{value:"trigger",paraId:63,tocIndex:8},{value:" will not take effect any more.",paraId:63,tocIndex:8},{value:"Description: The tooltip for node;",paraId:64,tocIndex:9},{value:"Configurations:\n",paraId:64,tocIndex:9},{value:"type: 'tooltip'",paraId:65,tocIndex:9},{value:";",paraId:65,tocIndex:9},{value:"formatText(model)",paraId:65,tocIndex:9},{value:": Format function, returns a text string or an HTML element;",paraId:65,tocIndex:9},{value:"offset",paraId:65,tocIndex:9},{value:": the offset of the tooltip to the mouse.",paraId:65,tocIndex:9},{value:"shouldBegin(e, self)",paraId:65,tocIndex:9},{value:": Whether allow the tooltip the show up. ",paraId:65,tocIndex:9},{value:"Supported after v4.7.16",paraId:65,tocIndex:9},{value:" The last parameter is the behavior instance, which will be convenient to get it in arrow function formatted ",paraId:65,tocIndex:9},{value:"shouldBegin",paraId:65,tocIndex:9},{value:";",paraId:65,tocIndex:9},{value:"shouldUpdate(e, self)",paraId:65,tocIndex:9},{value:": Whether allow the tooltip to be updated. ",paraId:65,tocIndex:9},{value:"Supported after v4.7.16",paraId:65,tocIndex:9},{value:" The last parameter is the behavior instance, which will be convenient to get it in arrow function formatted ",paraId:65,tocIndex:9},{value:"shouldUpdate",paraId:65,tocIndex:9},{value:".",paraId:65,tocIndex:9},{value:"Related timing events:\n",paraId:64,tocIndex:9},{value:"tooltipchange",paraId:66,tocIndex:9},{value:": Triggered when the tooltip is changed. Listened by ",paraId:66,tocIndex:9},{value:"graph.on('tooltipchange', e => {...})",paraId:66,tocIndex:9},{value:".",paraId:66,tocIndex:9},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 500,\n  height: 500,\n  modes: {\n    default: [\n      {\n        type: 'tooltip',\n        formatText(model) {\n          return model.xxx;\n        },\n        offset: 10,\n      },\n    ],\n  },\n});\n",paraId:67,tocIndex:9},{value:"Tips: Since there are no styles for tooltip in G6, you need to define the styles for it as:",paraId:68,tocIndex:9},{value:".g6-tooltip {\n  padding: 10px 6px;\n  color: #444;\n  background-color: rgba(255, 255, 255, 0.9);\n  border: 1px solid #e2e2e2;\n  border-radius: 4px;\n}\n",paraId:69,tocIndex:9},{value:"The usage of edge-tooltip is similar to tooltip. It will be activated when the user hover the mouse onto an edge.",paraId:70,tocIndex:10},{value:"Description: The tooltip for edge;",paraId:71,tocIndex:10},{value:"Configurations:\n",paraId:71,tocIndex:10},{value:"type: 'edge-tooltip'",paraId:72,tocIndex:10},{value:";",paraId:72,tocIndex:10},{value:"formatText(model)",paraId:72,tocIndex:10},{value:": Format function, returns a text string or an HTML element;",paraId:72,tocIndex:10},{value:"offset",paraId:72,tocIndex:10},{value:": the offset of the tooltip to the mouse;",paraId:72,tocIndex:10},{value:"shouldBegin(e, self)",paraId:72,tocIndex:10},{value:": Whether allow the tooltip the show up. ",paraId:72,tocIndex:10},{value:"Supported after v4.7.16",paraId:72,tocIndex:10},{value:" The last parameter is the behavior instance, which will be convenient to get it in arrow function formatted ",paraId:72,tocIndex:10},{value:"shouldBegin",paraId:72,tocIndex:10},{value:";",paraId:72,tocIndex:10},{value:"shouldUpdate(e, self)",paraId:72,tocIndex:10},{value:": Whether allow the tooltip to be updated. ",paraId:72,tocIndex:10},{value:"Supported after v4.7.16",paraId:72,tocIndex:10},{value:" The last parameter is the behavior instance, which will be convenient to get it in arrow function formatted ",paraId:72,tocIndex:10},{value:"shouldUpdate",paraId:72,tocIndex:10},{value:".",paraId:72,tocIndex:10},{value:"Related timing events:\n",paraId:71,tocIndex:10},{value:"tooltipchange",paraId:73,tocIndex:10},{value:": Triggered when the tooltip is changed. Listened by ",paraId:73,tocIndex:10},{value:"graph.on('tooltipchange', e => {...})",paraId:73,tocIndex:10},{value:".",paraId:73,tocIndex:10},{value:"Description: Highlight the node and its related nodes and edges when the mouse enter the node;",paraId:74,tocIndex:11},{value:"Configurations:\n",paraId:74,tocIndex:11},{value:"type: 'activate-relations'",paraId:75,tocIndex:11},{value:";",paraId:75,tocIndex:11},{value:"trigger: 'mouseenter'",paraId:75,tocIndex:11},{value:". ",paraId:75,tocIndex:11},{value:"mousenter",paraId:75,tocIndex:11},{value:" means acitvating when the mouse enter a node; ",paraId:75,tocIndex:11},{value:"click",paraId:75,tocIndex:11},{value:" means activating when the mouse click a node;",paraId:75,tocIndex:11},{value:"activeState: 'active'",paraId:75,tocIndex:11},{value:". The state name when the node is activated. When ",paraId:75,tocIndex:11},{value:"activate-relations",paraId:75,tocIndex:11},{value:" is activated, the related nodes and edges will have this state. ",paraId:75,tocIndex:11},{value:"active",paraId:75,tocIndex:11},{value:" by default. It can be combined with ",paraId:75,tocIndex:11},{value:"nodeStyle",paraId:75,tocIndex:11},{value:" and ",paraId:75,tocIndex:11},{value:"edgeStyle",paraId:75,tocIndex:11},{value:" of graph to enrich the visual effect;",paraId:75,tocIndex:11},{value:"inactiveState: 'inactive'",paraId:75,tocIndex:11},{value:". The state name when of the node is inactivated. All the nodes and edges which are not activated by ",paraId:75,tocIndex:11},{value:"activate-relations",paraId:75,tocIndex:11},{value:" will have this state. ",paraId:75,tocIndex:11},{value:"inactive",paraId:75,tocIndex:11},{value:" by default. It can be combined with ",paraId:75,tocIndex:11},{value:"nodeStyle",paraId:75,tocIndex:11},{value:" and ",paraId:75,tocIndex:11},{value:"edgeStyle",paraId:75,tocIndex:11},{value:" of graph to enrich the visual effect;",paraId:75,tocIndex:11},{value:"resetSelected",paraId:75,tocIndex:11},{value:": Whether to reset the selected nodes when highlight the related nodes. ",paraId:75,tocIndex:11},{value:"false",paraId:75,tocIndex:11},{value:" by default, which means the selected state will not be covered by ",paraId:75,tocIndex:11},{value:"activate-relations",paraId:75,tocIndex:11},{value:";",paraId:75,tocIndex:11},{value:"shouldUpdate(item: Item, { event: G6Event, action: 'deactivate' | 'activate' }, self)",paraId:75,tocIndex:11},{value:": Whether allow the behavior happen. ",paraId:75,tocIndex:11},{value:"Supported after v4.7.16",paraId:75,tocIndex:11},{value:" The last parameter is the behavior instance, which will be convenient to get it in arrow function formatted ",paraId:75,tocIndex:11},{value:"shouldUpdate",paraId:75,tocIndex:11},{value:";",paraId:75,tocIndex:11},{value:"Related timing event:\n",paraId:74,tocIndex:11},{value:"'afteractivaterelations'",paraId:76,tocIndex:11},{value:": Triggered when the activated items changed. Listened by ",paraId:76,tocIndex:11},{value:"graph.on('afteractivaterelations', evt => {...})",paraId:76,tocIndex:11},{value:". The fields of the parameter ",paraId:76,tocIndex:11},{value:"e",paraId:76,tocIndex:11},{value:":\n",paraId:76,tocIndex:11},{value:"e.item",paraId:77,tocIndex:11},{value:": The current manipulated item;",paraId:77,tocIndex:11},{value:"e.action",paraId:77,tocIndex:11},{value:": A string tag to distinguish whether the current action is ",paraId:77,tocIndex:11},{value:"'activate'",paraId:77,tocIndex:11},{value:" or ",paraId:77,tocIndex:11},{value:"'deactivate'",paraId:77,tocIndex:11},{value:".",paraId:77,tocIndex:11},{value:"Using Default Configuration",paraId:78,tocIndex:11},{value:"const graph = new G6.Graph({\n  modes: {\n    default: ['activate-relations'],\n  },\n});\n\ngraph.on('afteractivaterelations', (e) => {\n  // The current manipulated item\n  console.log(e.item);\n  // A string tag to distinguish whether the current action is `'activate'` or `'deactivate'`\n  console.log(e.action);\n});\n",paraId:79,tocIndex:11},{value:"The selected state of the selected node will be maintained after the ",paraId:80,tocIndex:11},{value:"activate-relations",paraId:80,tocIndex:11},{value:" operation by default.",paraId:80,tocIndex:11},{value:"Using Customized Configuration",paraId:81,tocIndex:11},{value:"const graph = new G6.Graph({\n  modes: {\n    default: [\n      {\n        type: 'activate-relations',\n        resetSelected: true,\n      },\n    ],\n  },\n});\n\ngraph.on('afteractivaterelations', (e) => {\n  // The current manipulated item\n  console.log(e.item);\n  // A string tag to distinguish whether the current action is `'activate'` or `'deactivate'`\n  console.log(e.action);\n});\n",paraId:82,tocIndex:11},{value:"Assign ",paraId:83,tocIndex:11},{value:"true",paraId:83,tocIndex:11},{value:" to ",paraId:83,tocIndex:11},{value:"resetSelected",paraId:83,tocIndex:11},{value:" to reset the selected states for nodes after the ",paraId:83,tocIndex:11},{value:"activate-relations",paraId:83,tocIndex:11},{value:" operation.",paraId:83,tocIndex:11},{value:"Description: Allows uers to select nodes by brushing;",paraId:84,tocIndex:12},{value:"Configurations:\n",paraId:84,tocIndex:12},{value:"type: 'brush-select'",paraId:85,tocIndex:12},{value:";",paraId:85,tocIndex:12},{value:"brushStyle",paraId:85,tocIndex:12},{value:": The styles of the marquee. It contains four configurations: ",paraId:85,tocIndex:12},{value:"fill",paraId:85,tocIndex:12},{value:"、",paraId:85,tocIndex:12},{value:"fillOpacity",paraId:85,tocIndex:12},{value:"、",paraId:85,tocIndex:12},{value:"stroke",paraId:85,tocIndex:12},{value:" and ",paraId:85,tocIndex:12},{value:"lineWidth",paraId:85,tocIndex:12},{value:";",paraId:85,tocIndex:12},{value:"onSelect(nodes)",paraId:85,tocIndex:12},{value:": The callback function when selecting a node. ",paraId:85,tocIndex:12},{value:"nodes",paraId:85,tocIndex:12},{value:" is the selected ndoes;",paraId:85,tocIndex:12},{value:"onDeselect(nodes)",paraId:85,tocIndex:12},{value:": The callback function when canceling selections. ",paraId:85,tocIndex:12},{value:"nodes",paraId:85,tocIndex:12},{value:" is the selected ndoes;",paraId:85,tocIndex:12},{value:"selectedState",paraId:85,tocIndex:12},{value:": The state of the selected nodes. ",paraId:85,tocIndex:12},{value:"'selected'",paraId:85,tocIndex:12},{value:" by default;",paraId:85,tocIndex:12},{value:"includeEdges",paraId:85,tocIndex:12},{value:": Whether to select the edges when selecting by brushing. ",paraId:85,tocIndex:12},{value:"true",paraId:85,tocIndex:12},{value:" by default. ",paraId:85,tocIndex:12},{value:"false",paraId:85,tocIndex:12},{value:" means do not select the edges.",paraId:85,tocIndex:12},{value:"includeCombos",paraId:85,tocIndex:12},{value:": Whether to select the combos when selecting by brushing. ",paraId:85,tocIndex:12},{value:"false",paraId:85,tocIndex:12},{value:" by default. ",paraId:85,tocIndex:12},{value:"true",paraId:85,tocIndex:12},{value:" means combos are selected.",paraId:85,tocIndex:12},{value:"trigger",paraId:85,tocIndex:12},{value:": The trigger button for this operation. ",paraId:85,tocIndex:12},{value:"'shift'",paraId:85,tocIndex:12},{value:" by default, which means the select by brushing operation will be activated by pressing Shift button. Options: ",paraId:85,tocIndex:12},{value:"'shift'",paraId:85,tocIndex:12},{value:", ",paraId:85,tocIndex:12},{value:"'ctrl' / 'control'",paraId:85,tocIndex:12},{value:", ",paraId:85,tocIndex:12},{value:"'alt'",paraId:85,tocIndex:12},{value:" and ",paraId:85,tocIndex:12},{value:"'drag'",paraId:85,tocIndex:12},{value:", not case sensitive:\n",paraId:85,tocIndex:12},{value:"'shift'",paraId:86,tocIndex:12},{value:": Select by brushing when Shift is pressed;",paraId:86,tocIndex:12},{value:"'ctrl' / 'control'",paraId:86,tocIndex:12},{value:": Select by brushing when Ctrl is pressed;",paraId:86,tocIndex:12},{value:"'alt'",paraId:86,tocIndex:12},{value:": Select by brushing when Alt is pressed;",paraId:86,tocIndex:12},{value:"'drag'",paraId:86,tocIndex:12},{value:": Select by brushing without any pressed buttons. Note that it will conflict with the ",paraId:86,tocIndex:12},{value:"drag-canvas",paraId:86,tocIndex:12},{value:";",paraId:86,tocIndex:12},{value:"shouldUpdate(item: Item, action: string, self)",paraId:85,tocIndex:12},{value:": Whether allow the behavior happen on the current manipulated item (e.item). See the example below. ",paraId:85,tocIndex:12},{value:"Supported after v4.7.16",paraId:85,tocIndex:12},{value:" The last parameter is the behavior instance, which will be convenient to get it in arrow function formatted ",paraId:85,tocIndex:12},{value:"shouldUpdate",paraId:85,tocIndex:12},{value:";",paraId:85,tocIndex:12},{value:"Related timing events:\n",paraId:84,tocIndex:12},{value:"'nodeselectchange'",paraId:87,tocIndex:12},{value:": Triggered when the set of selected items changed. Listened by ",paraId:87,tocIndex:12},{value:"graph.on('nodeselectchange', e => {...})",paraId:87,tocIndex:12},{value:". The fields of the parameter ",paraId:87,tocIndex:12},{value:"e",paraId:87,tocIndex:12},{value:":\n",paraId:87,tocIndex:12},{value:"e.selectedItems",paraId:88,tocIndex:12},{value:": The set of selected items after the operation;",paraId:88,tocIndex:12},{value:"e.select",paraId:88,tocIndex:12},{value:": A boolean tag to distinguish whether the current operation is select(",paraId:88,tocIndex:12},{value:"true",paraId:88,tocIndex:12},{value:") or deselect(",paraId:88,tocIndex:12},{value:"false",paraId:88,tocIndex:12},{value:").",paraId:88,tocIndex:12},{value:"Using Default Configuration",paraId:89,tocIndex:12},{value:"const graph = new G6.Graph({\n  modes: {\n    default: ['brush-select'],\n  },\n});\n\n// Triggered when the set of selected items changed\ngraph.on('nodeselectchange', (e) => {\n  // The set of selected items after the operation\n  console.log(e.selectedItems);\n  // A boolean tag to distinguish whether the current operation is select(`true`) or deselect(`false`)\n  console.log(e.select);\n});\n",paraId:90,tocIndex:12},{value:"Select by brushing when the Shift button is pressed by default. And the edges are selectable as well.",paraId:91,tocIndex:12},{value:"Using Customized Configuration",paraId:92,tocIndex:12},{value:"const graph = new G6.Graph({\n  modes: {\n    default: [\n      {\n        type: 'brush-select',\n        trigger: 'ctrl',\n        includeEdges: false, // Will ignore edges\n        includeCombos: true, // Will select combos\n      },\n      // Whether allow the behavior happen on the current manipulated item (e.item). If it returns false, the item will not be selected and the timing event 'nodeselectchange' will not be triggered\n      shouldUpdate: (e, self) => {\n        // Do not allow the behavior happen on the node/edge/combo with id 'id2'\n        if (e.item.getModel().id === 'id2') return false;\n        return true;\n      }\n    ],\n  },\n});\n\n// Triggered when the set of selected items changed\ngraph.on('nodeselectchange', e => {\n  // The set of selected items after the operation\n  console.log(e.selectedItems);\n  // A boolean tag to distinguish whether the current operation is select(`true`) or deselect(`false`)\n  console.log(e.select);\n});\n",paraId:93,tocIndex:12},{value:"By the configurations above, the operation is activated when the Ctrl button is pressed, and the edges will not be selected during the process.",paraId:94,tocIndex:12},{value:"**Conflict Configuration: **",paraId:95,tocIndex:12},{value:"const graph = new G6.Graph({\n  modes: {\n    default: [\n      'drag-canvas',\n      {\n        type: 'brush-select',\n        trigger: 'drag',\n      },\n    ],\n  },\n});\n",paraId:96,tocIndex:12},{value:"When the ",paraId:97,tocIndex:12},{value:"trigger",paraId:97,tocIndex:12},{value:" in ",paraId:97,tocIndex:12},{value:"brush-select",paraId:97,tocIndex:12},{value:" is assigned to ",paraId:97,tocIndex:12},{value:"drag",paraId:97,tocIndex:12},{value:", an the ",paraId:97,tocIndex:12},{value:"drag-canvas",paraId:97,tocIndex:12},{value:" exists in this mode, their operation will conflict.",paraId:97,tocIndex:12},{value:"It is obvious that the selecting by brushing is activated while dragging the canvas. To avoid this situation, we can assign other values for ",paraId:98,tocIndex:12},{value:"trigger",paraId:98,tocIndex:12},{value:" in ",paraId:98,tocIndex:12},{value:"brush-select",paraId:98,tocIndex:12},{value:". Besides, the following solution also works:",paraId:98,tocIndex:12},{value:"const graph = new G6.Graph({\n  modes: {\n    default: ['drag-canvas'],\n    brush: [\n      {\n        type: 'brush-select',\n        trigger: 'drag',\n      },\n    ],\n  },\n});\n",paraId:99,tocIndex:12},{value:"It is a solution to put these two conflicting events into two mdoes. They will be activated on different graph modes. Dragging operation corresponds to ",paraId:100,tocIndex:12},{value:"drag-canvas",paraId:100,tocIndex:12},{value:" in the default mode. When user switch the state to brush mode by ",paraId:100,tocIndex:12},{value:"graph.setModel('brush')",paraId:100,tocIndex:12},{value:", the dragging operation will be responsed by ",paraId:100,tocIndex:12},{value:"brush-select",paraId:100,tocIndex:12},{value:" instead. Refer to ",paraId:100,tocIndex:12},{value:"Mode",paraId:101,tocIndex:12},{value:" for more information.",paraId:100,tocIndex:12},{value:"Description: Allows uers to select nodes by drawing a line over or around objects.",paraId:102,tocIndex:13},{value:"Configurations:\n",paraId:102,tocIndex:13},{value:"type: 'lasso-select'",paraId:103,tocIndex:13},{value:";",paraId:103,tocIndex:13},{value:"delegateStyle",paraId:103,tocIndex:13},{value:": The styles of the marquee. It contains four configurations: ",paraId:103,tocIndex:13},{value:"fill",paraId:103,tocIndex:13},{value:"、",paraId:103,tocIndex:13},{value:"fillOpacity",paraId:103,tocIndex:13},{value:"、",paraId:103,tocIndex:13},{value:"stroke",paraId:103,tocIndex:13},{value:" and ",paraId:103,tocIndex:13},{value:"lineWidth",paraId:103,tocIndex:13},{value:";",paraId:103,tocIndex:13},{value:"onSelect(nodes, edges)",paraId:103,tocIndex:13},{value:": The callback function when selecting a node. ",paraId:103,tocIndex:13},{value:"nodes",paraId:103,tocIndex:13},{value:" is the selected ndoes, ",paraId:103,tocIndex:13},{value:"edges",paraId:103,tocIndex:13},{value:" is the selected edges;",paraId:103,tocIndex:13},{value:"onDeselect(nodes, edges)",paraId:103,tocIndex:13},{value:": The callback function when canceling selections. ",paraId:103,tocIndex:13},{value:"nodes",paraId:103,tocIndex:13},{value:" is the deselected ndoes, ",paraId:103,tocIndex:13},{value:"edges",paraId:103,tocIndex:13},{value:" is the deselected edges;",paraId:103,tocIndex:13},{value:"selectedState",paraId:103,tocIndex:13},{value:": The state of the selected nodes. ",paraId:103,tocIndex:13},{value:"'selected'",paraId:103,tocIndex:13},{value:" by default;",paraId:103,tocIndex:13},{value:"includeEdges",paraId:103,tocIndex:13},{value:": Whether to select the edges when selecting by brushing. ",paraId:103,tocIndex:13},{value:"true",paraId:103,tocIndex:13},{value:" by default. ",paraId:103,tocIndex:13},{value:"false",paraId:103,tocIndex:13},{value:" means do not select the edges.",paraId:103,tocIndex:13},{value:"trigger",paraId:103,tocIndex:13},{value:": The trigger button for this operation. ",paraId:103,tocIndex:13},{value:"'shift'",paraId:103,tocIndex:13},{value:" by default, which means the select by brushing operation will be activated by pressing Shift button. Options: ",paraId:103,tocIndex:13},{value:"'shift'",paraId:103,tocIndex:13},{value:", ",paraId:103,tocIndex:13},{value:"'ctrl' / 'control'",paraId:103,tocIndex:13},{value:", ",paraId:103,tocIndex:13},{value:"'alt'",paraId:103,tocIndex:13},{value:" and ",paraId:103,tocIndex:13},{value:"'drag'",paraId:103,tocIndex:13},{value:", not case sensitive:\n",paraId:103,tocIndex:13},{value:"'shift'",paraId:104,tocIndex:13},{value:": Select by brushing when Shift is pressed;",paraId:104,tocIndex:13},{value:"'ctrl' / 'control'",paraId:104,tocIndex:13},{value:": Select by brushing when Ctrl is pressed;",paraId:104,tocIndex:13},{value:"'alt'",paraId:104,tocIndex:13},{value:": Select by brushing when Alt is pressed;",paraId:104,tocIndex:13},{value:"'drag'",paraId:104,tocIndex:13},{value:": Select by brushing without any pressed buttons. Note that it will conflict with the ",paraId:104,tocIndex:13},{value:"drag-canvas",paraId:104,tocIndex:13},{value:";",paraId:104,tocIndex:13},{value:"shouldUpdate(item: Item, action: string, self)",paraId:103,tocIndex:13},{value:": Whether allow the behavior happen on the current manipulated item (e.item). See the example below. ",paraId:103,tocIndex:13},{value:"Supported after v4.7.16",paraId:103,tocIndex:13},{value:" The last parameter is the behavior instance, which will be convenient to get it in arrow function formatted ",paraId:103,tocIndex:13},{value:"shouldUpdate",paraId:103,tocIndex:13},{value:";",paraId:103,tocIndex:13},{value:"shouldDeselect({ action: string, nodes: INode[], edges: IEdge[] })",paraId:103,tocIndex:13},{value:": Whether allow to deselect the items at current conditions. ",paraId:103,tocIndex:13},{value:"Supported after v4.7.16",paraId:103,tocIndex:13},{value:" The last parameter is the behavior instance, which will be convenient to get it in arrow function formatted ",paraId:103,tocIndex:13},{value:"shouldDeselect",paraId:103,tocIndex:13},{value:".",paraId:103,tocIndex:13},{value:"Related timing events:\n",paraId:102,tocIndex:13},{value:"'nodeselectchange'",paraId:105,tocIndex:13},{value:": Triggered when the set of selected items changed. Listened by ",paraId:105,tocIndex:13},{value:"graph.on('nodeselectchange', e => {...})",paraId:105,tocIndex:13},{value:". The fields of the parameter ",paraId:105,tocIndex:13},{value:"e",paraId:105,tocIndex:13},{value:":\n",paraId:105,tocIndex:13},{value:"e.selectedItems",paraId:106,tocIndex:13},{value:": The set of selected items after the operation, include ",paraId:106,tocIndex:13},{value:"nodes",paraId:106,tocIndex:13},{value:" and ",paraId:106,tocIndex:13},{value:"edges",paraId:106,tocIndex:13},{value:";",paraId:106,tocIndex:13},{value:"e.select",paraId:106,tocIndex:13},{value:": A boolean tag to distinguish whether the current operation is select(",paraId:106,tocIndex:13},{value:"true",paraId:106,tocIndex:13},{value:") or deselect(",paraId:106,tocIndex:13},{value:"false",paraId:106,tocIndex:13},{value:").",paraId:106,tocIndex:13},{value:"The configuration of ",paraId:107,tocIndex:13},{value:"lasso-select",paraId:107,tocIndex:13},{value:" behavior is the same as that of ",paraId:107,tocIndex:13},{value:"brush-select",paraId:107,tocIndex:13},{value:" behavior.",paraId:107,tocIndex:13},{value:"Description: Collapse or expand a subtree on a treeGraph;",paraId:108,tocIndex:14},{value:"Attension: If you want to collapse a subtree by default when render the Graph in the first time, you can assign ",paraId:108,tocIndex:14},{value:"collapsed: true",paraId:108,tocIndex:14},{value:" to the root of the subtree in its data. If you want to control the subtree to collapse/expand by code, you can also assign the ",paraId:108,tocIndex:14},{value:"collapsed",paraId:108,tocIndex:14},{value:" for the root of the subtree and call ",paraId:108,tocIndex:14},{value:"treeGraph.layout()",paraId:108,tocIndex:14},{value:" to make it take effect;",paraId:108,tocIndex:14},{value:"Configurations:\n",paraId:108,tocIndex:14},{value:"type: 'collapse-expand'",paraId:109,tocIndex:14},{value:";",paraId:109,tocIndex:14},{value:"trigger",paraId:109,tocIndex:14},{value:": The operation for collapsing and expanding. Options: ",paraId:109,tocIndex:14},{value:"click",paraId:109,tocIndex:14},{value:" and ",paraId:109,tocIndex:14},{value:"dblclick",paraId:109,tocIndex:14},{value:". ",paraId:109,tocIndex:14},{value:"click",paraId:109,tocIndex:14},{value:" by default;",paraId:109,tocIndex:14},{value:"onChange(item: Item, collapsed: boolean, self)",paraId:109,tocIndex:14},{value:": The callback function after collapsing or expanding. ",paraId:109,tocIndex:14},{value:"Warining",paraId:109,tocIndex:14},{value:": it will be removed from V3.1.2;",paraId:109,tocIndex:14},{value:"shouldBegin(e, collapsed: boolean, self)",paraId:109,tocIndex:14},{value:": Whether allow this behavior happen on the current item (e.item). ",paraId:109,tocIndex:14},{value:"Supported after v4.7.16",paraId:109,tocIndex:14},{value:" The last parameter is the behavior instance, which will be convenient to get it in arrow function formatted ",paraId:109,tocIndex:14},{value:"shouldBegin",paraId:109,tocIndex:14},{value:";",paraId:109,tocIndex:14},{value:"shouldUpdate(e, collapsed: boolean, self)",paraId:109,tocIndex:14},{value:": whether allow call ",paraId:109,tocIndex:14},{value:"onChange",paraId:109,tocIndex:14},{value:" and relayout the graph after update the ",paraId:109,tocIndex:14},{value:"collpased",paraId:109,tocIndex:14},{value:" to the node. ",paraId:109,tocIndex:14},{value:"Supported after v4.7.16",paraId:109,tocIndex:14},{value:" The last parameter is the behavior instance, which will be convenient to get it in arrow function formatted ",paraId:109,tocIndex:14},{value:"shouldUpdate",paraId:109,tocIndex:14},{value:";",paraId:109,tocIndex:14},{value:"Related timing event:\n",paraId:108,tocIndex:14},{value:"itemcollapsed",paraId:110,tocIndex:14},{value:": Triggered when collapse-expand happens. Listened by ",paraId:110,tocIndex:14},{value:"graph.on('itemcollapsed', e => {...})",paraId:110,tocIndex:14},{value:". The fields of the parameter ",paraId:110,tocIndex:14},{value:"e",paraId:110,tocIndex:14},{value:":\n",paraId:110,tocIndex:14},{value:"e.item",paraId:111,tocIndex:14},{value:": The current manipulated item;",paraId:111,tocIndex:14},{value:"e.collapsed",paraId:111,tocIndex:14},{value:": A boolean flag to distinguish whether the current operaition is collapsing(",paraId:111,tocIndex:14},{value:"true",paraId:111,tocIndex:14},{value:") or expanding(",paraId:111,tocIndex:14},{value:"false",paraId:111,tocIndex:14},{value:").",paraId:111,tocIndex:14},{value:"Usage",paraId:112,tocIndex:14},{value:"const graph = new G6.TreeGraph({\n  modes: {\n    default: [\n      {\n        type: 'collapse-expand',\n        trigger: 'click',\n        onChange(item, collapsed) {\n          const data = item.get('model').data;\n          data.collapsed = collapsed;\n          return true;\n        },\n        shouldBegin: (e, self) => {\n          // Nothing happens when the current item has id 'node1'\n          if (e.item && e.item.getModel().id === 'node1') return false;\n          return true;\n        },\n      },\n      'drag-canvas',\n      'zoom-canvas',\n    ],\n  },\n});\n\ngraph.on('itemcollapsed', (e) => {\n  // The current manipulated item\n  console.log(e.item);\n  // A boolean flag to distinguish whether the current operaition is collapsing(`true`) or expanding(`false`)\n  console.log(e.collapsed);\n});\n",paraId:113,tocIndex:14},{value:"Description: Collapse or expand a node group;",paraId:114,tocIndex:15},{value:"Configurations:\n",paraId:114,tocIndex:15},{value:"type: 'collapse-expand-group'",paraId:115,tocIndex:15},{value:"trigger",paraId:115,tocIndex:15},{value:": The operation for collapsing and expanding. Options: ",paraId:115,tocIndex:15},{value:"click",paraId:115,tocIndex:15},{value:" and ",paraId:115,tocIndex:15},{value:"dblclick",paraId:115,tocIndex:15},{value:". ",paraId:115,tocIndex:15},{value:"dblclick",paraId:115,tocIndex:15},{value:" by default, which means double click.",paraId:115,tocIndex:15},{value:"Using Default Configuration",paraId:116,tocIndex:15},{value:"const graph = new G6.Graph({\n  modes: {\n    default: ['collapse-expand-group'],\n  },\n});\n",paraId:117,tocIndex:15},{value:"Using Customized Configuration",paraId:118,tocIndex:15},{value:"Assign ",paraId:118,tocIndex:15},{value:"trigger",paraId:118,tocIndex:15},{value:" to ",paraId:118,tocIndex:15},{value:"click",paraId:118,tocIndex:15},{value:", the collapsing or expanding a node group will be triggered by click.",paraId:118,tocIndex:15},{value:"const graph = new G6.Graph({\n  modes: {\n    default: [\n      {\n        type: 'collapse-expand-group',\n        trigger: 'click',\n      },\n    ],\n  },\n});\n",paraId:119,tocIndex:15},{value:"Description: Allows users drag node group;",paraId:120,tocIndex:16},{value:"Configurations:\n",paraId:120,tocIndex:16},{value:"type: 'drag-group'",paraId:121,tocIndex:16},{value:";",paraId:121,tocIndex:16},{value:"delegateStyle",paraId:121,tocIndex:16},{value:": The style of the ",paraId:121,tocIndex:16},{value:"delegate",paraId:121,tocIndex:16},{value:" when dragging the group.",paraId:121,tocIndex:16},{value:"Using Default Configuration",paraId:122,tocIndex:16},{value:"const graph = new G6.Graph({\n  modes: {\n    default: ['drag-group'],\n  },\n});\n",paraId:123,tocIndex:16},{value:"Description: create edge by interaction;",paraId:124,tocIndex:17},{value:"Configurations:\n",paraId:124,tocIndex:17},{value:"type: 'create-edge'",paraId:125,tocIndex:17},{value:";",paraId:125,tocIndex:17},{value:"trigger",paraId:125,tocIndex:17},{value:": Specify the trigger for creating an edge, options: ",paraId:125,tocIndex:17},{value:"'click'",paraId:125,tocIndex:17},{value:", ",paraId:125,tocIndex:17},{value:"'drag'",paraId:125,tocIndex:17},{value:". The default value is ",paraId:125,tocIndex:17},{value:"'click'",paraId:125,tocIndex:17},{value:", which means the user is allowed to creat an edge by clicking two end nodes as source and target node respectively. ",paraId:125,tocIndex:17},{value:"'drag'",paraId:125,tocIndex:17},{value:" means the user is allowed to create an edge by 'dragging' from a source node to a target ndoe. Note that ",paraId:125,tocIndex:17},{value:"trigger: 'drag'",paraId:125,tocIndex:17},{value:" cannot create a self-loop edge;",paraId:125,tocIndex:17},{value:"key",paraId:125,tocIndex:17},{value:": The assistant trigger key from the keyboard. If it is undefined or unset, only ",paraId:125,tocIndex:17},{value:"trigger",paraId:125,tocIndex:17},{value:" decides the triggering interaction from user. Otherwise, this behavior will be triggered by ",paraId:125,tocIndex:17},{value:"trigger",paraId:125,tocIndex:17},{value:" only when ",paraId:125,tocIndex:17},{value:"key",paraId:125,tocIndex:17},{value:" is pressed. Options: ",paraId:125,tocIndex:17},{value:"'shift'",paraId:125,tocIndex:17},{value:", ",paraId:125,tocIndex:17},{value:"'ctrl'",paraId:125,tocIndex:17},{value:", 'control', ",paraId:125,tocIndex:17},{value:"'alt'",paraId:125,tocIndex:17},{value:", ",paraId:125,tocIndex:17},{value:"'meta'",paraId:125,tocIndex:17},{value:", ",paraId:125,tocIndex:17},{value:"undefined",paraId:125,tocIndex:17},{value:";",paraId:125,tocIndex:17},{value:"edgeConfig",paraId:125,tocIndex:17},{value:": The edge configurations for the edges created by this behavior, the configurations are the same as the edge, ref to ",paraId:125,tocIndex:17},{value:"Edge Configurations",paraId:126,tocIndex:17},{value:". To modify the configurations for different added edges, listener to ",paraId:125,tocIndex:17},{value:"'aftercreateedge'",paraId:125,tocIndex:17},{value:" and update the edge.",paraId:125,tocIndex:17},{value:"shouldBegin(e, self)",paraId:125,tocIndex:17},{value:": Whether allow the behavior begins with the condition ",paraId:125,tocIndex:17},{value:"e",paraId:125,tocIndex:17},{value:". ",paraId:125,tocIndex:17},{value:"Supported after v4.7.16",paraId:125,tocIndex:17},{value:" The last parameter is the behavior instance, which will be convenient to get it in arrow function formatted ",paraId:125,tocIndex:17},{value:"shouldBegin",paraId:125,tocIndex:17},{value:";",paraId:125,tocIndex:17},{value:"shouldEnd(e, self)",paraId:125,tocIndex:17},{value:": Whether allow the behavior ends under the condition ",paraId:125,tocIndex:17},{value:"e",paraId:125,tocIndex:17},{value:". ",paraId:125,tocIndex:17},{value:"Supported after v4.7.16",paraId:125,tocIndex:17},{value:" The last parameter is the behavior instance, which will be convenient to get it in arrow function formatted ",paraId:125,tocIndex:17},{value:"shouldEnd",paraId:125,tocIndex:17},{value:";",paraId:125,tocIndex:17},{value:"Related timing event:\n",paraId:124,tocIndex:17},{value:"'aftercreateedge'",paraId:127,tocIndex:17},{value:": Triggered after the creating process is finished. Listen to it by ",paraId:127,tocIndex:17},{value:"graph.on('aftercreateedge', e => {...})",paraId:127,tocIndex:17},{value:", where the parameter ",paraId:127,tocIndex:17},{value:"e",paraId:127,tocIndex:17},{value:" has a property ",paraId:127,tocIndex:17},{value:"edge",paraId:127,tocIndex:17},{value:" which is the created edge.",paraId:127,tocIndex:17},{value:"Using Default Configuration",paraId:128,tocIndex:17},{value:"const graph = new G6.Graph({\n  modes: {\n    default: ['create-edge'],\n  },\n});\ngraph.on('aftercreateedge', (e) => {\n  console.log(e.edge);\n});\n",paraId:129,tocIndex:17},{value:"Using Customized Configuration",paraId:130,tocIndex:17},{value:"const graph = new G6.Graph({\n  modes: {\n    default: [\n      // takes effect when the 'shift' is been pressing and drag from a node to another\n      {\n        type: 'create-edge',\n        trigger: 'drag',\n        key: 'shift',\n        edgeConfig: {\n          type: 'cubic',\n          style: {\n            stroke: '#f00',\n            lineWidth: 2,\n            // ... // other edge style configurations\n          },\n          // ... // other edge configurations\n        },\n      },\n    ],\n  },\n});\n",paraId:131,tocIndex:17},{value:"Description: allow the end-user to call a function of Graph with shortcuts keys. e.g. press down 'control' and '1' on keyboard to make the graph fit the canvas. Attention: make sure the focus is on the canvas when the end-user is pressing keys to call the function;",paraId:132,tocIndex:18},{value:"Configurations:\n",paraId:132,tocIndex:18},{value:"type: 'shortcuts-call'",paraId:133,tocIndex:18},{value:";",paraId:133,tocIndex:18},{value:"trigger",paraId:133,tocIndex:18},{value:": the subject key to trigger the behavior, options: ",paraId:133,tocIndex:18},{value:"'shift'",paraId:133,tocIndex:18},{value:", ",paraId:133,tocIndex:18},{value:"'alt'",paraId:133,tocIndex:18},{value:", ",paraId:133,tocIndex:18},{value:"'ctrl'",paraId:133,tocIndex:18},{value:", ",paraId:133,tocIndex:18},{value:"'control'",paraId:133,tocIndex:18},{value:";",paraId:133,tocIndex:18},{value:"combinedKey",paraId:133,tocIndex:18},{value:": the vice key for combination with ",paraId:133,tocIndex:18},{value:"trigger",paraId:133,tocIndex:18},{value:" to trigger the behavior. When the ",paraId:133,tocIndex:18},{value:"trigger",paraId:133,tocIndex:18},{value:" is pressed down, press the ",paraId:133,tocIndex:18},{value:"combinedKey",paraId:133,tocIndex:18},{value:" will call the graph function with name ",paraId:133,tocIndex:18},{value:"functionName",paraId:133,tocIndex:18},{value:". If ",paraId:133,tocIndex:18},{value:"combinedKey",paraId:133,tocIndex:18},{value:" is not specified or assigned with ",paraId:133,tocIndex:18},{value:"undefined",paraId:133,tocIndex:18},{value:", pressing the ",paraId:133,tocIndex:18},{value:"trigger",paraId:133,tocIndex:18},{value:" down will call the function;",paraId:133,tocIndex:18},{value:"functionName",paraId:133,tocIndex:18},{value:": the name of the Graph function to be called. If the name is wrong or it is not a function of the Graph, the keydown events will not be triggered.",paraId:133,tocIndex:18},{value:"functionParams",paraId:133,tocIndex:18},{value:": the parameters or the called function. Make sure the parameters are correct for the function to be called according to corresponding docs, errors might occur otherwise.",paraId:133,tocIndex:18},{value:"Using Default Configuration",paraId:134,tocIndex:18},{value:"const graph = new G6.Graph({\n  modes: {\n    default: ['shortcuts-call'],\n  },\n});\n",paraId:135,tocIndex:18},{value:"Using Customized Configuration",paraId:136,tocIndex:18},{value:"const graph = new G6.Graph({\n  modes: {\n    default: [\n      // Press 'alt' and 'm' to call graph.moveTo(10, 10). Be sure that the fucos is on the canvas when press the keys\n      {\n        type: 'shortcuts-call',\n        // subject key\n        trigger: 'alt',\n        // vice key\n        combinedKey: 'm',\n        // move the graph to 10,10\n        functionName: 'moveTo',\n        functionParams: [10, 10],\n      },\n    ],\n  },\n});\n",paraId:137,tocIndex:18}]},45188:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"When a user interacts with a graph, there may be different interaction modes due to different intents. For example, clicking a node in edit mode requires a pop-up window for the user to edit, and clicking a node in view mode requires selecting a node.",paraId:0,tocIndex:0},{value:"To address the problem above, G6 provides the interaction Mode. It is a manage mechanism for the ",paraId:1,tocIndex:0},{value:"Behavior",paraId:2,tocIndex:0},{value:" on a graph. There can be multiple interaction modes on a graph, each interaction mode contains multiple interaction ",paraId:1,tocIndex:0},{value:"Behavior",paraId:3,tocIndex:0},{value:"s.",paraId:1,tocIndex:0},{value:"For example, there are two modes on a graph: default and edit:",paraId:4,tocIndex:0},{value:"default mode contains click to select node behavior and drag canvas behavior;",paraId:5,tocIndex:0},{value:"edit mode contains click node to pop up an editing window behavior and drag node behavior;",paraId:5,tocIndex:0},{value:"Default mode takes effect by default, which means the node will be selected by clicking insteand of a editing window pops up. You can switch to edit mode by simple code, then the behaviors in the defualt mode will not take effect any more, which means the editing window will pop up when user clicks a node.",paraId:6,tocIndex:0},{value:"Configure the ",paraId:7,tocIndex:1},{value:"modes",paraId:7,tocIndex:1},{value:" when instantiating a Graph:",paraId:7,tocIndex:1},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 500,\n  height: 500,\n  modes: {\n    // 支持的 behavior\n    default: ['drag-canvas', 'zoom-canvas'],\n    edit: ['click-select'],\n  },\n});\n",paraId:8,tocIndex:1},{value:"There are two modes on the graph defined above: ",paraId:9,tocIndex:1},{value:"default",paraId:9,tocIndex:1},{value:" and ",paraId:9,tocIndex:1},{value:"edit",paraId:9,tocIndex:1},{value:". The ",paraId:9,tocIndex:1},{value:"default",paraId:9,tocIndex:1},{value:" mode contains two ",paraId:9,tocIndex:1},{value:"Behavior",paraId:10,tocIndex:1},{value:"s: ",paraId:9,tocIndex:1},{value:"'drag-canvas'",paraId:9,tocIndex:1},{value:" and ",paraId:9,tocIndex:1},{value:"'``zoom-canvas'",paraId:9,tocIndex:1},{value:" with default configurations.",paraId:9,tocIndex:1},{value:"The ",paraId:11,tocIndex:2},{value:"default",paraId:11,tocIndex:2},{value:" mode takes effect by default. Users are allowed to drag and zoom the canvas. Swich the mode to edit mode by ",paraId:11,tocIndex:2},{value:"graph.``setMode('edit')",paraId:11,tocIndex:2},{value:" to select a node by clicking.",paraId:11,tocIndex:2},{value:"graph.setMode('edit');\n",paraId:12,tocIndex:2},{value:"Now, the graph supports clicking to select nodes. The ",paraId:13,tocIndex:2},{value:"'drag-canvas'",paraId:13,tocIndex:2},{value:" and ",paraId:13,tocIndex:2},{value:"'zoom-canvas'",paraId:13,tocIndex:2},{value:" behaviors in ",paraId:13,tocIndex:2},{value:"default",paraId:13,tocIndex:2},{value:" do not take effect any more.",paraId:13,tocIndex:2},{value:"setMode",paraId:14,tocIndex:2},{value:" calls the following operations inside:",paraId:14,tocIndex:2},{value:"Unbind all the event listeners of current mode;",paraId:15,tocIndex:2},{value:"Generate new Behaviors. Initialize the events;",paraId:15,tocIndex:2},{value:"Bind event listeners to the new Behaviors.",paraId:15,tocIndex:2},{value:"If there are existing Behaviors (",paraId:16,tocIndex:3},{value:"Built-in Behavior",paraId:17,tocIndex:3},{value:" or ",paraId:16,tocIndex:3},{value:"Custom Behavior",paraId:18,tocIndex:3},{value:"), You can add them to a mode by ",paraId:16,tocIndex:3},{value:"graph.addBehaviors",paraId:16,tocIndex:3},{value:", and also remove some Behaviors by ",paraId:16,tocIndex:3},{value:"graph.removeBehaviors",paraId:16,tocIndex:3},{value:":",paraId:16,tocIndex:3},{value:"// Add drag-canvas with configurations from default mode\ngraph.addBehaviors('drag-canvas', 'default');\n\n// Remove drag-canvas from default mode\ngraph.removeBehaviors('drag-canvas', 'default');\n\n// Add drag-canvas with configurations into edit mode\ngraph.addBehaviors(\n  {\n    type: 'drag-canvas',\n    direction: 'x',\n  },\n  'edit',\n);\n\n// Remove drag-canvas from edit mode\ngraph.removeBehaviors('drag-canvas', 'edit');\n\n// Add multiple behaviors into default mode\ngraph.addBehaviors(['drag-canvas', 'zoom-canvas'], 'default');\n\n// Remove multiple behaviors from default mode\ngraph.removeBehaviors(['drag-canvas', 'zoom-canvas'], 'default');\n\n// --------\n\n// Update the behavior 'zoom-canvas' from mode 'default'\ngraph.updateBehavior('zoom-canvas', { sensitivity: 1.5, enableOptimize: true}, 'default');\n\n// update the behavior 'click-select' from mode 'select'\ngraph.updateBehavior('click-select', { trigger: 'ctrl' }, 'select');\n\n",paraId:19,tocIndex:3},{value:"Built-in Behavior",paraId:20,tocIndex:4},{value:"Custom Behavior",paraId:21,tocIndex:4}]},96934:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"The ",paraId:0,tocIndex:0},{value:"State",paraId:0,tocIndex:0},{value:" in G6 is the state of an item (node/edge), including ",paraId:0,tocIndex:0},{value:"Interaction State",paraId:0,tocIndex:0},{value:" and ",paraId:0,tocIndex:0},{value:"Bussiness State",paraId:0,tocIndex:0},{value:".",paraId:0,tocIndex:0},{value:"In G6, the way to configure interaction state and business state is the same. For some users who only use G6 to develop of a certain requirement, and do not want to understand G6 in depth, there is no need to distinguish the difference between the interactive state and the business state. You can define and use the states in the same way without understanding cost.",paraId:1,tocIndex:0},{value:"The interaction state is closely related to specific interaction actions, such as the user using a mouse to select a node, or hover an edge.",paraId:2,tocIndex:1},{value:"G6 handles interactive states by default.",paraId:3,tocIndex:1},{value:"Business state refers to the states customized according to the user's business needs. Business state is not related to interaction actions, and is strongly related to specific business logic. It can also be understood as being strongly data-driven. Such as the execution status of a task, the approval state of an application, etc., different data values ​​represent different business states. Business state has nothing to do with user interaction, but it is handled in the same way as interaction state in G6.",paraId:4,tocIndex:2},{value:"The principle of judging whether or not to use state comes from the perspective of interaction and business:",paraId:5,tocIndex:3},{value:"Some interactions need to change the style and properties of nodes or edges;",paraId:6,tocIndex:3},{value:"The content presented to the user will change based on the data (eg 1 for success, 0 for failure).",paraId:6,tocIndex:3},{value:"If one of these conditions is met, state should be used.",paraId:7,tocIndex:3},{value:"After defining the state, you can activate it by ",paraId:8,tocIndex:4},{value:"graph.setItemState",paraId:8,tocIndex:4},{value:", which can be called in the listeners like ",paraId:8,tocIndex:4},{value:"graph.on",paraId:8,tocIndex:4},{value:" or the custom Behavior, or any place as you wish.",paraId:8,tocIndex:4},{value:"Activate the hover state in the event listeners.",paraId:9,tocIndex:5},{value:"graph.on('node:mouseenter', (evt) => {\n  const { item } = evt;\n  graph.setItemState(item, 'hover', true);\n});\n\ngraph.on('node:mouseleave', (evt) => {\n  const { item } = evt;\n  graph.setItemState(item, 'hover', false);\n});\n",paraId:10,tocIndex:5},{value:"Activate the selected state in custom Behavior.",paraId:11,tocIndex:6},{value:"G6.registerBehavior('nodeClick', {\n  getEvents() {\n    return {\n      'node:click': 'onClick',\n    };\n  },\n  onClick(e) {\n    e.preventDefault();\n    if (!this.shouldUpdate.call(this, e)) {\n      return;\n    }\n    const { item } = e;\n    const graph = this.graph;\n    graph.setItemState(item, 'selected', true);\n  },\n});\n",paraId:12,tocIndex:6},{value:"In last section, we call ",paraId:13,tocIndex:7},{value:"graph.setItemState",paraId:13,tocIndex:7},{value:" to activate/inactivate the states on a node or an edge. But it just marks the state on the item object. To reflect these states to the visual space which is observed by the end users, we need to set the item styles for different states to response the states change.",paraId:13,tocIndex:7},{value:"There are three ways to define the styles of a state:",paraId:14,tocIndex:7},{value:"Define the state styles in ",paraId:15,tocIndex:7},{value:"nodeStateStyles",paraId:15,tocIndex:7},{value:" and ",paraId:15,tocIndex:7},{value:"edgeStateStyles",paraId:15,tocIndex:7},{value:" when instantiating a Graph;",paraId:15,tocIndex:7},{value:"Define ",paraId:15,tocIndex:7},{value:"stateStyles",paraId:15,tocIndex:7},{value:" in the data of a node or an edge;",paraId:15,tocIndex:7},{value:"Configure the ",paraId:15,tocIndex:7},{value:"stateStyles",paraId:15,tocIndex:7},{value:" in options when customizing a node/edge.",paraId:15,tocIndex:7},{value:"The value of a state can be a boolean or string (multi-value). And you can configure styles for different sub-shapes by assigning the shape name. Refer to the examples below.",paraId:16,tocIndex:7},{value:"⚠️ NOTICE: ",paraId:17,tocIndex:7},{value:"Multi-value and state styles for sub-shapes are supported by v3.4 and later versions.",paraId:18,tocIndex:7},{value:"The state styles for sub-shapes are only available for the sub-shapes which are the chilren of the root graphics group of a node/edge, but not other descendant shapes grouped by nested sub-graphics-groups. The sub-shapes in the built-in nodes/edges are all the children of the root graphics group of a node/edge. If you are customizing a node/edge type, this rule should be noticed.",paraId:18,tocIndex:7},{value:"The format of ",paraId:19,tocIndex:7},{value:"nodeStateStyles",paraId:19,tocIndex:7},{value:", ",paraId:19,tocIndex:7},{value:"edgeStateStyles",paraId:19,tocIndex:7},{value:", and ",paraId:19,tocIndex:7},{value:"stateStyles",paraId:19,tocIndex:7},{value:" are shown below:",paraId:19,tocIndex:7},{value:"{\n    // the style of the boolean state 'hover' when it is true\n  hover: {\n    // the keyShape style\n    fill: '#d3adf7',\n    // the style for the shape with name 'node-label'\n    'node-label': {\n      fontSize: 15\n    },\n  },\n  // the style of the boolean state 'running' when it is true\n  running: {\n    // the keyShape style\n    stroke: 'steelblue',\n  },\n  // state with multi-value and sub-shapes styles are supported by v3.4 and later version\n  // multi-value state 'bodyState', the style for the value is 'health'\n  'bodyState:health': {\n    // the keyShape style\n    fill: 'green',\n    // ... other keyShape styles\n    // the style for the shape with name 'shape-name1'\n    'shape-name1': {\n      stroke: '#ccc'\n      // ... other styles for the shape with name 'shape-name1'\n    },\n    // the style for the shape with name 'shape-name2'\n    'shape-name2': {\n      fill: 'red'\n      // ... other styles for the shape with name 'shape-name2'\n    }\n  },\n  // multi-value state 'bodyState', the style for the value is 'suspect'\n  'bodyState:suspect': {\n    // ...\n  },\n  // multi-value state 'bodyState', the style for the value is 'ill'\n  'bodyState:ill': {\n    // ...\n  }\n  // ... other state styles\n}\n",paraId:20,tocIndex:7},{value:"const graph = new G6.Graph({\n  container: 'mountNode',\n  width: 800,\n  height: 600,\n  defaultNode: {\n    type: 'diamond',\n    style: {\n      // Node style on default state\n      fill: 'blue',\n    },\n  },\n  nodeStateStyles: {\n    hover: {\n      // The node style when it is on the its hover state is true\n      fill: '#d3adf7',\n    },\n    running: {\n      // The node style when it is on the its running state is true\n      stroke: 'steelblue',\n    },\n  },\n});\n",paraId:21,tocIndex:8},{value:"The code above defines the styles of interaction state ",paraId:22,tocIndex:8},{value:"hover",paraId:22,tocIndex:8},{value:" and bussiness state ",paraId:22,tocIndex:8},{value:"running",paraId:22,tocIndex:8},{value:" by ",paraId:22,tocIndex:8},{value:"nodeStateStyles",paraId:22,tocIndex:8},{value:", which means when the mouse ",paraId:22,tocIndex:8},{value:"hover",paraId:22,tocIndex:8},{value:" a node, the filling color of the node will be changed into ",paraId:22,tocIndex:8},{value:"'#d3adf7'",paraId:22,tocIndex:8},{value:"; the shape with ",paraId:22,tocIndex:8},{value:"name",paraId:22,tocIndex:8},{value:" ",paraId:22,tocIndex:8},{value:"node-labe",paraId:22,tocIndex:8},{value:" of the node is also changed. When the ",paraId:22,tocIndex:8},{value:"running",paraId:22,tocIndex:8},{value:" of a node is activated, the stroke color of the node will be changed into ",paraId:22,tocIndex:8},{value:"'steelblue'",paraId:22,tocIndex:8},{value:".",paraId:22,tocIndex:8},{value:"(Supported by v3.4 and later versions) The example above also assign the state styles for ",paraId:23,tocIndex:8},{value:"'bodyState'",paraId:23,tocIndex:8},{value:", which is a multi-value state. When the ",paraId:23,tocIndex:8},{value:"'bodyState'",paraId:23,tocIndex:8},{value:" is ",paraId:23,tocIndex:8},{value:"'health'",paraId:23,tocIndex:8},{value:" for a node, the keyShape style and the style for the shapes with ",paraId:23,tocIndex:8},{value:"name",paraId:23,tocIndex:8},{value:" ",paraId:23,tocIndex:8},{value:"'shape-name1'",paraId:23,tocIndex:8},{value:" and ",paraId:23,tocIndex:8},{value:"'shape-name2'",paraId:23,tocIndex:8},{value:" will be changed.",paraId:23,tocIndex:8},{value:"Similarly, the ",paraId:24,tocIndex:8},{value:"style",paraId:24,tocIndex:8},{value:" of ",paraId:24,tocIndex:8},{value:"defaultEdge",paraId:24,tocIndex:8},{value:" defines the styles of the node on the default state. And ",paraId:24,tocIndex:8},{value:"edgeStateStyles",paraId:24,tocIndex:8},{value:" can be used for defined the styles on other states.",paraId:24,tocIndex:8},{value:"You can use this way to configure different state styles for different nodes and edges.",paraId:25,tocIndex:9},{value:"const data = {\n  nodes: [\n    {\n      id: 'node1',\n      styles: {\n        // default styles\n      },\n      stateStyles: {\n        //... see the example above\n      },\n      // ...\n    },\n    {\n      id: 'node2',\n      styles: {\n        // default styles\n      },\n      stateStyles: {\n        //... see the example above\n      },\n      // ... other configurations\n    },\n    // ...\n  ],\n  edges: [\n    {\n      source: 'node1',\n      target: 'node2',\n      styles: {\n        // default styles\n      },\n      stateStyles: {\n        //... see the example above\n      },\n      // ... other configurations\n    },\n    //...\n  ],\n};\n",paraId:26,tocIndex:9},{value:"The following code defines the styles for interaction states ",paraId:27,tocIndex:10},{value:"hover",paraId:27,tocIndex:10},{value:" and ",paraId:27,tocIndex:10},{value:"selected",paraId:27,tocIndex:10},{value:" by ",paraId:27,tocIndex:10},{value:"stateStyles",paraId:27,tocIndex:10},{value:". When user hovers anode, the opacity of the node will reduce to 0.8. When user clicks the ndoe, the line width of the stroke will widen to 3.",paraId:27,tocIndex:10},{value:"G6.registerNode('customShape', {\n  // The configurations of the custom node\n  options: {\n    size: 60,\n    style: {\n      lineWidth: 1\n    },\n    stateStyles: {\n      // The style of the node when the mouse hovers the node\n      hover: {\n        fillOpacity: 0.8\n      },\n      // The style of the node when the node is selected\n      selected: {\n        lineWidth: 3\n      }\n    }\n  }\n}\n",paraId:28,tocIndex:10},{value:"⚠️ NOTICE: ",paraId:29,tocIndex:11},{value:" Updating state styles are supported by v3.4 and later versions.",paraId:29,tocIndex:11},{value:"Updating the state styles means modifying the configurations for one state styles configured in ",paraId:30,tocIndex:11},{value:"Configure Styles for State",paraId:31,tocIndex:11},{value:". E.g. the example below shows how to modify the default styles and state styles for a node or an edge instance. Similary, you could also use the format shown in ",paraId:30,tocIndex:11},{value:"Configure Styles for State",paraId:32,tocIndex:11},{value:" to modify the state styles for multi-value states.",paraId:30,tocIndex:11},{value:"graph.updateItem(item, {\n  // modify the default styles\n  style: {\n    stroke: 'green',\n    // modify the styles for the sub-shape with name 'node-label'\n    'node-label': {\n      stroke: 'yellow',\n    },\n  },\n  stateStyles: {\n    // modify the styles for hover\n    hover: {\n      opacity: 0.1,\n      // modify the hover style for the sub-shape with name  'node-label'\n      'node-text': {\n        stroke: 'blue',\n      },\n    },\n  },\n});\n",paraId:33,tocIndex:11},{value:"There might be two situations when you calling ",paraId:34,tocIndex:11},{value:"graph.updateItem",paraId:34,tocIndex:11},{value:":",paraId:34,tocIndex:11},{value:"The state for the item is activated, that is ",paraId:35,tocIndex:11},{value:"item.hasState('hover') === true",paraId:35,tocIndex:11},{value:": the modified hover style will take effect immediately;",paraId:35,tocIndex:11},{value:"The state for the item is inactivated, that is ",paraId:35,tocIndex:11},{value:"item.hasState('hover') === false",paraId:35,tocIndex:11},{value:": the modified hover style will take effect after calling ",paraId:35,tocIndex:11},{value:"graph.setItemState(item, 'hover', true)",paraId:35,tocIndex:11},{value:".",paraId:35,tocIndex:11},{value:"We suggest you to call ",paraId:36,tocIndex:12},{value:"graph.clearItemStates",paraId:36,tocIndex:12},{value:" to cancel the state setted by ",paraId:36,tocIndex:12},{value:"graph.setItemState",paraId:36,tocIndex:12},{value:". ",paraId:36,tocIndex:12},{value:"graph.clearItemStates",paraId:36,tocIndex:12},{value:" can be used for cancel one or several states.",paraId:36,tocIndex:12},{value:"graph.setItemState(item, 'bodyState', 'health');\ngraph.setItemState(item, 'selected', true);\ngraph.setItemState(item, 'active', true);\n// cancel one state\ngraph.clearItemStates(item, 'selected');\ngraph.clearItemStates(item, ['selected']);\n// cancel multiple states\ngraph.clearItemStates(item, ['bodyState:health', 'selected', 'active']);\n",paraId:37,tocIndex:12},{value:"States conflict sometimes. State priority is necessary for this situation. G6 does not support explicit methods for setting state priorities. The rule is: the latter the state is setted (by ",paraId:38,tocIndex:13},{value:"graph.setItemState",paraId:38,tocIndex:13},{value:"), the higher the priority. User could get the activate/inactivate state by ",paraId:38,tocIndex:13},{value:"hasState",paraId:38,tocIndex:13},{value:", and then decide whether to activate another state. In other word, it is controlled by the user. E.g. in most graph visualization app, the node will be highlighted when the mouse hovering the node. And usually we hope the node's 'active' state not to be covered by hover state. That is to say, the priority of 'active' state is higher than 'hover' state.",paraId:38,tocIndex:13},{value:"// Set the node to be 'active'\ngraph.setItemState(item, 'active', true);\n// Hover the node\nconst hasActived = item.hasState('active');\n// Set the node to be 'hover' only if the node has no 'active' state\nif (!hasActived) {\n  graph.setItemState(item, 'hover', true);\n}\n",paraId:39,tocIndex:13},{value:"G6 provides the state management for simplify the states of the items. For more information about the state thinking, please refer to ",paraId:40,tocIndex:14},{value:"The Thinking of the State in G6",paraId:40,tocIndex:14},{value:".",paraId:40,tocIndex:14}]},81192:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"The animation mechanism is too complicated to understand by beginners and out of the scope of the tutorial. In this chapter, we only introduce the animation in G6 briefly. For more information, please refer to ",paraId:0},{value:"Basic Animation",paraId:1},{value:".",paraId:0},{value:"There are two levels of animation in G6:",paraId:2},{value:"GLobal animation: Transform the graph animatively when the changes are global;",paraId:3},{value:"Item animation: The animation on a node or an edge.",paraId:3},{value:"The global animation is controlled by Graph instance. It takes effect when some global changes happen, such as:",paraId:4,tocIndex:0},{value:"graph.updateLayout(cfg)",paraId:5,tocIndex:0},{value:"Configure ",paraId:6,tocIndex:0},{value:"animate: true",paraId:6,tocIndex:0},{value:" when instantiating a graph to achieve it.",paraId:6,tocIndex:0},{value:"Example",paraId:7,tocIndex:0},{value:"const graph = new G6.Graph({\n  // ...                      // Other configurations\n  animate: true, // Boolean, whether to activate the animation when global changes happen\n});\n",paraId:8,tocIndex:0},{value:"G6 allows user to customize animation for item when register a type of custom item. ",paraId:9,tocIndex:1},{value:" ",paraId:9,tocIndex:1},{value:"For more cases, please refer to ",paraId:10,tocIndex:1},{value:"Animation Case",paraId:11,tocIndex:1},{value:".",paraId:10,tocIndex:1}]},37560:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"G6 encapsulates a set of interaction behaviors. Now we add simple some behaviors to ",paraId:0},{value:"Tutorial Demo",paraId:0},{value:": hover node, click node, click edge, drag cavas, zoom canvas. The expected result:",paraId:0},{value:" Figure 1 **Tutorial Demo** with interaction behaviors",paraId:1},{value:"G6 provides several ",paraId:2,tocIndex:1},{value:"Built-in",paraId:2,tocIndex:1},{value:" interaction behaviors. You can enable these behaviors conveniently:",paraId:2,tocIndex:1},{value:"drag-canvas",paraId:3,tocIndex:1},{value:": enable the canvas to be dragged;",paraId:3,tocIndex:1},{value:"zoom-canvas",paraId:3,tocIndex:1},{value:": enable the canvas to be zoomed;",paraId:3,tocIndex:1},{value:"Refer to ",paraId:4,tocIndex:1},{value:"Interaction Behavior",paraId:5,tocIndex:1},{value:" document for more information.",paraId:4,tocIndex:1},{value:"Mode is a mechanism for state management in G6. One mode is a set of several Behaviors. You can assemble different Behaviors to modes. The concept of mode is too complicated to understand for the beginners of G6. You do not need to know it well in this tutorial. For more information, please refer to ",paraId:6,tocIndex:2},{value:"Interaction Mode",paraId:7,tocIndex:2},{value:".",paraId:6,tocIndex:2},{value:"State",paraId:8,tocIndex:3},{value:" is a mechanism of item state in G6. You can set different item styles for different states. When the state of an item is changed, the style will be updated automatically. For example, set the state ",paraId:9,tocIndex:3},{value:"'click'",paraId:9,tocIndex:3},{value:" of a node as ",paraId:9,tocIndex:3},{value:"true",paraId:9,tocIndex:3},{value:" or ",paraId:9,tocIndex:3},{value:"false",paraId:9,tocIndex:3},{value:", and set the node style of the state ",paraId:9,tocIndex:3},{value:"'click'",paraId:9,tocIndex:3},{value:" with thicker stroke. This style will take effect when the state ",paraId:9,tocIndex:3},{value:"'click'",paraId:9,tocIndex:3},{value:" is switched to ",paraId:9,tocIndex:3},{value:"true",paraId:9,tocIndex:3},{value:", and restore when ",paraId:9,tocIndex:3},{value:"'click'",paraId:9,tocIndex:3},{value:" state is switched to ",paraId:9,tocIndex:3},{value:"false",paraId:9,tocIndex:3},{value:". There will be a specific in the Usage part.",paraId:9,tocIndex:3},{value:"Only assign ",paraId:10,tocIndex:5},{value:"modes",paraId:10,tocIndex:5},{value:" when instantiating the graph, the corresponding built-in Behaviors will be enabled:",paraId:10,tocIndex:5},{value:"const graph = new G6.Graph({\n  // ...                                          // Other configurations\n  modes: {\n    default: ['drag-canvas', 'zoom-canvas', 'drag-node'], // Allow users to drag canvas, zoom canvas, and drag nodes\n  },\n});\n",paraId:11,tocIndex:5},{value:"The code above uses the Behaviors by assigning their types. Besides, you can also configure the parameters for them, e.g. the sensitivity of zooming, max/min zoom ratio. Refer to ",paraId:12,tocIndex:5},{value:"Ineteraction Behavior",paraId:13,tocIndex:5},{value:" document for more detail.",paraId:12,tocIndex:5},{value:"modes",paraId:14,tocIndex:5},{value:" object above defines a set of interaction modes of the graph, where ",paraId:14,tocIndex:5},{value:"default",paraId:14,tocIndex:5},{value:" is the default mode, which includes ",paraId:14,tocIndex:5},{value:"'drag-canvas'",paraId:14,tocIndex:5},{value:", ",paraId:14,tocIndex:5},{value:"'zoom-canvas'",paraId:14,tocIndex:5},{value:", and ",paraId:14,tocIndex:5},{value:"'drag-node'",paraId:14,tocIndex:5},{value:". You can add more modes with their Behaviors into ",paraId:14,tocIndex:5},{value:"modes",paraId:14,tocIndex:5},{value:", e.g. ",paraId:14,tocIndex:5},{value:"edit",paraId:14,tocIndex:5},{value:" mode:",paraId:14,tocIndex:5},{value:"// Different modes with different Behaviors\nmodes: {\n  default: ['drag-canvas'],\n  edit: []\n}\n",paraId:15,tocIndex:5},{value:"Refer to ",paraId:16,tocIndex:5},{value:"Interaction Mode",paraId:17,tocIndex:5},{value:" and ",paraId:16,tocIndex:5},{value:"Interaction Behavior",paraId:18,tocIndex:5},{value:" document for more detail.",paraId:16,tocIndex:5},{value:"Sometimes, the styles of the items interacted by users should be updated to make the response. As shown in figure 1, the styles are changed when user hovers the node, clicks the node, and clicks the edge. It is achieved by ",paraId:19,tocIndex:6},{value:"State",paraId:20,tocIndex:6},{value:" mechanism. In other word, whether the item is clicked or hovered can be described as some states. You are able to set the styles for different states by two steps:",paraId:19,tocIndex:6},{value:"Step 1: Set the styles for different states;",paraId:21,tocIndex:6},{value:"Step 2: Listen to the relative events and switch the states.",paraId:21,tocIndex:6},{value:"Set the state styles by ",paraId:22,tocIndex:7},{value:"nodeStateStyles",paraId:22,tocIndex:7},{value:" and ",paraId:22,tocIndex:7},{value:"edgeStateStyles",paraId:22,tocIndex:7},{value:" for nodes and edges respectively when instantiating a Graph. ",paraId:22,tocIndex:7},{value:"The relative requirements in ",paraId:22,tocIndex:7},{value:"Tutorial Demo",paraId:22,tocIndex:7},{value:" are:",paraId:22,tocIndex:7},{value:"The color of the node is changed when mouse hover it;",paraId:23,tocIndex:7},{value:"The stroke of the node gets thicker and darker when user clicks it;",paraId:23,tocIndex:7},{value:"The edge become blue when user clicks it.",paraId:23,tocIndex:7},{value:"The following code sets the styles for nodes in the state of ",paraId:24,tocIndex:7},{value:"hover",paraId:24,tocIndex:7},{value:" and ",paraId:24,tocIndex:7},{value:"click",paraId:24,tocIndex:7},{value:"( = ",paraId:24,tocIndex:7},{value:"true",paraId:24,tocIndex:7},{value:"), and the styles for edges in the state of ",paraId:24,tocIndex:7},{value:"click",paraId:24,tocIndex:7},{value:" ( = ",paraId:24,tocIndex:7},{value:"true",paraId:24,tocIndex:7},{value:"):",paraId:24,tocIndex:7},{value:"const graph = new G6.Graph({\n  // ...                           // Other configurations\n  // The set of styles of nodes in different states\n  nodeStateStyles: {\n    // The node style when the state 'hover' is true\n    hover: {\n      fill: 'lightsteelblue',\n    },\n    // The node style when the state 'click' is true\n    click: {\n      stroke: '#000',\n      lineWidth: 3,\n    },\n  },\n  // The edge styles in different states\n  edgeStateStyles: {\n    // The edge style when the state 'click' is true\n    click: {\n      stroke: 'steelblue',\n    },\n  },\n});\n",paraId:25,tocIndex:7},{value:"The listeners in G6 are mounted on the instance of Graph. ",paraId:26,tocIndex:8},{value:"graph",paraId:26,tocIndex:8},{value:" is the instance of G6.Graph in the following code. ",paraId:26,tocIndex:8},{value:"graph.on()",paraId:26,tocIndex:8},{value:" listens some event (",paraId:26,tocIndex:8},{value:"click",paraId:26,tocIndex:8},{value:" / ",paraId:26,tocIndex:8},{value:"mouseenter",paraId:26,tocIndex:8},{value:" / ",paraId:26,tocIndex:8},{value:"mouseleave",paraId:26,tocIndex:8},{value:" / ... all the events are collected in: ",paraId:26,tocIndex:8},{value:"Event API",paraId:27,tocIndex:8},{value:"）of some type of item（",paraId:26,tocIndex:8},{value:"node",paraId:26,tocIndex:8},{value:" / ",paraId:26,tocIndex:8},{value:"edge",paraId:26,tocIndex:8},{value:"）",paraId:26,tocIndex:8},{value:"// add listener on graph\ngraph.on('itemType:event', (e) => {\n  // do something\n});\n",paraId:28,tocIndex:8},{value:"Now, we add listeners to graph for ",paraId:29,tocIndex:8},{value:"Tutorial Demo",paraId:29,tocIndex:8},{value:", and update the states by ",paraId:29,tocIndex:8},{value:"graph.setItemState()",paraId:29,tocIndex:8},{value:":",paraId:29,tocIndex:8},{value:"// Mouse enter a node\ngraph.on('node:mouseenter', (e) => {\n  const nodeItem = e.item; // Get the target item\n  graph.setItemState(nodeItem, 'hover', true); // Set the state 'hover' of the item to be true\n});\n\n// Mouse leave a node\ngraph.on('node:mouseleave', (e) => {\n  const nodeItem = e.item; // Get the target item\n  graph.setItemState(nodeItem, 'hover', false); // Set the state 'hover' of the item to be false\n});\n\n// Click a node\ngraph.on('node:click', (e) => {\n  // Swich the 'click' state of the node to be false\n  const clickNodes = graph.findAllByState('node', 'click');\n  clickNodes.forEach((cn) => {\n    graph.setItemState(cn, 'click', false);\n  });\n  const nodeItem = e.item; // et the clicked item\n  graph.setItemState(nodeItem, 'click', true); // Set the state 'click' of the item to be true\n});\n\n// Click an edge\ngraph.on('edge:click', (e) => {\n  // Swich the 'click' state of the edge to be false\n  const clickEdges = graph.findAllByState('edge', 'click');\n  clickEdges.forEach((ce) => {\n    graph.setItemState(ce, 'click', false);\n  });\n  const edgeItem = e.item; // Get the clicked item\n  graph.setItemState(edgeItem, 'click', true); // Set the state 'click' of the item to be true\n});\n",paraId:30,tocIndex:8},{value:"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Tutorial Demo</title>\n  </head>\n  <body>\n    <div id=\"mountNode\"></div>\n    <script src=\"https://gw.alipayobjects.com/os/antv/pkg/_antv.g6-3.7.1/dist/g6.min.js\"><\/script>\n    \x3c!-- 4.x and later versions --\x3e\n    \x3c!-- <script src=\"https://gw.alipayobjects.com/os/lib/antv/g6/4.3.11/dist/g6.min.js\"><\/script> --\x3e\n    <script>\n      const graph = new G6.Graph({\n        container: 'mountNode',\n        width: 800,\n        height: 600,\n        // Default properties for all the nodes\n        defaultNode: {\n          labelCfg: {\n            style: {\n              fill: '#fff',\n            },\n          },\n        },\n        // Default properties for all the edges\n        defaultEdge: {\n          labelCfg: {\n            autoRotate: true,\n          },\n        },\n        // The node styles in different states\n        nodeStateStyles: {\n          // The node style when the state 'hover' is true\n          hover: {\n            fill: 'lightsteelblue',\n          },\n          // The node style when the state 'click' is true\n          click: {\n            stroke: '#000',\n            lineWidth: 3,\n          },\n        },\n        // The edge styles in different states\n        edgeStateStyles: {\n          // The edge style when the state 'click' is true\n          click: {\n            stroke: 'steelblue',\n          },\n        },\n        // Layout\n        layout: {\n          type: 'force',\n          linkDistance: 100,\n          preventOverlap: true,\n          nodeStrength: -30,\n          edgeStrength: 0.1,\n        },\n        // Built-in Behaviors\n        modes: {\n          default: ['drag-canvas', 'zoom-canvas', 'drag-node'],\n        },\n      });\n\n      const main = async () => {\n        const response = await fetch(\n          'https://gw.alipayobjects.com/os/basement_prod/6cae02ab-4c29-44b2-b1fd-4005688febcb.json',\n        );\n        const remoteData = await response.json();\n\n        const nodes = remoteData.nodes;\n        const edges = remoteData.edges;\n        nodes.forEach((node) => {\n          if (!node.style) {\n            node.style = {};\n          }\n          node.style.lineWidth = 1;\n          node.style.stroke = '#666';\n          node.style.fill = 'steelblue';\n          switch (node.class) {\n            case 'c0': {\n              node.type = 'circle';\n              node.size = 30;\n              break;\n            }\n            case 'c1': {\n              node.type = 'rect';\n              node.size = [35, 20];\n              break;\n            }\n            case 'c2': {\n              node.type = 'ellipse';\n              node.size = [35, 20];\n              break;\n            }\n          }\n        });\n        edges.forEach((edge) => {\n          if (!edge.style) {\n            edge.style = {};\n          }\n          edge.style.lineWidth = edge.weight;\n          edge.style.opacity = 0.6;\n          edge.style.stroke = 'grey';\n        });\n\n        graph.data(remoteData);\n        graph.render();\n\n        // Mouse enter a node\n        graph.on('node:mouseenter', (e) => {\n          const nodeItem = e.item; // Get the target item\n          graph.setItemState(nodeItem, 'hover', true); // Set the state 'hover' of the item to be true\n        });\n\n        // Mouse leave a node\n        graph.on('node:mouseleave', (e) => {\n          const nodeItem = e.item; // Get the target item\n          graph.setItemState(nodeItem, 'hover', false); // Set the state 'hover' of the item to be false\n        });\n\n        // Click a node\n        graph.on('node:click', (e) => {\n          // Swich the 'click' state of the node to be false\n          const clickNodes = graph.findAllByState('node', 'click');\n          clickNodes.forEach((cn) => {\n            graph.setItemState(cn, 'click', false);\n          });\n          const nodeItem = e.item; // et the clicked item\n          graph.setItemState(nodeItem, 'click', true); // Set the state 'click' of the item to be true\n        });\n\n        // Click an edge\n        graph.on('edge:click', (e) => {\n          // Swich the 'click' state of the edge to be false\n          const clickEdges = graph.findAllByState('edge', 'click');\n          clickEdges.forEach((ce) => {\n            graph.setItemState(ce, 'click', false);\n          });\n          const edgeItem = e.item; // Get the clicked item\n          graph.setItemState(edgeItem, 'click', true); // Set the state 'click' of the item to be true\n        });\n      };\n      main();\n    <\/script>\n  </body>\n</html>\n",paraId:31,tocIndex:9},{value:"⚠️Attention:",paraId:32,tocIndex:9},{value:" ",paraId:32,tocIndex:9},{value:"Replace the url ",paraId:32,tocIndex:9},{value:"'https://gw.alipayobjects.com/os/basement_prod/6cae02ab-4c29-44b2-b1fd-4005688febcb.json'",paraId:32,tocIndex:9},{value:" to change the data into yours.",paraId:32,tocIndex:9}]},77391:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"There are ",paraId:0},{value:"Node",paraId:0},{value:" and ",paraId:0},{value:"Edge",paraId:0},{value:" two types of items in a graph. In the last chapter, we rendered the ",paraId:0},{value:"Tutorial Demo",paraId:0},{value:" with items with rough styles. Now, we are going to beautify the items while introducing the properties of the items.",paraId:0},{value:"Figure 1  The ",paraId:1},{value:"Tutorial Demo",paraId:1},{value:" with cofigured items.",paraId:1},{value:"There are ",paraId:2,tocIndex:1},{value:"Node",paraId:2,tocIndex:1},{value:" and ",paraId:2,tocIndex:1},{value:"Edge",paraId:2,tocIndex:1},{value:" two types of items in a graph. Several ",paraId:2,tocIndex:1},{value:"Built-in Nodes",paraId:3,tocIndex:1},{value:" and ",paraId:2,tocIndex:1},{value:"Built-in Edges",paraId:4,tocIndex:1},{value:" are provided by G6. The main difference between different types of items is their ",paraId:2,tocIndex:1},{value:"Graphics Shape",paraId:5,tocIndex:1},{value:". For example, a node's graphics type can be a circle, a rect, an image, or others.",paraId:2,tocIndex:1},{value:"The properties of an item can be be divided into two categories:",paraId:6,tocIndex:2},{value:"Style Property ",paraId:7,tocIndex:2},{value:"style",paraId:7,tocIndex:2},{value:": Corresponds to the style in Canvas. When the ",paraId:7,tocIndex:2},{value:"State",paraId:8,tocIndex:2},{value:" of an item is changed, the style can be updated. It is an object named ",paraId:7,tocIndex:2},{value:"style",paraId:7,tocIndex:2},{value:";",paraId:7,tocIndex:2},{value:"Other Property",paraId:7,tocIndex:2},{value:": Such as graphics ",paraId:7,tocIndex:2},{value:"type",paraId:7,tocIndex:2},{value:", ",paraId:7,tocIndex:2},{value:"id",paraId:7,tocIndex:2},{value:", they are a kind of properties that will not be changed when the ",paraId:7,tocIndex:2},{value:"State",paraId:9,tocIndex:2},{value:" of the item is changed.",paraId:7,tocIndex:2},{value:"For example, When you change the state ",paraId:10,tocIndex:2},{value:"'hover'",paraId:10,tocIndex:2},{value:" or ",paraId:10,tocIndex:2},{value:"'click'",paraId:10,tocIndex:2},{value:" to ",paraId:10,tocIndex:2},{value:"true",paraId:10,tocIndex:2},{value:" for a node A, only the ",paraId:10,tocIndex:2},{value:"style properties",paraId:10,tocIndex:2},{value:" of A can be updated, e.g. ",paraId:10,tocIndex:2},{value:"fill",paraId:10,tocIndex:2},{value:", ",paraId:10,tocIndex:2},{value:"stroke",paraId:10,tocIndex:2},{value:", and so on. The ",paraId:10,tocIndex:2},{value:"other properties",paraId:10,tocIndex:2},{value:" such as ",paraId:10,tocIndex:2},{value:"type",paraId:10,tocIndex:2},{value:" can not be changed. To update the other properties, configure A by ",paraId:10,tocIndex:2},{value:"graph.updateItem",paraId:11,tocIndex:2},{value:" manually.",paraId:10,tocIndex:2},{value:"The data structure of a node:",paraId:12,tocIndex:3},{value:"{\n\tid: 'node0',          // Unique id of the node\n  type: 'circle',      // The type of graphics shape of the node\n  size: 40,             // The size\n  label: 'node0'        // The label\n  visible: true,        // Controls the visible of the node when first render. false means hide the item. All the items are visible by default\n  labelCfg: {           // The configurations for the label\n    positions: 'center',// The relative position of the label\n    style: {            // The style properties of the label\n      fontSize: 12,     // The font size of the label\n      // ...            // Other style properties of the label\n    }\n  }\n  // ...,               // Other properties of the node\n  style: {              // The object of style properties of the node\n    fill: '#000',       // The filling color\n    stroke: '#888',     // The stroke color\n    // ...              // Other styleattribtues of the node\n  }\n}\n",paraId:13,tocIndex:3},{value:"The data structure of an edge is similar to node, but two more properties ",paraId:14,tocIndex:3},{value:"source",paraId:14,tocIndex:3},{value:" and ",paraId:14,tocIndex:3},{value:"target",paraId:14,tocIndex:3},{value:" in addition, representing the ",paraId:14,tocIndex:3},{value:"id",paraId:14,tocIndex:3},{value:" of the source node and the ",paraId:14,tocIndex:3},{value:"id",paraId:14,tocIndex:3},{value:" of the target node respectively.",paraId:14,tocIndex:3},{value:"We can refine the visual requirements in figure 1 of ",paraId:15,tocIndex:3},{value:"Tutorial Demo",paraId:15,tocIndex:3},{value:" into:",paraId:15,tocIndex:3},{value:"Visual Effect:\n",paraId:16,tocIndex:3},{value:"R1: Set the color for stroke and filling for nodes with ",paraId:17,tocIndex:3},{value:"fill",paraId:17,tocIndex:3},{value:" and ",paraId:17,tocIndex:3},{value:"stroke",paraId:17,tocIndex:3},{value:";",paraId:17,tocIndex:3},{value:"R2: Set the color for the label with ",paraId:17,tocIndex:3},{value:"labelCfg",paraId:17,tocIndex:3},{value:";",paraId:17,tocIndex:3},{value:"R3: Set the opacity and color for edges with ",paraId:17,tocIndex:3},{value:"opacity",paraId:17,tocIndex:3},{value:"，",paraId:17,tocIndex:3},{value:"stroke",paraId:17,tocIndex:3},{value:";",paraId:17,tocIndex:3},{value:"R4: Set the direction of the label with ",paraId:17,tocIndex:3},{value:"labelCfg",paraId:17,tocIndex:3},{value:";",paraId:17,tocIndex:3},{value:"Map the data to visual channels:\n",paraId:16,tocIndex:3},{value:"R5: Configure the type of nodes with ",paraId:18,tocIndex:3},{value:"type",paraId:18,tocIndex:3},{value:" according to the property ",paraId:18,tocIndex:3},{value:"class",paraId:18,tocIndex:3},{value:" in node data;",paraId:18,tocIndex:3},{value:"R6: Configure the line widht of edges with ",paraId:18,tocIndex:3},{value:"lineWidth",paraId:18,tocIndex:3},{value:" according to the property ",paraId:18,tocIndex:3},{value:"weight",paraId:18,tocIndex:3},{value:" in edge data.",paraId:18,tocIndex:3},{value:"To satisfy different scenario, G6 provides 7 ways to configure the properties for items. Here we will only introduce two of them:",paraId:19,tocIndex:4},{value:"Configure the global properties when instantiating a Graph;",paraId:20,tocIndex:4},{value:"Configure the properties for different items in their data.",paraId:20,tocIndex:4},{value:"Applicable Scene:",paraId:21,tocIndex:5},{value:" Unify the configurations for all the nodes or edges. ",paraId:21,tocIndex:5},{value:"Usage:",paraId:21,tocIndex:5},{value:" Configure it with two configurations of graph:",paraId:21,tocIndex:5},{value:"defaultNode",paraId:22,tocIndex:5},{value:": The ",paraId:22,tocIndex:5},{value:"Style Property",paraId:22,tocIndex:5},{value:" and ",paraId:22,tocIndex:5},{value:"Other Properties",paraId:22,tocIndex:5},{value:" in the default state;",paraId:22,tocIndex:5},{value:"defaultEdge",paraId:22,tocIndex:5},{value:": The ",paraId:22,tocIndex:5},{value:"Style Property",paraId:22,tocIndex:5},{value:" and ",paraId:22,tocIndex:5},{value:"Other Properties",paraId:22,tocIndex:5},{value:" in the default state.",paraId:22,tocIndex:5},{value:"⚠️Attention:",paraId:23,tocIndex:5},{value:" It is a way of unified global configuration, which does not distinguish the nodes with different properties (e.g. ",paraId:23,tocIndex:5},{value:"class",paraId:23,tocIndex:5},{value:" and ",paraId:23,tocIndex:5},{value:"weight",paraId:23,tocIndex:5},{value:") in their data. That is to say, only R1, R2, R3, and R4 can be satisfied now:",paraId:23,tocIndex:5},{value:"Figure 2  ",paraId:24,tocIndex:5},{value:"Tutorial Demo",paraId:24,tocIndex:5},{value:" with items configured by global configurations.",paraId:24,tocIndex:5},{value:"Configure the ",paraId:25,tocIndex:5},{value:"defaultNode",paraId:25,tocIndex:5},{value:" and ",paraId:25,tocIndex:5},{value:"defaultEdge",paraId:25,tocIndex:5},{value:" for graph to achieve the expected effect:",paraId:25,tocIndex:5},{value:"const graph = new G6.Graph({\n  // ...                   // Other configurations of the graph\n  // The style properties and other properties for all the nodes in the default state\n  defaultNode: {\n    size: 30, // The size of nodes\n    // ...                 // The other properties\n    // The style properties of nodes\n    style: {\n      fill: 'steelblue', // The filling color of nodes\n      stroke: '#666', // The stroke color of nodes\n      lineWidth: 1, // The line width of the stroke of nodes\n    },\n    // The properties for label of nodes\n    labelCfg: {\n      // The style properties for the label\n      style: {\n        fill: '#fff', // The color of the text\n      },\n    },\n  },\n  // The style properties and other properties for all the edges in the default state\n  defaultEdge: {\n    // ...                 // The other properties\n    // The style properties of edges\n    style: {\n      opacity: 0.6, // The opacity of edges\n      stroke: 'grey', // The color of the edges\n    },\n    // The properties for label of edges\n    labelCfg: {\n      autoRotate: true, // Whether to rotate the label according to the edges\n    },\n  },\n});\n",paraId:26,tocIndex:5},{value:"Applicable Scene:",paraId:27,tocIndex:6},{value:" By this way, you can configure different items according to their properties in data. ",paraId:27,tocIndex:6},{value:"Thus, the R5 and R6 can be satisfied now. ",paraId:27,tocIndex:6},{value:"Usage:",paraId:27,tocIndex:6},{value:" Write the properties into each item data, or traverse the data to assign the properties. Here we show assigning the attrbiutes into data by traversing:",paraId:27,tocIndex:6},{value:"const nodes = remoteData.nodes;\nnodes.forEach((node) => {\n  if (!node.style) {\n    node.style = {};\n  }\n  switch (\n    node.class // Configure the graphics type of nodes according to their class\n  ) {\n    case 'c0': {\n      node.type = 'circle'; // The graphics type is circle when class = 'c0'\n      break;\n    }\n    case 'c1': {\n      node.type = 'rect'; // The graphics type is rect when class = 'c1'\n      node.size = [35, 20]; // The node size when class = 'c1'\n      break;\n    }\n    case 'c2': {\n      node.type = 'ellipse'; // The graphics type is ellipse when class = 'c2'\n      node.size = [35, 20]; // The node size when class = 'c2'\n      break;\n    }\n  }\n});\n\ngraph.data(remoteData);\n",paraId:28,tocIndex:6},{value:"The result:",paraId:29,tocIndex:6},{value:"Figure 3",paraId:30,tocIndex:6},{value:"From figure 3, we find some nodes are rendered as rects, some are ellipses. We also set the ",paraId:31,tocIndex:6},{value:"size",paraId:31,tocIndex:6},{value:" to override the ",paraId:31,tocIndex:6},{value:"size",paraId:31,tocIndex:6},{value:" in global configuration. The ",paraId:31,tocIndex:6},{value:"size",paraId:31,tocIndex:6},{value:" is an array when the node is a rect or an ellipse. We did not set the ",paraId:31,tocIndex:6},{value:"size",paraId:31,tocIndex:6},{value:" for circle node, so ",paraId:31,tocIndex:6},{value:"size: 30",paraId:31,tocIndex:6},{value:" in global configuration will still take effect for circle node. That is to say, configuring items by writing into data has higher priority than global configurations.",paraId:31,tocIndex:6},{value:"We further set the line widths for edges according to their weight:",paraId:32,tocIndex:6},{value:"// const nodes = ...\n\n// Traverse the egdes data\nconst edges = remoteData.edges;\nedges.forEach((edge) => {\n  if (!edge.style) {\n    edge.style = {};\n  }\n  edge.style.lineWidth = edge.weight; // Mapping the weight in data to lineWidth\n});\n\ngraph.data(remoteData);\n",paraId:33,tocIndex:6},{value:"The result:",paraId:34,tocIndex:6},{value:"The line width of the edges takes effect in the figure above. But the opacity and color setted in the global configurations are lost. The reason is that the global ",paraId:35,tocIndex:6},{value:"style",paraId:35,tocIndex:6},{value:" object in graph instance is overrided by the second configure method. The solution is move all the styles to the data:",paraId:35,tocIndex:6},{value:"const graph = new G6.Graph({\n  // ...\n  defaultEdge: {\n    // Remove the style here\n    labelCfg: {\n      // The properties for label of edges\n      autoRotate: true, // Whether to rotate the label according to the edges\n    },\n  },\n});\n\n// Traverse the nodes data\n// const nodes = ...\n// nodes.forEach ...\n\n// Traverse the egdes data\nconst edges = remoteData.edges;\nedges.forEach((edge) => {\n  if (!edge.style) {\n    edge.style = {};\n  }\n  edge.style.lineWidth = edge.weight; // Mapping the weight in data to lineWidth\n  // The styles are moved to here\n  opt.style.opacity = 0.6;\n  opt.style.stroke = 'grey';\n});\n\ngraph.data(remoteData);\ngraph.render();\n",paraId:36,tocIndex:6},{value:"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Tutorial Demo</title>\n  </head>\n  <body>\n    <div id=\"mountNode\"></div>\n    <script src=\"https://gw.alipayobjects.com/os/antv/pkg/_antv.g6-3.7.1/dist/g6.min.js\"><\/script>\n    \x3c!-- 4.x and later versions --\x3e\n    \x3c!-- <script src=\"https://gw.alipayobjects.com/os/lib/antv/g6/4.3.11/dist/g6.min.js\"><\/script> --\x3e\n    <script>\n      const graph = new G6.Graph({\n        container: 'mountNode',\n        width: 800,\n        height: 600,\n        fitView: true,\n        fitViewPadding: [20, 40, 50, 20],\n        defaultNode: {\n          size: 30,\n          labelCfg: {\n            style: {\n              fill: '#fff',\n            },\n          },\n        },\n        defaultEdge: {\n          labelCfg: {\n            autoRotate: true,\n          },\n        },\n      });\n      const main = async () => {\n        const response = await fetch(\n          'https://gw.alipayobjects.com/os/basement_prod/6cae02ab-4c29-44b2-b1fd-4005688febcb.json',\n        );\n        const remoteData = await response.json();\n        const nodes = remoteData.nodes;\n        const edges = remoteData.edges;\n        nodes.forEach((node) => {\n          if (!node.style) {\n            node.style = {};\n          }\n          node.style.lineWidth = 1;\n          node.style.stroke = '#666';\n          node.style.fill = 'steelblue';\n          switch (node.class) {\n            case 'c0': {\n              node.type = 'circle';\n              break;\n            }\n            case 'c1': {\n              node.type = 'rect';\n              node.size = [35, 20];\n              break;\n            }\n            case 'c2': {\n              node.type = 'ellipse';\n              node.size = [35, 20];\n              break;\n            }\n          }\n        });\n        edges.forEach((edge) => {\n          if (!edge.style) {\n            edge.style = {};\n          }\n          edge.style.lineWidth = edge.weight;\n          edge.style.opacity = 0.6;\n          edge.style.stroke = 'grey';\n        });\n\n        graph.data(remoteData);\n        graph.render();\n      };\n      main();\n    <\/script>\n  </body>\n</html>\n",paraId:37,tocIndex:7},{value:"⚠️Attention:",paraId:38,tocIndex:7},{value:" ",paraId:38,tocIndex:7},{value:"Replace the url ",paraId:38,tocIndex:7},{value:"'https://gw.alipayobjects.com/os/basement_prod/6cae02ab-4c29-44b2-b1fd-4005688febcb.json'",paraId:38,tocIndex:7},{value:" to change the data into yours.",paraId:38,tocIndex:7}]},94206:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"Congratulations! You have created a graph visualization powered by G6. You have learnt:",paraId:0},{value:"Basic rendering;",paraId:1},{value:"Load remote data;",paraId:1},{value:"Configure the graph and items;",paraId:1},{value:"Utilize layout;",paraId:1},{value:"Add interaction behavior;",paraId:1},{value:"Add tools.",paraId:1},{value:"Complete Code of Tutorial Demo",paraId:2},{value:".",paraId:2},{value:"If you wish to go further in G6, please check out ",paraId:3},{value:"Key Concept in G6",paraId:4},{value:"; For further information, check out ",paraId:3},{value:"Further Reading",paraId:5},{value:".",paraId:3},{value:"You can also refer to ",paraId:6},{value:"G6 API",paraId:7},{value:" during the process of development.",paraId:6}]},73976:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"In this chapter, we preliminary configure and render the ",paraId:0},{value:"Tutorial Demo",paraId:0},{value:". You will learn the common configurations of Graph.",paraId:0},{value:"Create an HTML container for graph canvas, ",paraId:1,tocIndex:1},{value:"div",paraId:1,tocIndex:1},{value:" tag in general. G6 will append a ",paraId:1,tocIndex:1},{value:"canvas",paraId:1,tocIndex:1},{value:" tag to it and draw graph on the ",paraId:1,tocIndex:1},{value:"canvas",paraId:1,tocIndex:1},{value:".",paraId:1,tocIndex:1},{value:'<body>\n  <div id="mountNode"></div>\n\n  \x3c!-- Import G6 --\x3e\n  \x3c!-- ... --\x3e\n</body>\n',paraId:2,tocIndex:1},{value:"The data for G6 should be JSON format, includes array properties ",paraId:3,tocIndex:2},{value:"nodes",paraId:3,tocIndex:2},{value:" and ",paraId:3,tocIndex:2},{value:"edges",paraId:3,tocIndex:2},{value:":",paraId:3,tocIndex:2},{value:"<script>\n  // console.log(G6.Global.version);\n  const initData = {\n    // The array of nodes\n    nodes: [\n      {\n        id: 'node1', // String, unique and required\n        x: 100, // Number, the x coordinate\n        y: 200, // Number, the y coordinate\n        label: 'Source', // The label of the node\n      },\n      {\n        id: 'node2',\n        x: 300,\n        y: 200,\n        label: 'Target',\n      },\n    ],\n    // The array of edges\n    edges: [\n      // An edge links from node1 to node2\n      {\n        source: 'node1', // String, required, the id of the source node\n        target: 'node2', // String, required, the id of the target node\n        label: 'I am an edge', // The label of the edge\n      },\n    ],\n  };\n<\/script>\n",paraId:4,tocIndex:2},{value:"⚠️Attention:",paraId:5,tocIndex:2},{value:"nodes",paraId:6,tocIndex:2},{value:" is an array of nodes, the ",paraId:6,tocIndex:2},{value:"id",paraId:6,tocIndex:2},{value:" is an unique and required property; the ",paraId:6,tocIndex:2},{value:"x",paraId:6,tocIndex:2},{value:" and ",paraId:6,tocIndex:2},{value:"y",paraId:6,tocIndex:2},{value:" are the coordinates of the node;",paraId:6,tocIndex:2},{value:"edges",paraId:6,tocIndex:2},{value:" is an array of edges, ",paraId:6,tocIndex:2},{value:"source",paraId:6,tocIndex:2},{value:" and ",paraId:6,tocIndex:2},{value:"target",paraId:6,tocIndex:2},{value:" are required, represent the ",paraId:6,tocIndex:2},{value:"id",paraId:6,tocIndex:2},{value:" of the source node and the ",paraId:6,tocIndex:2},{value:"id",paraId:6,tocIndex:2},{value:" of the target node respectively.",paraId:6,tocIndex:2},{value:"The properties of node and edge are described in ",paraId:6,tocIndex:2},{value:"Built-in Nodes",paraId:7,tocIndex:2},{value:" and ",paraId:6,tocIndex:2},{value:"Built-in Edges",paraId:8,tocIndex:2},{value:" document.",paraId:6,tocIndex:2},{value:"The container, width, and height are required configurations when instantiating a Graph:",paraId:9,tocIndex:3},{value:"<script>\n  // const initData = { ... }\n  const graph = new G6.Graph({\n    container: 'mountNode', // String | HTMLElement, required, the id of DOM element or an HTML node\n    width: 800, // Number, required, the width of the graph\n    height: 500, // Number, required, the height of the graph\n  });\n<\/script>\n",paraId:10,tocIndex:3},{value:"Load data and render are two separated steps.",paraId:11,tocIndex:4},{value:"<script>\n  // const initData = { ... }\n  //  const graph = ...\n  graph.data(data); // Load the data defined in Step 2\n  graph.render(); // Render the graph\n<\/script>\n",paraId:12,tocIndex:4},{value:"After calling ",paraId:13,tocIndex:5},{value:"graph.render()",paraId:13,tocIndex:5},{value:" , G6 will render the graph according to the data.",paraId:13,tocIndex:5},{value:"In the above demo, we render a graph with two nodes and one edge defined in the code directly. For real scenario, the data might be loaded remotely. We prepare the JSON data for ",paraId:14,tocIndex:6},{value:"Tutorial Demo",paraId:14,tocIndex:6},{value:" with the address: ",paraId:14,tocIndex:6},{value:"https://gw.alipayobjects.com/os/basement_prod/6cae02ab-4c29-44b2-b1fd-4005688febcb.json",paraId:14,tocIndex:6},{value:"Modify index.html to load remote data asynchronously by ",paraId:15,tocIndex:7},{value:"fetch",paraId:15,tocIndex:7},{value:", and pass it to the instance of G6 Graph:",paraId:15,tocIndex:7},{value:"<script>\n  //  const graph = ...\n  const main = async () => {\n    const response = await fetch(\n      'https://gw.alipayobjects.com/os/basement_prod/6cae02ab-4c29-44b2-b1fd-4005688febcb.json',\n    );\n    const remoteData = await response.json();\n\n    // ...\n    graph.data(remoteData); // Load the remote data\n    graph.render(); // Render the graph\n  };\n  main();\n<\/script>\n",paraId:16,tocIndex:7},{value:"fetch",paraId:17,tocIndex:7},{value:" allows us to fetch the remote data asynchronously, and controll the process by ",paraId:17,tocIndex:7},{value:"async",paraId:17,tocIndex:7},{value:"/",paraId:17,tocIndex:7},{value:"await",paraId:17,tocIndex:7},{value:". If you are curious about ",paraId:17,tocIndex:7},{value:"fetch",paraId:17,tocIndex:7},{value:" and ",paraId:17,tocIndex:7},{value:"async",paraId:17,tocIndex:7},{value:"/",paraId:17,tocIndex:7},{value:"await",paraId:17,tocIndex:7},{value:", please refer to: ",paraId:17,tocIndex:7},{value:"async function",paraId:17,tocIndex:7},{value:", ",paraId:17,tocIndex:7},{value:"Fetch API",paraId:17,tocIndex:7},{value:"We will get the following result with the code above:",paraId:18,tocIndex:7},{value:"The data has been loaded correctly. But the result is a little bit strange due to the large amount of nodes and edges. Limited by the size of canvas, part of the graph is arranged out of the view. We are going to solve all these problems now.",paraId:19,tocIndex:7},{value:"Here goes a part of tutorial-data.json. There are ",paraId:20,tocIndex:7},{value:"x",paraId:20,tocIndex:7},{value:" and ",paraId:20,tocIndex:7},{value:"y",paraId:20,tocIndex:7},{value:" in node data, and some of them are not in the range of ",paraId:20,tocIndex:7},{value:"width: 800, height: 600",paraId:20,tocIndex:7},{value:".",paraId:20,tocIndex:7},{value:'{\n  "nodes": [\n    { "id": "0", "label": "n0", "class": "c0", "x": 1000, "y": -100 },\n    { "id": "1", "label": "n1", "class": "c0", "x": 300, "y": -10 }\n    //...\n  ],\n  "edges": [\n    //...\n  ]\n}\n',paraId:21,tocIndex:7},{value:"G6 will render the graph according to the position information in the data once G6 finds ",paraId:22,tocIndex:7},{value:"x",paraId:22,tocIndex:7},{value:" and ",paraId:22,tocIndex:7},{value:"y",paraId:22,tocIndex:7},{value:" in the data. This mechanism satisfies the requirement that rendering the source data. To solve the problem of the graph out of the view port partially, two configurations are provided:",paraId:22,tocIndex:7},{value:"fitView",paraId:23,tocIndex:7},{value:": Whether to fit the graph to the canvas;",paraId:23,tocIndex:7},{value:"fitViewPadding",paraId:23,tocIndex:7},{value:": The padding between the content of the graph and the borders of the canvas.",paraId:23,tocIndex:7},{value:"We modify the code about instantiating Graph as shown below:",paraId:24,tocIndex:7},{value:"const graph = new G6.Graph({\n  // ...\n  fitView: true,\n  fitViewPadding: [20, 40, 50, 20],\n});\n",paraId:25,tocIndex:7},{value:"The result from this code shows that the graph has been fitted to the canvas: ",paraId:26,tocIndex:7},{value:"The configurations below will be used in the following Tutorial:",paraId:27,tocIndex:8},{value:"Name",paraId:28,tocIndex:8},{value:"Type",paraId:28,tocIndex:8},{value:"Options / Example",paraId:28,tocIndex:8},{value:"Default",paraId:28,tocIndex:8},{value:"Description",paraId:28,tocIndex:8},{value:"fitView",paraId:28,tocIndex:8},{value:"Boolean",paraId:28,tocIndex:8},{value:"true / false",paraId:28,tocIndex:8},{value:"false",paraId:28,tocIndex:8},{value:"Whether to fit the graph to the canvas.",paraId:28,tocIndex:8},{value:"fitViewPadding",paraId:28,tocIndex:8},{value:"Number / Array",paraId:28,tocIndex:8},{value:"20 / [ 20, 40, 50, 20 ]",paraId:28,tocIndex:8},{value:"0",paraId:28,tocIndex:8},{value:"The padding between the content of the graph and the borders of the canvas.",paraId:28,tocIndex:8},{value:"animate",paraId:28,tocIndex:8},{value:"Boolean",paraId:28,tocIndex:8},{value:"true / false",paraId:28,tocIndex:8},{value:"false",paraId:28,tocIndex:8},{value:"Whether to activate the global animation.",paraId:28,tocIndex:8},{value:"modes",paraId:28,tocIndex:8},{value:"Object",paraId:28,tocIndex:8},{value:"{",paraId:28,tocIndex:8},{value:"  default: [ 'drag-node', 'drag-canvas' ]",paraId:28,tocIndex:8},{value:"}",paraId:28,tocIndex:8},{value:"null",paraId:28,tocIndex:8},{value:"The set of graph interaction modes. This is a complicated concept, refer to ",paraId:28,tocIndex:8},{value:"Mode",paraId:29,tocIndex:8},{value:" for more detial.",paraId:28,tocIndex:8},{value:"defaultNode",paraId:28,tocIndex:8},{value:"Object",paraId:28,tocIndex:8},{value:"{",paraId:28,tocIndex:8},{value:"  type: 'circle',",paraId:28,tocIndex:8},{value:"  color: '#000',",paraId:28,tocIndex:8},{value:"  style: {",paraId:28,tocIndex:8},{value:"    ......",paraId:28,tocIndex:8},{value:"  }",paraId:28,tocIndex:8},{value:"}",paraId:28,tocIndex:8},{value:"null",paraId:28,tocIndex:8},{value:"The default global properties for nodes, includes styles properties and other properties.",paraId:28,tocIndex:8},{value:"defaultEdge",paraId:28,tocIndex:8},{value:"Object",paraId:28,tocIndex:8},{value:"{",paraId:28,tocIndex:8},{value:"  type: 'polyline',",paraId:28,tocIndex:8},{value:"  color: '#000',",paraId:28,tocIndex:8},{value:"  style: {",paraId:28,tocIndex:8},{value:"    ......",paraId:28,tocIndex:8},{value:"  }",paraId:28,tocIndex:8},{value:"}",paraId:28,tocIndex:8},{value:"null",paraId:28,tocIndex:8},{value:"The default global properties for edges, includes styles properties and other properties.",paraId:28,tocIndex:8},{value:"nodeStateStyles",paraId:28,tocIndex:8},{value:"Object",paraId:28,tocIndex:8},{value:"{",paraId:28,tocIndex:8},{value:"  hover: {",paraId:28,tocIndex:8},{value:"    ......",paraId:28,tocIndex:8},{value:"  },",paraId:28,tocIndex:8},{value:"  select: {",paraId:28,tocIndex:8},{value:"    ......",paraId:28,tocIndex:8},{value:"  }",paraId:28,tocIndex:8},{value:"}",paraId:28,tocIndex:8},{value:"null",paraId:28,tocIndex:8},{value:"The style properties of nodes in different states except for default state. Such as hover, select.",paraId:28,tocIndex:8},{value:"edgeStateStyles",paraId:28,tocIndex:8},{value:"Object",paraId:28,tocIndex:8},{value:"{",paraId:28,tocIndex:8},{value:"  hover: {",paraId:28,tocIndex:8},{value:"    ......",paraId:28,tocIndex:8},{value:"  },",paraId:28,tocIndex:8},{value:"  select: {",paraId:28,tocIndex:8},{value:"    ......",paraId:28,tocIndex:8},{value:"  }",paraId:28,tocIndex:8},{value:"}",paraId:28,tocIndex:8},{value:"null",paraId:28,tocIndex:8},{value:"The style properties of edges in different states except for default state. Such as hover, select.",paraId:28,tocIndex:8},{value:'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <title>Tutorial Demo</title>\n  </head>\n  <body>\n    <div id="mountNode"></div>\n    <script src="https://gw.alipayobjects.com/os/antv/pkg/_antv.g6-3.7.1/dist/g6.min.js"><\/script>\n    \x3c!-- 4.x and later versions --\x3e\n    \x3c!-- <script src="https://gw.alipayobjects.com/os/lib/antv/g6/4.3.11/dist/g6.min.js"><\/script> --\x3e\n    <script>\n      const graph = new G6.Graph({\n        container: \'mountNode\',\n        width: 1000,\n        height: 600,\n        fitView: true,\n        fitViewPadding: [20, 40, 50, 20],\n      });\n\n      const main = async () => {\n        const response = await fetch(\n          \'https://gw.alipayobjects.com/os/basement_prod/6cae02ab-4c29-44b2-b1fd-4005688febcb.json\',\n        );\n        const remoteData = await response.json();\n        graph.data(remoteData);\n        graph.render();\n      };\n      main();\n    <\/script>\n  </body>\n</html>\n',paraId:30,tocIndex:9},{value:"⚠️ Attention:",paraId:31,tocIndex:9},{value:" Replace the url ",paraId:31,tocIndex:9},{value:"'https://gw.alipayobjects.com/os/basement_prod/6cae02ab-4c29-44b2-b1fd-4005688febcb.json'",paraId:31,tocIndex:9},{value:" to change the data into yours.",paraId:31,tocIndex:9}]},95640:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"When there is no node position information in the data, or the location information does not meet the requirements, layouts in G6 will help you to arrange the nodes. There are 9 layouts for general graph and 4 layouts for tree graph in G6:",paraId:0},{value:"Layouts for General Graph:",paraId:1},{value:"Random Layout: Randomizes the node positions;",paraId:2},{value:"Force Layout: Classical force-directed layout algorithm:",paraId:3},{value:"In force-directed layout, items are simulated as physical particals with attractive forces and repulsive forces. Lead by the forces, the nodes will move to appropriate positions to balance the forces. It is suitable for describing the relationships between objects, e.g. relationships between person, computer networks.",paraId:4},{value:"Circular Layout: Arranges the nodes on a circle;",paraId:5},{value:"Radial Layout: Arranges the nodes radially;",paraId:6},{value:"MDS Layout: Multidimensional scaling;",paraId:7},{value:"Fruchterman Layout: A kind of force-directed layout;",paraId:8},{value:"Dagre Layout: Hierarchical layout;",paraId:9},{value:"Concentric Layout: Arranges the nodes on concentrics, while the more important (measure with degree by default), the more center the node will be；",paraId:10},{value:"Grid Layout: Arranges the nodes on the grid according with order (data order by default).",paraId:11},{value:"Layouts for TreeGraph:",paraId:12},{value:"Dendrogram Layout;",paraId:13},{value:"CompactBox Layout;",paraId:13},{value:"Mindmap Layout;",paraId:13},{value:"Indented Layout.",paraId:13},{value:"For more information about each layout algorithm, please refer to ",paraId:14},{value:"Graph Layout API",paraId:15},{value:" or ",paraId:14},{value:"TreeGraph Layout API",paraId:16},{value:". We will utilize Force Layout in the tutorial.",paraId:14},{value:"We used ",paraId:17,tocIndex:0},{value:"fitView",paraId:17,tocIndex:0},{value:" to fit the graph to the canvas in the previous Tutorial. From now on, we turn it off by note the line of code below to make further improvements.",paraId:17,tocIndex:0},{value:"const graph = new G6.Graph({\n  // ...\n  // fitView: true,\n  // fitViewPadding: [ 20, 40, 50, 20 ]\n});\n",paraId:18,tocIndex:0},{value:"When the ",paraId:19,tocIndex:1},{value:"layout",paraId:19,tocIndex:1},{value:" is not assigned to graph instance:",paraId:19,tocIndex:1},{value:"If there is position information with ",paraId:20,tocIndex:1},{value:"x",paraId:20,tocIndex:1},{value:" and ",paraId:20,tocIndex:1},{value:"y",paraId:20,tocIndex:1},{value:" in node data, render with these information;",paraId:20,tocIndex:1},{value:"If there is no position information in node data, arrange the nodes with Random Layout by default.",paraId:20,tocIndex:1},{value:"It is very simple to configure a layout for a graph in G6. Just assign ",paraId:21,tocIndex:2},{value:"layout",paraId:21,tocIndex:2},{value:" to the graph when instantiating. The following code configures the layout with ",paraId:21,tocIndex:2},{value:"type: 'force'",paraId:21,tocIndex:2},{value:", which is the classical force-directed layout algorithm. And set ",paraId:21,tocIndex:2},{value:"preventOverlap: true",paraId:21,tocIndex:2},{value:" to avoid node overlappings. More configurations are described in: ",paraId:21,tocIndex:2},{value:"Graph Layout API",paraId:22,tocIndex:2},{value:" or ",paraId:21,tocIndex:2},{value:"TreeGraph Layout API",paraId:23,tocIndex:2},{value:".",paraId:21,tocIndex:2},{value:"const graph = new G6.Graph({\n  ...                      // Other configurations\n  layout: {                // Object, layout configuration. random by default\n    type: 'force',         // Force layout\n    preventOverlap: true,  // Prevent node overlappings\n    // nodeSize: 30        // The size of nodes for collide detection. Since we have assigned sizes for each node to their data in last chapter, the nodeSize here is not required any more.\n  }\n});\n",paraId:24,tocIndex:2},{value:"The result:",paraId:25,tocIndex:2},{value:"The layout balances the forces by moving the nodes. But the nodes are too crowded to show the label clearly now. ",paraId:26,tocIndex:2},{value:"linkDistance",paraId:26,tocIndex:2},{value:" in the configuration of force layout can be used to scale the edge length to keep a distance between two adjacent nodes:",paraId:26,tocIndex:2},{value:"const graph = new G6.Graph({\n  // ...\n  layout: {\n    type: 'force',\n    preventOverlap: true,\n    linkDistance: 100, // The link distance is 100\n  },\n});\n",paraId:27,tocIndex:2},{value:"The result:",paraId:28,tocIndex:2},{value:"Transformation between different layouts and configurations are described in: ",paraId:29,tocIndex:2},{value:"Layout Transformation",paraId:30,tocIndex:2},{value:".",paraId:29,tocIndex:2},{value:"Tips:",paraId:31,tocIndex:2},{value:" ",paraId:31,tocIndex:2},{value:"The layout algorithm will be executed in ",paraId:31,tocIndex:2},{value:"graph.render()",paraId:31,tocIndex:2},{value:".",paraId:31,tocIndex:2},{value:"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Tutorial Demo</title>\n  </head>\n  <body>\n    <div id=\"mountNode\"></div>\n    <script src=\"https://gw.alipayobjects.com/os/antv/pkg/_antv.g6-3.7.1/dist/g6.min.js\"><\/script>\n    \x3c!-- 4.x and later versions --\x3e\n    \x3c!-- <script src=\"https://gw.alipayobjects.com/os/lib/antv/g6/4.3.11/dist/g6.min.js\"><\/script> --\x3e\n    <script>\n      const graph = new G6.Graph({\n        container: 'mountNode',\n        width: 800,\n        height: 600,\n        defaultNode: {\n          size: 30,\n          labelCfg: {\n            style: {\n              fill: '#fff',\n            },\n          },\n        },\n        defaultEdge: {\n          labelCfg: {\n            autoRotate: true,\n          },\n        },\n        layout: {\n          type: 'force', // Force layout\n          linkDistance: 100, // The link distance is 100\n          preventOverlap: true, // Prevent node overlappings\n        },\n      });\n      const main = async () => {\n        const response = await fetch(\n          'https://gw.alipayobjects.com/os/basement_prod/6cae02ab-4c29-44b2-b1fd-4005688febcb.json',\n        );\n        const remoteData = await response.json();\n\n        const nodes = remoteData.nodes;\n        const edges = remoteData.edges;\n        nodes.forEach((node) => {\n          if (!node.style) {\n            node.style = {};\n          }\n          node.style.lineWidth = 1;\n          node.style.stroke = '#666';\n          node.style.fill = 'steelblue';\n          switch (node.class) {\n            case 'c0': {\n              node.type = 'circle';\n              break;\n            }\n            case 'c1': {\n              node.type = 'rect';\n              node.size = [35, 20];\n              break;\n            }\n            case 'c2': {\n              node.type = 'ellipse';\n              node.size = [35, 20];\n              break;\n            }\n          }\n        });\n        edges.forEach((edge) => {\n          if (!edge.style) {\n            edge.style = {};\n          }\n          edge.style.lineWidth = edge.weight;\n          edge.style.opacity = 0.6;\n          edge.style.stroke = 'grey';\n        });\n\n        graph.data(remoteData);\n        graph.render();\n      };\n      main();\n    <\/script>\n  </body>\n</html>\n",paraId:32,tocIndex:3},{value:"⚠️Attention:",paraId:33,tocIndex:3},{value:" ",paraId:33,tocIndex:3},{value:"Replace the url ",paraId:33,tocIndex:3},{value:"'https://gw.alipayobjects.com/os/basement_prod/6cae02ab-4c29-44b2-b1fd-4005688febcb.json'",paraId:33,tocIndex:3},{value:" to change the data into yours.",paraId:33,tocIndex:3}]},23279:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"To assist user to exploration a graph, G6 provides some tools, including plugins and interaction tools.",paraId:0},{value:"Now, we are going to add minimap, grid, node tooltip, and edge tooltip to ",paraId:1},{value:"Tutorial Demo",paraId:1},{value:".",paraId:1},{value:"Apply plugins with three steps:",paraId:2,tocIndex:0},{value:"  Step 1: Import the plugin;",paraId:2,tocIndex:0},{value:"  Step 2: Instantiate the plugin;",paraId:2,tocIndex:0},{value:"  Step 3: Configure plugin onto the instance of Graph.",paraId:2,tocIndex:0},{value:"Minimap is a tool for quick preview and exploration on large graph.",paraId:3,tocIndex:1},{value:"Now, we are goint to configure a minimap to ",paraId:4,tocIndex:1},{value:"Tutorial Demo",paraId:4,tocIndex:1},{value:".",paraId:4,tocIndex:1},{value:"Expected Effect",paraId:5,tocIndex:1},{value:"Usage",paraId:6,tocIndex:1},{value:"In G6, Minimap is a plugin. You only need to instantiate it and configure the minimap onto the instance of Graph:",paraId:7,tocIndex:1},{value:"// Instantiate the Minimap\nconst minimap = new G6.Minimap({\n  size: [100, 100],\n  className: 'minimap',\n  type: 'delegate',\n});\n\n// Instantiate the Graph\nconst graph = new G6.Graph({\n  // ...                           // Other configurations\n  plugins: [minimap], // Configure minimap to the graph\n});\n",paraId:8,tocIndex:1},{value:"The theory of the ",paraId:9,tocIndex:2},{value:"Minimap",paraId:10,tocIndex:2},{value:" is copy the graphics from the main graph onto the canvas of the minimap, which will lead to double rendering cost. To alleviate this problem, G6 provides another Image Minimap which is drawn by one ",paraId:9,tocIndex:2},{value:"<img />",paraId:9,tocIndex:2},{value:" instead of canvas. But you have to provide the ",paraId:9,tocIndex:2},{value:"graphImg",paraId:9,tocIndex:2},{value:" which is the url or base64 string of the main graph's screenshot image, and the image is controlled by yourself totally, which means you might need to update the image by calling ",paraId:9,tocIndex:2},{value:"minimap.updateGraphImg",paraId:9,tocIndex:2},{value:" manually when the content of the main graph is changed.",paraId:9,tocIndex:2},{value:"预期效果",paraId:11,tocIndex:2},{value:"Usage",paraId:12,tocIndex:2},{value:"graphImg",paraId:13,tocIndex:2},{value:" is required when instantiating the Image Minimap. Update the ",paraId:13,tocIndex:2},{value:"graphImg",paraId:13,tocIndex:2},{value:" for the minimap. We recommand you to update the graphImg when the main graph is updated.",paraId:13,tocIndex:2},{value:"// Instantiate the Image Minimap plugin\nconst imageMinimap = new G6.ImageMinimap({\n  width: 200,\n  graphImg: 'https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*eD7nT6tmYgAAAAAAAAAAAABkARQnAQ'\n});\nconst graph = new G6.Graph({\n  //... Other configurations\n  plugins: [imageMinimap], // Configure imageMinimap\n});\n\ngraph.data(data);\ngraph.render()\n\n... // Some operations which update the main graph\nimageMinimap.updateGraphImg(img); // Update the minimap's image (generated by yourself)\n\n",paraId:14,tocIndex:2},{value:"Grid helps to align the node while user drags it.",paraId:15,tocIndex:3},{value:"Expected Effect",paraId:16,tocIndex:3},{value:"Usage",paraId:17,tocIndex:3},{value:" Configure it onto the graph:",paraId:17,tocIndex:3},{value:"// const minimap = ...\n\n// Instantiate grid\nconst grid = new G6.Grid();\n\n// Instantiate the Graph\nconst graph = new G6.Graph({\n  // ...                        // Other configurations\n  plugins: [minimap, grid], // Configure grid onto the graph\n});\n",paraId:18,tocIndex:3},{value:"Interaction tools assist user interact a graph. Two steps are required: ",paraId:19,tocIndex:4},{value:"  Step 1: Configure ",paraId:19,tocIndex:4},{value:"modes",paraId:19,tocIndex:4},{value:" when instantiating a graph; ",paraId:19,tocIndex:4},{value:"  Step 2: Define the styles for the tools.",paraId:19,tocIndex:4},{value:"Node tooltip shows the detail information when mouse enters a node. More configurations are in ",paraId:20,tocIndex:5},{value:"Built-in tooltip",paraId:21,tocIndex:5},{value:".",paraId:20,tocIndex:5},{value:"Expected Effect",paraId:22,tocIndex:5},{value:"Usage",paraId:23,tocIndex:5},{value:"Configure ",paraId:24,tocIndex:5},{value:"'tooltip'",paraId:24,tocIndex:5},{value:" to ",paraId:24,tocIndex:5},{value:"modes",paraId:24,tocIndex:5},{value:" when instantiating the Graph:",paraId:24,tocIndex:5},{value:"const graph = new G6.Graph({\n  modes: {\n    default: [\n      // ...\n      {\n        type: 'tooltip', // Tooltip\n        formatText(model) {\n          // The content of tooltip\n          const text = 'label: ' + model.label + '<br/> class: ' + model.class;\n          return text;\n        },\n      },\n    ],\n  },\n});\n",paraId:25,tocIndex:5},{value:"Actually, tooltip is a floating ",paraId:26,tocIndex:5},{value:"<div>",paraId:26,tocIndex:5},{value:" tag of HTML. Thus, you can define the CSS style for it in ",paraId:26,tocIndex:5},{value:"<style>",paraId:26,tocIndex:5},{value:" tag:",paraId:26,tocIndex:5},{value:'<head>\n  <meta charset="UTF-8" />\n  <title>Tutorial Demo</title>\n\n  <style>\n    /* The style of the tooltip */\n    .g6-tooltip {\n      border: 1px solid #e2e2e2;\n      border-radius: 4px;\n      font-size: 12px;\n      color: #545454;\n      background-color: rgba(255, 255, 255, 0.9);\n      padding: 10px 8px;\n      box-shadow: rgb(174, 174, 174) 0px 0px 10px;\n    }\n  </style>\n</head>\n',paraId:27,tocIndex:5},{value:"Edge tooltip shows the detail information when mouse enters a edge. More configurations are in ",paraId:28,tocIndex:6},{value:"Built-in edge-tooltip",paraId:29,tocIndex:6},{value:".",paraId:28,tocIndex:6},{value:"Expected Effect",paraId:30,tocIndex:6},{value:"Usage",paraId:31,tocIndex:6},{value:"const graph = new G6.Graph({\n  modes: {\n    default: [\n      // ...\n      {\n        type: 'tooltip', // Node tooltip\n        // ...\n      },\n      {\n        type: 'edge-tooltip', // Edge tooltip\n        formatText(model) {\n          // The content of the edge tooltip\n          const text =\n            'source: ' +\n            model.source +\n            '<br/> target: ' +\n            model.target +\n            '<br/> weight: ' +\n            model.weight;\n          return text;\n        },\n      },\n    ],\n  },\n});\n",paraId:32,tocIndex:6},{value:"The same as node tooltip, edge-tooltip is a floating ",paraId:33,tocIndex:6},{value:"<div>",paraId:33,tocIndex:6},{value:" tag in HTML. Thus, you can define the CSS style for it in ",paraId:33,tocIndex:6},{value:"<style>",paraId:33,tocIndex:6},{value:" tag:",paraId:33,tocIndex:6},{value:"Tutorial Demo",paraId:34,tocIndex:7},{value:" is done now. For complete code, see: ",paraId:34,tocIndex:7},{value:"Code of Tutorial Demo",paraId:34,tocIndex:7},{value:".",paraId:34,tocIndex:7},{value:"⚠️Attention:",paraId:35,tocIndex:7},{value:" ",paraId:35,tocIndex:7},{value:"Replace the url ",paraId:35,tocIndex:7},{value:"'https://gw.alipayobjects.com/os/basement_prod/6cae02ab-4c29-44b2-b1fd-4005688febcb.json'",paraId:35,tocIndex:7},{value:" to change the data into yours.",paraId:35,tocIndex:7}]},29236:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"G6",paraId:0,tocIndex:0},{value:" is a graph visualization engine, which provides a set of basic mechanisms, including rendering, layout, analysis, interaction, animation, and other auxiliary tools. G6 aims to simplify the complex relationships, and help people to obtain the insight of relational data.",paraId:0,tocIndex:0},{value:"We will build a simple graph visualization during this tutorial. We call this demo ",paraId:1,tocIndex:1},{value:"Tutorial Demo",paraId:1,tocIndex:1},{value:" in the following Tutorial. ",paraId:1,tocIndex:1},{value:"Complete Code",paraId:1,tocIndex:1},{value:".",paraId:1,tocIndex:1},{value:"Tutorial Demo",paraId:2},{value:" result",paraId:2},{value:"This tutorial introduces how to combine creating and rendering a graph, configuring items, layout, interaction, animation, and other tools to complete the final ",paraId:3,tocIndex:2},{value:"Tutorial Demo",paraId:3,tocIndex:2},{value:". The readers will learn the basic and key concepts of G6 in this tutorial.",paraId:3,tocIndex:2},{value:"There are 6 chapters in this tutorial:",paraId:4,tocIndex:2},{value:"Create & Render a Graph",paraId:5,tocIndex:2},{value:"Items & Their Configurations",paraId:5,tocIndex:2},{value:"Utilize Layout",paraId:5,tocIndex:2},{value:"Interaction Behaviors",paraId:5,tocIndex:2},{value:"Plugins & Tools",paraId:5,tocIndex:2},{value:"*Animation (not Required)",paraId:5,tocIndex:2},{value:"Tips:",paraId:6,tocIndex:2},{value:" ",paraId:6,tocIndex:2},{value:"This tutorial is designed for people who prefer to learn by doing. If you prefer learning concepts from the ground up, check out our ",paraId:6,tocIndex:2},{value:"Key Concepts",paraId:7,tocIndex:2},{value:". You might find this tutorial and the guide complementary to each other.",paraId:6,tocIndex:2},{value:"It doesn't matter if you're not familiar with G6. But we’ll assume that you have some familiarity with HTML and JavaScript, but you should be able to follow along even if you’re coming from a different programming language. You might be tempted to skip if you already know the basics of G6.",paraId:8,tocIndex:3},{value:"Any code editor works for this Tutorial. We recommend to run this demo in Chrome. In this tutorial, we import G6 V3.7.1 by CDN. We simplified the code to make it easy. For other environments, please refer to the installation guide in ",paraId:9,tocIndex:4},{value:"Getting Started",paraId:10,tocIndex:4},{value:".",paraId:9,tocIndex:4},{value:"New an index.html file, and add the code below:",paraId:11,tocIndex:4},{value:'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <title>Tutorial Demo</title>\n  </head>\n  <body>\n    \x3c!-- import G6 by CDN --\x3e\n    <script src="https://gw.alipayobjects.com/os/antv/pkg/_antv.g6-3.7.1/dist/g6.min.js"><\/script>\n    \x3c!-- 4.x and later versions --\x3e\n    \x3c!-- <script src="https://gw.alipayobjects.com/os/lib/antv/g6/4.3.11/dist/g6.min.js"><\/script> --\x3e\n\n    <script>\n      console.log(G6.Global.version);\n    <\/script>\n  </body>\n</html>\n',paraId:12,tocIndex:4},{value:"Open index.html with your browser. It is success if there is the version number of G6 printed in the console.",paraId:13,tocIndex:4}]}}]);